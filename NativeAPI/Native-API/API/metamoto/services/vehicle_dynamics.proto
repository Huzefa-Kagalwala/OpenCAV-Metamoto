// Copyright (c) 2018-2020 Metamoto, Inc. All Rights Reserved.

syntax = "proto3";
package metamoto.services;
option csharp_namespace = "Metamoto.Services";

import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";
import "metamoto/types/result_metadata.proto";
import "metamoto/types/terrain.proto";
import "metamoto/types/rigid_body.proto";
import "metamoto/messages/vehicle_controls.proto";

// The vehicle dynamics service provides the ability to control the kinematics of the Ego Vehicle as a Co-simulation.
service VehicleDynamics {
  rpc Initialize (VehicleDynamicsInitializeRequest) returns (VehicleDynamicsInitializeReply) {}
  rpc Update (VehicleDynamicsUpdateRequest) returns (VehicleDynamicsUpdateReply) {}
  rpc Close (VehicleDynamicsCloseRequest) returns (VehicleDynamicsCloseReply) {}
}

message VehicleDynamicsInitializeRequest {
  google.protobuf.Struct parameters = 1;
  string results_directory = 2;
  
  // Rigid body information.
  // The first rigid body is the driver vehicle and should always have wheels.
  // The rest of the rigid bodies can come in any order.
  // Four-wheel vehicles usually are defined with one rigid body.
  repeated metamoto.types.RigidBody rigid_bodies = 3;
  
  // Tire contact information.
  // The length of this list is equal to the sum of the number of wheels in the rigid bodies.
  // This list is ordered as following: the tire contacts of the wheels of the first rigid body 
  // come first (preserving their order), then the wheels of the second rigid body and so on.
  repeated metamoto.types.TireContact tire_contacts = 4;
  
  // The triangulated mesh of the terrain (roads and sidewalks) of the current scene.
  metamoto.types.Terrain terrain = 5;
  
  // The distance (along vehicle's forward) between the origin of the rigid bodies and their hitch joints.
  // The length of these lists are equal to the number of rigid bodies.
  // Since the first rigid body is the driver vehicle and the last one is not towing others, 
  // the front offset of the first rigid body and the rear offset of the last one should be ignored.
  repeated float front_hitch_offsets = 6;
  repeated float rear_hitch_offsets = 7;
}

message VehicleDynamicsInitializeReply {
  string name = 1;
  string version = 2;

  // How frequently to call Update, in Hz. If not specified, the default physics update rate of 100 Hz is used.
  double update_rate = 3;
  
  // The timeout (seconds) used for updates. Zero indicates to use the default value of 60 seconds.
  uint32 update_timeout = 4;
  
  // Setting this value will reset the maximum steer angle value in vehicle info.
  google.protobuf.FloatValue max_steer_angle = 5;
}

message VehicleDynamicsUpdateRequest {
  // The current timestamps (in seconds)
  double time = 1;
  
  // The timestamps of the last physics update which may be different from the last timestamps of the Vehicle Dynamics update
  double last_step_time = 2;
  
  // The timestamps of the next physics update which may be different from the next timestamps of the Vehicle Dynamics update
  double next_step_time = 3;
  
  // The controls parameters of the driver vehicle.
  metamoto.messages.VehicleControls vehicle_controls = 4;
  
  // Tire contact information for all wheels. 
  // This list is ordered as following: the tire contacts of the wheels of the first rigid body 
  // come first (preserving their order), then the wheels of the second rigid body and so on.
  repeated metamoto.types.TireContact tire_contacts = 5;
}

message VehicleDynamicsUpdateReply {
  // Next time at which to call Update. This overrides the frequency dictated by update_rate.
  double next_update_time = 1;
  
  // Rigid bodies information at this update.
  repeated metamoto.types.RigidBody rigid_bodies = 2;
}

message VehicleDynamicsCloseRequest {
}

message VehicleDynamicsCloseReply {
  repeated metamoto.types.ResultMetadata results = 1;
}

