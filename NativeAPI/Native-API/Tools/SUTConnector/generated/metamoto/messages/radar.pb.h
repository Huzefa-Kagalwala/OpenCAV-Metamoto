// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/messages/radar.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2fmessages_2fradar_2eproto
#define PROTOBUF_INCLUDED_metamoto_2fmessages_2fradar_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/radar_object.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fradar_2eproto 

namespace protobuf_metamoto_2fmessages_2fradar_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2fmessages_2fradar_2eproto
namespace metamoto {
namespace messages {
class Radar;
class RadarDefaultTypeInternal;
extern RadarDefaultTypeInternal _Radar_default_instance_;
}  // namespace messages
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::messages::Radar* Arena::CreateMaybeMessage<::metamoto::messages::Radar>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace messages {

// ===================================================================

class Radar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.messages.Radar) */ {
 public:
  Radar();
  virtual ~Radar();

  Radar(const Radar& from);

  inline Radar& operator=(const Radar& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Radar(Radar&& from) noexcept
    : Radar() {
    *this = ::std::move(from);
  }

  inline Radar& operator=(Radar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Radar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Radar* internal_default_instance() {
    return reinterpret_cast<const Radar*>(
               &_Radar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Radar* other);
  friend void swap(Radar& a, Radar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Radar* New() const final {
    return CreateMaybeMessage<Radar>(NULL);
  }

  Radar* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Radar>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Radar& from);
  void MergeFrom(const Radar& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Radar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.RadarObject objects = 1;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 1;
  ::metamoto::types::RadarObject* mutable_objects(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::RadarObject >*
      mutable_objects();
  const ::metamoto::types::RadarObject& objects(int index) const;
  ::metamoto::types::RadarObject* add_objects();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::RadarObject >&
      objects() const;

  // @@protoc_insertion_point(class_scope:metamoto.messages.Radar)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::RadarObject > objects_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fmessages_2fradar_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Radar

// repeated .metamoto.types.RadarObject objects = 1;
inline int Radar::objects_size() const {
  return objects_.size();
}
inline ::metamoto::types::RadarObject* Radar::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Radar.objects)
  return objects_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::RadarObject >*
Radar::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.messages.Radar.objects)
  return &objects_;
}
inline const ::metamoto::types::RadarObject& Radar::objects(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Radar.objects)
  return objects_.Get(index);
}
inline ::metamoto::types::RadarObject* Radar::add_objects() {
  // @@protoc_insertion_point(field_add:metamoto.messages.Radar.objects)
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::RadarObject >&
Radar::objects() const {
  // @@protoc_insertion_point(field_list:metamoto.messages.Radar.objects)
  return objects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2fmessages_2fradar_2eproto
