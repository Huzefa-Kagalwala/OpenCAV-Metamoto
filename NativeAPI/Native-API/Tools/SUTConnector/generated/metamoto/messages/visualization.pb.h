// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/messages/visualization.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2fmessages_2fvisualization_2eproto
#define PROTOBUF_INCLUDED_metamoto_2fmessages_2fvisualization_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/enumerations.pb.h"
#include "metamoto/types/bounding_box.pb.h"
#include "metamoto/types/visual_path.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fvisualization_2eproto 

namespace protobuf_metamoto_2fmessages_2fvisualization_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2fmessages_2fvisualization_2eproto
namespace metamoto {
namespace messages {
class Visualization;
class VisualizationDefaultTypeInternal;
extern VisualizationDefaultTypeInternal _Visualization_default_instance_;
class VisualizationList;
class VisualizationListDefaultTypeInternal;
extern VisualizationListDefaultTypeInternal _VisualizationList_default_instance_;
}  // namespace messages
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::messages::Visualization* Arena::CreateMaybeMessage<::metamoto::messages::Visualization>(Arena*);
template<> ::metamoto::messages::VisualizationList* Arena::CreateMaybeMessage<::metamoto::messages::VisualizationList>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace messages {

// ===================================================================

class VisualizationList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.messages.VisualizationList) */ {
 public:
  VisualizationList();
  virtual ~VisualizationList();

  VisualizationList(const VisualizationList& from);

  inline VisualizationList& operator=(const VisualizationList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VisualizationList(VisualizationList&& from) noexcept
    : VisualizationList() {
    *this = ::std::move(from);
  }

  inline VisualizationList& operator=(VisualizationList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VisualizationList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisualizationList* internal_default_instance() {
    return reinterpret_cast<const VisualizationList*>(
               &_VisualizationList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VisualizationList* other);
  friend void swap(VisualizationList& a, VisualizationList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VisualizationList* New() const final {
    return CreateMaybeMessage<VisualizationList>(NULL);
  }

  VisualizationList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VisualizationList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VisualizationList& from);
  void MergeFrom(const VisualizationList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisualizationList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.messages.Visualization visual_messages = 1;
  int visual_messages_size() const;
  void clear_visual_messages();
  static const int kVisualMessagesFieldNumber = 1;
  ::metamoto::messages::Visualization* mutable_visual_messages(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::messages::Visualization >*
      mutable_visual_messages();
  const ::metamoto::messages::Visualization& visual_messages(int index) const;
  ::metamoto::messages::Visualization* add_visual_messages();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::messages::Visualization >&
      visual_messages() const;

  // @@protoc_insertion_point(class_scope:metamoto.messages.VisualizationList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::messages::Visualization > visual_messages_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fmessages_2fvisualization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Visualization : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.messages.Visualization) */ {
 public:
  Visualization();
  virtual ~Visualization();

  Visualization(const Visualization& from);

  inline Visualization& operator=(const Visualization& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Visualization(Visualization&& from) noexcept
    : Visualization() {
    *this = ::std::move(from);
  }

  inline Visualization& operator=(Visualization&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Visualization& default_instance();

  enum PathTypeCase {
    kBox = 3,
    kPath = 4,
    PATH_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Visualization* internal_default_instance() {
    return reinterpret_cast<const Visualization*>(
               &_Visualization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Visualization* other);
  friend void swap(Visualization& a, Visualization& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Visualization* New() const final {
    return CreateMaybeMessage<Visualization>(NULL);
  }

  Visualization* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Visualization>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Visualization& from);
  void MergeFrom(const Visualization& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Visualization* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string label = 5;
  void clear_label();
  static const int kLabelFieldNumber = 5;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // string description = 7;
  void clear_description();
  static const int kDescriptionFieldNumber = 7;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // double time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // .metamoto.types.ReferenceFrame frame = 2;
  void clear_frame();
  static const int kFrameFieldNumber = 2;
  ::metamoto::types::ReferenceFrame frame() const;
  void set_frame(::metamoto::types::ReferenceFrame value);

  // double duration = 8;
  void clear_duration();
  static const int kDurationFieldNumber = 8;
  double duration() const;
  void set_duration(double value);

  // .metamoto.types.BoundingBox box = 3;
  bool has_box() const;
  void clear_box();
  static const int kBoxFieldNumber = 3;
  private:
  const ::metamoto::types::BoundingBox& _internal_box() const;
  public:
  const ::metamoto::types::BoundingBox& box() const;
  ::metamoto::types::BoundingBox* release_box();
  ::metamoto::types::BoundingBox* mutable_box();
  void set_allocated_box(::metamoto::types::BoundingBox* box);

  // .metamoto.types.VisualPath path = 4;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 4;
  private:
  const ::metamoto::types::VisualPath& _internal_path() const;
  public:
  const ::metamoto::types::VisualPath& path() const;
  ::metamoto::types::VisualPath* release_path();
  ::metamoto::types::VisualPath* mutable_path();
  void set_allocated_path(::metamoto::types::VisualPath* path);

  void clear_path_type();
  PathTypeCase path_type_case() const;
  // @@protoc_insertion_point(class_scope:metamoto.messages.Visualization)
 private:
  void set_has_box();
  void set_has_path();

  inline bool has_path_type() const;
  inline void clear_has_path_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  double time_;
  int frame_;
  double duration_;
  union PathTypeUnion {
    PathTypeUnion() {}
    ::metamoto::types::BoundingBox* box_;
    ::metamoto::types::VisualPath* path_;
  } path_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_metamoto_2fmessages_2fvisualization_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VisualizationList

// repeated .metamoto.messages.Visualization visual_messages = 1;
inline int VisualizationList::visual_messages_size() const {
  return visual_messages_.size();
}
inline void VisualizationList::clear_visual_messages() {
  visual_messages_.Clear();
}
inline ::metamoto::messages::Visualization* VisualizationList::mutable_visual_messages(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.messages.VisualizationList.visual_messages)
  return visual_messages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::messages::Visualization >*
VisualizationList::mutable_visual_messages() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.messages.VisualizationList.visual_messages)
  return &visual_messages_;
}
inline const ::metamoto::messages::Visualization& VisualizationList::visual_messages(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.messages.VisualizationList.visual_messages)
  return visual_messages_.Get(index);
}
inline ::metamoto::messages::Visualization* VisualizationList::add_visual_messages() {
  // @@protoc_insertion_point(field_add:metamoto.messages.VisualizationList.visual_messages)
  return visual_messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::messages::Visualization >&
VisualizationList::visual_messages() const {
  // @@protoc_insertion_point(field_list:metamoto.messages.VisualizationList.visual_messages)
  return visual_messages_;
}

// -------------------------------------------------------------------

// Visualization

// double time = 1;
inline void Visualization::clear_time() {
  time_ = 0;
}
inline double Visualization::time() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Visualization.time)
  return time_;
}
inline void Visualization::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.Visualization.time)
}

// .metamoto.types.ReferenceFrame frame = 2;
inline void Visualization::clear_frame() {
  frame_ = 0;
}
inline ::metamoto::types::ReferenceFrame Visualization::frame() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Visualization.frame)
  return static_cast< ::metamoto::types::ReferenceFrame >(frame_);
}
inline void Visualization::set_frame(::metamoto::types::ReferenceFrame value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.Visualization.frame)
}

// .metamoto.types.BoundingBox box = 3;
inline bool Visualization::has_box() const {
  return path_type_case() == kBox;
}
inline void Visualization::set_has_box() {
  _oneof_case_[0] = kBox;
}
inline const ::metamoto::types::BoundingBox& Visualization::_internal_box() const {
  return *path_type_.box_;
}
inline ::metamoto::types::BoundingBox* Visualization::release_box() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Visualization.box)
  if (has_box()) {
    clear_has_path_type();
      ::metamoto::types::BoundingBox* temp = path_type_.box_;
    path_type_.box_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::types::BoundingBox& Visualization::box() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Visualization.box)
  return has_box()
      ? *path_type_.box_
      : *reinterpret_cast< ::metamoto::types::BoundingBox*>(&::metamoto::types::_BoundingBox_default_instance_);
}
inline ::metamoto::types::BoundingBox* Visualization::mutable_box() {
  if (!has_box()) {
    clear_path_type();
    set_has_box();
    path_type_.box_ = CreateMaybeMessage< ::metamoto::types::BoundingBox >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Visualization.box)
  return path_type_.box_;
}

// .metamoto.types.VisualPath path = 4;
inline bool Visualization::has_path() const {
  return path_type_case() == kPath;
}
inline void Visualization::set_has_path() {
  _oneof_case_[0] = kPath;
}
inline const ::metamoto::types::VisualPath& Visualization::_internal_path() const {
  return *path_type_.path_;
}
inline ::metamoto::types::VisualPath* Visualization::release_path() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Visualization.path)
  if (has_path()) {
    clear_has_path_type();
      ::metamoto::types::VisualPath* temp = path_type_.path_;
    path_type_.path_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::types::VisualPath& Visualization::path() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Visualization.path)
  return has_path()
      ? *path_type_.path_
      : *reinterpret_cast< ::metamoto::types::VisualPath*>(&::metamoto::types::_VisualPath_default_instance_);
}
inline ::metamoto::types::VisualPath* Visualization::mutable_path() {
  if (!has_path()) {
    clear_path_type();
    set_has_path();
    path_type_.path_ = CreateMaybeMessage< ::metamoto::types::VisualPath >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Visualization.path)
  return path_type_.path_;
}

// string label = 5;
inline void Visualization::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Visualization::label() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Visualization.label)
  return label_.GetNoArena();
}
inline void Visualization::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.messages.Visualization.label)
}
#if LANG_CXX11
inline void Visualization::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.messages.Visualization.label)
}
#endif
inline void Visualization::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.messages.Visualization.label)
}
inline void Visualization::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.messages.Visualization.label)
}
inline ::std::string* Visualization::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Visualization.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Visualization::release_label() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Visualization.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Visualization::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Visualization.label)
}

// string description = 7;
inline void Visualization::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Visualization::description() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Visualization.description)
  return description_.GetNoArena();
}
inline void Visualization::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.messages.Visualization.description)
}
#if LANG_CXX11
inline void Visualization::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.messages.Visualization.description)
}
#endif
inline void Visualization::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.messages.Visualization.description)
}
inline void Visualization::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.messages.Visualization.description)
}
inline ::std::string* Visualization::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Visualization.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Visualization::release_description() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Visualization.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Visualization::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Visualization.description)
}

// double duration = 8;
inline void Visualization::clear_duration() {
  duration_ = 0;
}
inline double Visualization::duration() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Visualization.duration)
  return duration_;
}
inline void Visualization::set_duration(double value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.Visualization.duration)
}

inline bool Visualization::has_path_type() const {
  return path_type_case() != PATH_TYPE_NOT_SET;
}
inline void Visualization::clear_has_path_type() {
  _oneof_case_[0] = PATH_TYPE_NOT_SET;
}
inline Visualization::PathTypeCase Visualization::path_type_case() const {
  return Visualization::PathTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2fmessages_2fvisualization_2eproto
