// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/messages/v2x.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2fmessages_2fv2x_2eproto
#define PROTOBUF_INCLUDED_metamoto_2fmessages_2fv2x_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/vehicle.pb.h"
#include "metamoto/types/vector3.pb.h"
#include "metamoto/types/geo_coordinates.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fv2x_2eproto 

namespace protobuf_metamoto_2fmessages_2fv2x_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2fmessages_2fv2x_2eproto
namespace metamoto {
namespace messages {
class V2X;
class V2XDefaultTypeInternal;
extern V2XDefaultTypeInternal _V2X_default_instance_;
class V2X_BrakeSystemStatus;
class V2X_BrakeSystemStatusDefaultTypeInternal;
extern V2X_BrakeSystemStatusDefaultTypeInternal _V2X_BrakeSystemStatus_default_instance_;
class V2X_BrakeSystemStatus_BrakeAppliedStatus;
class V2X_BrakeSystemStatus_BrakeAppliedStatusDefaultTypeInternal;
extern V2X_BrakeSystemStatus_BrakeAppliedStatusDefaultTypeInternal _V2X_BrakeSystemStatus_BrakeAppliedStatus_default_instance_;
class V2X_BsmPart1;
class V2X_BsmPart1DefaultTypeInternal;
extern V2X_BsmPart1DefaultTypeInternal _V2X_BsmPart1_default_instance_;
class V2X_PositionalAccuracy;
class V2X_PositionalAccuracyDefaultTypeInternal;
extern V2X_PositionalAccuracyDefaultTypeInternal _V2X_PositionalAccuracy_default_instance_;
}  // namespace messages
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::messages::V2X* Arena::CreateMaybeMessage<::metamoto::messages::V2X>(Arena*);
template<> ::metamoto::messages::V2X_BrakeSystemStatus* Arena::CreateMaybeMessage<::metamoto::messages::V2X_BrakeSystemStatus>(Arena*);
template<> ::metamoto::messages::V2X_BrakeSystemStatus_BrakeAppliedStatus* Arena::CreateMaybeMessage<::metamoto::messages::V2X_BrakeSystemStatus_BrakeAppliedStatus>(Arena*);
template<> ::metamoto::messages::V2X_BsmPart1* Arena::CreateMaybeMessage<::metamoto::messages::V2X_BsmPart1>(Arena*);
template<> ::metamoto::messages::V2X_PositionalAccuracy* Arena::CreateMaybeMessage<::metamoto::messages::V2X_PositionalAccuracy>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace messages {

enum V2X_BrakeSystemStatus_TractionControlState {
  V2X_BrakeSystemStatus_TractionControlState_TRACTION_UNAVAILABLE = 0,
  V2X_BrakeSystemStatus_TractionControlState_TRACTION_OFF = 1,
  V2X_BrakeSystemStatus_TractionControlState_TRACTION_ON = 2,
  V2X_BrakeSystemStatus_TractionControlState_TRACTION_ENGAGED = 3,
  V2X_BrakeSystemStatus_TractionControlState_V2X_BrakeSystemStatus_TractionControlState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  V2X_BrakeSystemStatus_TractionControlState_V2X_BrakeSystemStatus_TractionControlState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool V2X_BrakeSystemStatus_TractionControlState_IsValid(int value);
const V2X_BrakeSystemStatus_TractionControlState V2X_BrakeSystemStatus_TractionControlState_TractionControlState_MIN = V2X_BrakeSystemStatus_TractionControlState_TRACTION_UNAVAILABLE;
const V2X_BrakeSystemStatus_TractionControlState V2X_BrakeSystemStatus_TractionControlState_TractionControlState_MAX = V2X_BrakeSystemStatus_TractionControlState_TRACTION_ENGAGED;
const int V2X_BrakeSystemStatus_TractionControlState_TractionControlState_ARRAYSIZE = V2X_BrakeSystemStatus_TractionControlState_TractionControlState_MAX + 1;

const ::google::protobuf::EnumDescriptor* V2X_BrakeSystemStatus_TractionControlState_descriptor();
inline const ::std::string& V2X_BrakeSystemStatus_TractionControlState_Name(V2X_BrakeSystemStatus_TractionControlState value) {
  return ::google::protobuf::internal::NameOfEnum(
    V2X_BrakeSystemStatus_TractionControlState_descriptor(), value);
}
inline bool V2X_BrakeSystemStatus_TractionControlState_Parse(
    const ::std::string& name, V2X_BrakeSystemStatus_TractionControlState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V2X_BrakeSystemStatus_TractionControlState>(
    V2X_BrakeSystemStatus_TractionControlState_descriptor(), name, value);
}
enum V2X_BrakeSystemStatus_AntiLockBrakeStatus {
  V2X_BrakeSystemStatus_AntiLockBrakeStatus_ABS_UNAVAILABLE = 0,
  V2X_BrakeSystemStatus_AntiLockBrakeStatus_ABS_OFF = 1,
  V2X_BrakeSystemStatus_AntiLockBrakeStatus_ABS_ON = 2,
  V2X_BrakeSystemStatus_AntiLockBrakeStatus_ABS_ENGAGED = 3,
  V2X_BrakeSystemStatus_AntiLockBrakeStatus_V2X_BrakeSystemStatus_AntiLockBrakeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  V2X_BrakeSystemStatus_AntiLockBrakeStatus_V2X_BrakeSystemStatus_AntiLockBrakeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool V2X_BrakeSystemStatus_AntiLockBrakeStatus_IsValid(int value);
const V2X_BrakeSystemStatus_AntiLockBrakeStatus V2X_BrakeSystemStatus_AntiLockBrakeStatus_AntiLockBrakeStatus_MIN = V2X_BrakeSystemStatus_AntiLockBrakeStatus_ABS_UNAVAILABLE;
const V2X_BrakeSystemStatus_AntiLockBrakeStatus V2X_BrakeSystemStatus_AntiLockBrakeStatus_AntiLockBrakeStatus_MAX = V2X_BrakeSystemStatus_AntiLockBrakeStatus_ABS_ENGAGED;
const int V2X_BrakeSystemStatus_AntiLockBrakeStatus_AntiLockBrakeStatus_ARRAYSIZE = V2X_BrakeSystemStatus_AntiLockBrakeStatus_AntiLockBrakeStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* V2X_BrakeSystemStatus_AntiLockBrakeStatus_descriptor();
inline const ::std::string& V2X_BrakeSystemStatus_AntiLockBrakeStatus_Name(V2X_BrakeSystemStatus_AntiLockBrakeStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    V2X_BrakeSystemStatus_AntiLockBrakeStatus_descriptor(), value);
}
inline bool V2X_BrakeSystemStatus_AntiLockBrakeStatus_Parse(
    const ::std::string& name, V2X_BrakeSystemStatus_AntiLockBrakeStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V2X_BrakeSystemStatus_AntiLockBrakeStatus>(
    V2X_BrakeSystemStatus_AntiLockBrakeStatus_descriptor(), name, value);
}
enum V2X_BrakeSystemStatus_StabilityControlStatus {
  V2X_BrakeSystemStatus_StabilityControlStatus_SC_UNAVAILABLE = 0,
  V2X_BrakeSystemStatus_StabilityControlStatus_SC_OFF = 1,
  V2X_BrakeSystemStatus_StabilityControlStatus_SC_ON = 2,
  V2X_BrakeSystemStatus_StabilityControlStatus_V2X_BrakeSystemStatus_StabilityControlStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  V2X_BrakeSystemStatus_StabilityControlStatus_V2X_BrakeSystemStatus_StabilityControlStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool V2X_BrakeSystemStatus_StabilityControlStatus_IsValid(int value);
const V2X_BrakeSystemStatus_StabilityControlStatus V2X_BrakeSystemStatus_StabilityControlStatus_StabilityControlStatus_MIN = V2X_BrakeSystemStatus_StabilityControlStatus_SC_UNAVAILABLE;
const V2X_BrakeSystemStatus_StabilityControlStatus V2X_BrakeSystemStatus_StabilityControlStatus_StabilityControlStatus_MAX = V2X_BrakeSystemStatus_StabilityControlStatus_SC_ON;
const int V2X_BrakeSystemStatus_StabilityControlStatus_StabilityControlStatus_ARRAYSIZE = V2X_BrakeSystemStatus_StabilityControlStatus_StabilityControlStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* V2X_BrakeSystemStatus_StabilityControlStatus_descriptor();
inline const ::std::string& V2X_BrakeSystemStatus_StabilityControlStatus_Name(V2X_BrakeSystemStatus_StabilityControlStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    V2X_BrakeSystemStatus_StabilityControlStatus_descriptor(), value);
}
inline bool V2X_BrakeSystemStatus_StabilityControlStatus_Parse(
    const ::std::string& name, V2X_BrakeSystemStatus_StabilityControlStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V2X_BrakeSystemStatus_StabilityControlStatus>(
    V2X_BrakeSystemStatus_StabilityControlStatus_descriptor(), name, value);
}
enum V2X_BrakeSystemStatus_BrakeBoostApplied {
  V2X_BrakeSystemStatus_BrakeBoostApplied_BB_UNAVAILABLE = 0,
  V2X_BrakeSystemStatus_BrakeBoostApplied_BB_OFF = 1,
  V2X_BrakeSystemStatus_BrakeBoostApplied_BB_ON = 2,
  V2X_BrakeSystemStatus_BrakeBoostApplied_V2X_BrakeSystemStatus_BrakeBoostApplied_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  V2X_BrakeSystemStatus_BrakeBoostApplied_V2X_BrakeSystemStatus_BrakeBoostApplied_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool V2X_BrakeSystemStatus_BrakeBoostApplied_IsValid(int value);
const V2X_BrakeSystemStatus_BrakeBoostApplied V2X_BrakeSystemStatus_BrakeBoostApplied_BrakeBoostApplied_MIN = V2X_BrakeSystemStatus_BrakeBoostApplied_BB_UNAVAILABLE;
const V2X_BrakeSystemStatus_BrakeBoostApplied V2X_BrakeSystemStatus_BrakeBoostApplied_BrakeBoostApplied_MAX = V2X_BrakeSystemStatus_BrakeBoostApplied_BB_ON;
const int V2X_BrakeSystemStatus_BrakeBoostApplied_BrakeBoostApplied_ARRAYSIZE = V2X_BrakeSystemStatus_BrakeBoostApplied_BrakeBoostApplied_MAX + 1;

const ::google::protobuf::EnumDescriptor* V2X_BrakeSystemStatus_BrakeBoostApplied_descriptor();
inline const ::std::string& V2X_BrakeSystemStatus_BrakeBoostApplied_Name(V2X_BrakeSystemStatus_BrakeBoostApplied value) {
  return ::google::protobuf::internal::NameOfEnum(
    V2X_BrakeSystemStatus_BrakeBoostApplied_descriptor(), value);
}
inline bool V2X_BrakeSystemStatus_BrakeBoostApplied_Parse(
    const ::std::string& name, V2X_BrakeSystemStatus_BrakeBoostApplied* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V2X_BrakeSystemStatus_BrakeBoostApplied>(
    V2X_BrakeSystemStatus_BrakeBoostApplied_descriptor(), name, value);
}
// ===================================================================

class V2X_BsmPart1 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.messages.V2X.BsmPart1) */ {
 public:
  V2X_BsmPart1();
  virtual ~V2X_BsmPart1();

  V2X_BsmPart1(const V2X_BsmPart1& from);

  inline V2X_BsmPart1& operator=(const V2X_BsmPart1& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  V2X_BsmPart1(V2X_BsmPart1&& from) noexcept
    : V2X_BsmPart1() {
    *this = ::std::move(from);
  }

  inline V2X_BsmPart1& operator=(V2X_BsmPart1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const V2X_BsmPart1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const V2X_BsmPart1* internal_default_instance() {
    return reinterpret_cast<const V2X_BsmPart1*>(
               &_V2X_BsmPart1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(V2X_BsmPart1* other);
  friend void swap(V2X_BsmPart1& a, V2X_BsmPart1& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline V2X_BsmPart1* New() const final {
    return CreateMaybeMessage<V2X_BsmPart1>(NULL);
  }

  V2X_BsmPart1* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<V2X_BsmPart1>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const V2X_BsmPart1& from);
  void MergeFrom(const V2X_BsmPart1& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V2X_BsmPart1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.types.GeoCoordinates position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  private:
  const ::metamoto::types::GeoCoordinates& _internal_position() const;
  public:
  const ::metamoto::types::GeoCoordinates& position() const;
  ::metamoto::types::GeoCoordinates* release_position();
  ::metamoto::types::GeoCoordinates* mutable_position();
  void set_allocated_position(::metamoto::types::GeoCoordinates* position);

  // .metamoto.messages.V2X.PositionalAccuracy accuracy = 4;
  bool has_accuracy() const;
  void clear_accuracy();
  static const int kAccuracyFieldNumber = 4;
  private:
  const ::metamoto::messages::V2X_PositionalAccuracy& _internal_accuracy() const;
  public:
  const ::metamoto::messages::V2X_PositionalAccuracy& accuracy() const;
  ::metamoto::messages::V2X_PositionalAccuracy* release_accuracy();
  ::metamoto::messages::V2X_PositionalAccuracy* mutable_accuracy();
  void set_allocated_accuracy(::metamoto::messages::V2X_PositionalAccuracy* accuracy);

  // .metamoto.types.Vector3 linear_velocity = 6;
  bool has_linear_velocity() const;
  void clear_linear_velocity();
  static const int kLinearVelocityFieldNumber = 6;
  private:
  const ::metamoto::types::Vector3& _internal_linear_velocity() const;
  public:
  const ::metamoto::types::Vector3& linear_velocity() const;
  ::metamoto::types::Vector3* release_linear_velocity();
  ::metamoto::types::Vector3* mutable_linear_velocity();
  void set_allocated_linear_velocity(::metamoto::types::Vector3* linear_velocity);

  // .metamoto.types.Vector3 linear_acceleration = 8;
  bool has_linear_acceleration() const;
  void clear_linear_acceleration();
  static const int kLinearAccelerationFieldNumber = 8;
  private:
  const ::metamoto::types::Vector3& _internal_linear_acceleration() const;
  public:
  const ::metamoto::types::Vector3& linear_acceleration() const;
  ::metamoto::types::Vector3* release_linear_acceleration();
  ::metamoto::types::Vector3* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::metamoto::types::Vector3* linear_acceleration);

  // .metamoto.messages.V2X.BrakeSystemStatus brakes = 10;
  bool has_brakes() const;
  void clear_brakes();
  static const int kBrakesFieldNumber = 10;
  private:
  const ::metamoto::messages::V2X_BrakeSystemStatus& _internal_brakes() const;
  public:
  const ::metamoto::messages::V2X_BrakeSystemStatus& brakes() const;
  ::metamoto::messages::V2X_BrakeSystemStatus* release_brakes();
  ::metamoto::messages::V2X_BrakeSystemStatus* mutable_brakes();
  void set_allocated_brakes(::metamoto::messages::V2X_BrakeSystemStatus* brakes);

  // .metamoto.types.Vector3 vehicle_size = 11;
  bool has_vehicle_size() const;
  void clear_vehicle_size();
  static const int kVehicleSizeFieldNumber = 11;
  private:
  const ::metamoto::types::Vector3& _internal_vehicle_size() const;
  public:
  const ::metamoto::types::Vector3& vehicle_size() const;
  ::metamoto::types::Vector3* release_vehicle_size();
  ::metamoto::types::Vector3* mutable_vehicle_size();
  void set_allocated_vehicle_size(::metamoto::types::Vector3* vehicle_size);

  // double time_stamp = 2;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  double time_stamp() const;
  void set_time_stamp(double value);

  // int32 object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  ::google::protobuf::int32 object_id() const;
  void set_object_id(::google::protobuf::int32 value);

  // .metamoto.types.Vehicle.GearSelector transmission_state = 5;
  void clear_transmission_state();
  static const int kTransmissionStateFieldNumber = 5;
  ::metamoto::types::Vehicle_GearSelector transmission_state() const;
  void set_transmission_state(::metamoto::types::Vehicle_GearSelector value);

  // float steering_wheel_angle = 7;
  void clear_steering_wheel_angle();
  static const int kSteeringWheelAngleFieldNumber = 7;
  float steering_wheel_angle() const;
  void set_steering_wheel_angle(float value);

  // float yaw_rate = 9;
  void clear_yaw_rate();
  static const int kYawRateFieldNumber = 9;
  float yaw_rate() const;
  void set_yaw_rate(float value);

  // @@protoc_insertion_point(class_scope:metamoto.messages.V2X.BsmPart1)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::types::GeoCoordinates* position_;
  ::metamoto::messages::V2X_PositionalAccuracy* accuracy_;
  ::metamoto::types::Vector3* linear_velocity_;
  ::metamoto::types::Vector3* linear_acceleration_;
  ::metamoto::messages::V2X_BrakeSystemStatus* brakes_;
  ::metamoto::types::Vector3* vehicle_size_;
  double time_stamp_;
  ::google::protobuf::int32 object_id_;
  int transmission_state_;
  float steering_wheel_angle_;
  float yaw_rate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fmessages_2fv2x_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class V2X_PositionalAccuracy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.messages.V2X.PositionalAccuracy) */ {
 public:
  V2X_PositionalAccuracy();
  virtual ~V2X_PositionalAccuracy();

  V2X_PositionalAccuracy(const V2X_PositionalAccuracy& from);

  inline V2X_PositionalAccuracy& operator=(const V2X_PositionalAccuracy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  V2X_PositionalAccuracy(V2X_PositionalAccuracy&& from) noexcept
    : V2X_PositionalAccuracy() {
    *this = ::std::move(from);
  }

  inline V2X_PositionalAccuracy& operator=(V2X_PositionalAccuracy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const V2X_PositionalAccuracy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const V2X_PositionalAccuracy* internal_default_instance() {
    return reinterpret_cast<const V2X_PositionalAccuracy*>(
               &_V2X_PositionalAccuracy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(V2X_PositionalAccuracy* other);
  friend void swap(V2X_PositionalAccuracy& a, V2X_PositionalAccuracy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline V2X_PositionalAccuracy* New() const final {
    return CreateMaybeMessage<V2X_PositionalAccuracy>(NULL);
  }

  V2X_PositionalAccuracy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<V2X_PositionalAccuracy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const V2X_PositionalAccuracy& from);
  void MergeFrom(const V2X_PositionalAccuracy& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V2X_PositionalAccuracy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float semi_major = 1;
  void clear_semi_major();
  static const int kSemiMajorFieldNumber = 1;
  float semi_major() const;
  void set_semi_major(float value);

  // float semi_minor = 2;
  void clear_semi_minor();
  static const int kSemiMinorFieldNumber = 2;
  float semi_minor() const;
  void set_semi_minor(float value);

  // float orientation = 3;
  void clear_orientation();
  static const int kOrientationFieldNumber = 3;
  float orientation() const;
  void set_orientation(float value);

  // @@protoc_insertion_point(class_scope:metamoto.messages.V2X.PositionalAccuracy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float semi_major_;
  float semi_minor_;
  float orientation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fmessages_2fv2x_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class V2X_BrakeSystemStatus_BrakeAppliedStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.messages.V2X.BrakeSystemStatus.BrakeAppliedStatus) */ {
 public:
  V2X_BrakeSystemStatus_BrakeAppliedStatus();
  virtual ~V2X_BrakeSystemStatus_BrakeAppliedStatus();

  V2X_BrakeSystemStatus_BrakeAppliedStatus(const V2X_BrakeSystemStatus_BrakeAppliedStatus& from);

  inline V2X_BrakeSystemStatus_BrakeAppliedStatus& operator=(const V2X_BrakeSystemStatus_BrakeAppliedStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  V2X_BrakeSystemStatus_BrakeAppliedStatus(V2X_BrakeSystemStatus_BrakeAppliedStatus&& from) noexcept
    : V2X_BrakeSystemStatus_BrakeAppliedStatus() {
    *this = ::std::move(from);
  }

  inline V2X_BrakeSystemStatus_BrakeAppliedStatus& operator=(V2X_BrakeSystemStatus_BrakeAppliedStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const V2X_BrakeSystemStatus_BrakeAppliedStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const V2X_BrakeSystemStatus_BrakeAppliedStatus* internal_default_instance() {
    return reinterpret_cast<const V2X_BrakeSystemStatus_BrakeAppliedStatus*>(
               &_V2X_BrakeSystemStatus_BrakeAppliedStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(V2X_BrakeSystemStatus_BrakeAppliedStatus* other);
  friend void swap(V2X_BrakeSystemStatus_BrakeAppliedStatus& a, V2X_BrakeSystemStatus_BrakeAppliedStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline V2X_BrakeSystemStatus_BrakeAppliedStatus* New() const final {
    return CreateMaybeMessage<V2X_BrakeSystemStatus_BrakeAppliedStatus>(NULL);
  }

  V2X_BrakeSystemStatus_BrakeAppliedStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<V2X_BrakeSystemStatus_BrakeAppliedStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const V2X_BrakeSystemStatus_BrakeAppliedStatus& from);
  void MergeFrom(const V2X_BrakeSystemStatus_BrakeAppliedStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V2X_BrakeSystemStatus_BrakeAppliedStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool left_front = 1;
  void clear_left_front();
  static const int kLeftFrontFieldNumber = 1;
  bool left_front() const;
  void set_left_front(bool value);

  // bool left_rear = 2;
  void clear_left_rear();
  static const int kLeftRearFieldNumber = 2;
  bool left_rear() const;
  void set_left_rear(bool value);

  // bool right_front = 3;
  void clear_right_front();
  static const int kRightFrontFieldNumber = 3;
  bool right_front() const;
  void set_right_front(bool value);

  // bool right_rear = 4;
  void clear_right_rear();
  static const int kRightRearFieldNumber = 4;
  bool right_rear() const;
  void set_right_rear(bool value);

  // @@protoc_insertion_point(class_scope:metamoto.messages.V2X.BrakeSystemStatus.BrakeAppliedStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool left_front_;
  bool left_rear_;
  bool right_front_;
  bool right_rear_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fmessages_2fv2x_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class V2X_BrakeSystemStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.messages.V2X.BrakeSystemStatus) */ {
 public:
  V2X_BrakeSystemStatus();
  virtual ~V2X_BrakeSystemStatus();

  V2X_BrakeSystemStatus(const V2X_BrakeSystemStatus& from);

  inline V2X_BrakeSystemStatus& operator=(const V2X_BrakeSystemStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  V2X_BrakeSystemStatus(V2X_BrakeSystemStatus&& from) noexcept
    : V2X_BrakeSystemStatus() {
    *this = ::std::move(from);
  }

  inline V2X_BrakeSystemStatus& operator=(V2X_BrakeSystemStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const V2X_BrakeSystemStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const V2X_BrakeSystemStatus* internal_default_instance() {
    return reinterpret_cast<const V2X_BrakeSystemStatus*>(
               &_V2X_BrakeSystemStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(V2X_BrakeSystemStatus* other);
  friend void swap(V2X_BrakeSystemStatus& a, V2X_BrakeSystemStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline V2X_BrakeSystemStatus* New() const final {
    return CreateMaybeMessage<V2X_BrakeSystemStatus>(NULL);
  }

  V2X_BrakeSystemStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<V2X_BrakeSystemStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const V2X_BrakeSystemStatus& from);
  void MergeFrom(const V2X_BrakeSystemStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V2X_BrakeSystemStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef V2X_BrakeSystemStatus_BrakeAppliedStatus BrakeAppliedStatus;

  typedef V2X_BrakeSystemStatus_TractionControlState TractionControlState;
  static const TractionControlState TRACTION_UNAVAILABLE =
    V2X_BrakeSystemStatus_TractionControlState_TRACTION_UNAVAILABLE;
  static const TractionControlState TRACTION_OFF =
    V2X_BrakeSystemStatus_TractionControlState_TRACTION_OFF;
  static const TractionControlState TRACTION_ON =
    V2X_BrakeSystemStatus_TractionControlState_TRACTION_ON;
  static const TractionControlState TRACTION_ENGAGED =
    V2X_BrakeSystemStatus_TractionControlState_TRACTION_ENGAGED;
  static inline bool TractionControlState_IsValid(int value) {
    return V2X_BrakeSystemStatus_TractionControlState_IsValid(value);
  }
  static const TractionControlState TractionControlState_MIN =
    V2X_BrakeSystemStatus_TractionControlState_TractionControlState_MIN;
  static const TractionControlState TractionControlState_MAX =
    V2X_BrakeSystemStatus_TractionControlState_TractionControlState_MAX;
  static const int TractionControlState_ARRAYSIZE =
    V2X_BrakeSystemStatus_TractionControlState_TractionControlState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TractionControlState_descriptor() {
    return V2X_BrakeSystemStatus_TractionControlState_descriptor();
  }
  static inline const ::std::string& TractionControlState_Name(TractionControlState value) {
    return V2X_BrakeSystemStatus_TractionControlState_Name(value);
  }
  static inline bool TractionControlState_Parse(const ::std::string& name,
      TractionControlState* value) {
    return V2X_BrakeSystemStatus_TractionControlState_Parse(name, value);
  }

  typedef V2X_BrakeSystemStatus_AntiLockBrakeStatus AntiLockBrakeStatus;
  static const AntiLockBrakeStatus ABS_UNAVAILABLE =
    V2X_BrakeSystemStatus_AntiLockBrakeStatus_ABS_UNAVAILABLE;
  static const AntiLockBrakeStatus ABS_OFF =
    V2X_BrakeSystemStatus_AntiLockBrakeStatus_ABS_OFF;
  static const AntiLockBrakeStatus ABS_ON =
    V2X_BrakeSystemStatus_AntiLockBrakeStatus_ABS_ON;
  static const AntiLockBrakeStatus ABS_ENGAGED =
    V2X_BrakeSystemStatus_AntiLockBrakeStatus_ABS_ENGAGED;
  static inline bool AntiLockBrakeStatus_IsValid(int value) {
    return V2X_BrakeSystemStatus_AntiLockBrakeStatus_IsValid(value);
  }
  static const AntiLockBrakeStatus AntiLockBrakeStatus_MIN =
    V2X_BrakeSystemStatus_AntiLockBrakeStatus_AntiLockBrakeStatus_MIN;
  static const AntiLockBrakeStatus AntiLockBrakeStatus_MAX =
    V2X_BrakeSystemStatus_AntiLockBrakeStatus_AntiLockBrakeStatus_MAX;
  static const int AntiLockBrakeStatus_ARRAYSIZE =
    V2X_BrakeSystemStatus_AntiLockBrakeStatus_AntiLockBrakeStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AntiLockBrakeStatus_descriptor() {
    return V2X_BrakeSystemStatus_AntiLockBrakeStatus_descriptor();
  }
  static inline const ::std::string& AntiLockBrakeStatus_Name(AntiLockBrakeStatus value) {
    return V2X_BrakeSystemStatus_AntiLockBrakeStatus_Name(value);
  }
  static inline bool AntiLockBrakeStatus_Parse(const ::std::string& name,
      AntiLockBrakeStatus* value) {
    return V2X_BrakeSystemStatus_AntiLockBrakeStatus_Parse(name, value);
  }

  typedef V2X_BrakeSystemStatus_StabilityControlStatus StabilityControlStatus;
  static const StabilityControlStatus SC_UNAVAILABLE =
    V2X_BrakeSystemStatus_StabilityControlStatus_SC_UNAVAILABLE;
  static const StabilityControlStatus SC_OFF =
    V2X_BrakeSystemStatus_StabilityControlStatus_SC_OFF;
  static const StabilityControlStatus SC_ON =
    V2X_BrakeSystemStatus_StabilityControlStatus_SC_ON;
  static inline bool StabilityControlStatus_IsValid(int value) {
    return V2X_BrakeSystemStatus_StabilityControlStatus_IsValid(value);
  }
  static const StabilityControlStatus StabilityControlStatus_MIN =
    V2X_BrakeSystemStatus_StabilityControlStatus_StabilityControlStatus_MIN;
  static const StabilityControlStatus StabilityControlStatus_MAX =
    V2X_BrakeSystemStatus_StabilityControlStatus_StabilityControlStatus_MAX;
  static const int StabilityControlStatus_ARRAYSIZE =
    V2X_BrakeSystemStatus_StabilityControlStatus_StabilityControlStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StabilityControlStatus_descriptor() {
    return V2X_BrakeSystemStatus_StabilityControlStatus_descriptor();
  }
  static inline const ::std::string& StabilityControlStatus_Name(StabilityControlStatus value) {
    return V2X_BrakeSystemStatus_StabilityControlStatus_Name(value);
  }
  static inline bool StabilityControlStatus_Parse(const ::std::string& name,
      StabilityControlStatus* value) {
    return V2X_BrakeSystemStatus_StabilityControlStatus_Parse(name, value);
  }

  typedef V2X_BrakeSystemStatus_BrakeBoostApplied BrakeBoostApplied;
  static const BrakeBoostApplied BB_UNAVAILABLE =
    V2X_BrakeSystemStatus_BrakeBoostApplied_BB_UNAVAILABLE;
  static const BrakeBoostApplied BB_OFF =
    V2X_BrakeSystemStatus_BrakeBoostApplied_BB_OFF;
  static const BrakeBoostApplied BB_ON =
    V2X_BrakeSystemStatus_BrakeBoostApplied_BB_ON;
  static inline bool BrakeBoostApplied_IsValid(int value) {
    return V2X_BrakeSystemStatus_BrakeBoostApplied_IsValid(value);
  }
  static const BrakeBoostApplied BrakeBoostApplied_MIN =
    V2X_BrakeSystemStatus_BrakeBoostApplied_BrakeBoostApplied_MIN;
  static const BrakeBoostApplied BrakeBoostApplied_MAX =
    V2X_BrakeSystemStatus_BrakeBoostApplied_BrakeBoostApplied_MAX;
  static const int BrakeBoostApplied_ARRAYSIZE =
    V2X_BrakeSystemStatus_BrakeBoostApplied_BrakeBoostApplied_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BrakeBoostApplied_descriptor() {
    return V2X_BrakeSystemStatus_BrakeBoostApplied_descriptor();
  }
  static inline const ::std::string& BrakeBoostApplied_Name(BrakeBoostApplied value) {
    return V2X_BrakeSystemStatus_BrakeBoostApplied_Name(value);
  }
  static inline bool BrakeBoostApplied_Parse(const ::std::string& name,
      BrakeBoostApplied* value) {
    return V2X_BrakeSystemStatus_BrakeBoostApplied_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .metamoto.messages.V2X.BrakeSystemStatus.BrakeAppliedStatus wheel_brakes = 1;
  bool has_wheel_brakes() const;
  void clear_wheel_brakes();
  static const int kWheelBrakesFieldNumber = 1;
  private:
  const ::metamoto::messages::V2X_BrakeSystemStatus_BrakeAppliedStatus& _internal_wheel_brakes() const;
  public:
  const ::metamoto::messages::V2X_BrakeSystemStatus_BrakeAppliedStatus& wheel_brakes() const;
  ::metamoto::messages::V2X_BrakeSystemStatus_BrakeAppliedStatus* release_wheel_brakes();
  ::metamoto::messages::V2X_BrakeSystemStatus_BrakeAppliedStatus* mutable_wheel_brakes();
  void set_allocated_wheel_brakes(::metamoto::messages::V2X_BrakeSystemStatus_BrakeAppliedStatus* wheel_brakes);

  // .metamoto.messages.V2X.BrakeSystemStatus.TractionControlState traction = 2;
  void clear_traction();
  static const int kTractionFieldNumber = 2;
  ::metamoto::messages::V2X_BrakeSystemStatus_TractionControlState traction() const;
  void set_traction(::metamoto::messages::V2X_BrakeSystemStatus_TractionControlState value);

  // .metamoto.messages.V2X.BrakeSystemStatus.AntiLockBrakeStatus abs = 3;
  void clear_abs();
  static const int kAbsFieldNumber = 3;
  ::metamoto::messages::V2X_BrakeSystemStatus_AntiLockBrakeStatus abs() const;
  void set_abs(::metamoto::messages::V2X_BrakeSystemStatus_AntiLockBrakeStatus value);

  // .metamoto.messages.V2X.BrakeSystemStatus.StabilityControlStatus scs = 4;
  void clear_scs();
  static const int kScsFieldNumber = 4;
  ::metamoto::messages::V2X_BrakeSystemStatus_StabilityControlStatus scs() const;
  void set_scs(::metamoto::messages::V2X_BrakeSystemStatus_StabilityControlStatus value);

  // .metamoto.messages.V2X.BrakeSystemStatus.BrakeBoostApplied brake_boost = 5;
  void clear_brake_boost();
  static const int kBrakeBoostFieldNumber = 5;
  ::metamoto::messages::V2X_BrakeSystemStatus_BrakeBoostApplied brake_boost() const;
  void set_brake_boost(::metamoto::messages::V2X_BrakeSystemStatus_BrakeBoostApplied value);

  // @@protoc_insertion_point(class_scope:metamoto.messages.V2X.BrakeSystemStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::messages::V2X_BrakeSystemStatus_BrakeAppliedStatus* wheel_brakes_;
  int traction_;
  int abs_;
  int scs_;
  int brake_boost_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fmessages_2fv2x_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class V2X : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.messages.V2X) */ {
 public:
  V2X();
  virtual ~V2X();

  V2X(const V2X& from);

  inline V2X& operator=(const V2X& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  V2X(V2X&& from) noexcept
    : V2X() {
    *this = ::std::move(from);
  }

  inline V2X& operator=(V2X&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const V2X& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const V2X* internal_default_instance() {
    return reinterpret_cast<const V2X*>(
               &_V2X_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(V2X* other);
  friend void swap(V2X& a, V2X& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline V2X* New() const final {
    return CreateMaybeMessage<V2X>(NULL);
  }

  V2X* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<V2X>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const V2X& from);
  void MergeFrom(const V2X& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V2X* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef V2X_BsmPart1 BsmPart1;
  typedef V2X_PositionalAccuracy PositionalAccuracy;
  typedef V2X_BrakeSystemStatus BrakeSystemStatus;

  // accessors -------------------------------------------------------

  // repeated .metamoto.messages.V2X.BsmPart1 bsm_part_1 = 1;
  int bsm_part_1_size() const;
  void clear_bsm_part_1();
  static const int kBsmPart1FieldNumber = 1;
  ::metamoto::messages::V2X_BsmPart1* mutable_bsm_part_1(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::messages::V2X_BsmPart1 >*
      mutable_bsm_part_1();
  const ::metamoto::messages::V2X_BsmPart1& bsm_part_1(int index) const;
  ::metamoto::messages::V2X_BsmPart1* add_bsm_part_1();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::messages::V2X_BsmPart1 >&
      bsm_part_1() const;

  // @@protoc_insertion_point(class_scope:metamoto.messages.V2X)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::messages::V2X_BsmPart1 > bsm_part_1_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fmessages_2fv2x_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// V2X_BsmPart1

// int32 object_id = 1;
inline void V2X_BsmPart1::clear_object_id() {
  object_id_ = 0;
}
inline ::google::protobuf::int32 V2X_BsmPart1::object_id() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BsmPart1.object_id)
  return object_id_;
}
inline void V2X_BsmPart1::set_object_id(::google::protobuf::int32 value) {
  
  object_id_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.V2X.BsmPart1.object_id)
}

// double time_stamp = 2;
inline void V2X_BsmPart1::clear_time_stamp() {
  time_stamp_ = 0;
}
inline double V2X_BsmPart1::time_stamp() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BsmPart1.time_stamp)
  return time_stamp_;
}
inline void V2X_BsmPart1::set_time_stamp(double value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.V2X.BsmPart1.time_stamp)
}

// .metamoto.types.GeoCoordinates position = 3;
inline bool V2X_BsmPart1::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::metamoto::types::GeoCoordinates& V2X_BsmPart1::_internal_position() const {
  return *position_;
}
inline const ::metamoto::types::GeoCoordinates& V2X_BsmPart1::position() const {
  const ::metamoto::types::GeoCoordinates* p = position_;
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BsmPart1.position)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::GeoCoordinates*>(
      &::metamoto::types::_GeoCoordinates_default_instance_);
}
inline ::metamoto::types::GeoCoordinates* V2X_BsmPart1::release_position() {
  // @@protoc_insertion_point(field_release:metamoto.messages.V2X.BsmPart1.position)
  
  ::metamoto::types::GeoCoordinates* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::metamoto::types::GeoCoordinates* V2X_BsmPart1::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::GeoCoordinates>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.V2X.BsmPart1.position)
  return position_;
}
inline void V2X_BsmPart1::set_allocated_position(::metamoto::types::GeoCoordinates* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.V2X.BsmPart1.position)
}

// .metamoto.messages.V2X.PositionalAccuracy accuracy = 4;
inline bool V2X_BsmPart1::has_accuracy() const {
  return this != internal_default_instance() && accuracy_ != NULL;
}
inline void V2X_BsmPart1::clear_accuracy() {
  if (GetArenaNoVirtual() == NULL && accuracy_ != NULL) {
    delete accuracy_;
  }
  accuracy_ = NULL;
}
inline const ::metamoto::messages::V2X_PositionalAccuracy& V2X_BsmPart1::_internal_accuracy() const {
  return *accuracy_;
}
inline const ::metamoto::messages::V2X_PositionalAccuracy& V2X_BsmPart1::accuracy() const {
  const ::metamoto::messages::V2X_PositionalAccuracy* p = accuracy_;
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BsmPart1.accuracy)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::messages::V2X_PositionalAccuracy*>(
      &::metamoto::messages::_V2X_PositionalAccuracy_default_instance_);
}
inline ::metamoto::messages::V2X_PositionalAccuracy* V2X_BsmPart1::release_accuracy() {
  // @@protoc_insertion_point(field_release:metamoto.messages.V2X.BsmPart1.accuracy)
  
  ::metamoto::messages::V2X_PositionalAccuracy* temp = accuracy_;
  accuracy_ = NULL;
  return temp;
}
inline ::metamoto::messages::V2X_PositionalAccuracy* V2X_BsmPart1::mutable_accuracy() {
  
  if (accuracy_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::messages::V2X_PositionalAccuracy>(GetArenaNoVirtual());
    accuracy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.V2X.BsmPart1.accuracy)
  return accuracy_;
}
inline void V2X_BsmPart1::set_allocated_accuracy(::metamoto::messages::V2X_PositionalAccuracy* accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete accuracy_;
  }
  if (accuracy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accuracy, submessage_arena);
    }
    
  } else {
    
  }
  accuracy_ = accuracy;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.V2X.BsmPart1.accuracy)
}

// .metamoto.types.Vehicle.GearSelector transmission_state = 5;
inline void V2X_BsmPart1::clear_transmission_state() {
  transmission_state_ = 0;
}
inline ::metamoto::types::Vehicle_GearSelector V2X_BsmPart1::transmission_state() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BsmPart1.transmission_state)
  return static_cast< ::metamoto::types::Vehicle_GearSelector >(transmission_state_);
}
inline void V2X_BsmPart1::set_transmission_state(::metamoto::types::Vehicle_GearSelector value) {
  
  transmission_state_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.V2X.BsmPart1.transmission_state)
}

// .metamoto.types.Vector3 linear_velocity = 6;
inline bool V2X_BsmPart1::has_linear_velocity() const {
  return this != internal_default_instance() && linear_velocity_ != NULL;
}
inline const ::metamoto::types::Vector3& V2X_BsmPart1::_internal_linear_velocity() const {
  return *linear_velocity_;
}
inline const ::metamoto::types::Vector3& V2X_BsmPart1::linear_velocity() const {
  const ::metamoto::types::Vector3* p = linear_velocity_;
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BsmPart1.linear_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* V2X_BsmPart1::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:metamoto.messages.V2X.BsmPart1.linear_velocity)
  
  ::metamoto::types::Vector3* temp = linear_velocity_;
  linear_velocity_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* V2X_BsmPart1::mutable_linear_velocity() {
  
  if (linear_velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    linear_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.V2X.BsmPart1.linear_velocity)
  return linear_velocity_;
}
inline void V2X_BsmPart1::set_allocated_linear_velocity(::metamoto::types::Vector3* linear_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_velocity_);
  }
  if (linear_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_velocity, submessage_arena);
    }
    
  } else {
    
  }
  linear_velocity_ = linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.V2X.BsmPart1.linear_velocity)
}

// float steering_wheel_angle = 7;
inline void V2X_BsmPart1::clear_steering_wheel_angle() {
  steering_wheel_angle_ = 0;
}
inline float V2X_BsmPart1::steering_wheel_angle() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BsmPart1.steering_wheel_angle)
  return steering_wheel_angle_;
}
inline void V2X_BsmPart1::set_steering_wheel_angle(float value) {
  
  steering_wheel_angle_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.V2X.BsmPart1.steering_wheel_angle)
}

// .metamoto.types.Vector3 linear_acceleration = 8;
inline bool V2X_BsmPart1::has_linear_acceleration() const {
  return this != internal_default_instance() && linear_acceleration_ != NULL;
}
inline const ::metamoto::types::Vector3& V2X_BsmPart1::_internal_linear_acceleration() const {
  return *linear_acceleration_;
}
inline const ::metamoto::types::Vector3& V2X_BsmPart1::linear_acceleration() const {
  const ::metamoto::types::Vector3* p = linear_acceleration_;
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BsmPart1.linear_acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* V2X_BsmPart1::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:metamoto.messages.V2X.BsmPart1.linear_acceleration)
  
  ::metamoto::types::Vector3* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* V2X_BsmPart1::mutable_linear_acceleration() {
  
  if (linear_acceleration_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    linear_acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.V2X.BsmPart1.linear_acceleration)
  return linear_acceleration_;
}
inline void V2X_BsmPart1::set_allocated_linear_acceleration(::metamoto::types::Vector3* linear_acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_acceleration_);
  }
  if (linear_acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  linear_acceleration_ = linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.V2X.BsmPart1.linear_acceleration)
}

// float yaw_rate = 9;
inline void V2X_BsmPart1::clear_yaw_rate() {
  yaw_rate_ = 0;
}
inline float V2X_BsmPart1::yaw_rate() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BsmPart1.yaw_rate)
  return yaw_rate_;
}
inline void V2X_BsmPart1::set_yaw_rate(float value) {
  
  yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.V2X.BsmPart1.yaw_rate)
}

// .metamoto.messages.V2X.BrakeSystemStatus brakes = 10;
inline bool V2X_BsmPart1::has_brakes() const {
  return this != internal_default_instance() && brakes_ != NULL;
}
inline void V2X_BsmPart1::clear_brakes() {
  if (GetArenaNoVirtual() == NULL && brakes_ != NULL) {
    delete brakes_;
  }
  brakes_ = NULL;
}
inline const ::metamoto::messages::V2X_BrakeSystemStatus& V2X_BsmPart1::_internal_brakes() const {
  return *brakes_;
}
inline const ::metamoto::messages::V2X_BrakeSystemStatus& V2X_BsmPart1::brakes() const {
  const ::metamoto::messages::V2X_BrakeSystemStatus* p = brakes_;
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BsmPart1.brakes)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::messages::V2X_BrakeSystemStatus*>(
      &::metamoto::messages::_V2X_BrakeSystemStatus_default_instance_);
}
inline ::metamoto::messages::V2X_BrakeSystemStatus* V2X_BsmPart1::release_brakes() {
  // @@protoc_insertion_point(field_release:metamoto.messages.V2X.BsmPart1.brakes)
  
  ::metamoto::messages::V2X_BrakeSystemStatus* temp = brakes_;
  brakes_ = NULL;
  return temp;
}
inline ::metamoto::messages::V2X_BrakeSystemStatus* V2X_BsmPart1::mutable_brakes() {
  
  if (brakes_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::messages::V2X_BrakeSystemStatus>(GetArenaNoVirtual());
    brakes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.V2X.BsmPart1.brakes)
  return brakes_;
}
inline void V2X_BsmPart1::set_allocated_brakes(::metamoto::messages::V2X_BrakeSystemStatus* brakes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete brakes_;
  }
  if (brakes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      brakes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, brakes, submessage_arena);
    }
    
  } else {
    
  }
  brakes_ = brakes;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.V2X.BsmPart1.brakes)
}

// .metamoto.types.Vector3 vehicle_size = 11;
inline bool V2X_BsmPart1::has_vehicle_size() const {
  return this != internal_default_instance() && vehicle_size_ != NULL;
}
inline const ::metamoto::types::Vector3& V2X_BsmPart1::_internal_vehicle_size() const {
  return *vehicle_size_;
}
inline const ::metamoto::types::Vector3& V2X_BsmPart1::vehicle_size() const {
  const ::metamoto::types::Vector3* p = vehicle_size_;
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BsmPart1.vehicle_size)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* V2X_BsmPart1::release_vehicle_size() {
  // @@protoc_insertion_point(field_release:metamoto.messages.V2X.BsmPart1.vehicle_size)
  
  ::metamoto::types::Vector3* temp = vehicle_size_;
  vehicle_size_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* V2X_BsmPart1::mutable_vehicle_size() {
  
  if (vehicle_size_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    vehicle_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.V2X.BsmPart1.vehicle_size)
  return vehicle_size_;
}
inline void V2X_BsmPart1::set_allocated_vehicle_size(::metamoto::types::Vector3* vehicle_size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vehicle_size_);
  }
  if (vehicle_size) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vehicle_size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vehicle_size, submessage_arena);
    }
    
  } else {
    
  }
  vehicle_size_ = vehicle_size;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.V2X.BsmPart1.vehicle_size)
}

// -------------------------------------------------------------------

// V2X_PositionalAccuracy

// float semi_major = 1;
inline void V2X_PositionalAccuracy::clear_semi_major() {
  semi_major_ = 0;
}
inline float V2X_PositionalAccuracy::semi_major() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.PositionalAccuracy.semi_major)
  return semi_major_;
}
inline void V2X_PositionalAccuracy::set_semi_major(float value) {
  
  semi_major_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.V2X.PositionalAccuracy.semi_major)
}

// float semi_minor = 2;
inline void V2X_PositionalAccuracy::clear_semi_minor() {
  semi_minor_ = 0;
}
inline float V2X_PositionalAccuracy::semi_minor() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.PositionalAccuracy.semi_minor)
  return semi_minor_;
}
inline void V2X_PositionalAccuracy::set_semi_minor(float value) {
  
  semi_minor_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.V2X.PositionalAccuracy.semi_minor)
}

// float orientation = 3;
inline void V2X_PositionalAccuracy::clear_orientation() {
  orientation_ = 0;
}
inline float V2X_PositionalAccuracy::orientation() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.PositionalAccuracy.orientation)
  return orientation_;
}
inline void V2X_PositionalAccuracy::set_orientation(float value) {
  
  orientation_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.V2X.PositionalAccuracy.orientation)
}

// -------------------------------------------------------------------

// V2X_BrakeSystemStatus_BrakeAppliedStatus

// bool left_front = 1;
inline void V2X_BrakeSystemStatus_BrakeAppliedStatus::clear_left_front() {
  left_front_ = false;
}
inline bool V2X_BrakeSystemStatus_BrakeAppliedStatus::left_front() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BrakeSystemStatus.BrakeAppliedStatus.left_front)
  return left_front_;
}
inline void V2X_BrakeSystemStatus_BrakeAppliedStatus::set_left_front(bool value) {
  
  left_front_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.V2X.BrakeSystemStatus.BrakeAppliedStatus.left_front)
}

// bool left_rear = 2;
inline void V2X_BrakeSystemStatus_BrakeAppliedStatus::clear_left_rear() {
  left_rear_ = false;
}
inline bool V2X_BrakeSystemStatus_BrakeAppliedStatus::left_rear() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BrakeSystemStatus.BrakeAppliedStatus.left_rear)
  return left_rear_;
}
inline void V2X_BrakeSystemStatus_BrakeAppliedStatus::set_left_rear(bool value) {
  
  left_rear_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.V2X.BrakeSystemStatus.BrakeAppliedStatus.left_rear)
}

// bool right_front = 3;
inline void V2X_BrakeSystemStatus_BrakeAppliedStatus::clear_right_front() {
  right_front_ = false;
}
inline bool V2X_BrakeSystemStatus_BrakeAppliedStatus::right_front() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BrakeSystemStatus.BrakeAppliedStatus.right_front)
  return right_front_;
}
inline void V2X_BrakeSystemStatus_BrakeAppliedStatus::set_right_front(bool value) {
  
  right_front_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.V2X.BrakeSystemStatus.BrakeAppliedStatus.right_front)
}

// bool right_rear = 4;
inline void V2X_BrakeSystemStatus_BrakeAppliedStatus::clear_right_rear() {
  right_rear_ = false;
}
inline bool V2X_BrakeSystemStatus_BrakeAppliedStatus::right_rear() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BrakeSystemStatus.BrakeAppliedStatus.right_rear)
  return right_rear_;
}
inline void V2X_BrakeSystemStatus_BrakeAppliedStatus::set_right_rear(bool value) {
  
  right_rear_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.V2X.BrakeSystemStatus.BrakeAppliedStatus.right_rear)
}

// -------------------------------------------------------------------

// V2X_BrakeSystemStatus

// .metamoto.messages.V2X.BrakeSystemStatus.BrakeAppliedStatus wheel_brakes = 1;
inline bool V2X_BrakeSystemStatus::has_wheel_brakes() const {
  return this != internal_default_instance() && wheel_brakes_ != NULL;
}
inline void V2X_BrakeSystemStatus::clear_wheel_brakes() {
  if (GetArenaNoVirtual() == NULL && wheel_brakes_ != NULL) {
    delete wheel_brakes_;
  }
  wheel_brakes_ = NULL;
}
inline const ::metamoto::messages::V2X_BrakeSystemStatus_BrakeAppliedStatus& V2X_BrakeSystemStatus::_internal_wheel_brakes() const {
  return *wheel_brakes_;
}
inline const ::metamoto::messages::V2X_BrakeSystemStatus_BrakeAppliedStatus& V2X_BrakeSystemStatus::wheel_brakes() const {
  const ::metamoto::messages::V2X_BrakeSystemStatus_BrakeAppliedStatus* p = wheel_brakes_;
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BrakeSystemStatus.wheel_brakes)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::messages::V2X_BrakeSystemStatus_BrakeAppliedStatus*>(
      &::metamoto::messages::_V2X_BrakeSystemStatus_BrakeAppliedStatus_default_instance_);
}
inline ::metamoto::messages::V2X_BrakeSystemStatus_BrakeAppliedStatus* V2X_BrakeSystemStatus::release_wheel_brakes() {
  // @@protoc_insertion_point(field_release:metamoto.messages.V2X.BrakeSystemStatus.wheel_brakes)
  
  ::metamoto::messages::V2X_BrakeSystemStatus_BrakeAppliedStatus* temp = wheel_brakes_;
  wheel_brakes_ = NULL;
  return temp;
}
inline ::metamoto::messages::V2X_BrakeSystemStatus_BrakeAppliedStatus* V2X_BrakeSystemStatus::mutable_wheel_brakes() {
  
  if (wheel_brakes_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::messages::V2X_BrakeSystemStatus_BrakeAppliedStatus>(GetArenaNoVirtual());
    wheel_brakes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.V2X.BrakeSystemStatus.wheel_brakes)
  return wheel_brakes_;
}
inline void V2X_BrakeSystemStatus::set_allocated_wheel_brakes(::metamoto::messages::V2X_BrakeSystemStatus_BrakeAppliedStatus* wheel_brakes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete wheel_brakes_;
  }
  if (wheel_brakes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      wheel_brakes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, wheel_brakes, submessage_arena);
    }
    
  } else {
    
  }
  wheel_brakes_ = wheel_brakes;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.V2X.BrakeSystemStatus.wheel_brakes)
}

// .metamoto.messages.V2X.BrakeSystemStatus.TractionControlState traction = 2;
inline void V2X_BrakeSystemStatus::clear_traction() {
  traction_ = 0;
}
inline ::metamoto::messages::V2X_BrakeSystemStatus_TractionControlState V2X_BrakeSystemStatus::traction() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BrakeSystemStatus.traction)
  return static_cast< ::metamoto::messages::V2X_BrakeSystemStatus_TractionControlState >(traction_);
}
inline void V2X_BrakeSystemStatus::set_traction(::metamoto::messages::V2X_BrakeSystemStatus_TractionControlState value) {
  
  traction_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.V2X.BrakeSystemStatus.traction)
}

// .metamoto.messages.V2X.BrakeSystemStatus.AntiLockBrakeStatus abs = 3;
inline void V2X_BrakeSystemStatus::clear_abs() {
  abs_ = 0;
}
inline ::metamoto::messages::V2X_BrakeSystemStatus_AntiLockBrakeStatus V2X_BrakeSystemStatus::abs() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BrakeSystemStatus.abs)
  return static_cast< ::metamoto::messages::V2X_BrakeSystemStatus_AntiLockBrakeStatus >(abs_);
}
inline void V2X_BrakeSystemStatus::set_abs(::metamoto::messages::V2X_BrakeSystemStatus_AntiLockBrakeStatus value) {
  
  abs_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.V2X.BrakeSystemStatus.abs)
}

// .metamoto.messages.V2X.BrakeSystemStatus.StabilityControlStatus scs = 4;
inline void V2X_BrakeSystemStatus::clear_scs() {
  scs_ = 0;
}
inline ::metamoto::messages::V2X_BrakeSystemStatus_StabilityControlStatus V2X_BrakeSystemStatus::scs() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BrakeSystemStatus.scs)
  return static_cast< ::metamoto::messages::V2X_BrakeSystemStatus_StabilityControlStatus >(scs_);
}
inline void V2X_BrakeSystemStatus::set_scs(::metamoto::messages::V2X_BrakeSystemStatus_StabilityControlStatus value) {
  
  scs_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.V2X.BrakeSystemStatus.scs)
}

// .metamoto.messages.V2X.BrakeSystemStatus.BrakeBoostApplied brake_boost = 5;
inline void V2X_BrakeSystemStatus::clear_brake_boost() {
  brake_boost_ = 0;
}
inline ::metamoto::messages::V2X_BrakeSystemStatus_BrakeBoostApplied V2X_BrakeSystemStatus::brake_boost() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.BrakeSystemStatus.brake_boost)
  return static_cast< ::metamoto::messages::V2X_BrakeSystemStatus_BrakeBoostApplied >(brake_boost_);
}
inline void V2X_BrakeSystemStatus::set_brake_boost(::metamoto::messages::V2X_BrakeSystemStatus_BrakeBoostApplied value) {
  
  brake_boost_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.V2X.BrakeSystemStatus.brake_boost)
}

// -------------------------------------------------------------------

// V2X

// repeated .metamoto.messages.V2X.BsmPart1 bsm_part_1 = 1;
inline int V2X::bsm_part_1_size() const {
  return bsm_part_1_.size();
}
inline void V2X::clear_bsm_part_1() {
  bsm_part_1_.Clear();
}
inline ::metamoto::messages::V2X_BsmPart1* V2X::mutable_bsm_part_1(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.messages.V2X.bsm_part_1)
  return bsm_part_1_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::messages::V2X_BsmPart1 >*
V2X::mutable_bsm_part_1() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.messages.V2X.bsm_part_1)
  return &bsm_part_1_;
}
inline const ::metamoto::messages::V2X_BsmPart1& V2X::bsm_part_1(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.messages.V2X.bsm_part_1)
  return bsm_part_1_.Get(index);
}
inline ::metamoto::messages::V2X_BsmPart1* V2X::add_bsm_part_1() {
  // @@protoc_insertion_point(field_add:metamoto.messages.V2X.bsm_part_1)
  return bsm_part_1_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::messages::V2X_BsmPart1 >&
V2X::bsm_part_1() const {
  // @@protoc_insertion_point(field_list:metamoto.messages.V2X.bsm_part_1)
  return bsm_part_1_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace metamoto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::metamoto::messages::V2X_BrakeSystemStatus_TractionControlState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metamoto::messages::V2X_BrakeSystemStatus_TractionControlState>() {
  return ::metamoto::messages::V2X_BrakeSystemStatus_TractionControlState_descriptor();
}
template <> struct is_proto_enum< ::metamoto::messages::V2X_BrakeSystemStatus_AntiLockBrakeStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metamoto::messages::V2X_BrakeSystemStatus_AntiLockBrakeStatus>() {
  return ::metamoto::messages::V2X_BrakeSystemStatus_AntiLockBrakeStatus_descriptor();
}
template <> struct is_proto_enum< ::metamoto::messages::V2X_BrakeSystemStatus_StabilityControlStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metamoto::messages::V2X_BrakeSystemStatus_StabilityControlStatus>() {
  return ::metamoto::messages::V2X_BrakeSystemStatus_StabilityControlStatus_descriptor();
}
template <> struct is_proto_enum< ::metamoto::messages::V2X_BrakeSystemStatus_BrakeBoostApplied> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metamoto::messages::V2X_BrakeSystemStatus_BrakeBoostApplied>() {
  return ::metamoto::messages::V2X_BrakeSystemStatus_BrakeBoostApplied_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2fmessages_2fv2x_2eproto
