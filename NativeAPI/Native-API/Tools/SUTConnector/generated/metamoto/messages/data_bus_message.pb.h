// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/messages/data_bus_message.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto
#define PROTOBUF_INCLUDED_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "metamoto/messages/vehicle_state.pb.h"
#include "metamoto/messages/vehicle_controls.pb.h"
#include "metamoto/messages/camera.pb.h"
#include "metamoto/messages/lidar.pb.h"
#include "metamoto/messages/radar.pb.h"
#include "metamoto/messages/gps.pb.h"
#include "metamoto/messages/imu.pb.h"
#include "metamoto/messages/ground_truth.pb.h"
#include "metamoto/messages/localizer.pb.h"
#include "metamoto/messages/v2x.pb.h"
#include "metamoto/messages/perception.pb.h"
#include "metamoto/messages/event.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto 

namespace protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto
namespace metamoto {
namespace messages {
class DataBusMessage;
class DataBusMessageDefaultTypeInternal;
extern DataBusMessageDefaultTypeInternal _DataBusMessage_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
}  // namespace messages
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::messages::DataBusMessage* Arena::CreateMaybeMessage<::metamoto::messages::DataBusMessage>(Arena*);
template<> ::metamoto::messages::Header* Arena::CreateMaybeMessage<::metamoto::messages::Header>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace messages {

// ===================================================================

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.messages.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(NULL);
  }

  Header* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // @@protoc_insertion_point(class_scope:metamoto.messages.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataBusMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.messages.DataBusMessage) */ {
 public:
  DataBusMessage();
  virtual ~DataBusMessage();

  DataBusMessage(const DataBusMessage& from);

  inline DataBusMessage& operator=(const DataBusMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataBusMessage(DataBusMessage&& from) noexcept
    : DataBusMessage() {
    *this = ::std::move(from);
  }

  inline DataBusMessage& operator=(DataBusMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBusMessage& default_instance();

  enum DataOneofCase {
    kVehicleState = 2,
    kVehicleControls = 3,
    kCamera = 4,
    kLidar = 5,
    kRadar = 6,
    kGps = 7,
    kImu = 8,
    kLocalizer = 9,
    kV2X = 10,
    kEvent = 11,
    kPerception = 12,
    kGroundTruth = 30,
    kOther = 100,
    DATA_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataBusMessage* internal_default_instance() {
    return reinterpret_cast<const DataBusMessage*>(
               &_DataBusMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DataBusMessage* other);
  friend void swap(DataBusMessage& a, DataBusMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataBusMessage* New() const final {
    return CreateMaybeMessage<DataBusMessage>(NULL);
  }

  DataBusMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataBusMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataBusMessage& from);
  void MergeFrom(const DataBusMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataBusMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.messages.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::metamoto::messages::Header& _internal_header() const;
  public:
  const ::metamoto::messages::Header& header() const;
  ::metamoto::messages::Header* release_header();
  ::metamoto::messages::Header* mutable_header();
  void set_allocated_header(::metamoto::messages::Header* header);

  // .metamoto.messages.VehicleState vehicle_state = 2;
  bool has_vehicle_state() const;
  void clear_vehicle_state();
  static const int kVehicleStateFieldNumber = 2;
  private:
  const ::metamoto::messages::VehicleState& _internal_vehicle_state() const;
  public:
  const ::metamoto::messages::VehicleState& vehicle_state() const;
  ::metamoto::messages::VehicleState* release_vehicle_state();
  ::metamoto::messages::VehicleState* mutable_vehicle_state();
  void set_allocated_vehicle_state(::metamoto::messages::VehicleState* vehicle_state);

  // .metamoto.messages.VehicleControls vehicle_controls = 3;
  bool has_vehicle_controls() const;
  void clear_vehicle_controls();
  static const int kVehicleControlsFieldNumber = 3;
  private:
  const ::metamoto::messages::VehicleControls& _internal_vehicle_controls() const;
  public:
  const ::metamoto::messages::VehicleControls& vehicle_controls() const;
  ::metamoto::messages::VehicleControls* release_vehicle_controls();
  ::metamoto::messages::VehicleControls* mutable_vehicle_controls();
  void set_allocated_vehicle_controls(::metamoto::messages::VehicleControls* vehicle_controls);

  // .metamoto.messages.Camera camera = 4;
  bool has_camera() const;
  void clear_camera();
  static const int kCameraFieldNumber = 4;
  private:
  const ::metamoto::messages::Camera& _internal_camera() const;
  public:
  const ::metamoto::messages::Camera& camera() const;
  ::metamoto::messages::Camera* release_camera();
  ::metamoto::messages::Camera* mutable_camera();
  void set_allocated_camera(::metamoto::messages::Camera* camera);

  // .metamoto.messages.Lidar lidar = 5;
  bool has_lidar() const;
  void clear_lidar();
  static const int kLidarFieldNumber = 5;
  private:
  const ::metamoto::messages::Lidar& _internal_lidar() const;
  public:
  const ::metamoto::messages::Lidar& lidar() const;
  ::metamoto::messages::Lidar* release_lidar();
  ::metamoto::messages::Lidar* mutable_lidar();
  void set_allocated_lidar(::metamoto::messages::Lidar* lidar);

  // .metamoto.messages.Radar radar = 6;
  bool has_radar() const;
  void clear_radar();
  static const int kRadarFieldNumber = 6;
  private:
  const ::metamoto::messages::Radar& _internal_radar() const;
  public:
  const ::metamoto::messages::Radar& radar() const;
  ::metamoto::messages::Radar* release_radar();
  ::metamoto::messages::Radar* mutable_radar();
  void set_allocated_radar(::metamoto::messages::Radar* radar);

  // .metamoto.messages.GPS gps = 7;
  bool has_gps() const;
  void clear_gps();
  static const int kGpsFieldNumber = 7;
  private:
  const ::metamoto::messages::GPS& _internal_gps() const;
  public:
  const ::metamoto::messages::GPS& gps() const;
  ::metamoto::messages::GPS* release_gps();
  ::metamoto::messages::GPS* mutable_gps();
  void set_allocated_gps(::metamoto::messages::GPS* gps);

  // .metamoto.messages.IMU imu = 8;
  bool has_imu() const;
  void clear_imu();
  static const int kImuFieldNumber = 8;
  private:
  const ::metamoto::messages::IMU& _internal_imu() const;
  public:
  const ::metamoto::messages::IMU& imu() const;
  ::metamoto::messages::IMU* release_imu();
  ::metamoto::messages::IMU* mutable_imu();
  void set_allocated_imu(::metamoto::messages::IMU* imu);

  // .metamoto.messages.Localizer localizer = 9;
  bool has_localizer() const;
  void clear_localizer();
  static const int kLocalizerFieldNumber = 9;
  private:
  const ::metamoto::messages::Localizer& _internal_localizer() const;
  public:
  const ::metamoto::messages::Localizer& localizer() const;
  ::metamoto::messages::Localizer* release_localizer();
  ::metamoto::messages::Localizer* mutable_localizer();
  void set_allocated_localizer(::metamoto::messages::Localizer* localizer);

  // .metamoto.messages.V2X v2x = 10;
  bool has_v2x() const;
  void clear_v2x();
  static const int kV2XFieldNumber = 10;
  private:
  const ::metamoto::messages::V2X& _internal_v2x() const;
  public:
  const ::metamoto::messages::V2X& v2x() const;
  ::metamoto::messages::V2X* release_v2x();
  ::metamoto::messages::V2X* mutable_v2x();
  void set_allocated_v2x(::metamoto::messages::V2X* v2x);

  // .metamoto.messages.Event event = 11;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 11;
  private:
  const ::metamoto::messages::Event& _internal_event() const;
  public:
  const ::metamoto::messages::Event& event() const;
  ::metamoto::messages::Event* release_event();
  ::metamoto::messages::Event* mutable_event();
  void set_allocated_event(::metamoto::messages::Event* event);

  // .metamoto.messages.Perception perception = 12;
  bool has_perception() const;
  void clear_perception();
  static const int kPerceptionFieldNumber = 12;
  private:
  const ::metamoto::messages::Perception& _internal_perception() const;
  public:
  const ::metamoto::messages::Perception& perception() const;
  ::metamoto::messages::Perception* release_perception();
  ::metamoto::messages::Perception* mutable_perception();
  void set_allocated_perception(::metamoto::messages::Perception* perception);

  // .metamoto.messages.GroundTruth ground_truth = 30;
  bool has_ground_truth() const;
  void clear_ground_truth();
  static const int kGroundTruthFieldNumber = 30;
  private:
  const ::metamoto::messages::GroundTruth& _internal_ground_truth() const;
  public:
  const ::metamoto::messages::GroundTruth& ground_truth() const;
  ::metamoto::messages::GroundTruth* release_ground_truth();
  ::metamoto::messages::GroundTruth* mutable_ground_truth();
  void set_allocated_ground_truth(::metamoto::messages::GroundTruth* ground_truth);

  // .google.protobuf.Any other = 100;
  bool has_other() const;
  void clear_other();
  static const int kOtherFieldNumber = 100;
  private:
  const ::google::protobuf::Any& _internal_other() const;
  public:
  const ::google::protobuf::Any& other() const;
  ::google::protobuf::Any* release_other();
  ::google::protobuf::Any* mutable_other();
  void set_allocated_other(::google::protobuf::Any* other);

  void clear_data_oneof();
  DataOneofCase data_oneof_case() const;
  // @@protoc_insertion_point(class_scope:metamoto.messages.DataBusMessage)
 private:
  void set_has_vehicle_state();
  void set_has_vehicle_controls();
  void set_has_camera();
  void set_has_lidar();
  void set_has_radar();
  void set_has_gps();
  void set_has_imu();
  void set_has_localizer();
  void set_has_v2x();
  void set_has_event();
  void set_has_perception();
  void set_has_ground_truth();
  void set_has_other();

  inline bool has_data_oneof() const;
  inline void clear_has_data_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::messages::Header* header_;
  union DataOneofUnion {
    DataOneofUnion() {}
    ::metamoto::messages::VehicleState* vehicle_state_;
    ::metamoto::messages::VehicleControls* vehicle_controls_;
    ::metamoto::messages::Camera* camera_;
    ::metamoto::messages::Lidar* lidar_;
    ::metamoto::messages::Radar* radar_;
    ::metamoto::messages::GPS* gps_;
    ::metamoto::messages::IMU* imu_;
    ::metamoto::messages::Localizer* localizer_;
    ::metamoto::messages::V2X* v2x_;
    ::metamoto::messages::Event* event_;
    ::metamoto::messages::Perception* perception_;
    ::metamoto::messages::GroundTruth* ground_truth_;
    ::google::protobuf::Any* other_;
  } data_oneof_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// double time = 1;
inline void Header::clear_time() {
  time_ = 0;
}
inline double Header::time() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Header.time)
  return time_;
}
inline void Header::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.Header.time)
}

// -------------------------------------------------------------------

// DataBusMessage

// .metamoto.messages.Header header = 1;
inline bool DataBusMessage::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DataBusMessage::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::metamoto::messages::Header& DataBusMessage::_internal_header() const {
  return *header_;
}
inline const ::metamoto::messages::Header& DataBusMessage::header() const {
  const ::metamoto::messages::Header* p = header_;
  // @@protoc_insertion_point(field_get:metamoto.messages.DataBusMessage.header)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::messages::Header*>(
      &::metamoto::messages::_Header_default_instance_);
}
inline ::metamoto::messages::Header* DataBusMessage::release_header() {
  // @@protoc_insertion_point(field_release:metamoto.messages.DataBusMessage.header)
  
  ::metamoto::messages::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::metamoto::messages::Header* DataBusMessage::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::messages::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.DataBusMessage.header)
  return header_;
}
inline void DataBusMessage::set_allocated_header(::metamoto::messages::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.DataBusMessage.header)
}

// .metamoto.messages.VehicleState vehicle_state = 2;
inline bool DataBusMessage::has_vehicle_state() const {
  return data_oneof_case() == kVehicleState;
}
inline void DataBusMessage::set_has_vehicle_state() {
  _oneof_case_[0] = kVehicleState;
}
inline const ::metamoto::messages::VehicleState& DataBusMessage::_internal_vehicle_state() const {
  return *data_oneof_.vehicle_state_;
}
inline ::metamoto::messages::VehicleState* DataBusMessage::release_vehicle_state() {
  // @@protoc_insertion_point(field_release:metamoto.messages.DataBusMessage.vehicle_state)
  if (has_vehicle_state()) {
    clear_has_data_oneof();
      ::metamoto::messages::VehicleState* temp = data_oneof_.vehicle_state_;
    data_oneof_.vehicle_state_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::messages::VehicleState& DataBusMessage::vehicle_state() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.DataBusMessage.vehicle_state)
  return has_vehicle_state()
      ? *data_oneof_.vehicle_state_
      : *reinterpret_cast< ::metamoto::messages::VehicleState*>(&::metamoto::messages::_VehicleState_default_instance_);
}
inline ::metamoto::messages::VehicleState* DataBusMessage::mutable_vehicle_state() {
  if (!has_vehicle_state()) {
    clear_data_oneof();
    set_has_vehicle_state();
    data_oneof_.vehicle_state_ = CreateMaybeMessage< ::metamoto::messages::VehicleState >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.DataBusMessage.vehicle_state)
  return data_oneof_.vehicle_state_;
}

// .metamoto.messages.VehicleControls vehicle_controls = 3;
inline bool DataBusMessage::has_vehicle_controls() const {
  return data_oneof_case() == kVehicleControls;
}
inline void DataBusMessage::set_has_vehicle_controls() {
  _oneof_case_[0] = kVehicleControls;
}
inline const ::metamoto::messages::VehicleControls& DataBusMessage::_internal_vehicle_controls() const {
  return *data_oneof_.vehicle_controls_;
}
inline ::metamoto::messages::VehicleControls* DataBusMessage::release_vehicle_controls() {
  // @@protoc_insertion_point(field_release:metamoto.messages.DataBusMessage.vehicle_controls)
  if (has_vehicle_controls()) {
    clear_has_data_oneof();
      ::metamoto::messages::VehicleControls* temp = data_oneof_.vehicle_controls_;
    data_oneof_.vehicle_controls_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::messages::VehicleControls& DataBusMessage::vehicle_controls() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.DataBusMessage.vehicle_controls)
  return has_vehicle_controls()
      ? *data_oneof_.vehicle_controls_
      : *reinterpret_cast< ::metamoto::messages::VehicleControls*>(&::metamoto::messages::_VehicleControls_default_instance_);
}
inline ::metamoto::messages::VehicleControls* DataBusMessage::mutable_vehicle_controls() {
  if (!has_vehicle_controls()) {
    clear_data_oneof();
    set_has_vehicle_controls();
    data_oneof_.vehicle_controls_ = CreateMaybeMessage< ::metamoto::messages::VehicleControls >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.DataBusMessage.vehicle_controls)
  return data_oneof_.vehicle_controls_;
}

// .metamoto.messages.Camera camera = 4;
inline bool DataBusMessage::has_camera() const {
  return data_oneof_case() == kCamera;
}
inline void DataBusMessage::set_has_camera() {
  _oneof_case_[0] = kCamera;
}
inline const ::metamoto::messages::Camera& DataBusMessage::_internal_camera() const {
  return *data_oneof_.camera_;
}
inline ::metamoto::messages::Camera* DataBusMessage::release_camera() {
  // @@protoc_insertion_point(field_release:metamoto.messages.DataBusMessage.camera)
  if (has_camera()) {
    clear_has_data_oneof();
      ::metamoto::messages::Camera* temp = data_oneof_.camera_;
    data_oneof_.camera_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::messages::Camera& DataBusMessage::camera() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.DataBusMessage.camera)
  return has_camera()
      ? *data_oneof_.camera_
      : *reinterpret_cast< ::metamoto::messages::Camera*>(&::metamoto::messages::_Camera_default_instance_);
}
inline ::metamoto::messages::Camera* DataBusMessage::mutable_camera() {
  if (!has_camera()) {
    clear_data_oneof();
    set_has_camera();
    data_oneof_.camera_ = CreateMaybeMessage< ::metamoto::messages::Camera >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.DataBusMessage.camera)
  return data_oneof_.camera_;
}

// .metamoto.messages.Lidar lidar = 5;
inline bool DataBusMessage::has_lidar() const {
  return data_oneof_case() == kLidar;
}
inline void DataBusMessage::set_has_lidar() {
  _oneof_case_[0] = kLidar;
}
inline const ::metamoto::messages::Lidar& DataBusMessage::_internal_lidar() const {
  return *data_oneof_.lidar_;
}
inline ::metamoto::messages::Lidar* DataBusMessage::release_lidar() {
  // @@protoc_insertion_point(field_release:metamoto.messages.DataBusMessage.lidar)
  if (has_lidar()) {
    clear_has_data_oneof();
      ::metamoto::messages::Lidar* temp = data_oneof_.lidar_;
    data_oneof_.lidar_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::messages::Lidar& DataBusMessage::lidar() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.DataBusMessage.lidar)
  return has_lidar()
      ? *data_oneof_.lidar_
      : *reinterpret_cast< ::metamoto::messages::Lidar*>(&::metamoto::messages::_Lidar_default_instance_);
}
inline ::metamoto::messages::Lidar* DataBusMessage::mutable_lidar() {
  if (!has_lidar()) {
    clear_data_oneof();
    set_has_lidar();
    data_oneof_.lidar_ = CreateMaybeMessage< ::metamoto::messages::Lidar >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.DataBusMessage.lidar)
  return data_oneof_.lidar_;
}

// .metamoto.messages.Radar radar = 6;
inline bool DataBusMessage::has_radar() const {
  return data_oneof_case() == kRadar;
}
inline void DataBusMessage::set_has_radar() {
  _oneof_case_[0] = kRadar;
}
inline const ::metamoto::messages::Radar& DataBusMessage::_internal_radar() const {
  return *data_oneof_.radar_;
}
inline ::metamoto::messages::Radar* DataBusMessage::release_radar() {
  // @@protoc_insertion_point(field_release:metamoto.messages.DataBusMessage.radar)
  if (has_radar()) {
    clear_has_data_oneof();
      ::metamoto::messages::Radar* temp = data_oneof_.radar_;
    data_oneof_.radar_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::messages::Radar& DataBusMessage::radar() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.DataBusMessage.radar)
  return has_radar()
      ? *data_oneof_.radar_
      : *reinterpret_cast< ::metamoto::messages::Radar*>(&::metamoto::messages::_Radar_default_instance_);
}
inline ::metamoto::messages::Radar* DataBusMessage::mutable_radar() {
  if (!has_radar()) {
    clear_data_oneof();
    set_has_radar();
    data_oneof_.radar_ = CreateMaybeMessage< ::metamoto::messages::Radar >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.DataBusMessage.radar)
  return data_oneof_.radar_;
}

// .metamoto.messages.GPS gps = 7;
inline bool DataBusMessage::has_gps() const {
  return data_oneof_case() == kGps;
}
inline void DataBusMessage::set_has_gps() {
  _oneof_case_[0] = kGps;
}
inline const ::metamoto::messages::GPS& DataBusMessage::_internal_gps() const {
  return *data_oneof_.gps_;
}
inline ::metamoto::messages::GPS* DataBusMessage::release_gps() {
  // @@protoc_insertion_point(field_release:metamoto.messages.DataBusMessage.gps)
  if (has_gps()) {
    clear_has_data_oneof();
      ::metamoto::messages::GPS* temp = data_oneof_.gps_;
    data_oneof_.gps_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::messages::GPS& DataBusMessage::gps() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.DataBusMessage.gps)
  return has_gps()
      ? *data_oneof_.gps_
      : *reinterpret_cast< ::metamoto::messages::GPS*>(&::metamoto::messages::_GPS_default_instance_);
}
inline ::metamoto::messages::GPS* DataBusMessage::mutable_gps() {
  if (!has_gps()) {
    clear_data_oneof();
    set_has_gps();
    data_oneof_.gps_ = CreateMaybeMessage< ::metamoto::messages::GPS >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.DataBusMessage.gps)
  return data_oneof_.gps_;
}

// .metamoto.messages.IMU imu = 8;
inline bool DataBusMessage::has_imu() const {
  return data_oneof_case() == kImu;
}
inline void DataBusMessage::set_has_imu() {
  _oneof_case_[0] = kImu;
}
inline const ::metamoto::messages::IMU& DataBusMessage::_internal_imu() const {
  return *data_oneof_.imu_;
}
inline ::metamoto::messages::IMU* DataBusMessage::release_imu() {
  // @@protoc_insertion_point(field_release:metamoto.messages.DataBusMessage.imu)
  if (has_imu()) {
    clear_has_data_oneof();
      ::metamoto::messages::IMU* temp = data_oneof_.imu_;
    data_oneof_.imu_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::messages::IMU& DataBusMessage::imu() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.DataBusMessage.imu)
  return has_imu()
      ? *data_oneof_.imu_
      : *reinterpret_cast< ::metamoto::messages::IMU*>(&::metamoto::messages::_IMU_default_instance_);
}
inline ::metamoto::messages::IMU* DataBusMessage::mutable_imu() {
  if (!has_imu()) {
    clear_data_oneof();
    set_has_imu();
    data_oneof_.imu_ = CreateMaybeMessage< ::metamoto::messages::IMU >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.DataBusMessage.imu)
  return data_oneof_.imu_;
}

// .metamoto.messages.Localizer localizer = 9;
inline bool DataBusMessage::has_localizer() const {
  return data_oneof_case() == kLocalizer;
}
inline void DataBusMessage::set_has_localizer() {
  _oneof_case_[0] = kLocalizer;
}
inline const ::metamoto::messages::Localizer& DataBusMessage::_internal_localizer() const {
  return *data_oneof_.localizer_;
}
inline ::metamoto::messages::Localizer* DataBusMessage::release_localizer() {
  // @@protoc_insertion_point(field_release:metamoto.messages.DataBusMessage.localizer)
  if (has_localizer()) {
    clear_has_data_oneof();
      ::metamoto::messages::Localizer* temp = data_oneof_.localizer_;
    data_oneof_.localizer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::messages::Localizer& DataBusMessage::localizer() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.DataBusMessage.localizer)
  return has_localizer()
      ? *data_oneof_.localizer_
      : *reinterpret_cast< ::metamoto::messages::Localizer*>(&::metamoto::messages::_Localizer_default_instance_);
}
inline ::metamoto::messages::Localizer* DataBusMessage::mutable_localizer() {
  if (!has_localizer()) {
    clear_data_oneof();
    set_has_localizer();
    data_oneof_.localizer_ = CreateMaybeMessage< ::metamoto::messages::Localizer >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.DataBusMessage.localizer)
  return data_oneof_.localizer_;
}

// .metamoto.messages.V2X v2x = 10;
inline bool DataBusMessage::has_v2x() const {
  return data_oneof_case() == kV2X;
}
inline void DataBusMessage::set_has_v2x() {
  _oneof_case_[0] = kV2X;
}
inline const ::metamoto::messages::V2X& DataBusMessage::_internal_v2x() const {
  return *data_oneof_.v2x_;
}
inline ::metamoto::messages::V2X* DataBusMessage::release_v2x() {
  // @@protoc_insertion_point(field_release:metamoto.messages.DataBusMessage.v2x)
  if (has_v2x()) {
    clear_has_data_oneof();
      ::metamoto::messages::V2X* temp = data_oneof_.v2x_;
    data_oneof_.v2x_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::messages::V2X& DataBusMessage::v2x() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.DataBusMessage.v2x)
  return has_v2x()
      ? *data_oneof_.v2x_
      : *reinterpret_cast< ::metamoto::messages::V2X*>(&::metamoto::messages::_V2X_default_instance_);
}
inline ::metamoto::messages::V2X* DataBusMessage::mutable_v2x() {
  if (!has_v2x()) {
    clear_data_oneof();
    set_has_v2x();
    data_oneof_.v2x_ = CreateMaybeMessage< ::metamoto::messages::V2X >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.DataBusMessage.v2x)
  return data_oneof_.v2x_;
}

// .metamoto.messages.Event event = 11;
inline bool DataBusMessage::has_event() const {
  return data_oneof_case() == kEvent;
}
inline void DataBusMessage::set_has_event() {
  _oneof_case_[0] = kEvent;
}
inline const ::metamoto::messages::Event& DataBusMessage::_internal_event() const {
  return *data_oneof_.event_;
}
inline ::metamoto::messages::Event* DataBusMessage::release_event() {
  // @@protoc_insertion_point(field_release:metamoto.messages.DataBusMessage.event)
  if (has_event()) {
    clear_has_data_oneof();
      ::metamoto::messages::Event* temp = data_oneof_.event_;
    data_oneof_.event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::messages::Event& DataBusMessage::event() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.DataBusMessage.event)
  return has_event()
      ? *data_oneof_.event_
      : *reinterpret_cast< ::metamoto::messages::Event*>(&::metamoto::messages::_Event_default_instance_);
}
inline ::metamoto::messages::Event* DataBusMessage::mutable_event() {
  if (!has_event()) {
    clear_data_oneof();
    set_has_event();
    data_oneof_.event_ = CreateMaybeMessage< ::metamoto::messages::Event >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.DataBusMessage.event)
  return data_oneof_.event_;
}

// .metamoto.messages.Perception perception = 12;
inline bool DataBusMessage::has_perception() const {
  return data_oneof_case() == kPerception;
}
inline void DataBusMessage::set_has_perception() {
  _oneof_case_[0] = kPerception;
}
inline const ::metamoto::messages::Perception& DataBusMessage::_internal_perception() const {
  return *data_oneof_.perception_;
}
inline ::metamoto::messages::Perception* DataBusMessage::release_perception() {
  // @@protoc_insertion_point(field_release:metamoto.messages.DataBusMessage.perception)
  if (has_perception()) {
    clear_has_data_oneof();
      ::metamoto::messages::Perception* temp = data_oneof_.perception_;
    data_oneof_.perception_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::messages::Perception& DataBusMessage::perception() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.DataBusMessage.perception)
  return has_perception()
      ? *data_oneof_.perception_
      : *reinterpret_cast< ::metamoto::messages::Perception*>(&::metamoto::messages::_Perception_default_instance_);
}
inline ::metamoto::messages::Perception* DataBusMessage::mutable_perception() {
  if (!has_perception()) {
    clear_data_oneof();
    set_has_perception();
    data_oneof_.perception_ = CreateMaybeMessage< ::metamoto::messages::Perception >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.DataBusMessage.perception)
  return data_oneof_.perception_;
}

// .metamoto.messages.GroundTruth ground_truth = 30;
inline bool DataBusMessage::has_ground_truth() const {
  return data_oneof_case() == kGroundTruth;
}
inline void DataBusMessage::set_has_ground_truth() {
  _oneof_case_[0] = kGroundTruth;
}
inline const ::metamoto::messages::GroundTruth& DataBusMessage::_internal_ground_truth() const {
  return *data_oneof_.ground_truth_;
}
inline ::metamoto::messages::GroundTruth* DataBusMessage::release_ground_truth() {
  // @@protoc_insertion_point(field_release:metamoto.messages.DataBusMessage.ground_truth)
  if (has_ground_truth()) {
    clear_has_data_oneof();
      ::metamoto::messages::GroundTruth* temp = data_oneof_.ground_truth_;
    data_oneof_.ground_truth_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::messages::GroundTruth& DataBusMessage::ground_truth() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.DataBusMessage.ground_truth)
  return has_ground_truth()
      ? *data_oneof_.ground_truth_
      : *reinterpret_cast< ::metamoto::messages::GroundTruth*>(&::metamoto::messages::_GroundTruth_default_instance_);
}
inline ::metamoto::messages::GroundTruth* DataBusMessage::mutable_ground_truth() {
  if (!has_ground_truth()) {
    clear_data_oneof();
    set_has_ground_truth();
    data_oneof_.ground_truth_ = CreateMaybeMessage< ::metamoto::messages::GroundTruth >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.DataBusMessage.ground_truth)
  return data_oneof_.ground_truth_;
}

// .google.protobuf.Any other = 100;
inline bool DataBusMessage::has_other() const {
  return data_oneof_case() == kOther;
}
inline void DataBusMessage::set_has_other() {
  _oneof_case_[0] = kOther;
}
inline const ::google::protobuf::Any& DataBusMessage::_internal_other() const {
  return *data_oneof_.other_;
}
inline ::google::protobuf::Any* DataBusMessage::release_other() {
  // @@protoc_insertion_point(field_release:metamoto.messages.DataBusMessage.other)
  if (has_other()) {
    clear_has_data_oneof();
      ::google::protobuf::Any* temp = data_oneof_.other_;
    data_oneof_.other_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Any& DataBusMessage::other() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.DataBusMessage.other)
  return has_other()
      ? *data_oneof_.other_
      : *reinterpret_cast< ::google::protobuf::Any*>(&::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* DataBusMessage::mutable_other() {
  if (!has_other()) {
    clear_data_oneof();
    set_has_other();
    data_oneof_.other_ = CreateMaybeMessage< ::google::protobuf::Any >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.DataBusMessage.other)
  return data_oneof_.other_;
}

inline bool DataBusMessage::has_data_oneof() const {
  return data_oneof_case() != DATA_ONEOF_NOT_SET;
}
inline void DataBusMessage::clear_has_data_oneof() {
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}
inline DataBusMessage::DataOneofCase DataBusMessage::data_oneof_case() const {
  return DataBusMessage::DataOneofCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto
