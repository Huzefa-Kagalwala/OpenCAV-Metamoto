// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/messages/vehicle_state.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2fmessages_2fvehicle_5fstate_2eproto
#define PROTOBUF_INCLUDED_metamoto_2fmessages_2fvehicle_5fstate_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/pose.pb.h"
#include "metamoto/types/roads.pb.h"
#include "metamoto/types/vehicle.pb.h"
#include "metamoto/types/velocity.pb.h"
#include "metamoto/types/acceleration.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto 

namespace protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto
namespace metamoto {
namespace messages {
class VehicleState;
class VehicleStateDefaultTypeInternal;
extern VehicleStateDefaultTypeInternal _VehicleState_default_instance_;
class VehicleState_WheelState;
class VehicleState_WheelStateDefaultTypeInternal;
extern VehicleState_WheelStateDefaultTypeInternal _VehicleState_WheelState_default_instance_;
}  // namespace messages
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::messages::VehicleState* Arena::CreateMaybeMessage<::metamoto::messages::VehicleState>(Arena*);
template<> ::metamoto::messages::VehicleState_WheelState* Arena::CreateMaybeMessage<::metamoto::messages::VehicleState_WheelState>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace messages {

// ===================================================================

class VehicleState_WheelState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.messages.VehicleState.WheelState) */ {
 public:
  VehicleState_WheelState();
  virtual ~VehicleState_WheelState();

  VehicleState_WheelState(const VehicleState_WheelState& from);

  inline VehicleState_WheelState& operator=(const VehicleState_WheelState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleState_WheelState(VehicleState_WheelState&& from) noexcept
    : VehicleState_WheelState() {
    *this = ::std::move(from);
  }

  inline VehicleState_WheelState& operator=(VehicleState_WheelState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleState_WheelState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleState_WheelState* internal_default_instance() {
    return reinterpret_cast<const VehicleState_WheelState*>(
               &_VehicleState_WheelState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VehicleState_WheelState* other);
  friend void swap(VehicleState_WheelState& a, VehicleState_WheelState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleState_WheelState* New() const final {
    return CreateMaybeMessage<VehicleState_WheelState>(NULL);
  }

  VehicleState_WheelState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleState_WheelState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleState_WheelState& from);
  void MergeFrom(const VehicleState_WheelState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleState_WheelState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float angular_velocity = 1;
  void clear_angular_velocity();
  static const int kAngularVelocityFieldNumber = 1;
  float angular_velocity() const;
  void set_angular_velocity(float value);

  // float steer_angle = 2;
  void clear_steer_angle();
  static const int kSteerAngleFieldNumber = 2;
  float steer_angle() const;
  void set_steer_angle(float value);

  // @@protoc_insertion_point(class_scope:metamoto.messages.VehicleState.WheelState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float angular_velocity_;
  float steer_angle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.messages.VehicleState) */ {
 public:
  VehicleState();
  virtual ~VehicleState();

  VehicleState(const VehicleState& from);

  inline VehicleState& operator=(const VehicleState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleState(VehicleState&& from) noexcept
    : VehicleState() {
    *this = ::std::move(from);
  }

  inline VehicleState& operator=(VehicleState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleState* internal_default_instance() {
    return reinterpret_cast<const VehicleState*>(
               &_VehicleState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(VehicleState* other);
  friend void swap(VehicleState& a, VehicleState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleState* New() const final {
    return CreateMaybeMessage<VehicleState>(NULL);
  }

  VehicleState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleState& from);
  void MergeFrom(const VehicleState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VehicleState_WheelState WheelState;

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.RoadPoint road_point = 4;
  int road_point_size() const;
  void clear_road_point();
  static const int kRoadPointFieldNumber = 4;
  ::metamoto::types::RoadPoint* mutable_road_point(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::RoadPoint >*
      mutable_road_point();
  const ::metamoto::types::RoadPoint& road_point(int index) const;
  ::metamoto::types::RoadPoint* add_road_point();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::RoadPoint >&
      road_point() const;

  // repeated .metamoto.messages.VehicleState.WheelState wheels = 15;
  int wheels_size() const;
  void clear_wheels();
  static const int kWheelsFieldNumber = 15;
  ::metamoto::messages::VehicleState_WheelState* mutable_wheels(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::messages::VehicleState_WheelState >*
      mutable_wheels();
  const ::metamoto::messages::VehicleState_WheelState& wheels(int index) const;
  ::metamoto::messages::VehicleState_WheelState* add_wheels();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::messages::VehicleState_WheelState >&
      wheels() const;

  // repeated float other_state = 16;
  int other_state_size() const;
  void clear_other_state();
  static const int kOtherStateFieldNumber = 16;
  float other_state(int index) const;
  void set_other_state(int index, float value);
  void add_other_state(float value);
  const ::google::protobuf::RepeatedField< float >&
      other_state() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_other_state();

  // .metamoto.types.Pose pose = 1;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 1;
  private:
  const ::metamoto::types::Pose& _internal_pose() const;
  public:
  const ::metamoto::types::Pose& pose() const;
  ::metamoto::types::Pose* release_pose();
  ::metamoto::types::Pose* mutable_pose();
  void set_allocated_pose(::metamoto::types::Pose* pose);

  // .metamoto.types.Velocity velocity = 2;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  private:
  const ::metamoto::types::Velocity& _internal_velocity() const;
  public:
  const ::metamoto::types::Velocity& velocity() const;
  ::metamoto::types::Velocity* release_velocity();
  ::metamoto::types::Velocity* mutable_velocity();
  void set_allocated_velocity(::metamoto::types::Velocity* velocity);

  // .metamoto.types.Acceleration acceleration = 3;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 3;
  private:
  const ::metamoto::types::Acceleration& _internal_acceleration() const;
  public:
  const ::metamoto::types::Acceleration& acceleration() const;
  ::metamoto::types::Acceleration* release_acceleration();
  ::metamoto::types::Acceleration* mutable_acceleration();
  void set_allocated_acceleration(::metamoto::types::Acceleration* acceleration);

  // float steer_angle = 5;
  void clear_steer_angle();
  static const int kSteerAngleFieldNumber = 5;
  float steer_angle() const;
  void set_steer_angle(float value);

  // float throttle = 6;
  void clear_throttle();
  static const int kThrottleFieldNumber = 6;
  float throttle() const;
  void set_throttle(float value);

  // float brake = 7;
  void clear_brake();
  static const int kBrakeFieldNumber = 7;
  float brake() const;
  void set_brake(float value);

  // float speed = 8;
  void clear_speed();
  static const int kSpeedFieldNumber = 8;
  float speed() const;
  void set_speed(float value);

  // .metamoto.types.Vehicle.GearSelector gear_selector = 9;
  void clear_gear_selector();
  static const int kGearSelectorFieldNumber = 9;
  ::metamoto::types::Vehicle_GearSelector gear_selector() const;
  void set_gear_selector(::metamoto::types::Vehicle_GearSelector value);

  // int32 gear = 10;
  void clear_gear();
  static const int kGearFieldNumber = 10;
  ::google::protobuf::int32 gear() const;
  void set_gear(::google::protobuf::int32 value);

  // float rpm = 11;
  void clear_rpm();
  static const int kRpmFieldNumber = 11;
  float rpm() const;
  void set_rpm(float value);

  // .metamoto.types.Vehicle.SignalLightState turn_signal = 12;
  void clear_turn_signal();
  static const int kTurnSignalFieldNumber = 12;
  ::metamoto::types::Vehicle_SignalLightState turn_signal() const;
  void set_turn_signal(::metamoto::types::Vehicle_SignalLightState value);

  // .metamoto.types.Vehicle.LightState head_lights = 13;
  void clear_head_lights();
  static const int kHeadLightsFieldNumber = 13;
  ::metamoto::types::Vehicle_LightState head_lights() const;
  void set_head_lights(::metamoto::types::Vehicle_LightState value);

  // @@protoc_insertion_point(class_scope:metamoto.messages.VehicleState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::RoadPoint > road_point_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::messages::VehicleState_WheelState > wheels_;
  ::google::protobuf::RepeatedField< float > other_state_;
  mutable int _other_state_cached_byte_size_;
  ::metamoto::types::Pose* pose_;
  ::metamoto::types::Velocity* velocity_;
  ::metamoto::types::Acceleration* acceleration_;
  float steer_angle_;
  float throttle_;
  float brake_;
  float speed_;
  int gear_selector_;
  ::google::protobuf::int32 gear_;
  float rpm_;
  int turn_signal_;
  int head_lights_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleState_WheelState

// float angular_velocity = 1;
inline void VehicleState_WheelState::clear_angular_velocity() {
  angular_velocity_ = 0;
}
inline float VehicleState_WheelState::angular_velocity() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.VehicleState.WheelState.angular_velocity)
  return angular_velocity_;
}
inline void VehicleState_WheelState::set_angular_velocity(float value) {
  
  angular_velocity_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.VehicleState.WheelState.angular_velocity)
}

// float steer_angle = 2;
inline void VehicleState_WheelState::clear_steer_angle() {
  steer_angle_ = 0;
}
inline float VehicleState_WheelState::steer_angle() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.VehicleState.WheelState.steer_angle)
  return steer_angle_;
}
inline void VehicleState_WheelState::set_steer_angle(float value) {
  
  steer_angle_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.VehicleState.WheelState.steer_angle)
}

// -------------------------------------------------------------------

// VehicleState

// .metamoto.types.Pose pose = 1;
inline bool VehicleState::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::metamoto::types::Pose& VehicleState::_internal_pose() const {
  return *pose_;
}
inline const ::metamoto::types::Pose& VehicleState::pose() const {
  const ::metamoto::types::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:metamoto.messages.VehicleState.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Pose*>(
      &::metamoto::types::_Pose_default_instance_);
}
inline ::metamoto::types::Pose* VehicleState::release_pose() {
  // @@protoc_insertion_point(field_release:metamoto.messages.VehicleState.pose)
  
  ::metamoto::types::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::metamoto::types::Pose* VehicleState::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.VehicleState.pose)
  return pose_;
}
inline void VehicleState::set_allocated_pose(::metamoto::types::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.VehicleState.pose)
}

// .metamoto.types.Velocity velocity = 2;
inline bool VehicleState::has_velocity() const {
  return this != internal_default_instance() && velocity_ != NULL;
}
inline const ::metamoto::types::Velocity& VehicleState::_internal_velocity() const {
  return *velocity_;
}
inline const ::metamoto::types::Velocity& VehicleState::velocity() const {
  const ::metamoto::types::Velocity* p = velocity_;
  // @@protoc_insertion_point(field_get:metamoto.messages.VehicleState.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Velocity*>(
      &::metamoto::types::_Velocity_default_instance_);
}
inline ::metamoto::types::Velocity* VehicleState::release_velocity() {
  // @@protoc_insertion_point(field_release:metamoto.messages.VehicleState.velocity)
  
  ::metamoto::types::Velocity* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline ::metamoto::types::Velocity* VehicleState::mutable_velocity() {
  
  if (velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Velocity>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.VehicleState.velocity)
  return velocity_;
}
inline void VehicleState::set_allocated_velocity(::metamoto::types::Velocity* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.VehicleState.velocity)
}

// .metamoto.types.Acceleration acceleration = 3;
inline bool VehicleState::has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != NULL;
}
inline const ::metamoto::types::Acceleration& VehicleState::_internal_acceleration() const {
  return *acceleration_;
}
inline const ::metamoto::types::Acceleration& VehicleState::acceleration() const {
  const ::metamoto::types::Acceleration* p = acceleration_;
  // @@protoc_insertion_point(field_get:metamoto.messages.VehicleState.acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Acceleration*>(
      &::metamoto::types::_Acceleration_default_instance_);
}
inline ::metamoto::types::Acceleration* VehicleState::release_acceleration() {
  // @@protoc_insertion_point(field_release:metamoto.messages.VehicleState.acceleration)
  
  ::metamoto::types::Acceleration* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
inline ::metamoto::types::Acceleration* VehicleState::mutable_acceleration() {
  
  if (acceleration_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Acceleration>(GetArenaNoVirtual());
    acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.VehicleState.acceleration)
  return acceleration_;
}
inline void VehicleState::set_allocated_acceleration(::metamoto::types::Acceleration* acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(acceleration_);
  }
  if (acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.VehicleState.acceleration)
}

// repeated .metamoto.types.RoadPoint road_point = 4;
inline int VehicleState::road_point_size() const {
  return road_point_.size();
}
inline ::metamoto::types::RoadPoint* VehicleState::mutable_road_point(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.messages.VehicleState.road_point)
  return road_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::RoadPoint >*
VehicleState::mutable_road_point() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.messages.VehicleState.road_point)
  return &road_point_;
}
inline const ::metamoto::types::RoadPoint& VehicleState::road_point(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.messages.VehicleState.road_point)
  return road_point_.Get(index);
}
inline ::metamoto::types::RoadPoint* VehicleState::add_road_point() {
  // @@protoc_insertion_point(field_add:metamoto.messages.VehicleState.road_point)
  return road_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::RoadPoint >&
VehicleState::road_point() const {
  // @@protoc_insertion_point(field_list:metamoto.messages.VehicleState.road_point)
  return road_point_;
}

// float steer_angle = 5;
inline void VehicleState::clear_steer_angle() {
  steer_angle_ = 0;
}
inline float VehicleState::steer_angle() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.VehicleState.steer_angle)
  return steer_angle_;
}
inline void VehicleState::set_steer_angle(float value) {
  
  steer_angle_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.VehicleState.steer_angle)
}

// float throttle = 6;
inline void VehicleState::clear_throttle() {
  throttle_ = 0;
}
inline float VehicleState::throttle() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.VehicleState.throttle)
  return throttle_;
}
inline void VehicleState::set_throttle(float value) {
  
  throttle_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.VehicleState.throttle)
}

// float brake = 7;
inline void VehicleState::clear_brake() {
  brake_ = 0;
}
inline float VehicleState::brake() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.VehicleState.brake)
  return brake_;
}
inline void VehicleState::set_brake(float value) {
  
  brake_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.VehicleState.brake)
}

// float speed = 8;
inline void VehicleState::clear_speed() {
  speed_ = 0;
}
inline float VehicleState::speed() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.VehicleState.speed)
  return speed_;
}
inline void VehicleState::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.VehicleState.speed)
}

// .metamoto.types.Vehicle.GearSelector gear_selector = 9;
inline void VehicleState::clear_gear_selector() {
  gear_selector_ = 0;
}
inline ::metamoto::types::Vehicle_GearSelector VehicleState::gear_selector() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.VehicleState.gear_selector)
  return static_cast< ::metamoto::types::Vehicle_GearSelector >(gear_selector_);
}
inline void VehicleState::set_gear_selector(::metamoto::types::Vehicle_GearSelector value) {
  
  gear_selector_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.VehicleState.gear_selector)
}

// int32 gear = 10;
inline void VehicleState::clear_gear() {
  gear_ = 0;
}
inline ::google::protobuf::int32 VehicleState::gear() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.VehicleState.gear)
  return gear_;
}
inline void VehicleState::set_gear(::google::protobuf::int32 value) {
  
  gear_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.VehicleState.gear)
}

// float rpm = 11;
inline void VehicleState::clear_rpm() {
  rpm_ = 0;
}
inline float VehicleState::rpm() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.VehicleState.rpm)
  return rpm_;
}
inline void VehicleState::set_rpm(float value) {
  
  rpm_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.VehicleState.rpm)
}

// .metamoto.types.Vehicle.SignalLightState turn_signal = 12;
inline void VehicleState::clear_turn_signal() {
  turn_signal_ = 0;
}
inline ::metamoto::types::Vehicle_SignalLightState VehicleState::turn_signal() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.VehicleState.turn_signal)
  return static_cast< ::metamoto::types::Vehicle_SignalLightState >(turn_signal_);
}
inline void VehicleState::set_turn_signal(::metamoto::types::Vehicle_SignalLightState value) {
  
  turn_signal_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.VehicleState.turn_signal)
}

// .metamoto.types.Vehicle.LightState head_lights = 13;
inline void VehicleState::clear_head_lights() {
  head_lights_ = 0;
}
inline ::metamoto::types::Vehicle_LightState VehicleState::head_lights() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.VehicleState.head_lights)
  return static_cast< ::metamoto::types::Vehicle_LightState >(head_lights_);
}
inline void VehicleState::set_head_lights(::metamoto::types::Vehicle_LightState value) {
  
  head_lights_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.VehicleState.head_lights)
}

// repeated .metamoto.messages.VehicleState.WheelState wheels = 15;
inline int VehicleState::wheels_size() const {
  return wheels_.size();
}
inline void VehicleState::clear_wheels() {
  wheels_.Clear();
}
inline ::metamoto::messages::VehicleState_WheelState* VehicleState::mutable_wheels(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.messages.VehicleState.wheels)
  return wheels_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::messages::VehicleState_WheelState >*
VehicleState::mutable_wheels() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.messages.VehicleState.wheels)
  return &wheels_;
}
inline const ::metamoto::messages::VehicleState_WheelState& VehicleState::wheels(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.messages.VehicleState.wheels)
  return wheels_.Get(index);
}
inline ::metamoto::messages::VehicleState_WheelState* VehicleState::add_wheels() {
  // @@protoc_insertion_point(field_add:metamoto.messages.VehicleState.wheels)
  return wheels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::messages::VehicleState_WheelState >&
VehicleState::wheels() const {
  // @@protoc_insertion_point(field_list:metamoto.messages.VehicleState.wheels)
  return wheels_;
}

// repeated float other_state = 16;
inline int VehicleState::other_state_size() const {
  return other_state_.size();
}
inline void VehicleState::clear_other_state() {
  other_state_.Clear();
}
inline float VehicleState::other_state(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.messages.VehicleState.other_state)
  return other_state_.Get(index);
}
inline void VehicleState::set_other_state(int index, float value) {
  other_state_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.messages.VehicleState.other_state)
}
inline void VehicleState::add_other_state(float value) {
  other_state_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.messages.VehicleState.other_state)
}
inline const ::google::protobuf::RepeatedField< float >&
VehicleState::other_state() const {
  // @@protoc_insertion_point(field_list:metamoto.messages.VehicleState.other_state)
  return other_state_;
}
inline ::google::protobuf::RepeatedField< float >*
VehicleState::mutable_other_state() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.messages.VehicleState.other_state)
  return &other_state_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2fmessages_2fvehicle_5fstate_2eproto
