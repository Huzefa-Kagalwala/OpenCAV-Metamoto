// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/messages/ground_truth.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2fmessages_2fground_5ftruth_2eproto
#define PROTOBUF_INCLUDED_metamoto_2fmessages_2fground_5ftruth_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/environment.pb.h"
#include "metamoto/types/pedestrian.pb.h"
#include "metamoto/types/traffic_sign.pb.h"
#include "metamoto/types/traffic_light.pb.h"
#include "metamoto/types/vehicle.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fground_5ftruth_2eproto 

namespace protobuf_metamoto_2fmessages_2fground_5ftruth_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2fmessages_2fground_5ftruth_2eproto
namespace metamoto {
namespace messages {
class GroundTruth;
class GroundTruthDefaultTypeInternal;
extern GroundTruthDefaultTypeInternal _GroundTruth_default_instance_;
}  // namespace messages
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::messages::GroundTruth* Arena::CreateMaybeMessage<::metamoto::messages::GroundTruth>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace messages {

// ===================================================================

class GroundTruth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.messages.GroundTruth) */ {
 public:
  GroundTruth();
  virtual ~GroundTruth();

  GroundTruth(const GroundTruth& from);

  inline GroundTruth& operator=(const GroundTruth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroundTruth(GroundTruth&& from) noexcept
    : GroundTruth() {
    *this = ::std::move(from);
  }

  inline GroundTruth& operator=(GroundTruth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroundTruth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroundTruth* internal_default_instance() {
    return reinterpret_cast<const GroundTruth*>(
               &_GroundTruth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GroundTruth* other);
  friend void swap(GroundTruth& a, GroundTruth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroundTruth* New() const final {
    return CreateMaybeMessage<GroundTruth>(NULL);
  }

  GroundTruth* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroundTruth>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GroundTruth& from);
  void MergeFrom(const GroundTruth& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroundTruth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.Vehicle vehicles = 3;
  int vehicles_size() const;
  void clear_vehicles();
  static const int kVehiclesFieldNumber = 3;
  ::metamoto::types::Vehicle* mutable_vehicles(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vehicle >*
      mutable_vehicles();
  const ::metamoto::types::Vehicle& vehicles(int index) const;
  ::metamoto::types::Vehicle* add_vehicles();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vehicle >&
      vehicles() const;

  // repeated .metamoto.types.Pedestrian pedestrians = 4;
  int pedestrians_size() const;
  void clear_pedestrians();
  static const int kPedestriansFieldNumber = 4;
  ::metamoto::types::Pedestrian* mutable_pedestrians(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Pedestrian >*
      mutable_pedestrians();
  const ::metamoto::types::Pedestrian& pedestrians(int index) const;
  ::metamoto::types::Pedestrian* add_pedestrians();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Pedestrian >&
      pedestrians() const;

  // repeated .metamoto.types.TrafficLight traffic_lights = 5;
  int traffic_lights_size() const;
  void clear_traffic_lights();
  static const int kTrafficLightsFieldNumber = 5;
  ::metamoto::types::TrafficLight* mutable_traffic_lights(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TrafficLight >*
      mutable_traffic_lights();
  const ::metamoto::types::TrafficLight& traffic_lights(int index) const;
  ::metamoto::types::TrafficLight* add_traffic_lights();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TrafficLight >&
      traffic_lights() const;

  // repeated .metamoto.types.TrafficSign traffic_signs = 6;
  int traffic_signs_size() const;
  void clear_traffic_signs();
  static const int kTrafficSignsFieldNumber = 6;
  ::metamoto::types::TrafficSign* mutable_traffic_signs(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TrafficSign >*
      mutable_traffic_signs();
  const ::metamoto::types::TrafficSign& traffic_signs(int index) const;
  ::metamoto::types::TrafficSign* add_traffic_signs();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TrafficSign >&
      traffic_signs() const;

  // repeated .metamoto.types.Vehicle ego_vehicles = 7;
  int ego_vehicles_size() const;
  void clear_ego_vehicles();
  static const int kEgoVehiclesFieldNumber = 7;
  ::metamoto::types::Vehicle* mutable_ego_vehicles(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vehicle >*
      mutable_ego_vehicles();
  const ::metamoto::types::Vehicle& ego_vehicles(int index) const;
  ::metamoto::types::Vehicle* add_ego_vehicles();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vehicle >&
      ego_vehicles() const;

  // .metamoto.types.Environment environment = 1;
  bool has_environment() const;
  void clear_environment();
  static const int kEnvironmentFieldNumber = 1;
  private:
  const ::metamoto::types::Environment& _internal_environment() const;
  public:
  const ::metamoto::types::Environment& environment() const;
  ::metamoto::types::Environment* release_environment();
  ::metamoto::types::Environment* mutable_environment();
  void set_allocated_environment(::metamoto::types::Environment* environment);

  // .metamoto.types.Vehicle ego_vehicle = 2;
  bool has_ego_vehicle() const;
  void clear_ego_vehicle();
  static const int kEgoVehicleFieldNumber = 2;
  private:
  const ::metamoto::types::Vehicle& _internal_ego_vehicle() const;
  public:
  const ::metamoto::types::Vehicle& ego_vehicle() const;
  ::metamoto::types::Vehicle* release_ego_vehicle();
  ::metamoto::types::Vehicle* mutable_ego_vehicle();
  void set_allocated_ego_vehicle(::metamoto::types::Vehicle* ego_vehicle);

  // @@protoc_insertion_point(class_scope:metamoto.messages.GroundTruth)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vehicle > vehicles_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Pedestrian > pedestrians_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TrafficLight > traffic_lights_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TrafficSign > traffic_signs_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vehicle > ego_vehicles_;
  ::metamoto::types::Environment* environment_;
  ::metamoto::types::Vehicle* ego_vehicle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fmessages_2fground_5ftruth_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GroundTruth

// .metamoto.types.Environment environment = 1;
inline bool GroundTruth::has_environment() const {
  return this != internal_default_instance() && environment_ != NULL;
}
inline const ::metamoto::types::Environment& GroundTruth::_internal_environment() const {
  return *environment_;
}
inline const ::metamoto::types::Environment& GroundTruth::environment() const {
  const ::metamoto::types::Environment* p = environment_;
  // @@protoc_insertion_point(field_get:metamoto.messages.GroundTruth.environment)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Environment*>(
      &::metamoto::types::_Environment_default_instance_);
}
inline ::metamoto::types::Environment* GroundTruth::release_environment() {
  // @@protoc_insertion_point(field_release:metamoto.messages.GroundTruth.environment)
  
  ::metamoto::types::Environment* temp = environment_;
  environment_ = NULL;
  return temp;
}
inline ::metamoto::types::Environment* GroundTruth::mutable_environment() {
  
  if (environment_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Environment>(GetArenaNoVirtual());
    environment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.GroundTruth.environment)
  return environment_;
}
inline void GroundTruth::set_allocated_environment(::metamoto::types::Environment* environment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(environment_);
  }
  if (environment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      environment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, environment, submessage_arena);
    }
    
  } else {
    
  }
  environment_ = environment;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.GroundTruth.environment)
}

// .metamoto.types.Vehicle ego_vehicle = 2;
inline bool GroundTruth::has_ego_vehicle() const {
  return this != internal_default_instance() && ego_vehicle_ != NULL;
}
inline const ::metamoto::types::Vehicle& GroundTruth::_internal_ego_vehicle() const {
  return *ego_vehicle_;
}
inline const ::metamoto::types::Vehicle& GroundTruth::ego_vehicle() const {
  const ::metamoto::types::Vehicle* p = ego_vehicle_;
  // @@protoc_insertion_point(field_get:metamoto.messages.GroundTruth.ego_vehicle)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vehicle*>(
      &::metamoto::types::_Vehicle_default_instance_);
}
inline ::metamoto::types::Vehicle* GroundTruth::release_ego_vehicle() {
  // @@protoc_insertion_point(field_release:metamoto.messages.GroundTruth.ego_vehicle)
  
  ::metamoto::types::Vehicle* temp = ego_vehicle_;
  ego_vehicle_ = NULL;
  return temp;
}
inline ::metamoto::types::Vehicle* GroundTruth::mutable_ego_vehicle() {
  
  if (ego_vehicle_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vehicle>(GetArenaNoVirtual());
    ego_vehicle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.GroundTruth.ego_vehicle)
  return ego_vehicle_;
}
inline void GroundTruth::set_allocated_ego_vehicle(::metamoto::types::Vehicle* ego_vehicle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ego_vehicle_);
  }
  if (ego_vehicle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ego_vehicle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ego_vehicle, submessage_arena);
    }
    
  } else {
    
  }
  ego_vehicle_ = ego_vehicle;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.GroundTruth.ego_vehicle)
}

// repeated .metamoto.types.Vehicle vehicles = 3;
inline int GroundTruth::vehicles_size() const {
  return vehicles_.size();
}
inline ::metamoto::types::Vehicle* GroundTruth::mutable_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.messages.GroundTruth.vehicles)
  return vehicles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vehicle >*
GroundTruth::mutable_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.messages.GroundTruth.vehicles)
  return &vehicles_;
}
inline const ::metamoto::types::Vehicle& GroundTruth::vehicles(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.messages.GroundTruth.vehicles)
  return vehicles_.Get(index);
}
inline ::metamoto::types::Vehicle* GroundTruth::add_vehicles() {
  // @@protoc_insertion_point(field_add:metamoto.messages.GroundTruth.vehicles)
  return vehicles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vehicle >&
GroundTruth::vehicles() const {
  // @@protoc_insertion_point(field_list:metamoto.messages.GroundTruth.vehicles)
  return vehicles_;
}

// repeated .metamoto.types.Pedestrian pedestrians = 4;
inline int GroundTruth::pedestrians_size() const {
  return pedestrians_.size();
}
inline ::metamoto::types::Pedestrian* GroundTruth::mutable_pedestrians(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.messages.GroundTruth.pedestrians)
  return pedestrians_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::Pedestrian >*
GroundTruth::mutable_pedestrians() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.messages.GroundTruth.pedestrians)
  return &pedestrians_;
}
inline const ::metamoto::types::Pedestrian& GroundTruth::pedestrians(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.messages.GroundTruth.pedestrians)
  return pedestrians_.Get(index);
}
inline ::metamoto::types::Pedestrian* GroundTruth::add_pedestrians() {
  // @@protoc_insertion_point(field_add:metamoto.messages.GroundTruth.pedestrians)
  return pedestrians_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Pedestrian >&
GroundTruth::pedestrians() const {
  // @@protoc_insertion_point(field_list:metamoto.messages.GroundTruth.pedestrians)
  return pedestrians_;
}

// repeated .metamoto.types.TrafficLight traffic_lights = 5;
inline int GroundTruth::traffic_lights_size() const {
  return traffic_lights_.size();
}
inline ::metamoto::types::TrafficLight* GroundTruth::mutable_traffic_lights(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.messages.GroundTruth.traffic_lights)
  return traffic_lights_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::TrafficLight >*
GroundTruth::mutable_traffic_lights() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.messages.GroundTruth.traffic_lights)
  return &traffic_lights_;
}
inline const ::metamoto::types::TrafficLight& GroundTruth::traffic_lights(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.messages.GroundTruth.traffic_lights)
  return traffic_lights_.Get(index);
}
inline ::metamoto::types::TrafficLight* GroundTruth::add_traffic_lights() {
  // @@protoc_insertion_point(field_add:metamoto.messages.GroundTruth.traffic_lights)
  return traffic_lights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TrafficLight >&
GroundTruth::traffic_lights() const {
  // @@protoc_insertion_point(field_list:metamoto.messages.GroundTruth.traffic_lights)
  return traffic_lights_;
}

// repeated .metamoto.types.TrafficSign traffic_signs = 6;
inline int GroundTruth::traffic_signs_size() const {
  return traffic_signs_.size();
}
inline ::metamoto::types::TrafficSign* GroundTruth::mutable_traffic_signs(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.messages.GroundTruth.traffic_signs)
  return traffic_signs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::TrafficSign >*
GroundTruth::mutable_traffic_signs() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.messages.GroundTruth.traffic_signs)
  return &traffic_signs_;
}
inline const ::metamoto::types::TrafficSign& GroundTruth::traffic_signs(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.messages.GroundTruth.traffic_signs)
  return traffic_signs_.Get(index);
}
inline ::metamoto::types::TrafficSign* GroundTruth::add_traffic_signs() {
  // @@protoc_insertion_point(field_add:metamoto.messages.GroundTruth.traffic_signs)
  return traffic_signs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TrafficSign >&
GroundTruth::traffic_signs() const {
  // @@protoc_insertion_point(field_list:metamoto.messages.GroundTruth.traffic_signs)
  return traffic_signs_;
}

// repeated .metamoto.types.Vehicle ego_vehicles = 7;
inline int GroundTruth::ego_vehicles_size() const {
  return ego_vehicles_.size();
}
inline ::metamoto::types::Vehicle* GroundTruth::mutable_ego_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.messages.GroundTruth.ego_vehicles)
  return ego_vehicles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vehicle >*
GroundTruth::mutable_ego_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.messages.GroundTruth.ego_vehicles)
  return &ego_vehicles_;
}
inline const ::metamoto::types::Vehicle& GroundTruth::ego_vehicles(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.messages.GroundTruth.ego_vehicles)
  return ego_vehicles_.Get(index);
}
inline ::metamoto::types::Vehicle* GroundTruth::add_ego_vehicles() {
  // @@protoc_insertion_point(field_add:metamoto.messages.GroundTruth.ego_vehicles)
  return ego_vehicles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vehicle >&
GroundTruth::ego_vehicles() const {
  // @@protoc_insertion_point(field_list:metamoto.messages.GroundTruth.ego_vehicles)
  return ego_vehicles_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2fmessages_2fground_5ftruth_2eproto
