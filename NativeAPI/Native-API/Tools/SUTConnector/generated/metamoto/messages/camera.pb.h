// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/messages/camera.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2fmessages_2fcamera_2eproto
#define PROTOBUF_INCLUDED_metamoto_2fmessages_2fcamera_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/image.pb.h"
#include "metamoto/types/camera_object.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fcamera_2eproto 

namespace protobuf_metamoto_2fmessages_2fcamera_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2fmessages_2fcamera_2eproto
namespace metamoto {
namespace messages {
class Camera;
class CameraDefaultTypeInternal;
extern CameraDefaultTypeInternal _Camera_default_instance_;
}  // namespace messages
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::messages::Camera* Arena::CreateMaybeMessage<::metamoto::messages::Camera>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace messages {

// ===================================================================

class Camera : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.messages.Camera) */ {
 public:
  Camera();
  virtual ~Camera();

  Camera(const Camera& from);

  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Camera(Camera&& from) noexcept
    : Camera() {
    *this = ::std::move(from);
  }

  inline Camera& operator=(Camera&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Camera& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Camera* internal_default_instance() {
    return reinterpret_cast<const Camera*>(
               &_Camera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Camera* other);
  friend void swap(Camera& a, Camera& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Camera* New() const final {
    return CreateMaybeMessage<Camera>(NULL);
  }

  Camera* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Camera>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Camera& from);
  void MergeFrom(const Camera& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Camera* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.CameraObject objects = 2;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 2;
  ::metamoto::types::CameraObject* mutable_objects(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::CameraObject >*
      mutable_objects();
  const ::metamoto::types::CameraObject& objects(int index) const;
  ::metamoto::types::CameraObject* add_objects();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::CameraObject >&
      objects() const;

  // repeated float K = 3;
  int k_size() const;
  void clear_k();
  static const int kKFieldNumber = 3;
  float k(int index) const;
  void set_k(int index, float value);
  void add_k(float value);
  const ::google::protobuf::RepeatedField< float >&
      k() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_k();

  // repeated float D = 4;
  int d_size() const;
  void clear_d();
  static const int kDFieldNumber = 4;
  float d(int index) const;
  void set_d(int index, float value);
  void add_d(float value);
  const ::google::protobuf::RepeatedField< float >&
      d() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_d();

  // repeated float P = 5;
  int p_size() const;
  void clear_p();
  static const int kPFieldNumber = 5;
  float p(int index) const;
  void set_p(int index, float value);
  void add_p(float value);
  const ::google::protobuf::RepeatedField< float >&
      p() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_p();

  // .metamoto.types.Image image = 1;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 1;
  private:
  const ::metamoto::types::Image& _internal_image() const;
  public:
  const ::metamoto::types::Image& image() const;
  ::metamoto::types::Image* release_image();
  ::metamoto::types::Image* mutable_image();
  void set_allocated_image(::metamoto::types::Image* image);

  // @@protoc_insertion_point(class_scope:metamoto.messages.Camera)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::CameraObject > objects_;
  ::google::protobuf::RepeatedField< float > k_;
  mutable int _k_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > d_;
  mutable int _d_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > p_;
  mutable int _p_cached_byte_size_;
  ::metamoto::types::Image* image_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fmessages_2fcamera_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Camera

// .metamoto.types.Image image = 1;
inline bool Camera::has_image() const {
  return this != internal_default_instance() && image_ != NULL;
}
inline const ::metamoto::types::Image& Camera::_internal_image() const {
  return *image_;
}
inline const ::metamoto::types::Image& Camera::image() const {
  const ::metamoto::types::Image* p = image_;
  // @@protoc_insertion_point(field_get:metamoto.messages.Camera.image)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Image*>(
      &::metamoto::types::_Image_default_instance_);
}
inline ::metamoto::types::Image* Camera::release_image() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Camera.image)
  
  ::metamoto::types::Image* temp = image_;
  image_ = NULL;
  return temp;
}
inline ::metamoto::types::Image* Camera::mutable_image() {
  
  if (image_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Image>(GetArenaNoVirtual());
    image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Camera.image)
  return image_;
}
inline void Camera::set_allocated_image(::metamoto::types::Image* image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(image_);
  }
  if (image) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Camera.image)
}

// repeated .metamoto.types.CameraObject objects = 2;
inline int Camera::objects_size() const {
  return objects_.size();
}
inline ::metamoto::types::CameraObject* Camera::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Camera.objects)
  return objects_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::CameraObject >*
Camera::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.messages.Camera.objects)
  return &objects_;
}
inline const ::metamoto::types::CameraObject& Camera::objects(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Camera.objects)
  return objects_.Get(index);
}
inline ::metamoto::types::CameraObject* Camera::add_objects() {
  // @@protoc_insertion_point(field_add:metamoto.messages.Camera.objects)
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::CameraObject >&
Camera::objects() const {
  // @@protoc_insertion_point(field_list:metamoto.messages.Camera.objects)
  return objects_;
}

// repeated float K = 3;
inline int Camera::k_size() const {
  return k_.size();
}
inline void Camera::clear_k() {
  k_.Clear();
}
inline float Camera::k(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Camera.K)
  return k_.Get(index);
}
inline void Camera::set_k(int index, float value) {
  k_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.messages.Camera.K)
}
inline void Camera::add_k(float value) {
  k_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.messages.Camera.K)
}
inline const ::google::protobuf::RepeatedField< float >&
Camera::k() const {
  // @@protoc_insertion_point(field_list:metamoto.messages.Camera.K)
  return k_;
}
inline ::google::protobuf::RepeatedField< float >*
Camera::mutable_k() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.messages.Camera.K)
  return &k_;
}

// repeated float D = 4;
inline int Camera::d_size() const {
  return d_.size();
}
inline void Camera::clear_d() {
  d_.Clear();
}
inline float Camera::d(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Camera.D)
  return d_.Get(index);
}
inline void Camera::set_d(int index, float value) {
  d_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.messages.Camera.D)
}
inline void Camera::add_d(float value) {
  d_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.messages.Camera.D)
}
inline const ::google::protobuf::RepeatedField< float >&
Camera::d() const {
  // @@protoc_insertion_point(field_list:metamoto.messages.Camera.D)
  return d_;
}
inline ::google::protobuf::RepeatedField< float >*
Camera::mutable_d() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.messages.Camera.D)
  return &d_;
}

// repeated float P = 5;
inline int Camera::p_size() const {
  return p_.size();
}
inline void Camera::clear_p() {
  p_.Clear();
}
inline float Camera::p(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Camera.P)
  return p_.Get(index);
}
inline void Camera::set_p(int index, float value) {
  p_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.messages.Camera.P)
}
inline void Camera::add_p(float value) {
  p_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.messages.Camera.P)
}
inline const ::google::protobuf::RepeatedField< float >&
Camera::p() const {
  // @@protoc_insertion_point(field_list:metamoto.messages.Camera.P)
  return p_;
}
inline ::google::protobuf::RepeatedField< float >*
Camera::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.messages.Camera.P)
  return &p_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2fmessages_2fcamera_2eproto
