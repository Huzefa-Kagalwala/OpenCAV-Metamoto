// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/messages/lidar.proto

#include "metamoto/messages/lidar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_metamoto_2ftypes_2flaser_5freturn_5fgroup_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2flaser_5freturn_5fgroup_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LaserReturnGroup;
}  // namespace protobuf_metamoto_2ftypes_2flaser_5freturn_5fgroup_2eproto
namespace metamoto {
namespace messages {
class LidarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lidar>
      _instance;
} _Lidar_default_instance_;
}  // namespace messages
}  // namespace metamoto
namespace protobuf_metamoto_2fmessages_2flidar_2eproto {
static void InitDefaultsLidar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::messages::_Lidar_default_instance_;
    new (ptr) ::metamoto::messages::Lidar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::messages::Lidar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Lidar =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLidar}, {
      &protobuf_metamoto_2ftypes_2flaser_5freturn_5fgroup_2eproto::scc_info_LaserReturnGroup.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Lidar.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Lidar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Lidar, time_increment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Lidar, groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Lidar, velodyne_pcap_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::messages::Lidar)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::messages::_Lidar_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/messages/lidar.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035metamoto/messages/lidar.proto\022\021metamot"
      "o.messages\032\'metamoto/types/laser_return_"
      "group.proto\"h\n\005Lidar\022\026\n\016time_increment\030\001"
      " \001(\001\0220\n\006groups\030\002 \003(\0132 .metamoto.types.La"
      "serReturnGroup\022\025\n\rvelodyne_pcap\030\003 \001(\014B\024\252"
      "\002\021Metamoto.Messagesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/messages/lidar.proto", &protobuf_RegisterTypes);
  ::protobuf_metamoto_2ftypes_2flaser_5freturn_5fgroup_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2fmessages_2flidar_2eproto
namespace metamoto {
namespace messages {

// ===================================================================

void Lidar::InitAsDefaultInstance() {
}
void Lidar::clear_groups() {
  groups_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lidar::kTimeIncrementFieldNumber;
const int Lidar::kGroupsFieldNumber;
const int Lidar::kVelodynePcapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lidar::Lidar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fmessages_2flidar_2eproto::scc_info_Lidar.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.messages.Lidar)
}
Lidar::Lidar(const Lidar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  velodyne_pcap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.velodyne_pcap().size() > 0) {
    velodyne_pcap_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.velodyne_pcap_);
  }
  time_increment_ = from.time_increment_;
  // @@protoc_insertion_point(copy_constructor:metamoto.messages.Lidar)
}

void Lidar::SharedCtor() {
  velodyne_pcap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_increment_ = 0;
}

Lidar::~Lidar() {
  // @@protoc_insertion_point(destructor:metamoto.messages.Lidar)
  SharedDtor();
}

void Lidar::SharedDtor() {
  velodyne_pcap_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Lidar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Lidar::descriptor() {
  ::protobuf_metamoto_2fmessages_2flidar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2flidar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lidar& Lidar::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fmessages_2flidar_2eproto::scc_info_Lidar.base);
  return *internal_default_instance();
}


void Lidar::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.messages.Lidar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  velodyne_pcap_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_increment_ = 0;
  _internal_metadata_.Clear();
}

bool Lidar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.messages.Lidar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double time_increment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_increment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.LaserReturnGroup groups = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes velodyne_pcap = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_velodyne_pcap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.messages.Lidar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.messages.Lidar)
  return false;
#undef DO_
}

void Lidar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.messages.Lidar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_increment = 1;
  if (this->time_increment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time_increment(), output);
  }

  // repeated .metamoto.types.LaserReturnGroup groups = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->groups(static_cast<int>(i)),
      output);
  }

  // bytes velodyne_pcap = 3;
  if (this->velodyne_pcap().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->velodyne_pcap(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.messages.Lidar)
}

::google::protobuf::uint8* Lidar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.messages.Lidar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_increment = 1;
  if (this->time_increment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time_increment(), target);
  }

  // repeated .metamoto.types.LaserReturnGroup groups = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->groups(static_cast<int>(i)), deterministic, target);
  }

  // bytes velodyne_pcap = 3;
  if (this->velodyne_pcap().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->velodyne_pcap(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.messages.Lidar)
  return target;
}

size_t Lidar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.messages.Lidar)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.LaserReturnGroup groups = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->groups(static_cast<int>(i)));
    }
  }

  // bytes velodyne_pcap = 3;
  if (this->velodyne_pcap().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->velodyne_pcap());
  }

  // double time_increment = 1;
  if (this->time_increment() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lidar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.messages.Lidar)
  GOOGLE_DCHECK_NE(&from, this);
  const Lidar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lidar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.messages.Lidar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.messages.Lidar)
    MergeFrom(*source);
  }
}

void Lidar::MergeFrom(const Lidar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.messages.Lidar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  if (from.velodyne_pcap().size() > 0) {

    velodyne_pcap_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.velodyne_pcap_);
  }
  if (from.time_increment() != 0) {
    set_time_increment(from.time_increment());
  }
}

void Lidar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.messages.Lidar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lidar::CopyFrom(const Lidar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.messages.Lidar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lidar::IsInitialized() const {
  return true;
}

void Lidar::Swap(Lidar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lidar::InternalSwap(Lidar* other) {
  using std::swap;
  CastToBase(&groups_)->InternalSwap(CastToBase(&other->groups_));
  velodyne_pcap_.Swap(&other->velodyne_pcap_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_increment_, other->time_increment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Lidar::GetMetadata() const {
  protobuf_metamoto_2fmessages_2flidar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2flidar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::messages::Lidar* Arena::CreateMaybeMessage< ::metamoto::messages::Lidar >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::messages::Lidar >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
