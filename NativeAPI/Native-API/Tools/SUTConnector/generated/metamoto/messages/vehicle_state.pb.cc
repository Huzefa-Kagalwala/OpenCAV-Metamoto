// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/messages/vehicle_state.proto

#include "metamoto/messages/vehicle_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VehicleState_WheelState;
}  // namespace protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto
namespace protobuf_metamoto_2ftypes_2facceleration_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2facceleration_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Acceleration;
}  // namespace protobuf_metamoto_2ftypes_2facceleration_2eproto
namespace protobuf_metamoto_2ftypes_2fpose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fpose_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Pose;
}  // namespace protobuf_metamoto_2ftypes_2fpose_2eproto
namespace protobuf_metamoto_2ftypes_2froads_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2froads_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RoadPoint;
}  // namespace protobuf_metamoto_2ftypes_2froads_2eproto
namespace protobuf_metamoto_2ftypes_2fvelocity_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fvelocity_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Velocity;
}  // namespace protobuf_metamoto_2ftypes_2fvelocity_2eproto
namespace metamoto {
namespace messages {
class VehicleState_WheelStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleState_WheelState>
      _instance;
} _VehicleState_WheelState_default_instance_;
class VehicleStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleState>
      _instance;
} _VehicleState_default_instance_;
}  // namespace messages
}  // namespace metamoto
namespace protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto {
static void InitDefaultsVehicleState_WheelState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::messages::_VehicleState_WheelState_default_instance_;
    new (ptr) ::metamoto::messages::VehicleState_WheelState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::messages::VehicleState_WheelState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VehicleState_WheelState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVehicleState_WheelState}, {}};

static void InitDefaultsVehicleState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::messages::_VehicleState_default_instance_;
    new (ptr) ::metamoto::messages::VehicleState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::messages::VehicleState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_VehicleState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsVehicleState}, {
      &protobuf_metamoto_2ftypes_2fpose_2eproto::scc_info_Pose.base,
      &protobuf_metamoto_2ftypes_2fvelocity_2eproto::scc_info_Velocity.base,
      &protobuf_metamoto_2ftypes_2facceleration_2eproto::scc_info_Acceleration.base,
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_RoadPoint.base,
      &protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto::scc_info_VehicleState_WheelState.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleState_WheelState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleState.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleState_WheelState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleState_WheelState, angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleState_WheelState, steer_angle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleState, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleState, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleState, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleState, road_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleState, steer_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleState, throttle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleState, brake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleState, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleState, gear_selector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleState, gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleState, rpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleState, turn_signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleState, head_lights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleState, wheels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleState, other_state_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::messages::VehicleState_WheelState)},
  { 7, -1, sizeof(::metamoto::messages::VehicleState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::messages::_VehicleState_WheelState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::messages::_VehicleState_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/messages/vehicle_state.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n%metamoto/messages/vehicle_state.proto\022"
      "\021metamoto.messages\032\031metamoto/types/pose."
      "proto\032\032metamoto/types/roads.proto\032\034metam"
      "oto/types/vehicle.proto\032\035metamoto/types/"
      "velocity.proto\032!metamoto/types/accelerat"
      "ion.proto\"\344\004\n\014VehicleState\022\"\n\004pose\030\001 \001(\013"
      "2\024.metamoto.types.Pose\022*\n\010velocity\030\002 \001(\013"
      "2\030.metamoto.types.Velocity\0222\n\014accelerati"
      "on\030\003 \001(\0132\034.metamoto.types.Acceleration\022-"
      "\n\nroad_point\030\004 \003(\0132\031.metamoto.types.Road"
      "Point\022\023\n\013steer_angle\030\005 \001(\002\022\020\n\010throttle\030\006"
      " \001(\002\022\r\n\005brake\030\007 \001(\002\022\r\n\005speed\030\010 \001(\002\022;\n\rge"
      "ar_selector\030\t \001(\0162$.metamoto.types.Vehic"
      "le.GearSelector\022\014\n\004gear\030\n \001(\005\022\013\n\003rpm\030\013 \001"
      "(\002\022=\n\013turn_signal\030\014 \001(\0162(.metamoto.types"
      ".Vehicle.SignalLightState\0227\n\013head_lights"
      "\030\r \001(\0162\".metamoto.types.Vehicle.LightSta"
      "te\022:\n\006wheels\030\017 \003(\0132*.metamoto.messages.V"
      "ehicleState.WheelState\022\023\n\013other_state\030\020 "
      "\003(\002\032;\n\nWheelState\022\030\n\020angular_velocity\030\001 "
      "\001(\002\022\023\n\013steer_angle\030\002 \001(\002B\024\252\002\021Metamoto.Me"
      "ssagesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 854);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/messages/vehicle_state.proto", &protobuf_RegisterTypes);
  ::protobuf_metamoto_2ftypes_2fpose_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2froads_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fvehicle_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fvelocity_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2facceleration_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto
namespace metamoto {
namespace messages {

// ===================================================================

void VehicleState_WheelState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleState_WheelState::kAngularVelocityFieldNumber;
const int VehicleState_WheelState::kSteerAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleState_WheelState::VehicleState_WheelState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto::scc_info_VehicleState_WheelState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.messages.VehicleState.WheelState)
}
VehicleState_WheelState::VehicleState_WheelState(const VehicleState_WheelState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&angular_velocity_, &from.angular_velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&steer_angle_) -
    reinterpret_cast<char*>(&angular_velocity_)) + sizeof(steer_angle_));
  // @@protoc_insertion_point(copy_constructor:metamoto.messages.VehicleState.WheelState)
}

void VehicleState_WheelState::SharedCtor() {
  ::memset(&angular_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_angle_) -
      reinterpret_cast<char*>(&angular_velocity_)) + sizeof(steer_angle_));
}

VehicleState_WheelState::~VehicleState_WheelState() {
  // @@protoc_insertion_point(destructor:metamoto.messages.VehicleState.WheelState)
  SharedDtor();
}

void VehicleState_WheelState::SharedDtor() {
}

void VehicleState_WheelState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleState_WheelState::descriptor() {
  ::protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleState_WheelState& VehicleState_WheelState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto::scc_info_VehicleState_WheelState.base);
  return *internal_default_instance();
}


void VehicleState_WheelState::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.messages.VehicleState.WheelState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&angular_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_angle_) -
      reinterpret_cast<char*>(&angular_velocity_)) + sizeof(steer_angle_));
  _internal_metadata_.Clear();
}

bool VehicleState_WheelState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.messages.VehicleState.WheelState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float angular_velocity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float steer_angle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steer_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.messages.VehicleState.WheelState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.messages.VehicleState.WheelState)
  return false;
#undef DO_
}

void VehicleState_WheelState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.messages.VehicleState.WheelState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float angular_velocity = 1;
  if (this->angular_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->angular_velocity(), output);
  }

  // float steer_angle = 2;
  if (this->steer_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->steer_angle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.messages.VehicleState.WheelState)
}

::google::protobuf::uint8* VehicleState_WheelState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.messages.VehicleState.WheelState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float angular_velocity = 1;
  if (this->angular_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->angular_velocity(), target);
  }

  // float steer_angle = 2;
  if (this->steer_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->steer_angle(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.messages.VehicleState.WheelState)
  return target;
}

size_t VehicleState_WheelState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.messages.VehicleState.WheelState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float angular_velocity = 1;
  if (this->angular_velocity() != 0) {
    total_size += 1 + 4;
  }

  // float steer_angle = 2;
  if (this->steer_angle() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleState_WheelState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.messages.VehicleState.WheelState)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleState_WheelState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleState_WheelState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.messages.VehicleState.WheelState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.messages.VehicleState.WheelState)
    MergeFrom(*source);
  }
}

void VehicleState_WheelState::MergeFrom(const VehicleState_WheelState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.messages.VehicleState.WheelState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.angular_velocity() != 0) {
    set_angular_velocity(from.angular_velocity());
  }
  if (from.steer_angle() != 0) {
    set_steer_angle(from.steer_angle());
  }
}

void VehicleState_WheelState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.messages.VehicleState.WheelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleState_WheelState::CopyFrom(const VehicleState_WheelState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.messages.VehicleState.WheelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleState_WheelState::IsInitialized() const {
  return true;
}

void VehicleState_WheelState::Swap(VehicleState_WheelState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleState_WheelState::InternalSwap(VehicleState_WheelState* other) {
  using std::swap;
  swap(angular_velocity_, other->angular_velocity_);
  swap(steer_angle_, other->steer_angle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleState_WheelState::GetMetadata() const {
  protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleState::InitAsDefaultInstance() {
  ::metamoto::messages::_VehicleState_default_instance_._instance.get_mutable()->pose_ = const_cast< ::metamoto::types::Pose*>(
      ::metamoto::types::Pose::internal_default_instance());
  ::metamoto::messages::_VehicleState_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::metamoto::types::Velocity*>(
      ::metamoto::types::Velocity::internal_default_instance());
  ::metamoto::messages::_VehicleState_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::metamoto::types::Acceleration*>(
      ::metamoto::types::Acceleration::internal_default_instance());
}
void VehicleState::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
void VehicleState::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
}
void VehicleState::clear_acceleration() {
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) {
    delete acceleration_;
  }
  acceleration_ = NULL;
}
void VehicleState::clear_road_point() {
  road_point_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleState::kPoseFieldNumber;
const int VehicleState::kVelocityFieldNumber;
const int VehicleState::kAccelerationFieldNumber;
const int VehicleState::kRoadPointFieldNumber;
const int VehicleState::kSteerAngleFieldNumber;
const int VehicleState::kThrottleFieldNumber;
const int VehicleState::kBrakeFieldNumber;
const int VehicleState::kSpeedFieldNumber;
const int VehicleState::kGearSelectorFieldNumber;
const int VehicleState::kGearFieldNumber;
const int VehicleState::kRpmFieldNumber;
const int VehicleState::kTurnSignalFieldNumber;
const int VehicleState::kHeadLightsFieldNumber;
const int VehicleState::kWheelsFieldNumber;
const int VehicleState::kOtherStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleState::VehicleState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto::scc_info_VehicleState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.messages.VehicleState)
}
VehicleState::VehicleState(const VehicleState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      road_point_(from.road_point_),
      wheels_(from.wheels_),
      other_state_(from.other_state_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::metamoto::types::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::metamoto::types::Velocity(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::metamoto::types::Acceleration(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  ::memcpy(&steer_angle_, &from.steer_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&head_lights_) -
    reinterpret_cast<char*>(&steer_angle_)) + sizeof(head_lights_));
  // @@protoc_insertion_point(copy_constructor:metamoto.messages.VehicleState)
}

void VehicleState::SharedCtor() {
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&head_lights_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(head_lights_));
}

VehicleState::~VehicleState() {
  // @@protoc_insertion_point(destructor:metamoto.messages.VehicleState)
  SharedDtor();
}

void VehicleState::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
}

void VehicleState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleState::descriptor() {
  ::protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleState& VehicleState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto::scc_info_VehicleState.base);
  return *internal_default_instance();
}


void VehicleState::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.messages.VehicleState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_point_.Clear();
  wheels_.Clear();
  other_state_.Clear();
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) {
    delete acceleration_;
  }
  acceleration_ = NULL;
  ::memset(&steer_angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&head_lights_) -
      reinterpret_cast<char*>(&steer_angle_)) + sizeof(head_lights_));
  _internal_metadata_.Clear();
}

bool VehicleState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.messages.VehicleState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.Pose pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Velocity velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Acceleration acceleration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.RoadPoint road_point = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_road_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float steer_angle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steer_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float throttle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float brake = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vehicle.GearSelector gear_selector = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gear_selector(static_cast< ::metamoto::types::Vehicle_GearSelector >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gear = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rpm = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vehicle.SignalLightState turn_signal = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_turn_signal(static_cast< ::metamoto::types::Vehicle_SignalLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vehicle.LightState head_lights = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_head_lights(static_cast< ::metamoto::types::Vehicle_LightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.messages.VehicleState.WheelState wheels = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_wheels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float other_state = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_other_state())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 130u, input, this->mutable_other_state())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.messages.VehicleState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.messages.VehicleState)
  return false;
#undef DO_
}

void VehicleState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.messages.VehicleState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Pose pose = 1;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pose(), output);
  }

  // .metamoto.types.Velocity velocity = 2;
  if (this->has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_velocity(), output);
  }

  // .metamoto.types.Acceleration acceleration = 3;
  if (this->has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_acceleration(), output);
  }

  // repeated .metamoto.types.RoadPoint road_point = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->road_point(static_cast<int>(i)),
      output);
  }

  // float steer_angle = 5;
  if (this->steer_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->steer_angle(), output);
  }

  // float throttle = 6;
  if (this->throttle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->throttle(), output);
  }

  // float brake = 7;
  if (this->brake() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->brake(), output);
  }

  // float speed = 8;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->speed(), output);
  }

  // .metamoto.types.Vehicle.GearSelector gear_selector = 9;
  if (this->gear_selector() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->gear_selector(), output);
  }

  // int32 gear = 10;
  if (this->gear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gear(), output);
  }

  // float rpm = 11;
  if (this->rpm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->rpm(), output);
  }

  // .metamoto.types.Vehicle.SignalLightState turn_signal = 12;
  if (this->turn_signal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->turn_signal(), output);
  }

  // .metamoto.types.Vehicle.LightState head_lights = 13;
  if (this->head_lights() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->head_lights(), output);
  }

  // repeated .metamoto.messages.VehicleState.WheelState wheels = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wheels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->wheels(static_cast<int>(i)),
      output);
  }

  // repeated float other_state = 16;
  if (this->other_state_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(16, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _other_state_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->other_state().data(), this->other_state_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.messages.VehicleState)
}

::google::protobuf::uint8* VehicleState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.messages.VehicleState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Pose pose = 1;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pose(), deterministic, target);
  }

  // .metamoto.types.Velocity velocity = 2;
  if (this->has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_velocity(), deterministic, target);
  }

  // .metamoto.types.Acceleration acceleration = 3;
  if (this->has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_acceleration(), deterministic, target);
  }

  // repeated .metamoto.types.RoadPoint road_point = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->road_point(static_cast<int>(i)), deterministic, target);
  }

  // float steer_angle = 5;
  if (this->steer_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->steer_angle(), target);
  }

  // float throttle = 6;
  if (this->throttle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->throttle(), target);
  }

  // float brake = 7;
  if (this->brake() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->brake(), target);
  }

  // float speed = 8;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->speed(), target);
  }

  // .metamoto.types.Vehicle.GearSelector gear_selector = 9;
  if (this->gear_selector() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->gear_selector(), target);
  }

  // int32 gear = 10;
  if (this->gear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gear(), target);
  }

  // float rpm = 11;
  if (this->rpm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->rpm(), target);
  }

  // .metamoto.types.Vehicle.SignalLightState turn_signal = 12;
  if (this->turn_signal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->turn_signal(), target);
  }

  // .metamoto.types.Vehicle.LightState head_lights = 13;
  if (this->head_lights() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->head_lights(), target);
  }

  // repeated .metamoto.messages.VehicleState.WheelState wheels = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wheels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->wheels(static_cast<int>(i)), deterministic, target);
  }

  // repeated float other_state = 16;
  if (this->other_state_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      16,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _other_state_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->other_state_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.messages.VehicleState)
  return target;
}

size_t VehicleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.messages.VehicleState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.RoadPoint road_point = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->road_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road_point(static_cast<int>(i)));
    }
  }

  // repeated .metamoto.messages.VehicleState.WheelState wheels = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->wheels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->wheels(static_cast<int>(i)));
    }
  }

  // repeated float other_state = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->other_state_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _other_state_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .metamoto.types.Pose pose = 1;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .metamoto.types.Velocity velocity = 2;
  if (this->has_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .metamoto.types.Acceleration acceleration = 3;
  if (this->has_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *acceleration_);
  }

  // float steer_angle = 5;
  if (this->steer_angle() != 0) {
    total_size += 1 + 4;
  }

  // float throttle = 6;
  if (this->throttle() != 0) {
    total_size += 1 + 4;
  }

  // float brake = 7;
  if (this->brake() != 0) {
    total_size += 1 + 4;
  }

  // float speed = 8;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // .metamoto.types.Vehicle.GearSelector gear_selector = 9;
  if (this->gear_selector() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_selector());
  }

  // int32 gear = 10;
  if (this->gear() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gear());
  }

  // float rpm = 11;
  if (this->rpm() != 0) {
    total_size += 1 + 4;
  }

  // .metamoto.types.Vehicle.SignalLightState turn_signal = 12;
  if (this->turn_signal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn_signal());
  }

  // .metamoto.types.Vehicle.LightState head_lights = 13;
  if (this->head_lights() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->head_lights());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.messages.VehicleState)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.messages.VehicleState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.messages.VehicleState)
    MergeFrom(*source);
  }
}

void VehicleState::MergeFrom(const VehicleState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.messages.VehicleState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_point_.MergeFrom(from.road_point_);
  wheels_.MergeFrom(from.wheels_);
  other_state_.MergeFrom(from.other_state_);
  if (from.has_pose()) {
    mutable_pose()->::metamoto::types::Pose::MergeFrom(from.pose());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::metamoto::types::Velocity::MergeFrom(from.velocity());
  }
  if (from.has_acceleration()) {
    mutable_acceleration()->::metamoto::types::Acceleration::MergeFrom(from.acceleration());
  }
  if (from.steer_angle() != 0) {
    set_steer_angle(from.steer_angle());
  }
  if (from.throttle() != 0) {
    set_throttle(from.throttle());
  }
  if (from.brake() != 0) {
    set_brake(from.brake());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.gear_selector() != 0) {
    set_gear_selector(from.gear_selector());
  }
  if (from.gear() != 0) {
    set_gear(from.gear());
  }
  if (from.rpm() != 0) {
    set_rpm(from.rpm());
  }
  if (from.turn_signal() != 0) {
    set_turn_signal(from.turn_signal());
  }
  if (from.head_lights() != 0) {
    set_head_lights(from.head_lights());
  }
}

void VehicleState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.messages.VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleState::CopyFrom(const VehicleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.messages.VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleState::IsInitialized() const {
  return true;
}

void VehicleState::Swap(VehicleState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleState::InternalSwap(VehicleState* other) {
  using std::swap;
  CastToBase(&road_point_)->InternalSwap(CastToBase(&other->road_point_));
  CastToBase(&wheels_)->InternalSwap(CastToBase(&other->wheels_));
  other_state_.InternalSwap(&other->other_state_);
  swap(pose_, other->pose_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
  swap(steer_angle_, other->steer_angle_);
  swap(throttle_, other->throttle_);
  swap(brake_, other->brake_);
  swap(speed_, other->speed_);
  swap(gear_selector_, other->gear_selector_);
  swap(gear_, other->gear_);
  swap(rpm_, other->rpm_);
  swap(turn_signal_, other->turn_signal_);
  swap(head_lights_, other->head_lights_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleState::GetMetadata() const {
  protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::messages::VehicleState_WheelState* Arena::CreateMaybeMessage< ::metamoto::messages::VehicleState_WheelState >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::messages::VehicleState_WheelState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::messages::VehicleState* Arena::CreateMaybeMessage< ::metamoto::messages::VehicleState >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::messages::VehicleState >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
