// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/messages/localizer.proto

#include "metamoto/messages/localizer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_metamoto_2fmessages_2flocalizer_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2flocalizer_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Uncertainty;
}  // namespace protobuf_metamoto_2fmessages_2flocalizer_2eproto
namespace protobuf_metamoto_2ftypes_2fquaternion_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fquaternion_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Quaternion;
}  // namespace protobuf_metamoto_2ftypes_2fquaternion_2eproto
namespace protobuf_metamoto_2ftypes_2fvector3_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fvector3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3;
}  // namespace protobuf_metamoto_2ftypes_2fvector3_2eproto
namespace metamoto {
namespace messages {
class LocalizerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Localizer>
      _instance;
} _Localizer_default_instance_;
class UncertaintyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Uncertainty>
      _instance;
} _Uncertainty_default_instance_;
}  // namespace messages
}  // namespace metamoto
namespace protobuf_metamoto_2fmessages_2flocalizer_2eproto {
static void InitDefaultsLocalizer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::messages::_Localizer_default_instance_;
    new (ptr) ::metamoto::messages::Localizer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::messages::Localizer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Localizer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLocalizer}, {
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,
      &protobuf_metamoto_2ftypes_2fquaternion_2eproto::scc_info_Quaternion.base,
      &protobuf_metamoto_2fmessages_2flocalizer_2eproto::scc_info_Uncertainty.base,}};

static void InitDefaultsUncertainty() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::messages::_Uncertainty_default_instance_;
    new (ptr) ::metamoto::messages::Uncertainty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::messages::Uncertainty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Uncertainty =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUncertainty}, {
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Localizer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Uncertainty.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Localizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Localizer, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Localizer, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Localizer, linear_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Localizer, linear_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Localizer, angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Localizer, uncertainty_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Uncertainty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Uncertainty, position_std_dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Uncertainty, orientation_axis_std_dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Uncertainty, orientation_angle_std_dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Uncertainty, linear_velocity_std_dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Uncertainty, linear_acceleration_std_dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Uncertainty, angular_velocity_std_dev_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::messages::Localizer)},
  { 11, -1, sizeof(::metamoto::messages::Uncertainty)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::messages::_Localizer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::messages::_Uncertainty_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/messages/localizer.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!metamoto/messages/localizer.proto\022\021met"
      "amoto.messages\032\037metamoto/types/quaternio"
      "n.proto\032\034metamoto/types/vector3.proto\"\267\002"
      "\n\tLocalizer\022)\n\010position\030\001 \001(\0132\027.metamoto"
      ".types.Vector3\022/\n\013orientation\030\002 \001(\0132\032.me"
      "tamoto.types.Quaternion\0220\n\017linear_veloci"
      "ty\030\003 \001(\0132\027.metamoto.types.Vector3\0224\n\023lin"
      "ear_acceleration\030\004 \001(\0132\027.metamoto.types."
      "Vector3\0221\n\020angular_velocity\030\005 \001(\0132\027.meta"
      "moto.types.Vector3\0223\n\013uncertainty\030\006 \001(\0132"
      "\036.metamoto.messages.Uncertainty\"\321\002\n\013Unce"
      "rtainty\0221\n\020position_std_dev\030\001 \001(\0132\027.meta"
      "moto.types.Vector3\0229\n\030orientation_axis_s"
      "td_dev\030\002 \001(\0132\027.metamoto.types.Vector3\022!\n"
      "\031orientation_angle_std_dev\030\003 \001(\002\0228\n\027line"
      "ar_velocity_std_dev\030\004 \001(\0132\027.metamoto.typ"
      "es.Vector3\022<\n\033linear_acceleration_std_de"
      "v\030\005 \001(\0132\027.metamoto.types.Vector3\0229\n\030angu"
      "lar_velocity_std_dev\030\006 \001(\0132\027.metamoto.ty"
      "pes.Vector3B\024\252\002\021Metamoto.Messagesb\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 801);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/messages/localizer.proto", &protobuf_RegisterTypes);
  ::protobuf_metamoto_2ftypes_2fquaternion_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fvector3_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2fmessages_2flocalizer_2eproto
namespace metamoto {
namespace messages {

// ===================================================================

void Localizer::InitAsDefaultInstance() {
  ::metamoto::messages::_Localizer_default_instance_._instance.get_mutable()->position_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
  ::metamoto::messages::_Localizer_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::metamoto::types::Quaternion*>(
      ::metamoto::types::Quaternion::internal_default_instance());
  ::metamoto::messages::_Localizer_default_instance_._instance.get_mutable()->linear_velocity_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
  ::metamoto::messages::_Localizer_default_instance_._instance.get_mutable()->linear_acceleration_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
  ::metamoto::messages::_Localizer_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
  ::metamoto::messages::_Localizer_default_instance_._instance.get_mutable()->uncertainty_ = const_cast< ::metamoto::messages::Uncertainty*>(
      ::metamoto::messages::Uncertainty::internal_default_instance());
}
void Localizer::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
void Localizer::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) {
    delete orientation_;
  }
  orientation_ = NULL;
}
void Localizer::clear_linear_velocity() {
  if (GetArenaNoVirtual() == NULL && linear_velocity_ != NULL) {
    delete linear_velocity_;
  }
  linear_velocity_ = NULL;
}
void Localizer::clear_linear_acceleration() {
  if (GetArenaNoVirtual() == NULL && linear_acceleration_ != NULL) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = NULL;
}
void Localizer::clear_angular_velocity() {
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) {
    delete angular_velocity_;
  }
  angular_velocity_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Localizer::kPositionFieldNumber;
const int Localizer::kOrientationFieldNumber;
const int Localizer::kLinearVelocityFieldNumber;
const int Localizer::kLinearAccelerationFieldNumber;
const int Localizer::kAngularVelocityFieldNumber;
const int Localizer::kUncertaintyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Localizer::Localizer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fmessages_2flocalizer_2eproto::scc_info_Localizer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.messages.Localizer)
}
Localizer::Localizer(const Localizer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::metamoto::types::Vector3(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_orientation()) {
    orientation_ = new ::metamoto::types::Quaternion(*from.orientation_);
  } else {
    orientation_ = NULL;
  }
  if (from.has_linear_velocity()) {
    linear_velocity_ = new ::metamoto::types::Vector3(*from.linear_velocity_);
  } else {
    linear_velocity_ = NULL;
  }
  if (from.has_linear_acceleration()) {
    linear_acceleration_ = new ::metamoto::types::Vector3(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::metamoto::types::Vector3(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  if (from.has_uncertainty()) {
    uncertainty_ = new ::metamoto::messages::Uncertainty(*from.uncertainty_);
  } else {
    uncertainty_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.messages.Localizer)
}

void Localizer::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uncertainty_) -
      reinterpret_cast<char*>(&position_)) + sizeof(uncertainty_));
}

Localizer::~Localizer() {
  // @@protoc_insertion_point(destructor:metamoto.messages.Localizer)
  SharedDtor();
}

void Localizer::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete linear_acceleration_;
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete uncertainty_;
}

void Localizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Localizer::descriptor() {
  ::protobuf_metamoto_2fmessages_2flocalizer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2flocalizer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Localizer& Localizer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fmessages_2flocalizer_2eproto::scc_info_Localizer.base);
  return *internal_default_instance();
}


void Localizer::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.messages.Localizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) {
    delete orientation_;
  }
  orientation_ = NULL;
  if (GetArenaNoVirtual() == NULL && linear_velocity_ != NULL) {
    delete linear_velocity_;
  }
  linear_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && linear_acceleration_ != NULL) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) {
    delete angular_velocity_;
  }
  angular_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && uncertainty_ != NULL) {
    delete uncertainty_;
  }
  uncertainty_ = NULL;
  _internal_metadata_.Clear();
}

bool Localizer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.messages.Localizer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.Vector3 position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Quaternion orientation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 linear_velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 linear_acceleration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 angular_velocity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.messages.Uncertainty uncertainty = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uncertainty()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.messages.Localizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.messages.Localizer)
  return false;
#undef DO_
}

void Localizer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.messages.Localizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Vector3 position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_position(), output);
  }

  // .metamoto.types.Quaternion orientation = 2;
  if (this->has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_orientation(), output);
  }

  // .metamoto.types.Vector3 linear_velocity = 3;
  if (this->has_linear_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_linear_velocity(), output);
  }

  // .metamoto.types.Vector3 linear_acceleration = 4;
  if (this->has_linear_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_linear_acceleration(), output);
  }

  // .metamoto.types.Vector3 angular_velocity = 5;
  if (this->has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_angular_velocity(), output);
  }

  // .metamoto.messages.Uncertainty uncertainty = 6;
  if (this->has_uncertainty()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_uncertainty(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.messages.Localizer)
}

::google::protobuf::uint8* Localizer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.messages.Localizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Vector3 position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_position(), deterministic, target);
  }

  // .metamoto.types.Quaternion orientation = 2;
  if (this->has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_orientation(), deterministic, target);
  }

  // .metamoto.types.Vector3 linear_velocity = 3;
  if (this->has_linear_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_linear_velocity(), deterministic, target);
  }

  // .metamoto.types.Vector3 linear_acceleration = 4;
  if (this->has_linear_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_linear_acceleration(), deterministic, target);
  }

  // .metamoto.types.Vector3 angular_velocity = 5;
  if (this->has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_angular_velocity(), deterministic, target);
  }

  // .metamoto.messages.Uncertainty uncertainty = 6;
  if (this->has_uncertainty()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_uncertainty(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.messages.Localizer)
  return target;
}

size_t Localizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.messages.Localizer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.Vector3 position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .metamoto.types.Quaternion orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // .metamoto.types.Vector3 linear_velocity = 3;
  if (this->has_linear_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linear_velocity_);
  }

  // .metamoto.types.Vector3 linear_acceleration = 4;
  if (this->has_linear_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linear_acceleration_);
  }

  // .metamoto.types.Vector3 angular_velocity = 5;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angular_velocity_);
  }

  // .metamoto.messages.Uncertainty uncertainty = 6;
  if (this->has_uncertainty()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *uncertainty_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Localizer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.messages.Localizer)
  GOOGLE_DCHECK_NE(&from, this);
  const Localizer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Localizer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.messages.Localizer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.messages.Localizer)
    MergeFrom(*source);
  }
}

void Localizer::MergeFrom(const Localizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.messages.Localizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::metamoto::types::Vector3::MergeFrom(from.position());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::metamoto::types::Quaternion::MergeFrom(from.orientation());
  }
  if (from.has_linear_velocity()) {
    mutable_linear_velocity()->::metamoto::types::Vector3::MergeFrom(from.linear_velocity());
  }
  if (from.has_linear_acceleration()) {
    mutable_linear_acceleration()->::metamoto::types::Vector3::MergeFrom(from.linear_acceleration());
  }
  if (from.has_angular_velocity()) {
    mutable_angular_velocity()->::metamoto::types::Vector3::MergeFrom(from.angular_velocity());
  }
  if (from.has_uncertainty()) {
    mutable_uncertainty()->::metamoto::messages::Uncertainty::MergeFrom(from.uncertainty());
  }
}

void Localizer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.messages.Localizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Localizer::CopyFrom(const Localizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.messages.Localizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Localizer::IsInitialized() const {
  return true;
}

void Localizer::Swap(Localizer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Localizer::InternalSwap(Localizer* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
  swap(linear_velocity_, other->linear_velocity_);
  swap(linear_acceleration_, other->linear_acceleration_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(uncertainty_, other->uncertainty_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Localizer::GetMetadata() const {
  protobuf_metamoto_2fmessages_2flocalizer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2flocalizer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Uncertainty::InitAsDefaultInstance() {
  ::metamoto::messages::_Uncertainty_default_instance_._instance.get_mutable()->position_std_dev_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
  ::metamoto::messages::_Uncertainty_default_instance_._instance.get_mutable()->orientation_axis_std_dev_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
  ::metamoto::messages::_Uncertainty_default_instance_._instance.get_mutable()->linear_velocity_std_dev_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
  ::metamoto::messages::_Uncertainty_default_instance_._instance.get_mutable()->linear_acceleration_std_dev_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
  ::metamoto::messages::_Uncertainty_default_instance_._instance.get_mutable()->angular_velocity_std_dev_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
}
void Uncertainty::clear_position_std_dev() {
  if (GetArenaNoVirtual() == NULL && position_std_dev_ != NULL) {
    delete position_std_dev_;
  }
  position_std_dev_ = NULL;
}
void Uncertainty::clear_orientation_axis_std_dev() {
  if (GetArenaNoVirtual() == NULL && orientation_axis_std_dev_ != NULL) {
    delete orientation_axis_std_dev_;
  }
  orientation_axis_std_dev_ = NULL;
}
void Uncertainty::clear_linear_velocity_std_dev() {
  if (GetArenaNoVirtual() == NULL && linear_velocity_std_dev_ != NULL) {
    delete linear_velocity_std_dev_;
  }
  linear_velocity_std_dev_ = NULL;
}
void Uncertainty::clear_linear_acceleration_std_dev() {
  if (GetArenaNoVirtual() == NULL && linear_acceleration_std_dev_ != NULL) {
    delete linear_acceleration_std_dev_;
  }
  linear_acceleration_std_dev_ = NULL;
}
void Uncertainty::clear_angular_velocity_std_dev() {
  if (GetArenaNoVirtual() == NULL && angular_velocity_std_dev_ != NULL) {
    delete angular_velocity_std_dev_;
  }
  angular_velocity_std_dev_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Uncertainty::kPositionStdDevFieldNumber;
const int Uncertainty::kOrientationAxisStdDevFieldNumber;
const int Uncertainty::kOrientationAngleStdDevFieldNumber;
const int Uncertainty::kLinearVelocityStdDevFieldNumber;
const int Uncertainty::kLinearAccelerationStdDevFieldNumber;
const int Uncertainty::kAngularVelocityStdDevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Uncertainty::Uncertainty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fmessages_2flocalizer_2eproto::scc_info_Uncertainty.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.messages.Uncertainty)
}
Uncertainty::Uncertainty(const Uncertainty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position_std_dev()) {
    position_std_dev_ = new ::metamoto::types::Vector3(*from.position_std_dev_);
  } else {
    position_std_dev_ = NULL;
  }
  if (from.has_orientation_axis_std_dev()) {
    orientation_axis_std_dev_ = new ::metamoto::types::Vector3(*from.orientation_axis_std_dev_);
  } else {
    orientation_axis_std_dev_ = NULL;
  }
  if (from.has_linear_velocity_std_dev()) {
    linear_velocity_std_dev_ = new ::metamoto::types::Vector3(*from.linear_velocity_std_dev_);
  } else {
    linear_velocity_std_dev_ = NULL;
  }
  if (from.has_linear_acceleration_std_dev()) {
    linear_acceleration_std_dev_ = new ::metamoto::types::Vector3(*from.linear_acceleration_std_dev_);
  } else {
    linear_acceleration_std_dev_ = NULL;
  }
  if (from.has_angular_velocity_std_dev()) {
    angular_velocity_std_dev_ = new ::metamoto::types::Vector3(*from.angular_velocity_std_dev_);
  } else {
    angular_velocity_std_dev_ = NULL;
  }
  orientation_angle_std_dev_ = from.orientation_angle_std_dev_;
  // @@protoc_insertion_point(copy_constructor:metamoto.messages.Uncertainty)
}

void Uncertainty::SharedCtor() {
  ::memset(&position_std_dev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_angle_std_dev_) -
      reinterpret_cast<char*>(&position_std_dev_)) + sizeof(orientation_angle_std_dev_));
}

Uncertainty::~Uncertainty() {
  // @@protoc_insertion_point(destructor:metamoto.messages.Uncertainty)
  SharedDtor();
}

void Uncertainty::SharedDtor() {
  if (this != internal_default_instance()) delete position_std_dev_;
  if (this != internal_default_instance()) delete orientation_axis_std_dev_;
  if (this != internal_default_instance()) delete linear_velocity_std_dev_;
  if (this != internal_default_instance()) delete linear_acceleration_std_dev_;
  if (this != internal_default_instance()) delete angular_velocity_std_dev_;
}

void Uncertainty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Uncertainty::descriptor() {
  ::protobuf_metamoto_2fmessages_2flocalizer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2flocalizer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Uncertainty& Uncertainty::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fmessages_2flocalizer_2eproto::scc_info_Uncertainty.base);
  return *internal_default_instance();
}


void Uncertainty::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.messages.Uncertainty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && position_std_dev_ != NULL) {
    delete position_std_dev_;
  }
  position_std_dev_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_axis_std_dev_ != NULL) {
    delete orientation_axis_std_dev_;
  }
  orientation_axis_std_dev_ = NULL;
  if (GetArenaNoVirtual() == NULL && linear_velocity_std_dev_ != NULL) {
    delete linear_velocity_std_dev_;
  }
  linear_velocity_std_dev_ = NULL;
  if (GetArenaNoVirtual() == NULL && linear_acceleration_std_dev_ != NULL) {
    delete linear_acceleration_std_dev_;
  }
  linear_acceleration_std_dev_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_velocity_std_dev_ != NULL) {
    delete angular_velocity_std_dev_;
  }
  angular_velocity_std_dev_ = NULL;
  orientation_angle_std_dev_ = 0;
  _internal_metadata_.Clear();
}

bool Uncertainty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.messages.Uncertainty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.Vector3 position_std_dev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 orientation_axis_std_dev = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation_axis_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float orientation_angle_std_dev = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &orientation_angle_std_dev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 linear_velocity_std_dev = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_velocity_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 linear_acceleration_std_dev = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_acceleration_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 angular_velocity_std_dev = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.messages.Uncertainty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.messages.Uncertainty)
  return false;
#undef DO_
}

void Uncertainty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.messages.Uncertainty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Vector3 position_std_dev = 1;
  if (this->has_position_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_position_std_dev(), output);
  }

  // .metamoto.types.Vector3 orientation_axis_std_dev = 2;
  if (this->has_orientation_axis_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_orientation_axis_std_dev(), output);
  }

  // float orientation_angle_std_dev = 3;
  if (this->orientation_angle_std_dev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->orientation_angle_std_dev(), output);
  }

  // .metamoto.types.Vector3 linear_velocity_std_dev = 4;
  if (this->has_linear_velocity_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_linear_velocity_std_dev(), output);
  }

  // .metamoto.types.Vector3 linear_acceleration_std_dev = 5;
  if (this->has_linear_acceleration_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_linear_acceleration_std_dev(), output);
  }

  // .metamoto.types.Vector3 angular_velocity_std_dev = 6;
  if (this->has_angular_velocity_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_angular_velocity_std_dev(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.messages.Uncertainty)
}

::google::protobuf::uint8* Uncertainty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.messages.Uncertainty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Vector3 position_std_dev = 1;
  if (this->has_position_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_position_std_dev(), deterministic, target);
  }

  // .metamoto.types.Vector3 orientation_axis_std_dev = 2;
  if (this->has_orientation_axis_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_orientation_axis_std_dev(), deterministic, target);
  }

  // float orientation_angle_std_dev = 3;
  if (this->orientation_angle_std_dev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->orientation_angle_std_dev(), target);
  }

  // .metamoto.types.Vector3 linear_velocity_std_dev = 4;
  if (this->has_linear_velocity_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_linear_velocity_std_dev(), deterministic, target);
  }

  // .metamoto.types.Vector3 linear_acceleration_std_dev = 5;
  if (this->has_linear_acceleration_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_linear_acceleration_std_dev(), deterministic, target);
  }

  // .metamoto.types.Vector3 angular_velocity_std_dev = 6;
  if (this->has_angular_velocity_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_angular_velocity_std_dev(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.messages.Uncertainty)
  return target;
}

size_t Uncertainty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.messages.Uncertainty)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.Vector3 position_std_dev = 1;
  if (this->has_position_std_dev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_std_dev_);
  }

  // .metamoto.types.Vector3 orientation_axis_std_dev = 2;
  if (this->has_orientation_axis_std_dev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orientation_axis_std_dev_);
  }

  // .metamoto.types.Vector3 linear_velocity_std_dev = 4;
  if (this->has_linear_velocity_std_dev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linear_velocity_std_dev_);
  }

  // .metamoto.types.Vector3 linear_acceleration_std_dev = 5;
  if (this->has_linear_acceleration_std_dev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linear_acceleration_std_dev_);
  }

  // .metamoto.types.Vector3 angular_velocity_std_dev = 6;
  if (this->has_angular_velocity_std_dev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angular_velocity_std_dev_);
  }

  // float orientation_angle_std_dev = 3;
  if (this->orientation_angle_std_dev() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Uncertainty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.messages.Uncertainty)
  GOOGLE_DCHECK_NE(&from, this);
  const Uncertainty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Uncertainty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.messages.Uncertainty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.messages.Uncertainty)
    MergeFrom(*source);
  }
}

void Uncertainty::MergeFrom(const Uncertainty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.messages.Uncertainty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position_std_dev()) {
    mutable_position_std_dev()->::metamoto::types::Vector3::MergeFrom(from.position_std_dev());
  }
  if (from.has_orientation_axis_std_dev()) {
    mutable_orientation_axis_std_dev()->::metamoto::types::Vector3::MergeFrom(from.orientation_axis_std_dev());
  }
  if (from.has_linear_velocity_std_dev()) {
    mutable_linear_velocity_std_dev()->::metamoto::types::Vector3::MergeFrom(from.linear_velocity_std_dev());
  }
  if (from.has_linear_acceleration_std_dev()) {
    mutable_linear_acceleration_std_dev()->::metamoto::types::Vector3::MergeFrom(from.linear_acceleration_std_dev());
  }
  if (from.has_angular_velocity_std_dev()) {
    mutable_angular_velocity_std_dev()->::metamoto::types::Vector3::MergeFrom(from.angular_velocity_std_dev());
  }
  if (from.orientation_angle_std_dev() != 0) {
    set_orientation_angle_std_dev(from.orientation_angle_std_dev());
  }
}

void Uncertainty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.messages.Uncertainty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uncertainty::CopyFrom(const Uncertainty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.messages.Uncertainty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uncertainty::IsInitialized() const {
  return true;
}

void Uncertainty::Swap(Uncertainty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Uncertainty::InternalSwap(Uncertainty* other) {
  using std::swap;
  swap(position_std_dev_, other->position_std_dev_);
  swap(orientation_axis_std_dev_, other->orientation_axis_std_dev_);
  swap(linear_velocity_std_dev_, other->linear_velocity_std_dev_);
  swap(linear_acceleration_std_dev_, other->linear_acceleration_std_dev_);
  swap(angular_velocity_std_dev_, other->angular_velocity_std_dev_);
  swap(orientation_angle_std_dev_, other->orientation_angle_std_dev_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Uncertainty::GetMetadata() const {
  protobuf_metamoto_2fmessages_2flocalizer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2flocalizer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::messages::Localizer* Arena::CreateMaybeMessage< ::metamoto::messages::Localizer >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::messages::Localizer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::messages::Uncertainty* Arena::CreateMaybeMessage< ::metamoto::messages::Uncertainty >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::messages::Uncertainty >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
