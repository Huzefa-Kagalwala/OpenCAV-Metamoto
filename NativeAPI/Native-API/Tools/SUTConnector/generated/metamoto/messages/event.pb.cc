// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/messages/event.proto

#include "metamoto/messages/event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_metamoto_2ftypes_2fscenario_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Infraction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Event;
}  // namespace protobuf_metamoto_2ftypes_2fscenario_2eproto
namespace metamoto {
namespace messages {
class EventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Event>
      _instance;
  const ::metamoto::types::Event* event_;
  const ::metamoto::types::Infraction* infraction_;
  int reported_action_;
} _Event_default_instance_;
}  // namespace messages
}  // namespace metamoto
namespace protobuf_metamoto_2fmessages_2fevent_2eproto {
static void InitDefaultsEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::messages::_Event_default_instance_;
    new (ptr) ::metamoto::messages::Event();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::messages::Event::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Event =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEvent}, {
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Event.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Infraction.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Event.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Event, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::metamoto::messages::EventDefaultTypeInternal, event_),
  offsetof(::metamoto::messages::EventDefaultTypeInternal, infraction_),
  offsetof(::metamoto::messages::EventDefaultTypeInternal, reported_action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Event, primary_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Event, secondary_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Event, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Event, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Event, type_oneof_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::messages::Event)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::messages::_Event_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/messages/event.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035metamoto/messages/event.proto\022\021metamot"
      "o.messages\032!metamoto/types/enumerations."
      "proto\032\035metamoto/types/scenario.proto\"\360\001\n"
      "\005Event\022&\n\005event\030\001 \001(\0132\025.metamoto.types.E"
      "ventH\000\0220\n\ninfraction\030\002 \001(\0132\032.metamoto.ty"
      "pes.InfractionH\000\0221\n\017reported_action\030\003 \001("
      "\0162\026.metamoto.types.ActionH\000\022\022\n\nprimary_i"
      "d\030\004 \001(\t\022\024\n\014secondary_id\030\005 \001(\t\022\r\n\005value\030\006"
      " \001(\002\022\023\n\013description\030\007 \001(\tB\014\n\ntype_oneofB"
      "\024\252\002\021Metamoto.Messagesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 389);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/messages/event.proto", &protobuf_RegisterTypes);
  ::protobuf_metamoto_2ftypes_2fenumerations_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2fmessages_2fevent_2eproto
namespace metamoto {
namespace messages {

// ===================================================================

void Event::InitAsDefaultInstance() {
  ::metamoto::messages::_Event_default_instance_.event_ = const_cast< ::metamoto::types::Event*>(
      ::metamoto::types::Event::internal_default_instance());
  ::metamoto::messages::_Event_default_instance_.infraction_ = const_cast< ::metamoto::types::Infraction*>(
      ::metamoto::types::Infraction::internal_default_instance());
  ::metamoto::messages::_Event_default_instance_.reported_action_ = 0;
}
void Event::set_allocated_event(::metamoto::types::Event* event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type_oneof();
  if (event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
    type_oneof_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Event.event)
}
void Event::clear_event() {
  if (has_event()) {
    delete type_oneof_.event_;
    clear_has_type_oneof();
  }
}
void Event::set_allocated_infraction(::metamoto::types::Infraction* infraction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type_oneof();
  if (infraction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      infraction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, infraction, submessage_arena);
    }
    set_has_infraction();
    type_oneof_.infraction_ = infraction;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Event.infraction)
}
void Event::clear_infraction() {
  if (has_infraction()) {
    delete type_oneof_.infraction_;
    clear_has_type_oneof();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kEventFieldNumber;
const int Event::kInfractionFieldNumber;
const int Event::kReportedActionFieldNumber;
const int Event::kPrimaryIdFieldNumber;
const int Event::kSecondaryIdFieldNumber;
const int Event::kValueFieldNumber;
const int Event::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fmessages_2fevent_2eproto::scc_info_Event.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.messages.Event)
}
Event::Event(const Event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  primary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.primary_id().size() > 0) {
    primary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_id_);
  }
  secondary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.secondary_id().size() > 0) {
    secondary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_id_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  value_ = from.value_;
  clear_has_type_oneof();
  switch (from.type_oneof_case()) {
    case kEvent: {
      mutable_event()->::metamoto::types::Event::MergeFrom(from.event());
      break;
    }
    case kInfraction: {
      mutable_infraction()->::metamoto::types::Infraction::MergeFrom(from.infraction());
      break;
    }
    case kReportedAction: {
      set_reported_action(from.reported_action());
      break;
    }
    case TYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.messages.Event)
}

void Event::SharedCtor() {
  primary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  clear_has_type_oneof();
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:metamoto.messages.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  primary_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_type_oneof()) {
    clear_type_oneof();
  }
}

void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  ::protobuf_metamoto_2fmessages_2fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Event& Event::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fmessages_2fevent_2eproto::scc_info_Event.base);
  return *internal_default_instance();
}


void Event::clear_type_oneof() {
// @@protoc_insertion_point(one_of_clear_start:metamoto.messages.Event)
  switch (type_oneof_case()) {
    case kEvent: {
      delete type_oneof_.event_;
      break;
    }
    case kInfraction: {
      delete type_oneof_.infraction_;
      break;
    }
    case kReportedAction: {
      // No need to clear
      break;
    }
    case TYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_ONEOF_NOT_SET;
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.messages.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  primary_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  clear_type_oneof();
  _internal_metadata_.Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.messages.Event)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.Event event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Infraction infraction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_infraction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Action reported_action = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reported_action(static_cast< ::metamoto::types::Action >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string primary_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primary_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->primary_id().data(), static_cast<int>(this->primary_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.messages.Event.primary_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string secondary_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondary_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secondary_id().data(), static_cast<int>(this->secondary_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.messages.Event.secondary_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.messages.Event.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.messages.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.messages.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.messages.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Event event = 1;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_event(), output);
  }

  // .metamoto.types.Infraction infraction = 2;
  if (has_infraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_infraction(), output);
  }

  // .metamoto.types.Action reported_action = 3;
  if (has_reported_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->reported_action(), output);
  }

  // string primary_id = 4;
  if (this->primary_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->primary_id().data(), static_cast<int>(this->primary_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.messages.Event.primary_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->primary_id(), output);
  }

  // string secondary_id = 5;
  if (this->secondary_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secondary_id().data(), static_cast<int>(this->secondary_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.messages.Event.secondary_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->secondary_id(), output);
  }

  // float value = 6;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->value(), output);
  }

  // string description = 7;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.messages.Event.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->description(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.messages.Event)
}

::google::protobuf::uint8* Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.messages.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Event event = 1;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_event(), deterministic, target);
  }

  // .metamoto.types.Infraction infraction = 2;
  if (has_infraction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_infraction(), deterministic, target);
  }

  // .metamoto.types.Action reported_action = 3;
  if (has_reported_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->reported_action(), target);
  }

  // string primary_id = 4;
  if (this->primary_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->primary_id().data(), static_cast<int>(this->primary_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.messages.Event.primary_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->primary_id(), target);
  }

  // string secondary_id = 5;
  if (this->secondary_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secondary_id().data(), static_cast<int>(this->secondary_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.messages.Event.secondary_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->secondary_id(), target);
  }

  // float value = 6;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->value(), target);
  }

  // string description = 7;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.messages.Event.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->description(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.messages.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.messages.Event)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string primary_id = 4;
  if (this->primary_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->primary_id());
  }

  // string secondary_id = 5;
  if (this->secondary_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secondary_id());
  }

  // string description = 7;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // float value = 6;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  switch (type_oneof_case()) {
    // .metamoto.types.Event event = 1;
    case kEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_oneof_.event_);
      break;
    }
    // .metamoto.types.Infraction infraction = 2;
    case kInfraction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_oneof_.infraction_);
      break;
    }
    // .metamoto.types.Action reported_action = 3;
    case kReportedAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reported_action());
      break;
    }
    case TYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.messages.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.messages.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.messages.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.messages.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.primary_id().size() > 0) {

    primary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_id_);
  }
  if (from.secondary_id().size() > 0) {

    secondary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_id_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  switch (from.type_oneof_case()) {
    case kEvent: {
      mutable_event()->::metamoto::types::Event::MergeFrom(from.event());
      break;
    }
    case kInfraction: {
      mutable_infraction()->::metamoto::types::Infraction::MergeFrom(from.infraction());
      break;
    }
    case kReportedAction: {
      set_reported_action(from.reported_action());
      break;
    }
    case TYPE_ONEOF_NOT_SET: {
      break;
    }
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.messages.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.messages.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  using std::swap;
  primary_id_.Swap(&other->primary_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secondary_id_.Swap(&other->secondary_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(type_oneof_, other->type_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_metamoto_2fmessages_2fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::messages::Event* Arena::CreateMaybeMessage< ::metamoto::messages::Event >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::messages::Event >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
