// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/messages/event.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2fmessages_2fevent_2eproto
#define PROTOBUF_INCLUDED_metamoto_2fmessages_2fevent_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/enumerations.pb.h"
#include "metamoto/types/scenario.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fevent_2eproto 

namespace protobuf_metamoto_2fmessages_2fevent_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2fmessages_2fevent_2eproto
namespace metamoto {
namespace messages {
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
}  // namespace messages
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::messages::Event* Arena::CreateMaybeMessage<::metamoto::messages::Event>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace messages {

// ===================================================================

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.messages.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  enum TypeOneofCase {
    kEvent = 1,
    kInfraction = 2,
    kReportedAction = 3,
    TYPE_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(NULL);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string primary_id = 4;
  void clear_primary_id();
  static const int kPrimaryIdFieldNumber = 4;
  const ::std::string& primary_id() const;
  void set_primary_id(const ::std::string& value);
  #if LANG_CXX11
  void set_primary_id(::std::string&& value);
  #endif
  void set_primary_id(const char* value);
  void set_primary_id(const char* value, size_t size);
  ::std::string* mutable_primary_id();
  ::std::string* release_primary_id();
  void set_allocated_primary_id(::std::string* primary_id);

  // string secondary_id = 5;
  void clear_secondary_id();
  static const int kSecondaryIdFieldNumber = 5;
  const ::std::string& secondary_id() const;
  void set_secondary_id(const ::std::string& value);
  #if LANG_CXX11
  void set_secondary_id(::std::string&& value);
  #endif
  void set_secondary_id(const char* value);
  void set_secondary_id(const char* value, size_t size);
  ::std::string* mutable_secondary_id();
  ::std::string* release_secondary_id();
  void set_allocated_secondary_id(::std::string* secondary_id);

  // string description = 7;
  void clear_description();
  static const int kDescriptionFieldNumber = 7;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // float value = 6;
  void clear_value();
  static const int kValueFieldNumber = 6;
  float value() const;
  void set_value(float value);

  // .metamoto.types.Event event = 1;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 1;
  private:
  const ::metamoto::types::Event& _internal_event() const;
  public:
  const ::metamoto::types::Event& event() const;
  ::metamoto::types::Event* release_event();
  ::metamoto::types::Event* mutable_event();
  void set_allocated_event(::metamoto::types::Event* event);

  // .metamoto.types.Infraction infraction = 2;
  bool has_infraction() const;
  void clear_infraction();
  static const int kInfractionFieldNumber = 2;
  private:
  const ::metamoto::types::Infraction& _internal_infraction() const;
  public:
  const ::metamoto::types::Infraction& infraction() const;
  ::metamoto::types::Infraction* release_infraction();
  ::metamoto::types::Infraction* mutable_infraction();
  void set_allocated_infraction(::metamoto::types::Infraction* infraction);

  // .metamoto.types.Action reported_action = 3;
  private:
  bool has_reported_action() const;
  public:
  void clear_reported_action();
  static const int kReportedActionFieldNumber = 3;
  ::metamoto::types::Action reported_action() const;
  void set_reported_action(::metamoto::types::Action value);

  void clear_type_oneof();
  TypeOneofCase type_oneof_case() const;
  // @@protoc_insertion_point(class_scope:metamoto.messages.Event)
 private:
  void set_has_event();
  void set_has_infraction();
  void set_has_reported_action();

  inline bool has_type_oneof() const;
  inline void clear_has_type_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr primary_id_;
  ::google::protobuf::internal::ArenaStringPtr secondary_id_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  float value_;
  union TypeOneofUnion {
    TypeOneofUnion() {}
    ::metamoto::types::Event* event_;
    ::metamoto::types::Infraction* infraction_;
    int reported_action_;
  } type_oneof_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_metamoto_2fmessages_2fevent_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event

// .metamoto.types.Event event = 1;
inline bool Event::has_event() const {
  return type_oneof_case() == kEvent;
}
inline void Event::set_has_event() {
  _oneof_case_[0] = kEvent;
}
inline const ::metamoto::types::Event& Event::_internal_event() const {
  return *type_oneof_.event_;
}
inline ::metamoto::types::Event* Event::release_event() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Event.event)
  if (has_event()) {
    clear_has_type_oneof();
      ::metamoto::types::Event* temp = type_oneof_.event_;
    type_oneof_.event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::types::Event& Event::event() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Event.event)
  return has_event()
      ? *type_oneof_.event_
      : *reinterpret_cast< ::metamoto::types::Event*>(&::metamoto::types::_Event_default_instance_);
}
inline ::metamoto::types::Event* Event::mutable_event() {
  if (!has_event()) {
    clear_type_oneof();
    set_has_event();
    type_oneof_.event_ = CreateMaybeMessage< ::metamoto::types::Event >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Event.event)
  return type_oneof_.event_;
}

// .metamoto.types.Infraction infraction = 2;
inline bool Event::has_infraction() const {
  return type_oneof_case() == kInfraction;
}
inline void Event::set_has_infraction() {
  _oneof_case_[0] = kInfraction;
}
inline const ::metamoto::types::Infraction& Event::_internal_infraction() const {
  return *type_oneof_.infraction_;
}
inline ::metamoto::types::Infraction* Event::release_infraction() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Event.infraction)
  if (has_infraction()) {
    clear_has_type_oneof();
      ::metamoto::types::Infraction* temp = type_oneof_.infraction_;
    type_oneof_.infraction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::types::Infraction& Event::infraction() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Event.infraction)
  return has_infraction()
      ? *type_oneof_.infraction_
      : *reinterpret_cast< ::metamoto::types::Infraction*>(&::metamoto::types::_Infraction_default_instance_);
}
inline ::metamoto::types::Infraction* Event::mutable_infraction() {
  if (!has_infraction()) {
    clear_type_oneof();
    set_has_infraction();
    type_oneof_.infraction_ = CreateMaybeMessage< ::metamoto::types::Infraction >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Event.infraction)
  return type_oneof_.infraction_;
}

// .metamoto.types.Action reported_action = 3;
inline bool Event::has_reported_action() const {
  return type_oneof_case() == kReportedAction;
}
inline void Event::set_has_reported_action() {
  _oneof_case_[0] = kReportedAction;
}
inline void Event::clear_reported_action() {
  if (has_reported_action()) {
    type_oneof_.reported_action_ = 0;
    clear_has_type_oneof();
  }
}
inline ::metamoto::types::Action Event::reported_action() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Event.reported_action)
  if (has_reported_action()) {
    return static_cast< ::metamoto::types::Action >(type_oneof_.reported_action_);
  }
  return static_cast< ::metamoto::types::Action >(0);
}
inline void Event::set_reported_action(::metamoto::types::Action value) {
  if (!has_reported_action()) {
    clear_type_oneof();
    set_has_reported_action();
  }
  type_oneof_.reported_action_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.Event.reported_action)
}

// string primary_id = 4;
inline void Event::clear_primary_id() {
  primary_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::primary_id() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Event.primary_id)
  return primary_id_.GetNoArena();
}
inline void Event::set_primary_id(const ::std::string& value) {
  
  primary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.messages.Event.primary_id)
}
#if LANG_CXX11
inline void Event::set_primary_id(::std::string&& value) {
  
  primary_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.messages.Event.primary_id)
}
#endif
inline void Event::set_primary_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.messages.Event.primary_id)
}
inline void Event::set_primary_id(const char* value, size_t size) {
  
  primary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.messages.Event.primary_id)
}
inline ::std::string* Event::mutable_primary_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Event.primary_id)
  return primary_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_primary_id() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Event.primary_id)
  
  return primary_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_primary_id(::std::string* primary_id) {
  if (primary_id != NULL) {
    
  } else {
    
  }
  primary_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Event.primary_id)
}

// string secondary_id = 5;
inline void Event::clear_secondary_id() {
  secondary_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::secondary_id() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Event.secondary_id)
  return secondary_id_.GetNoArena();
}
inline void Event::set_secondary_id(const ::std::string& value) {
  
  secondary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.messages.Event.secondary_id)
}
#if LANG_CXX11
inline void Event::set_secondary_id(::std::string&& value) {
  
  secondary_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.messages.Event.secondary_id)
}
#endif
inline void Event::set_secondary_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secondary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.messages.Event.secondary_id)
}
inline void Event::set_secondary_id(const char* value, size_t size) {
  
  secondary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.messages.Event.secondary_id)
}
inline ::std::string* Event::mutable_secondary_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Event.secondary_id)
  return secondary_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_secondary_id() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Event.secondary_id)
  
  return secondary_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_secondary_id(::std::string* secondary_id) {
  if (secondary_id != NULL) {
    
  } else {
    
  }
  secondary_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secondary_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Event.secondary_id)
}

// float value = 6;
inline void Event::clear_value() {
  value_ = 0;
}
inline float Event::value() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Event.value)
  return value_;
}
inline void Event::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.Event.value)
}

// string description = 7;
inline void Event::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::description() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Event.description)
  return description_.GetNoArena();
}
inline void Event::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.messages.Event.description)
}
#if LANG_CXX11
inline void Event::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.messages.Event.description)
}
#endif
inline void Event::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.messages.Event.description)
}
inline void Event::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.messages.Event.description)
}
inline ::std::string* Event::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Event.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_description() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Event.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Event.description)
}

inline bool Event::has_type_oneof() const {
  return type_oneof_case() != TYPE_ONEOF_NOT_SET;
}
inline void Event::clear_has_type_oneof() {
  _oneof_case_[0] = TYPE_ONEOF_NOT_SET;
}
inline Event::TypeOneofCase Event::type_oneof_case() const {
  return Event::TypeOneofCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2fmessages_2fevent_2eproto
