// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/messages/vehicle_controls.proto

#include "metamoto/messages/vehicle_controls.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FloatValue;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VehicleControls_WheelControl;
}  // namespace protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto
namespace metamoto {
namespace messages {
class VehicleControls_WheelControlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleControls_WheelControl>
      _instance;
} _VehicleControls_WheelControl_default_instance_;
class VehicleControlsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleControls>
      _instance;
} _VehicleControls_default_instance_;
}  // namespace messages
}  // namespace metamoto
namespace protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto {
static void InitDefaultsVehicleControls_WheelControl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::messages::_VehicleControls_WheelControl_default_instance_;
    new (ptr) ::metamoto::messages::VehicleControls_WheelControl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::messages::VehicleControls_WheelControl::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VehicleControls_WheelControl =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVehicleControls_WheelControl}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_FloatValue.base,}};

static void InitDefaultsVehicleControls() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::messages::_VehicleControls_default_instance_;
    new (ptr) ::metamoto::messages::VehicleControls();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::messages::VehicleControls::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_VehicleControls =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsVehicleControls}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_FloatValue.base,
      &protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto::scc_info_VehicleControls_WheelControl.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleControls_WheelControl.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleControls.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleControls_WheelControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleControls_WheelControl, angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleControls_WheelControl, steer_angle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleControls, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleControls, steer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleControls, throttle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleControls, brake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleControls, gear_selector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleControls, gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleControls, turn_signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleControls, head_lights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleControls, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleControls, wheel_controls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::VehicleControls, other_controls_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::messages::VehicleControls_WheelControl)},
  { 7, -1, sizeof(::metamoto::messages::VehicleControls)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::messages::_VehicleControls_WheelControl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::messages::_VehicleControls_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/messages/vehicle_controls.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n(metamoto/messages/vehicle_controls.pro"
      "to\022\021metamoto.messages\032\036google/protobuf/w"
      "rappers.proto\032\034metamoto/types/vehicle.pr"
      "oto\"\350\004\n\017VehicleControls\022*\n\005steer\030\001 \001(\0132\033"
      ".google.protobuf.FloatValue\022-\n\010throttle\030"
      "\002 \001(\0132\033.google.protobuf.FloatValue\022*\n\005br"
      "ake\030\003 \001(\0132\033.google.protobuf.FloatValue\022;"
      "\n\rgear_selector\030\004 \001(\0162$.metamoto.types.V"
      "ehicle.GearSelector\022\014\n\004gear\030\t \001(\005\022=\n\013tur"
      "n_signal\030\005 \001(\0162(.metamoto.types.Vehicle."
      "SignalLightState\0227\n\013head_lights\030\006 \001(\0162\"."
      "metamoto.types.Vehicle.LightState\0221\n\014acc"
      "eleration\030\007 \001(\0132\033.google.protobuf.FloatV"
      "alue\022G\n\016wheel_controls\030\010 \003(\0132/.metamoto."
      "messages.VehicleControls.WheelControl\022\026\n"
      "\016other_controls\030\n \003(\002\032w\n\014WheelControl\0225\n"
      "\020angular_velocity\030\001 \001(\0132\033.google.protobu"
      "f.FloatValue\0220\n\013steer_angle\030\002 \001(\0132\033.goog"
      "le.protobuf.FloatValueB\024\252\002\021Metamoto.Mess"
      "agesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 772);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/messages/vehicle_controls.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fvehicle_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto
namespace metamoto {
namespace messages {

// ===================================================================

void VehicleControls_WheelControl::InitAsDefaultInstance() {
  ::metamoto::messages::_VehicleControls_WheelControl_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::metamoto::messages::_VehicleControls_WheelControl_default_instance_._instance.get_mutable()->steer_angle_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
}
void VehicleControls_WheelControl::clear_angular_velocity() {
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) {
    delete angular_velocity_;
  }
  angular_velocity_ = NULL;
}
void VehicleControls_WheelControl::clear_steer_angle() {
  if (GetArenaNoVirtual() == NULL && steer_angle_ != NULL) {
    delete steer_angle_;
  }
  steer_angle_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleControls_WheelControl::kAngularVelocityFieldNumber;
const int VehicleControls_WheelControl::kSteerAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleControls_WheelControl::VehicleControls_WheelControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto::scc_info_VehicleControls_WheelControl.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.messages.VehicleControls.WheelControl)
}
VehicleControls_WheelControl::VehicleControls_WheelControl(const VehicleControls_WheelControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::google::protobuf::FloatValue(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  if (from.has_steer_angle()) {
    steer_angle_ = new ::google::protobuf::FloatValue(*from.steer_angle_);
  } else {
    steer_angle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.messages.VehicleControls.WheelControl)
}

void VehicleControls_WheelControl::SharedCtor() {
  ::memset(&angular_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_angle_) -
      reinterpret_cast<char*>(&angular_velocity_)) + sizeof(steer_angle_));
}

VehicleControls_WheelControl::~VehicleControls_WheelControl() {
  // @@protoc_insertion_point(destructor:metamoto.messages.VehicleControls.WheelControl)
  SharedDtor();
}

void VehicleControls_WheelControl::SharedDtor() {
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete steer_angle_;
}

void VehicleControls_WheelControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleControls_WheelControl::descriptor() {
  ::protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleControls_WheelControl& VehicleControls_WheelControl::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto::scc_info_VehicleControls_WheelControl.base);
  return *internal_default_instance();
}


void VehicleControls_WheelControl::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.messages.VehicleControls.WheelControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) {
    delete angular_velocity_;
  }
  angular_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && steer_angle_ != NULL) {
    delete steer_angle_;
  }
  steer_angle_ = NULL;
  _internal_metadata_.Clear();
}

bool VehicleControls_WheelControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.messages.VehicleControls.WheelControl)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.FloatValue angular_velocity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue steer_angle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_steer_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.messages.VehicleControls.WheelControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.messages.VehicleControls.WheelControl)
  return false;
#undef DO_
}

void VehicleControls_WheelControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.messages.VehicleControls.WheelControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue angular_velocity = 1;
  if (this->has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_angular_velocity(), output);
  }

  // .google.protobuf.FloatValue steer_angle = 2;
  if (this->has_steer_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_steer_angle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.messages.VehicleControls.WheelControl)
}

::google::protobuf::uint8* VehicleControls_WheelControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.messages.VehicleControls.WheelControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue angular_velocity = 1;
  if (this->has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_angular_velocity(), deterministic, target);
  }

  // .google.protobuf.FloatValue steer_angle = 2;
  if (this->has_steer_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_steer_angle(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.messages.VehicleControls.WheelControl)
  return target;
}

size_t VehicleControls_WheelControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.messages.VehicleControls.WheelControl)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.FloatValue angular_velocity = 1;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angular_velocity_);
  }

  // .google.protobuf.FloatValue steer_angle = 2;
  if (this->has_steer_angle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *steer_angle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleControls_WheelControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.messages.VehicleControls.WheelControl)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleControls_WheelControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleControls_WheelControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.messages.VehicleControls.WheelControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.messages.VehicleControls.WheelControl)
    MergeFrom(*source);
  }
}

void VehicleControls_WheelControl::MergeFrom(const VehicleControls_WheelControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.messages.VehicleControls.WheelControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_angular_velocity()) {
    mutable_angular_velocity()->::google::protobuf::FloatValue::MergeFrom(from.angular_velocity());
  }
  if (from.has_steer_angle()) {
    mutable_steer_angle()->::google::protobuf::FloatValue::MergeFrom(from.steer_angle());
  }
}

void VehicleControls_WheelControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.messages.VehicleControls.WheelControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleControls_WheelControl::CopyFrom(const VehicleControls_WheelControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.messages.VehicleControls.WheelControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleControls_WheelControl::IsInitialized() const {
  return true;
}

void VehicleControls_WheelControl::Swap(VehicleControls_WheelControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleControls_WheelControl::InternalSwap(VehicleControls_WheelControl* other) {
  using std::swap;
  swap(angular_velocity_, other->angular_velocity_);
  swap(steer_angle_, other->steer_angle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleControls_WheelControl::GetMetadata() const {
  protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleControls::InitAsDefaultInstance() {
  ::metamoto::messages::_VehicleControls_default_instance_._instance.get_mutable()->steer_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::metamoto::messages::_VehicleControls_default_instance_._instance.get_mutable()->throttle_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::metamoto::messages::_VehicleControls_default_instance_._instance.get_mutable()->brake_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::metamoto::messages::_VehicleControls_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
}
void VehicleControls::clear_steer() {
  if (GetArenaNoVirtual() == NULL && steer_ != NULL) {
    delete steer_;
  }
  steer_ = NULL;
}
void VehicleControls::clear_throttle() {
  if (GetArenaNoVirtual() == NULL && throttle_ != NULL) {
    delete throttle_;
  }
  throttle_ = NULL;
}
void VehicleControls::clear_brake() {
  if (GetArenaNoVirtual() == NULL && brake_ != NULL) {
    delete brake_;
  }
  brake_ = NULL;
}
void VehicleControls::clear_acceleration() {
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) {
    delete acceleration_;
  }
  acceleration_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleControls::kSteerFieldNumber;
const int VehicleControls::kThrottleFieldNumber;
const int VehicleControls::kBrakeFieldNumber;
const int VehicleControls::kGearSelectorFieldNumber;
const int VehicleControls::kGearFieldNumber;
const int VehicleControls::kTurnSignalFieldNumber;
const int VehicleControls::kHeadLightsFieldNumber;
const int VehicleControls::kAccelerationFieldNumber;
const int VehicleControls::kWheelControlsFieldNumber;
const int VehicleControls::kOtherControlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleControls::VehicleControls()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto::scc_info_VehicleControls.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.messages.VehicleControls)
}
VehicleControls::VehicleControls(const VehicleControls& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      wheel_controls_(from.wheel_controls_),
      other_controls_(from.other_controls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_steer()) {
    steer_ = new ::google::protobuf::FloatValue(*from.steer_);
  } else {
    steer_ = NULL;
  }
  if (from.has_throttle()) {
    throttle_ = new ::google::protobuf::FloatValue(*from.throttle_);
  } else {
    throttle_ = NULL;
  }
  if (from.has_brake()) {
    brake_ = new ::google::protobuf::FloatValue(*from.brake_);
  } else {
    brake_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::google::protobuf::FloatValue(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  ::memcpy(&gear_selector_, &from.gear_selector_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_) -
    reinterpret_cast<char*>(&gear_selector_)) + sizeof(gear_));
  // @@protoc_insertion_point(copy_constructor:metamoto.messages.VehicleControls)
}

void VehicleControls::SharedCtor() {
  ::memset(&steer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_) -
      reinterpret_cast<char*>(&steer_)) + sizeof(gear_));
}

VehicleControls::~VehicleControls() {
  // @@protoc_insertion_point(destructor:metamoto.messages.VehicleControls)
  SharedDtor();
}

void VehicleControls::SharedDtor() {
  if (this != internal_default_instance()) delete steer_;
  if (this != internal_default_instance()) delete throttle_;
  if (this != internal_default_instance()) delete brake_;
  if (this != internal_default_instance()) delete acceleration_;
}

void VehicleControls::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleControls::descriptor() {
  ::protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleControls& VehicleControls::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto::scc_info_VehicleControls.base);
  return *internal_default_instance();
}


void VehicleControls::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.messages.VehicleControls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wheel_controls_.Clear();
  other_controls_.Clear();
  if (GetArenaNoVirtual() == NULL && steer_ != NULL) {
    delete steer_;
  }
  steer_ = NULL;
  if (GetArenaNoVirtual() == NULL && throttle_ != NULL) {
    delete throttle_;
  }
  throttle_ = NULL;
  if (GetArenaNoVirtual() == NULL && brake_ != NULL) {
    delete brake_;
  }
  brake_ = NULL;
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) {
    delete acceleration_;
  }
  acceleration_ = NULL;
  ::memset(&gear_selector_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_) -
      reinterpret_cast<char*>(&gear_selector_)) + sizeof(gear_));
  _internal_metadata_.Clear();
}

bool VehicleControls::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.messages.VehicleControls)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.FloatValue steer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_steer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue throttle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_throttle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue brake = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brake()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vehicle.GearSelector gear_selector = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gear_selector(static_cast< ::metamoto::types::Vehicle_GearSelector >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vehicle.SignalLightState turn_signal = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_turn_signal(static_cast< ::metamoto::types::Vehicle_SignalLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vehicle.LightState head_lights = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_head_lights(static_cast< ::metamoto::types::Vehicle_LightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue acceleration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.messages.VehicleControls.WheelControl wheel_controls = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_wheel_controls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gear = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float other_controls = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_other_controls())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 82u, input, this->mutable_other_controls())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.messages.VehicleControls)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.messages.VehicleControls)
  return false;
#undef DO_
}

void VehicleControls::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.messages.VehicleControls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue steer = 1;
  if (this->has_steer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_steer(), output);
  }

  // .google.protobuf.FloatValue throttle = 2;
  if (this->has_throttle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_throttle(), output);
  }

  // .google.protobuf.FloatValue brake = 3;
  if (this->has_brake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_brake(), output);
  }

  // .metamoto.types.Vehicle.GearSelector gear_selector = 4;
  if (this->gear_selector() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gear_selector(), output);
  }

  // .metamoto.types.Vehicle.SignalLightState turn_signal = 5;
  if (this->turn_signal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->turn_signal(), output);
  }

  // .metamoto.types.Vehicle.LightState head_lights = 6;
  if (this->head_lights() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->head_lights(), output);
  }

  // .google.protobuf.FloatValue acceleration = 7;
  if (this->has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_acceleration(), output);
  }

  // repeated .metamoto.messages.VehicleControls.WheelControl wheel_controls = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wheel_controls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->wheel_controls(static_cast<int>(i)),
      output);
  }

  // int32 gear = 9;
  if (this->gear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gear(), output);
  }

  // repeated float other_controls = 10;
  if (this->other_controls_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _other_controls_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->other_controls().data(), this->other_controls_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.messages.VehicleControls)
}

::google::protobuf::uint8* VehicleControls::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.messages.VehicleControls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue steer = 1;
  if (this->has_steer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_steer(), deterministic, target);
  }

  // .google.protobuf.FloatValue throttle = 2;
  if (this->has_throttle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_throttle(), deterministic, target);
  }

  // .google.protobuf.FloatValue brake = 3;
  if (this->has_brake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_brake(), deterministic, target);
  }

  // .metamoto.types.Vehicle.GearSelector gear_selector = 4;
  if (this->gear_selector() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->gear_selector(), target);
  }

  // .metamoto.types.Vehicle.SignalLightState turn_signal = 5;
  if (this->turn_signal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->turn_signal(), target);
  }

  // .metamoto.types.Vehicle.LightState head_lights = 6;
  if (this->head_lights() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->head_lights(), target);
  }

  // .google.protobuf.FloatValue acceleration = 7;
  if (this->has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_acceleration(), deterministic, target);
  }

  // repeated .metamoto.messages.VehicleControls.WheelControl wheel_controls = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wheel_controls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->wheel_controls(static_cast<int>(i)), deterministic, target);
  }

  // int32 gear = 9;
  if (this->gear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gear(), target);
  }

  // repeated float other_controls = 10;
  if (this->other_controls_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _other_controls_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->other_controls_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.messages.VehicleControls)
  return target;
}

size_t VehicleControls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.messages.VehicleControls)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.messages.VehicleControls.WheelControl wheel_controls = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->wheel_controls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->wheel_controls(static_cast<int>(i)));
    }
  }

  // repeated float other_controls = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->other_controls_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _other_controls_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .google.protobuf.FloatValue steer = 1;
  if (this->has_steer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *steer_);
  }

  // .google.protobuf.FloatValue throttle = 2;
  if (this->has_throttle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *throttle_);
  }

  // .google.protobuf.FloatValue brake = 3;
  if (this->has_brake()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *brake_);
  }

  // .google.protobuf.FloatValue acceleration = 7;
  if (this->has_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *acceleration_);
  }

  // .metamoto.types.Vehicle.GearSelector gear_selector = 4;
  if (this->gear_selector() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_selector());
  }

  // .metamoto.types.Vehicle.SignalLightState turn_signal = 5;
  if (this->turn_signal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn_signal());
  }

  // .metamoto.types.Vehicle.LightState head_lights = 6;
  if (this->head_lights() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->head_lights());
  }

  // int32 gear = 9;
  if (this->gear() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gear());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleControls::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.messages.VehicleControls)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleControls* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleControls>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.messages.VehicleControls)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.messages.VehicleControls)
    MergeFrom(*source);
  }
}

void VehicleControls::MergeFrom(const VehicleControls& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.messages.VehicleControls)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wheel_controls_.MergeFrom(from.wheel_controls_);
  other_controls_.MergeFrom(from.other_controls_);
  if (from.has_steer()) {
    mutable_steer()->::google::protobuf::FloatValue::MergeFrom(from.steer());
  }
  if (from.has_throttle()) {
    mutable_throttle()->::google::protobuf::FloatValue::MergeFrom(from.throttle());
  }
  if (from.has_brake()) {
    mutable_brake()->::google::protobuf::FloatValue::MergeFrom(from.brake());
  }
  if (from.has_acceleration()) {
    mutable_acceleration()->::google::protobuf::FloatValue::MergeFrom(from.acceleration());
  }
  if (from.gear_selector() != 0) {
    set_gear_selector(from.gear_selector());
  }
  if (from.turn_signal() != 0) {
    set_turn_signal(from.turn_signal());
  }
  if (from.head_lights() != 0) {
    set_head_lights(from.head_lights());
  }
  if (from.gear() != 0) {
    set_gear(from.gear());
  }
}

void VehicleControls::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.messages.VehicleControls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleControls::CopyFrom(const VehicleControls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.messages.VehicleControls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleControls::IsInitialized() const {
  return true;
}

void VehicleControls::Swap(VehicleControls* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleControls::InternalSwap(VehicleControls* other) {
  using std::swap;
  CastToBase(&wheel_controls_)->InternalSwap(CastToBase(&other->wheel_controls_));
  other_controls_.InternalSwap(&other->other_controls_);
  swap(steer_, other->steer_);
  swap(throttle_, other->throttle_);
  swap(brake_, other->brake_);
  swap(acceleration_, other->acceleration_);
  swap(gear_selector_, other->gear_selector_);
  swap(turn_signal_, other->turn_signal_);
  swap(head_lights_, other->head_lights_);
  swap(gear_, other->gear_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleControls::GetMetadata() const {
  protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::messages::VehicleControls_WheelControl* Arena::CreateMaybeMessage< ::metamoto::messages::VehicleControls_WheelControl >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::messages::VehicleControls_WheelControl >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::messages::VehicleControls* Arena::CreateMaybeMessage< ::metamoto::messages::VehicleControls >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::messages::VehicleControls >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
