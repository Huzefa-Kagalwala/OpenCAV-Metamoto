// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/messages/lidar.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2fmessages_2flidar_2eproto
#define PROTOBUF_INCLUDED_metamoto_2fmessages_2flidar_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/laser_return_group.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2flidar_2eproto 

namespace protobuf_metamoto_2fmessages_2flidar_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2fmessages_2flidar_2eproto
namespace metamoto {
namespace messages {
class Lidar;
class LidarDefaultTypeInternal;
extern LidarDefaultTypeInternal _Lidar_default_instance_;
}  // namespace messages
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::messages::Lidar* Arena::CreateMaybeMessage<::metamoto::messages::Lidar>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace messages {

// ===================================================================

class Lidar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.messages.Lidar) */ {
 public:
  Lidar();
  virtual ~Lidar();

  Lidar(const Lidar& from);

  inline Lidar& operator=(const Lidar& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lidar(Lidar&& from) noexcept
    : Lidar() {
    *this = ::std::move(from);
  }

  inline Lidar& operator=(Lidar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lidar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lidar* internal_default_instance() {
    return reinterpret_cast<const Lidar*>(
               &_Lidar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Lidar* other);
  friend void swap(Lidar& a, Lidar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lidar* New() const final {
    return CreateMaybeMessage<Lidar>(NULL);
  }

  Lidar* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Lidar>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Lidar& from);
  void MergeFrom(const Lidar& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lidar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.LaserReturnGroup groups = 2;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 2;
  ::metamoto::types::LaserReturnGroup* mutable_groups(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::LaserReturnGroup >*
      mutable_groups();
  const ::metamoto::types::LaserReturnGroup& groups(int index) const;
  ::metamoto::types::LaserReturnGroup* add_groups();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::LaserReturnGroup >&
      groups() const;

  // bytes velodyne_pcap = 3;
  void clear_velodyne_pcap();
  static const int kVelodynePcapFieldNumber = 3;
  const ::std::string& velodyne_pcap() const;
  void set_velodyne_pcap(const ::std::string& value);
  #if LANG_CXX11
  void set_velodyne_pcap(::std::string&& value);
  #endif
  void set_velodyne_pcap(const char* value);
  void set_velodyne_pcap(const void* value, size_t size);
  ::std::string* mutable_velodyne_pcap();
  ::std::string* release_velodyne_pcap();
  void set_allocated_velodyne_pcap(::std::string* velodyne_pcap);

  // double time_increment = 1;
  void clear_time_increment();
  static const int kTimeIncrementFieldNumber = 1;
  double time_increment() const;
  void set_time_increment(double value);

  // @@protoc_insertion_point(class_scope:metamoto.messages.Lidar)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::LaserReturnGroup > groups_;
  ::google::protobuf::internal::ArenaStringPtr velodyne_pcap_;
  double time_increment_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fmessages_2flidar_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Lidar

// double time_increment = 1;
inline void Lidar::clear_time_increment() {
  time_increment_ = 0;
}
inline double Lidar::time_increment() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Lidar.time_increment)
  return time_increment_;
}
inline void Lidar::set_time_increment(double value) {
  
  time_increment_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.Lidar.time_increment)
}

// repeated .metamoto.types.LaserReturnGroup groups = 2;
inline int Lidar::groups_size() const {
  return groups_.size();
}
inline ::metamoto::types::LaserReturnGroup* Lidar::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Lidar.groups)
  return groups_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::LaserReturnGroup >*
Lidar::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.messages.Lidar.groups)
  return &groups_;
}
inline const ::metamoto::types::LaserReturnGroup& Lidar::groups(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Lidar.groups)
  return groups_.Get(index);
}
inline ::metamoto::types::LaserReturnGroup* Lidar::add_groups() {
  // @@protoc_insertion_point(field_add:metamoto.messages.Lidar.groups)
  return groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::LaserReturnGroup >&
Lidar::groups() const {
  // @@protoc_insertion_point(field_list:metamoto.messages.Lidar.groups)
  return groups_;
}

// bytes velodyne_pcap = 3;
inline void Lidar::clear_velodyne_pcap() {
  velodyne_pcap_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Lidar::velodyne_pcap() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Lidar.velodyne_pcap)
  return velodyne_pcap_.GetNoArena();
}
inline void Lidar::set_velodyne_pcap(const ::std::string& value) {
  
  velodyne_pcap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.messages.Lidar.velodyne_pcap)
}
#if LANG_CXX11
inline void Lidar::set_velodyne_pcap(::std::string&& value) {
  
  velodyne_pcap_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.messages.Lidar.velodyne_pcap)
}
#endif
inline void Lidar::set_velodyne_pcap(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  velodyne_pcap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.messages.Lidar.velodyne_pcap)
}
inline void Lidar::set_velodyne_pcap(const void* value, size_t size) {
  
  velodyne_pcap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.messages.Lidar.velodyne_pcap)
}
inline ::std::string* Lidar::mutable_velodyne_pcap() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Lidar.velodyne_pcap)
  return velodyne_pcap_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lidar::release_velodyne_pcap() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Lidar.velodyne_pcap)
  
  return velodyne_pcap_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lidar::set_allocated_velodyne_pcap(::std::string* velodyne_pcap) {
  if (velodyne_pcap != NULL) {
    
  } else {
    
  }
  velodyne_pcap_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), velodyne_pcap);
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Lidar.velodyne_pcap)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2fmessages_2flidar_2eproto
