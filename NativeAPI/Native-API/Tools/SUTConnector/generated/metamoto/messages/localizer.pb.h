// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/messages/localizer.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2fmessages_2flocalizer_2eproto
#define PROTOBUF_INCLUDED_metamoto_2fmessages_2flocalizer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/quaternion.pb.h"
#include "metamoto/types/vector3.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2flocalizer_2eproto 

namespace protobuf_metamoto_2fmessages_2flocalizer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2fmessages_2flocalizer_2eproto
namespace metamoto {
namespace messages {
class Localizer;
class LocalizerDefaultTypeInternal;
extern LocalizerDefaultTypeInternal _Localizer_default_instance_;
class Uncertainty;
class UncertaintyDefaultTypeInternal;
extern UncertaintyDefaultTypeInternal _Uncertainty_default_instance_;
}  // namespace messages
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::messages::Localizer* Arena::CreateMaybeMessage<::metamoto::messages::Localizer>(Arena*);
template<> ::metamoto::messages::Uncertainty* Arena::CreateMaybeMessage<::metamoto::messages::Uncertainty>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace messages {

// ===================================================================

class Localizer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.messages.Localizer) */ {
 public:
  Localizer();
  virtual ~Localizer();

  Localizer(const Localizer& from);

  inline Localizer& operator=(const Localizer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Localizer(Localizer&& from) noexcept
    : Localizer() {
    *this = ::std::move(from);
  }

  inline Localizer& operator=(Localizer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Localizer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Localizer* internal_default_instance() {
    return reinterpret_cast<const Localizer*>(
               &_Localizer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Localizer* other);
  friend void swap(Localizer& a, Localizer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Localizer* New() const final {
    return CreateMaybeMessage<Localizer>(NULL);
  }

  Localizer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Localizer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Localizer& from);
  void MergeFrom(const Localizer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Localizer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.types.Vector3 position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  private:
  const ::metamoto::types::Vector3& _internal_position() const;
  public:
  const ::metamoto::types::Vector3& position() const;
  ::metamoto::types::Vector3* release_position();
  ::metamoto::types::Vector3* mutable_position();
  void set_allocated_position(::metamoto::types::Vector3* position);

  // .metamoto.types.Quaternion orientation = 2;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 2;
  private:
  const ::metamoto::types::Quaternion& _internal_orientation() const;
  public:
  const ::metamoto::types::Quaternion& orientation() const;
  ::metamoto::types::Quaternion* release_orientation();
  ::metamoto::types::Quaternion* mutable_orientation();
  void set_allocated_orientation(::metamoto::types::Quaternion* orientation);

  // .metamoto.types.Vector3 linear_velocity = 3;
  bool has_linear_velocity() const;
  void clear_linear_velocity();
  static const int kLinearVelocityFieldNumber = 3;
  private:
  const ::metamoto::types::Vector3& _internal_linear_velocity() const;
  public:
  const ::metamoto::types::Vector3& linear_velocity() const;
  ::metamoto::types::Vector3* release_linear_velocity();
  ::metamoto::types::Vector3* mutable_linear_velocity();
  void set_allocated_linear_velocity(::metamoto::types::Vector3* linear_velocity);

  // .metamoto.types.Vector3 linear_acceleration = 4;
  bool has_linear_acceleration() const;
  void clear_linear_acceleration();
  static const int kLinearAccelerationFieldNumber = 4;
  private:
  const ::metamoto::types::Vector3& _internal_linear_acceleration() const;
  public:
  const ::metamoto::types::Vector3& linear_acceleration() const;
  ::metamoto::types::Vector3* release_linear_acceleration();
  ::metamoto::types::Vector3* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::metamoto::types::Vector3* linear_acceleration);

  // .metamoto.types.Vector3 angular_velocity = 5;
  bool has_angular_velocity() const;
  void clear_angular_velocity();
  static const int kAngularVelocityFieldNumber = 5;
  private:
  const ::metamoto::types::Vector3& _internal_angular_velocity() const;
  public:
  const ::metamoto::types::Vector3& angular_velocity() const;
  ::metamoto::types::Vector3* release_angular_velocity();
  ::metamoto::types::Vector3* mutable_angular_velocity();
  void set_allocated_angular_velocity(::metamoto::types::Vector3* angular_velocity);

  // .metamoto.messages.Uncertainty uncertainty = 6;
  bool has_uncertainty() const;
  void clear_uncertainty();
  static const int kUncertaintyFieldNumber = 6;
  private:
  const ::metamoto::messages::Uncertainty& _internal_uncertainty() const;
  public:
  const ::metamoto::messages::Uncertainty& uncertainty() const;
  ::metamoto::messages::Uncertainty* release_uncertainty();
  ::metamoto::messages::Uncertainty* mutable_uncertainty();
  void set_allocated_uncertainty(::metamoto::messages::Uncertainty* uncertainty);

  // @@protoc_insertion_point(class_scope:metamoto.messages.Localizer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::types::Vector3* position_;
  ::metamoto::types::Quaternion* orientation_;
  ::metamoto::types::Vector3* linear_velocity_;
  ::metamoto::types::Vector3* linear_acceleration_;
  ::metamoto::types::Vector3* angular_velocity_;
  ::metamoto::messages::Uncertainty* uncertainty_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fmessages_2flocalizer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Uncertainty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.messages.Uncertainty) */ {
 public:
  Uncertainty();
  virtual ~Uncertainty();

  Uncertainty(const Uncertainty& from);

  inline Uncertainty& operator=(const Uncertainty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Uncertainty(Uncertainty&& from) noexcept
    : Uncertainty() {
    *this = ::std::move(from);
  }

  inline Uncertainty& operator=(Uncertainty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Uncertainty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Uncertainty* internal_default_instance() {
    return reinterpret_cast<const Uncertainty*>(
               &_Uncertainty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Uncertainty* other);
  friend void swap(Uncertainty& a, Uncertainty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Uncertainty* New() const final {
    return CreateMaybeMessage<Uncertainty>(NULL);
  }

  Uncertainty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Uncertainty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Uncertainty& from);
  void MergeFrom(const Uncertainty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uncertainty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.types.Vector3 position_std_dev = 1;
  bool has_position_std_dev() const;
  void clear_position_std_dev();
  static const int kPositionStdDevFieldNumber = 1;
  private:
  const ::metamoto::types::Vector3& _internal_position_std_dev() const;
  public:
  const ::metamoto::types::Vector3& position_std_dev() const;
  ::metamoto::types::Vector3* release_position_std_dev();
  ::metamoto::types::Vector3* mutable_position_std_dev();
  void set_allocated_position_std_dev(::metamoto::types::Vector3* position_std_dev);

  // .metamoto.types.Vector3 orientation_axis_std_dev = 2;
  bool has_orientation_axis_std_dev() const;
  void clear_orientation_axis_std_dev();
  static const int kOrientationAxisStdDevFieldNumber = 2;
  private:
  const ::metamoto::types::Vector3& _internal_orientation_axis_std_dev() const;
  public:
  const ::metamoto::types::Vector3& orientation_axis_std_dev() const;
  ::metamoto::types::Vector3* release_orientation_axis_std_dev();
  ::metamoto::types::Vector3* mutable_orientation_axis_std_dev();
  void set_allocated_orientation_axis_std_dev(::metamoto::types::Vector3* orientation_axis_std_dev);

  // .metamoto.types.Vector3 linear_velocity_std_dev = 4;
  bool has_linear_velocity_std_dev() const;
  void clear_linear_velocity_std_dev();
  static const int kLinearVelocityStdDevFieldNumber = 4;
  private:
  const ::metamoto::types::Vector3& _internal_linear_velocity_std_dev() const;
  public:
  const ::metamoto::types::Vector3& linear_velocity_std_dev() const;
  ::metamoto::types::Vector3* release_linear_velocity_std_dev();
  ::metamoto::types::Vector3* mutable_linear_velocity_std_dev();
  void set_allocated_linear_velocity_std_dev(::metamoto::types::Vector3* linear_velocity_std_dev);

  // .metamoto.types.Vector3 linear_acceleration_std_dev = 5;
  bool has_linear_acceleration_std_dev() const;
  void clear_linear_acceleration_std_dev();
  static const int kLinearAccelerationStdDevFieldNumber = 5;
  private:
  const ::metamoto::types::Vector3& _internal_linear_acceleration_std_dev() const;
  public:
  const ::metamoto::types::Vector3& linear_acceleration_std_dev() const;
  ::metamoto::types::Vector3* release_linear_acceleration_std_dev();
  ::metamoto::types::Vector3* mutable_linear_acceleration_std_dev();
  void set_allocated_linear_acceleration_std_dev(::metamoto::types::Vector3* linear_acceleration_std_dev);

  // .metamoto.types.Vector3 angular_velocity_std_dev = 6;
  bool has_angular_velocity_std_dev() const;
  void clear_angular_velocity_std_dev();
  static const int kAngularVelocityStdDevFieldNumber = 6;
  private:
  const ::metamoto::types::Vector3& _internal_angular_velocity_std_dev() const;
  public:
  const ::metamoto::types::Vector3& angular_velocity_std_dev() const;
  ::metamoto::types::Vector3* release_angular_velocity_std_dev();
  ::metamoto::types::Vector3* mutable_angular_velocity_std_dev();
  void set_allocated_angular_velocity_std_dev(::metamoto::types::Vector3* angular_velocity_std_dev);

  // float orientation_angle_std_dev = 3;
  void clear_orientation_angle_std_dev();
  static const int kOrientationAngleStdDevFieldNumber = 3;
  float orientation_angle_std_dev() const;
  void set_orientation_angle_std_dev(float value);

  // @@protoc_insertion_point(class_scope:metamoto.messages.Uncertainty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::types::Vector3* position_std_dev_;
  ::metamoto::types::Vector3* orientation_axis_std_dev_;
  ::metamoto::types::Vector3* linear_velocity_std_dev_;
  ::metamoto::types::Vector3* linear_acceleration_std_dev_;
  ::metamoto::types::Vector3* angular_velocity_std_dev_;
  float orientation_angle_std_dev_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fmessages_2flocalizer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Localizer

// .metamoto.types.Vector3 position = 1;
inline bool Localizer::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::metamoto::types::Vector3& Localizer::_internal_position() const {
  return *position_;
}
inline const ::metamoto::types::Vector3& Localizer::position() const {
  const ::metamoto::types::Vector3* p = position_;
  // @@protoc_insertion_point(field_get:metamoto.messages.Localizer.position)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* Localizer::release_position() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Localizer.position)
  
  ::metamoto::types::Vector3* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* Localizer::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Localizer.position)
  return position_;
}
inline void Localizer::set_allocated_position(::metamoto::types::Vector3* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Localizer.position)
}

// .metamoto.types.Quaternion orientation = 2;
inline bool Localizer::has_orientation() const {
  return this != internal_default_instance() && orientation_ != NULL;
}
inline const ::metamoto::types::Quaternion& Localizer::_internal_orientation() const {
  return *orientation_;
}
inline const ::metamoto::types::Quaternion& Localizer::orientation() const {
  const ::metamoto::types::Quaternion* p = orientation_;
  // @@protoc_insertion_point(field_get:metamoto.messages.Localizer.orientation)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Quaternion*>(
      &::metamoto::types::_Quaternion_default_instance_);
}
inline ::metamoto::types::Quaternion* Localizer::release_orientation() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Localizer.orientation)
  
  ::metamoto::types::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline ::metamoto::types::Quaternion* Localizer::mutable_orientation() {
  
  if (orientation_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Quaternion>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Localizer.orientation)
  return orientation_;
}
inline void Localizer::set_allocated_orientation(::metamoto::types::Quaternion* orientation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      orientation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Localizer.orientation)
}

// .metamoto.types.Vector3 linear_velocity = 3;
inline bool Localizer::has_linear_velocity() const {
  return this != internal_default_instance() && linear_velocity_ != NULL;
}
inline const ::metamoto::types::Vector3& Localizer::_internal_linear_velocity() const {
  return *linear_velocity_;
}
inline const ::metamoto::types::Vector3& Localizer::linear_velocity() const {
  const ::metamoto::types::Vector3* p = linear_velocity_;
  // @@protoc_insertion_point(field_get:metamoto.messages.Localizer.linear_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* Localizer::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Localizer.linear_velocity)
  
  ::metamoto::types::Vector3* temp = linear_velocity_;
  linear_velocity_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* Localizer::mutable_linear_velocity() {
  
  if (linear_velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    linear_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Localizer.linear_velocity)
  return linear_velocity_;
}
inline void Localizer::set_allocated_linear_velocity(::metamoto::types::Vector3* linear_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_velocity_);
  }
  if (linear_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_velocity, submessage_arena);
    }
    
  } else {
    
  }
  linear_velocity_ = linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Localizer.linear_velocity)
}

// .metamoto.types.Vector3 linear_acceleration = 4;
inline bool Localizer::has_linear_acceleration() const {
  return this != internal_default_instance() && linear_acceleration_ != NULL;
}
inline const ::metamoto::types::Vector3& Localizer::_internal_linear_acceleration() const {
  return *linear_acceleration_;
}
inline const ::metamoto::types::Vector3& Localizer::linear_acceleration() const {
  const ::metamoto::types::Vector3* p = linear_acceleration_;
  // @@protoc_insertion_point(field_get:metamoto.messages.Localizer.linear_acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* Localizer::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Localizer.linear_acceleration)
  
  ::metamoto::types::Vector3* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* Localizer::mutable_linear_acceleration() {
  
  if (linear_acceleration_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    linear_acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Localizer.linear_acceleration)
  return linear_acceleration_;
}
inline void Localizer::set_allocated_linear_acceleration(::metamoto::types::Vector3* linear_acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_acceleration_);
  }
  if (linear_acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  linear_acceleration_ = linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Localizer.linear_acceleration)
}

// .metamoto.types.Vector3 angular_velocity = 5;
inline bool Localizer::has_angular_velocity() const {
  return this != internal_default_instance() && angular_velocity_ != NULL;
}
inline const ::metamoto::types::Vector3& Localizer::_internal_angular_velocity() const {
  return *angular_velocity_;
}
inline const ::metamoto::types::Vector3& Localizer::angular_velocity() const {
  const ::metamoto::types::Vector3* p = angular_velocity_;
  // @@protoc_insertion_point(field_get:metamoto.messages.Localizer.angular_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* Localizer::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Localizer.angular_velocity)
  
  ::metamoto::types::Vector3* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* Localizer::mutable_angular_velocity() {
  
  if (angular_velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    angular_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Localizer.angular_velocity)
  return angular_velocity_;
}
inline void Localizer::set_allocated_angular_velocity(::metamoto::types::Vector3* angular_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(angular_velocity_);
  }
  if (angular_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      angular_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Localizer.angular_velocity)
}

// .metamoto.messages.Uncertainty uncertainty = 6;
inline bool Localizer::has_uncertainty() const {
  return this != internal_default_instance() && uncertainty_ != NULL;
}
inline void Localizer::clear_uncertainty() {
  if (GetArenaNoVirtual() == NULL && uncertainty_ != NULL) {
    delete uncertainty_;
  }
  uncertainty_ = NULL;
}
inline const ::metamoto::messages::Uncertainty& Localizer::_internal_uncertainty() const {
  return *uncertainty_;
}
inline const ::metamoto::messages::Uncertainty& Localizer::uncertainty() const {
  const ::metamoto::messages::Uncertainty* p = uncertainty_;
  // @@protoc_insertion_point(field_get:metamoto.messages.Localizer.uncertainty)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::messages::Uncertainty*>(
      &::metamoto::messages::_Uncertainty_default_instance_);
}
inline ::metamoto::messages::Uncertainty* Localizer::release_uncertainty() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Localizer.uncertainty)
  
  ::metamoto::messages::Uncertainty* temp = uncertainty_;
  uncertainty_ = NULL;
  return temp;
}
inline ::metamoto::messages::Uncertainty* Localizer::mutable_uncertainty() {
  
  if (uncertainty_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::messages::Uncertainty>(GetArenaNoVirtual());
    uncertainty_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Localizer.uncertainty)
  return uncertainty_;
}
inline void Localizer::set_allocated_uncertainty(::metamoto::messages::Uncertainty* uncertainty) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete uncertainty_;
  }
  if (uncertainty) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      uncertainty = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uncertainty, submessage_arena);
    }
    
  } else {
    
  }
  uncertainty_ = uncertainty;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Localizer.uncertainty)
}

// -------------------------------------------------------------------

// Uncertainty

// .metamoto.types.Vector3 position_std_dev = 1;
inline bool Uncertainty::has_position_std_dev() const {
  return this != internal_default_instance() && position_std_dev_ != NULL;
}
inline const ::metamoto::types::Vector3& Uncertainty::_internal_position_std_dev() const {
  return *position_std_dev_;
}
inline const ::metamoto::types::Vector3& Uncertainty::position_std_dev() const {
  const ::metamoto::types::Vector3* p = position_std_dev_;
  // @@protoc_insertion_point(field_get:metamoto.messages.Uncertainty.position_std_dev)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* Uncertainty::release_position_std_dev() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Uncertainty.position_std_dev)
  
  ::metamoto::types::Vector3* temp = position_std_dev_;
  position_std_dev_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* Uncertainty::mutable_position_std_dev() {
  
  if (position_std_dev_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    position_std_dev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Uncertainty.position_std_dev)
  return position_std_dev_;
}
inline void Uncertainty::set_allocated_position_std_dev(::metamoto::types::Vector3* position_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_std_dev_);
  }
  if (position_std_dev) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position_std_dev, submessage_arena);
    }
    
  } else {
    
  }
  position_std_dev_ = position_std_dev;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Uncertainty.position_std_dev)
}

// .metamoto.types.Vector3 orientation_axis_std_dev = 2;
inline bool Uncertainty::has_orientation_axis_std_dev() const {
  return this != internal_default_instance() && orientation_axis_std_dev_ != NULL;
}
inline const ::metamoto::types::Vector3& Uncertainty::_internal_orientation_axis_std_dev() const {
  return *orientation_axis_std_dev_;
}
inline const ::metamoto::types::Vector3& Uncertainty::orientation_axis_std_dev() const {
  const ::metamoto::types::Vector3* p = orientation_axis_std_dev_;
  // @@protoc_insertion_point(field_get:metamoto.messages.Uncertainty.orientation_axis_std_dev)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* Uncertainty::release_orientation_axis_std_dev() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Uncertainty.orientation_axis_std_dev)
  
  ::metamoto::types::Vector3* temp = orientation_axis_std_dev_;
  orientation_axis_std_dev_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* Uncertainty::mutable_orientation_axis_std_dev() {
  
  if (orientation_axis_std_dev_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    orientation_axis_std_dev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Uncertainty.orientation_axis_std_dev)
  return orientation_axis_std_dev_;
}
inline void Uncertainty::set_allocated_orientation_axis_std_dev(::metamoto::types::Vector3* orientation_axis_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(orientation_axis_std_dev_);
  }
  if (orientation_axis_std_dev) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      orientation_axis_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation_axis_std_dev, submessage_arena);
    }
    
  } else {
    
  }
  orientation_axis_std_dev_ = orientation_axis_std_dev;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Uncertainty.orientation_axis_std_dev)
}

// float orientation_angle_std_dev = 3;
inline void Uncertainty::clear_orientation_angle_std_dev() {
  orientation_angle_std_dev_ = 0;
}
inline float Uncertainty::orientation_angle_std_dev() const {
  // @@protoc_insertion_point(field_get:metamoto.messages.Uncertainty.orientation_angle_std_dev)
  return orientation_angle_std_dev_;
}
inline void Uncertainty::set_orientation_angle_std_dev(float value) {
  
  orientation_angle_std_dev_ = value;
  // @@protoc_insertion_point(field_set:metamoto.messages.Uncertainty.orientation_angle_std_dev)
}

// .metamoto.types.Vector3 linear_velocity_std_dev = 4;
inline bool Uncertainty::has_linear_velocity_std_dev() const {
  return this != internal_default_instance() && linear_velocity_std_dev_ != NULL;
}
inline const ::metamoto::types::Vector3& Uncertainty::_internal_linear_velocity_std_dev() const {
  return *linear_velocity_std_dev_;
}
inline const ::metamoto::types::Vector3& Uncertainty::linear_velocity_std_dev() const {
  const ::metamoto::types::Vector3* p = linear_velocity_std_dev_;
  // @@protoc_insertion_point(field_get:metamoto.messages.Uncertainty.linear_velocity_std_dev)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* Uncertainty::release_linear_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Uncertainty.linear_velocity_std_dev)
  
  ::metamoto::types::Vector3* temp = linear_velocity_std_dev_;
  linear_velocity_std_dev_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* Uncertainty::mutable_linear_velocity_std_dev() {
  
  if (linear_velocity_std_dev_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    linear_velocity_std_dev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Uncertainty.linear_velocity_std_dev)
  return linear_velocity_std_dev_;
}
inline void Uncertainty::set_allocated_linear_velocity_std_dev(::metamoto::types::Vector3* linear_velocity_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_velocity_std_dev_);
  }
  if (linear_velocity_std_dev) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_velocity_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_velocity_std_dev, submessage_arena);
    }
    
  } else {
    
  }
  linear_velocity_std_dev_ = linear_velocity_std_dev;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Uncertainty.linear_velocity_std_dev)
}

// .metamoto.types.Vector3 linear_acceleration_std_dev = 5;
inline bool Uncertainty::has_linear_acceleration_std_dev() const {
  return this != internal_default_instance() && linear_acceleration_std_dev_ != NULL;
}
inline const ::metamoto::types::Vector3& Uncertainty::_internal_linear_acceleration_std_dev() const {
  return *linear_acceleration_std_dev_;
}
inline const ::metamoto::types::Vector3& Uncertainty::linear_acceleration_std_dev() const {
  const ::metamoto::types::Vector3* p = linear_acceleration_std_dev_;
  // @@protoc_insertion_point(field_get:metamoto.messages.Uncertainty.linear_acceleration_std_dev)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* Uncertainty::release_linear_acceleration_std_dev() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Uncertainty.linear_acceleration_std_dev)
  
  ::metamoto::types::Vector3* temp = linear_acceleration_std_dev_;
  linear_acceleration_std_dev_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* Uncertainty::mutable_linear_acceleration_std_dev() {
  
  if (linear_acceleration_std_dev_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    linear_acceleration_std_dev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Uncertainty.linear_acceleration_std_dev)
  return linear_acceleration_std_dev_;
}
inline void Uncertainty::set_allocated_linear_acceleration_std_dev(::metamoto::types::Vector3* linear_acceleration_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_acceleration_std_dev_);
  }
  if (linear_acceleration_std_dev) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_acceleration_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_acceleration_std_dev, submessage_arena);
    }
    
  } else {
    
  }
  linear_acceleration_std_dev_ = linear_acceleration_std_dev;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Uncertainty.linear_acceleration_std_dev)
}

// .metamoto.types.Vector3 angular_velocity_std_dev = 6;
inline bool Uncertainty::has_angular_velocity_std_dev() const {
  return this != internal_default_instance() && angular_velocity_std_dev_ != NULL;
}
inline const ::metamoto::types::Vector3& Uncertainty::_internal_angular_velocity_std_dev() const {
  return *angular_velocity_std_dev_;
}
inline const ::metamoto::types::Vector3& Uncertainty::angular_velocity_std_dev() const {
  const ::metamoto::types::Vector3* p = angular_velocity_std_dev_;
  // @@protoc_insertion_point(field_get:metamoto.messages.Uncertainty.angular_velocity_std_dev)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* Uncertainty::release_angular_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:metamoto.messages.Uncertainty.angular_velocity_std_dev)
  
  ::metamoto::types::Vector3* temp = angular_velocity_std_dev_;
  angular_velocity_std_dev_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* Uncertainty::mutable_angular_velocity_std_dev() {
  
  if (angular_velocity_std_dev_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    angular_velocity_std_dev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.messages.Uncertainty.angular_velocity_std_dev)
  return angular_velocity_std_dev_;
}
inline void Uncertainty::set_allocated_angular_velocity_std_dev(::metamoto::types::Vector3* angular_velocity_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(angular_velocity_std_dev_);
  }
  if (angular_velocity_std_dev) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      angular_velocity_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, angular_velocity_std_dev, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_std_dev_ = angular_velocity_std_dev;
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.Uncertainty.angular_velocity_std_dev)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2fmessages_2flocalizer_2eproto
