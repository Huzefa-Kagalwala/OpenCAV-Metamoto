// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/messages/data_bus_message.proto

#include "metamoto/messages/data_bus_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fany_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fany_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Any;
}  // namespace protobuf_google_2fprotobuf_2fany_2eproto
namespace protobuf_metamoto_2fmessages_2fcamera_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fcamera_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Camera;
}  // namespace protobuf_metamoto_2fmessages_2fcamera_2eproto
namespace protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Header;
}  // namespace protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto
namespace protobuf_metamoto_2fmessages_2fevent_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fevent_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Event;
}  // namespace protobuf_metamoto_2fmessages_2fevent_2eproto
namespace protobuf_metamoto_2fmessages_2fgps_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fgps_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GPS;
}  // namespace protobuf_metamoto_2fmessages_2fgps_2eproto
namespace protobuf_metamoto_2fmessages_2fground_5ftruth_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fground_5ftruth_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_GroundTruth;
}  // namespace protobuf_metamoto_2fmessages_2fground_5ftruth_2eproto
namespace protobuf_metamoto_2fmessages_2fimu_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fimu_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IMU;
}  // namespace protobuf_metamoto_2fmessages_2fimu_2eproto
namespace protobuf_metamoto_2fmessages_2flidar_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2flidar_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Lidar;
}  // namespace protobuf_metamoto_2fmessages_2flidar_2eproto
namespace protobuf_metamoto_2fmessages_2flocalizer_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2flocalizer_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Localizer;
}  // namespace protobuf_metamoto_2fmessages_2flocalizer_2eproto
namespace protobuf_metamoto_2fmessages_2fperception_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fperception_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Perception;
}  // namespace protobuf_metamoto_2fmessages_2fperception_2eproto
namespace protobuf_metamoto_2fmessages_2fradar_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fradar_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Radar;
}  // namespace protobuf_metamoto_2fmessages_2fradar_2eproto
namespace protobuf_metamoto_2fmessages_2fv2x_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fv2x_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_V2X;
}  // namespace protobuf_metamoto_2fmessages_2fv2x_2eproto
namespace protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_VehicleControls;
}  // namespace protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto
namespace protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_VehicleState;
}  // namespace protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto
namespace metamoto {
namespace messages {
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class DataBusMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataBusMessage>
      _instance;
  const ::metamoto::messages::VehicleState* vehicle_state_;
  const ::metamoto::messages::VehicleControls* vehicle_controls_;
  const ::metamoto::messages::Camera* camera_;
  const ::metamoto::messages::Lidar* lidar_;
  const ::metamoto::messages::Radar* radar_;
  const ::metamoto::messages::GPS* gps_;
  const ::metamoto::messages::IMU* imu_;
  const ::metamoto::messages::Localizer* localizer_;
  const ::metamoto::messages::V2X* v2x_;
  const ::metamoto::messages::Event* event_;
  const ::metamoto::messages::Perception* perception_;
  const ::metamoto::messages::GroundTruth* ground_truth_;
  const ::google::protobuf::Any* other_;
} _DataBusMessage_default_instance_;
}  // namespace messages
}  // namespace metamoto
namespace protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto {
static void InitDefaultsHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::messages::_Header_default_instance_;
    new (ptr) ::metamoto::messages::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::messages::Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Header =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeader}, {}};

static void InitDefaultsDataBusMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::messages::_DataBusMessage_default_instance_;
    new (ptr) ::metamoto::messages::DataBusMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::messages::DataBusMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<14> scc_info_DataBusMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 14, InitDefaultsDataBusMessage}, {
      &protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto::scc_info_Header.base,
      &protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto::scc_info_VehicleState.base,
      &protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto::scc_info_VehicleControls.base,
      &protobuf_metamoto_2fmessages_2fcamera_2eproto::scc_info_Camera.base,
      &protobuf_metamoto_2fmessages_2flidar_2eproto::scc_info_Lidar.base,
      &protobuf_metamoto_2fmessages_2fradar_2eproto::scc_info_Radar.base,
      &protobuf_metamoto_2fmessages_2fgps_2eproto::scc_info_GPS.base,
      &protobuf_metamoto_2fmessages_2fimu_2eproto::scc_info_IMU.base,
      &protobuf_metamoto_2fmessages_2flocalizer_2eproto::scc_info_Localizer.base,
      &protobuf_metamoto_2fmessages_2fv2x_2eproto::scc_info_V2X.base,
      &protobuf_metamoto_2fmessages_2fevent_2eproto::scc_info_Event.base,
      &protobuf_metamoto_2fmessages_2fperception_2eproto::scc_info_Perception.base,
      &protobuf_metamoto_2fmessages_2fground_5ftruth_2eproto::scc_info_GroundTruth.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Header.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataBusMessage.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::Header, time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::DataBusMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::DataBusMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::DataBusMessage, header_),
  offsetof(::metamoto::messages::DataBusMessageDefaultTypeInternal, vehicle_state_),
  offsetof(::metamoto::messages::DataBusMessageDefaultTypeInternal, vehicle_controls_),
  offsetof(::metamoto::messages::DataBusMessageDefaultTypeInternal, camera_),
  offsetof(::metamoto::messages::DataBusMessageDefaultTypeInternal, lidar_),
  offsetof(::metamoto::messages::DataBusMessageDefaultTypeInternal, radar_),
  offsetof(::metamoto::messages::DataBusMessageDefaultTypeInternal, gps_),
  offsetof(::metamoto::messages::DataBusMessageDefaultTypeInternal, imu_),
  offsetof(::metamoto::messages::DataBusMessageDefaultTypeInternal, localizer_),
  offsetof(::metamoto::messages::DataBusMessageDefaultTypeInternal, v2x_),
  offsetof(::metamoto::messages::DataBusMessageDefaultTypeInternal, event_),
  offsetof(::metamoto::messages::DataBusMessageDefaultTypeInternal, perception_),
  offsetof(::metamoto::messages::DataBusMessageDefaultTypeInternal, ground_truth_),
  offsetof(::metamoto::messages::DataBusMessageDefaultTypeInternal, other_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::messages::DataBusMessage, data_oneof_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::messages::Header)},
  { 6, -1, sizeof(::metamoto::messages::DataBusMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::messages::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::messages::_DataBusMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/messages/data_bus_message.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n(metamoto/messages/data_bus_message.pro"
      "to\022\021metamoto.messages\032\031google/protobuf/a"
      "ny.proto\032%metamoto/messages/vehicle_stat"
      "e.proto\032(metamoto/messages/vehicle_contr"
      "ols.proto\032\036metamoto/messages/camera.prot"
      "o\032\035metamoto/messages/lidar.proto\032\035metamo"
      "to/messages/radar.proto\032\033metamoto/messag"
      "es/gps.proto\032\033metamoto/messages/imu.prot"
      "o\032$metamoto/messages/ground_truth.proto\032"
      "!metamoto/messages/localizer.proto\032\033meta"
      "moto/messages/v2x.proto\032\"metamoto/messag"
      "es/perception.proto\032\035metamoto/messages/e"
      "vent.proto\"\026\n\006Header\022\014\n\004time\030\001 \001(\001\"\255\005\n\016D"
      "ataBusMessage\022)\n\006header\030\001 \001(\0132\031.metamoto"
      ".messages.Header\0228\n\rvehicle_state\030\002 \001(\0132"
      "\037.metamoto.messages.VehicleStateH\000\022>\n\020ve"
      "hicle_controls\030\003 \001(\0132\".metamoto.messages"
      ".VehicleControlsH\000\022+\n\006camera\030\004 \001(\0132\031.met"
      "amoto.messages.CameraH\000\022)\n\005lidar\030\005 \001(\0132\030"
      ".metamoto.messages.LidarH\000\022)\n\005radar\030\006 \001("
      "\0132\030.metamoto.messages.RadarH\000\022%\n\003gps\030\007 \001"
      "(\0132\026.metamoto.messages.GPSH\000\022%\n\003imu\030\010 \001("
      "\0132\026.metamoto.messages.IMUH\000\0221\n\tlocalizer"
      "\030\t \001(\0132\034.metamoto.messages.LocalizerH\000\022%"
      "\n\003v2x\030\n \001(\0132\026.metamoto.messages.V2XH\000\022)\n"
      "\005event\030\013 \001(\0132\030.metamoto.messages.EventH\000"
      "\0223\n\nperception\030\014 \001(\0132\035.metamoto.messages"
      ".PerceptionH\000\0226\n\014ground_truth\030\036 \001(\0132\036.me"
      "tamoto.messages.GroundTruthH\000\022%\n\005other\030d"
      " \001(\0132\024.google.protobuf.AnyH\000B\014\n\ndata_one"
      "ofB\024\252\002\021Metamoto.Messagesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1232);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/messages/data_bus_message.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fmessages_2fvehicle_5fstate_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fmessages_2fvehicle_5fcontrols_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fmessages_2fcamera_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fmessages_2flidar_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fmessages_2fradar_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fmessages_2fgps_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fmessages_2fimu_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fmessages_2fground_5ftruth_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fmessages_2flocalizer_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fmessages_2fv2x_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fmessages_2fperception_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fmessages_2fevent_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto
namespace metamoto {
namespace messages {

// ===================================================================

void Header::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto::scc_info_Header.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.messages.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:metamoto.messages.Header)
}

void Header::SharedCtor() {
  time_ = 0;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:metamoto.messages.Header)
  SharedDtor();
}

void Header::SharedDtor() {
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto::scc_info_Header.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.messages.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_ = 0;
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.messages.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.messages.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.messages.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.messages.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.messages.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.messages.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.messages.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.messages.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double time = 1;
  if (this->time() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.messages.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.messages.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.messages.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.messages.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.messages.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.messages.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DataBusMessage::InitAsDefaultInstance() {
  ::metamoto::messages::_DataBusMessage_default_instance_._instance.get_mutable()->header_ = const_cast< ::metamoto::messages::Header*>(
      ::metamoto::messages::Header::internal_default_instance());
  ::metamoto::messages::_DataBusMessage_default_instance_.vehicle_state_ = const_cast< ::metamoto::messages::VehicleState*>(
      ::metamoto::messages::VehicleState::internal_default_instance());
  ::metamoto::messages::_DataBusMessage_default_instance_.vehicle_controls_ = const_cast< ::metamoto::messages::VehicleControls*>(
      ::metamoto::messages::VehicleControls::internal_default_instance());
  ::metamoto::messages::_DataBusMessage_default_instance_.camera_ = const_cast< ::metamoto::messages::Camera*>(
      ::metamoto::messages::Camera::internal_default_instance());
  ::metamoto::messages::_DataBusMessage_default_instance_.lidar_ = const_cast< ::metamoto::messages::Lidar*>(
      ::metamoto::messages::Lidar::internal_default_instance());
  ::metamoto::messages::_DataBusMessage_default_instance_.radar_ = const_cast< ::metamoto::messages::Radar*>(
      ::metamoto::messages::Radar::internal_default_instance());
  ::metamoto::messages::_DataBusMessage_default_instance_.gps_ = const_cast< ::metamoto::messages::GPS*>(
      ::metamoto::messages::GPS::internal_default_instance());
  ::metamoto::messages::_DataBusMessage_default_instance_.imu_ = const_cast< ::metamoto::messages::IMU*>(
      ::metamoto::messages::IMU::internal_default_instance());
  ::metamoto::messages::_DataBusMessage_default_instance_.localizer_ = const_cast< ::metamoto::messages::Localizer*>(
      ::metamoto::messages::Localizer::internal_default_instance());
  ::metamoto::messages::_DataBusMessage_default_instance_.v2x_ = const_cast< ::metamoto::messages::V2X*>(
      ::metamoto::messages::V2X::internal_default_instance());
  ::metamoto::messages::_DataBusMessage_default_instance_.event_ = const_cast< ::metamoto::messages::Event*>(
      ::metamoto::messages::Event::internal_default_instance());
  ::metamoto::messages::_DataBusMessage_default_instance_.perception_ = const_cast< ::metamoto::messages::Perception*>(
      ::metamoto::messages::Perception::internal_default_instance());
  ::metamoto::messages::_DataBusMessage_default_instance_.ground_truth_ = const_cast< ::metamoto::messages::GroundTruth*>(
      ::metamoto::messages::GroundTruth::internal_default_instance());
  ::metamoto::messages::_DataBusMessage_default_instance_.other_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void DataBusMessage::set_allocated_vehicle_state(::metamoto::messages::VehicleState* vehicle_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (vehicle_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vehicle_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vehicle_state, submessage_arena);
    }
    set_has_vehicle_state();
    data_oneof_.vehicle_state_ = vehicle_state;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.DataBusMessage.vehicle_state)
}
void DataBusMessage::clear_vehicle_state() {
  if (has_vehicle_state()) {
    delete data_oneof_.vehicle_state_;
    clear_has_data_oneof();
  }
}
void DataBusMessage::set_allocated_vehicle_controls(::metamoto::messages::VehicleControls* vehicle_controls) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (vehicle_controls) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vehicle_controls = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vehicle_controls, submessage_arena);
    }
    set_has_vehicle_controls();
    data_oneof_.vehicle_controls_ = vehicle_controls;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.DataBusMessage.vehicle_controls)
}
void DataBusMessage::clear_vehicle_controls() {
  if (has_vehicle_controls()) {
    delete data_oneof_.vehicle_controls_;
    clear_has_data_oneof();
  }
}
void DataBusMessage::set_allocated_camera(::metamoto::messages::Camera* camera) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (camera) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      camera = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    set_has_camera();
    data_oneof_.camera_ = camera;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.DataBusMessage.camera)
}
void DataBusMessage::clear_camera() {
  if (has_camera()) {
    delete data_oneof_.camera_;
    clear_has_data_oneof();
  }
}
void DataBusMessage::set_allocated_lidar(::metamoto::messages::Lidar* lidar) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (lidar) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lidar = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lidar, submessage_arena);
    }
    set_has_lidar();
    data_oneof_.lidar_ = lidar;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.DataBusMessage.lidar)
}
void DataBusMessage::clear_lidar() {
  if (has_lidar()) {
    delete data_oneof_.lidar_;
    clear_has_data_oneof();
  }
}
void DataBusMessage::set_allocated_radar(::metamoto::messages::Radar* radar) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (radar) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      radar = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, radar, submessage_arena);
    }
    set_has_radar();
    data_oneof_.radar_ = radar;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.DataBusMessage.radar)
}
void DataBusMessage::clear_radar() {
  if (has_radar()) {
    delete data_oneof_.radar_;
    clear_has_data_oneof();
  }
}
void DataBusMessage::set_allocated_gps(::metamoto::messages::GPS* gps) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (gps) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gps = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gps, submessage_arena);
    }
    set_has_gps();
    data_oneof_.gps_ = gps;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.DataBusMessage.gps)
}
void DataBusMessage::clear_gps() {
  if (has_gps()) {
    delete data_oneof_.gps_;
    clear_has_data_oneof();
  }
}
void DataBusMessage::set_allocated_imu(::metamoto::messages::IMU* imu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (imu) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      imu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, imu, submessage_arena);
    }
    set_has_imu();
    data_oneof_.imu_ = imu;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.DataBusMessage.imu)
}
void DataBusMessage::clear_imu() {
  if (has_imu()) {
    delete data_oneof_.imu_;
    clear_has_data_oneof();
  }
}
void DataBusMessage::set_allocated_localizer(::metamoto::messages::Localizer* localizer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (localizer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      localizer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, localizer, submessage_arena);
    }
    set_has_localizer();
    data_oneof_.localizer_ = localizer;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.DataBusMessage.localizer)
}
void DataBusMessage::clear_localizer() {
  if (has_localizer()) {
    delete data_oneof_.localizer_;
    clear_has_data_oneof();
  }
}
void DataBusMessage::set_allocated_v2x(::metamoto::messages::V2X* v2x) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (v2x) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      v2x = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, v2x, submessage_arena);
    }
    set_has_v2x();
    data_oneof_.v2x_ = v2x;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.DataBusMessage.v2x)
}
void DataBusMessage::clear_v2x() {
  if (has_v2x()) {
    delete data_oneof_.v2x_;
    clear_has_data_oneof();
  }
}
void DataBusMessage::set_allocated_event(::metamoto::messages::Event* event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
    data_oneof_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.DataBusMessage.event)
}
void DataBusMessage::clear_event() {
  if (has_event()) {
    delete data_oneof_.event_;
    clear_has_data_oneof();
  }
}
void DataBusMessage::set_allocated_perception(::metamoto::messages::Perception* perception) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (perception) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      perception = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, perception, submessage_arena);
    }
    set_has_perception();
    data_oneof_.perception_ = perception;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.DataBusMessage.perception)
}
void DataBusMessage::clear_perception() {
  if (has_perception()) {
    delete data_oneof_.perception_;
    clear_has_data_oneof();
  }
}
void DataBusMessage::set_allocated_ground_truth(::metamoto::messages::GroundTruth* ground_truth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (ground_truth) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ground_truth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ground_truth, submessage_arena);
    }
    set_has_ground_truth();
    data_oneof_.ground_truth_ = ground_truth;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.DataBusMessage.ground_truth)
}
void DataBusMessage::clear_ground_truth() {
  if (has_ground_truth()) {
    delete data_oneof_.ground_truth_;
    clear_has_data_oneof();
  }
}
void DataBusMessage::set_allocated_other(::google::protobuf::Any* other) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (other) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      other = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, other, submessage_arena);
    }
    set_has_other();
    data_oneof_.other_ = other;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.messages.DataBusMessage.other)
}
void DataBusMessage::clear_other() {
  if (has_other()) {
    delete data_oneof_.other_;
    clear_has_data_oneof();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataBusMessage::kHeaderFieldNumber;
const int DataBusMessage::kVehicleStateFieldNumber;
const int DataBusMessage::kVehicleControlsFieldNumber;
const int DataBusMessage::kCameraFieldNumber;
const int DataBusMessage::kLidarFieldNumber;
const int DataBusMessage::kRadarFieldNumber;
const int DataBusMessage::kGpsFieldNumber;
const int DataBusMessage::kImuFieldNumber;
const int DataBusMessage::kLocalizerFieldNumber;
const int DataBusMessage::kV2XFieldNumber;
const int DataBusMessage::kEventFieldNumber;
const int DataBusMessage::kPerceptionFieldNumber;
const int DataBusMessage::kGroundTruthFieldNumber;
const int DataBusMessage::kOtherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataBusMessage::DataBusMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto::scc_info_DataBusMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.messages.DataBusMessage)
}
DataBusMessage::DataBusMessage(const DataBusMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::metamoto::messages::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  clear_has_data_oneof();
  switch (from.data_oneof_case()) {
    case kVehicleState: {
      mutable_vehicle_state()->::metamoto::messages::VehicleState::MergeFrom(from.vehicle_state());
      break;
    }
    case kVehicleControls: {
      mutable_vehicle_controls()->::metamoto::messages::VehicleControls::MergeFrom(from.vehicle_controls());
      break;
    }
    case kCamera: {
      mutable_camera()->::metamoto::messages::Camera::MergeFrom(from.camera());
      break;
    }
    case kLidar: {
      mutable_lidar()->::metamoto::messages::Lidar::MergeFrom(from.lidar());
      break;
    }
    case kRadar: {
      mutable_radar()->::metamoto::messages::Radar::MergeFrom(from.radar());
      break;
    }
    case kGps: {
      mutable_gps()->::metamoto::messages::GPS::MergeFrom(from.gps());
      break;
    }
    case kImu: {
      mutable_imu()->::metamoto::messages::IMU::MergeFrom(from.imu());
      break;
    }
    case kLocalizer: {
      mutable_localizer()->::metamoto::messages::Localizer::MergeFrom(from.localizer());
      break;
    }
    case kV2X: {
      mutable_v2x()->::metamoto::messages::V2X::MergeFrom(from.v2x());
      break;
    }
    case kEvent: {
      mutable_event()->::metamoto::messages::Event::MergeFrom(from.event());
      break;
    }
    case kPerception: {
      mutable_perception()->::metamoto::messages::Perception::MergeFrom(from.perception());
      break;
    }
    case kGroundTruth: {
      mutable_ground_truth()->::metamoto::messages::GroundTruth::MergeFrom(from.ground_truth());
      break;
    }
    case kOther: {
      mutable_other()->::google::protobuf::Any::MergeFrom(from.other());
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.messages.DataBusMessage)
}

void DataBusMessage::SharedCtor() {
  header_ = NULL;
  clear_has_data_oneof();
}

DataBusMessage::~DataBusMessage() {
  // @@protoc_insertion_point(destructor:metamoto.messages.DataBusMessage)
  SharedDtor();
}

void DataBusMessage::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (has_data_oneof()) {
    clear_data_oneof();
  }
}

void DataBusMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DataBusMessage::descriptor() {
  ::protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataBusMessage& DataBusMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto::scc_info_DataBusMessage.base);
  return *internal_default_instance();
}


void DataBusMessage::clear_data_oneof() {
// @@protoc_insertion_point(one_of_clear_start:metamoto.messages.DataBusMessage)
  switch (data_oneof_case()) {
    case kVehicleState: {
      delete data_oneof_.vehicle_state_;
      break;
    }
    case kVehicleControls: {
      delete data_oneof_.vehicle_controls_;
      break;
    }
    case kCamera: {
      delete data_oneof_.camera_;
      break;
    }
    case kLidar: {
      delete data_oneof_.lidar_;
      break;
    }
    case kRadar: {
      delete data_oneof_.radar_;
      break;
    }
    case kGps: {
      delete data_oneof_.gps_;
      break;
    }
    case kImu: {
      delete data_oneof_.imu_;
      break;
    }
    case kLocalizer: {
      delete data_oneof_.localizer_;
      break;
    }
    case kV2X: {
      delete data_oneof_.v2x_;
      break;
    }
    case kEvent: {
      delete data_oneof_.event_;
      break;
    }
    case kPerception: {
      delete data_oneof_.perception_;
      break;
    }
    case kGroundTruth: {
      delete data_oneof_.ground_truth_;
      break;
    }
    case kOther: {
      delete data_oneof_.other_;
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}


void DataBusMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.messages.DataBusMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  clear_data_oneof();
  _internal_metadata_.Clear();
}

bool DataBusMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.messages.DataBusMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.messages.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.messages.VehicleState vehicle_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.messages.VehicleControls vehicle_controls = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_controls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.messages.Camera camera = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.messages.Lidar lidar = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lidar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.messages.Radar radar = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_radar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.messages.GPS gps = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.messages.IMU imu = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_imu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.messages.Localizer localizer = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_localizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.messages.V2X v2x = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_v2x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.messages.Event event = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.messages.Perception perception = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_perception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.messages.GroundTruth ground_truth = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ground_truth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any other = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_other()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.messages.DataBusMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.messages.DataBusMessage)
  return false;
#undef DO_
}

void DataBusMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.messages.DataBusMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.messages.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .metamoto.messages.VehicleState vehicle_state = 2;
  if (has_vehicle_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_vehicle_state(), output);
  }

  // .metamoto.messages.VehicleControls vehicle_controls = 3;
  if (has_vehicle_controls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_vehicle_controls(), output);
  }

  // .metamoto.messages.Camera camera = 4;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_camera(), output);
  }

  // .metamoto.messages.Lidar lidar = 5;
  if (has_lidar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_lidar(), output);
  }

  // .metamoto.messages.Radar radar = 6;
  if (has_radar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_radar(), output);
  }

  // .metamoto.messages.GPS gps = 7;
  if (has_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_gps(), output);
  }

  // .metamoto.messages.IMU imu = 8;
  if (has_imu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_imu(), output);
  }

  // .metamoto.messages.Localizer localizer = 9;
  if (has_localizer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_localizer(), output);
  }

  // .metamoto.messages.V2X v2x = 10;
  if (has_v2x()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_v2x(), output);
  }

  // .metamoto.messages.Event event = 11;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_event(), output);
  }

  // .metamoto.messages.Perception perception = 12;
  if (has_perception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_perception(), output);
  }

  // .metamoto.messages.GroundTruth ground_truth = 30;
  if (has_ground_truth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->_internal_ground_truth(), output);
  }

  // .google.protobuf.Any other = 100;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->_internal_other(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.messages.DataBusMessage)
}

::google::protobuf::uint8* DataBusMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.messages.DataBusMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.messages.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .metamoto.messages.VehicleState vehicle_state = 2;
  if (has_vehicle_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_vehicle_state(), deterministic, target);
  }

  // .metamoto.messages.VehicleControls vehicle_controls = 3;
  if (has_vehicle_controls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_vehicle_controls(), deterministic, target);
  }

  // .metamoto.messages.Camera camera = 4;
  if (has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_camera(), deterministic, target);
  }

  // .metamoto.messages.Lidar lidar = 5;
  if (has_lidar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_lidar(), deterministic, target);
  }

  // .metamoto.messages.Radar radar = 6;
  if (has_radar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_radar(), deterministic, target);
  }

  // .metamoto.messages.GPS gps = 7;
  if (has_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_gps(), deterministic, target);
  }

  // .metamoto.messages.IMU imu = 8;
  if (has_imu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_imu(), deterministic, target);
  }

  // .metamoto.messages.Localizer localizer = 9;
  if (has_localizer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_localizer(), deterministic, target);
  }

  // .metamoto.messages.V2X v2x = 10;
  if (has_v2x()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_v2x(), deterministic, target);
  }

  // .metamoto.messages.Event event = 11;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_event(), deterministic, target);
  }

  // .metamoto.messages.Perception perception = 12;
  if (has_perception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_perception(), deterministic, target);
  }

  // .metamoto.messages.GroundTruth ground_truth = 30;
  if (has_ground_truth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->_internal_ground_truth(), deterministic, target);
  }

  // .google.protobuf.Any other = 100;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, this->_internal_other(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.messages.DataBusMessage)
  return target;
}

size_t DataBusMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.messages.DataBusMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.messages.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  switch (data_oneof_case()) {
    // .metamoto.messages.VehicleState vehicle_state = 2;
    case kVehicleState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.vehicle_state_);
      break;
    }
    // .metamoto.messages.VehicleControls vehicle_controls = 3;
    case kVehicleControls: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.vehicle_controls_);
      break;
    }
    // .metamoto.messages.Camera camera = 4;
    case kCamera: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.camera_);
      break;
    }
    // .metamoto.messages.Lidar lidar = 5;
    case kLidar: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.lidar_);
      break;
    }
    // .metamoto.messages.Radar radar = 6;
    case kRadar: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.radar_);
      break;
    }
    // .metamoto.messages.GPS gps = 7;
    case kGps: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.gps_);
      break;
    }
    // .metamoto.messages.IMU imu = 8;
    case kImu: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.imu_);
      break;
    }
    // .metamoto.messages.Localizer localizer = 9;
    case kLocalizer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.localizer_);
      break;
    }
    // .metamoto.messages.V2X v2x = 10;
    case kV2X: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.v2x_);
      break;
    }
    // .metamoto.messages.Event event = 11;
    case kEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.event_);
      break;
    }
    // .metamoto.messages.Perception perception = 12;
    case kPerception: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.perception_);
      break;
    }
    // .metamoto.messages.GroundTruth ground_truth = 30;
    case kGroundTruth: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.ground_truth_);
      break;
    }
    // .google.protobuf.Any other = 100;
    case kOther: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.other_);
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataBusMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.messages.DataBusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DataBusMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataBusMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.messages.DataBusMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.messages.DataBusMessage)
    MergeFrom(*source);
  }
}

void DataBusMessage::MergeFrom(const DataBusMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.messages.DataBusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::metamoto::messages::Header::MergeFrom(from.header());
  }
  switch (from.data_oneof_case()) {
    case kVehicleState: {
      mutable_vehicle_state()->::metamoto::messages::VehicleState::MergeFrom(from.vehicle_state());
      break;
    }
    case kVehicleControls: {
      mutable_vehicle_controls()->::metamoto::messages::VehicleControls::MergeFrom(from.vehicle_controls());
      break;
    }
    case kCamera: {
      mutable_camera()->::metamoto::messages::Camera::MergeFrom(from.camera());
      break;
    }
    case kLidar: {
      mutable_lidar()->::metamoto::messages::Lidar::MergeFrom(from.lidar());
      break;
    }
    case kRadar: {
      mutable_radar()->::metamoto::messages::Radar::MergeFrom(from.radar());
      break;
    }
    case kGps: {
      mutable_gps()->::metamoto::messages::GPS::MergeFrom(from.gps());
      break;
    }
    case kImu: {
      mutable_imu()->::metamoto::messages::IMU::MergeFrom(from.imu());
      break;
    }
    case kLocalizer: {
      mutable_localizer()->::metamoto::messages::Localizer::MergeFrom(from.localizer());
      break;
    }
    case kV2X: {
      mutable_v2x()->::metamoto::messages::V2X::MergeFrom(from.v2x());
      break;
    }
    case kEvent: {
      mutable_event()->::metamoto::messages::Event::MergeFrom(from.event());
      break;
    }
    case kPerception: {
      mutable_perception()->::metamoto::messages::Perception::MergeFrom(from.perception());
      break;
    }
    case kGroundTruth: {
      mutable_ground_truth()->::metamoto::messages::GroundTruth::MergeFrom(from.ground_truth());
      break;
    }
    case kOther: {
      mutable_other()->::google::protobuf::Any::MergeFrom(from.other());
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
}

void DataBusMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.messages.DataBusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataBusMessage::CopyFrom(const DataBusMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.messages.DataBusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataBusMessage::IsInitialized() const {
  return true;
}

void DataBusMessage::Swap(DataBusMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataBusMessage::InternalSwap(DataBusMessage* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(data_oneof_, other->data_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DataBusMessage::GetMetadata() const {
  protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fmessages_2fdata_5fbus_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::messages::Header* Arena::CreateMaybeMessage< ::metamoto::messages::Header >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::messages::Header >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::messages::DataBusMessage* Arena::CreateMaybeMessage< ::metamoto::messages::DataBusMessage >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::messages::DataBusMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
