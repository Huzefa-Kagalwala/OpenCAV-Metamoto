// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/services/sensor.proto

#include "metamoto/services/sensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fstruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fstruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ListValue;
}  // namespace protobuf_google_2fprotobuf_2fstruct_2eproto
namespace protobuf_metamoto_2ftypes_2fpose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fpose_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Pose;
}  // namespace protobuf_metamoto_2ftypes_2fpose_2eproto
namespace protobuf_metamoto_2ftypes_2fresult_5fmetadata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fresult_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResultMetadata;
}  // namespace protobuf_metamoto_2ftypes_2fresult_5fmetadata_2eproto
namespace protobuf_metamoto_2ftypes_2fscenario_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Event;
}  // namespace protobuf_metamoto_2ftypes_2fscenario_2eproto
namespace protobuf_metamoto_2ftypes_2fservice_5fdescription_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fservice_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ServiceDescription;
}  // namespace protobuf_metamoto_2ftypes_2fservice_5fdescription_2eproto
namespace protobuf_metamoto_2ftypes_2ftest_5fcase_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2ftest_5fcase_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_TestCase;
}  // namespace protobuf_metamoto_2ftypes_2ftest_5fcase_2eproto
namespace protobuf_metamoto_2ftypes_2fvehicle_5finfo_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fvehicle_5finfo_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VehicleInfo;
}  // namespace protobuf_metamoto_2ftypes_2fvehicle_5finfo_2eproto
namespace protobuf_metamoto_2ftypes_2fwaypoint_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fwaypoint_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Waypoint;
}  // namespace protobuf_metamoto_2ftypes_2fwaypoint_2eproto
namespace metamoto {
namespace services {
class SensorSetupRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorSetupRequest>
      _instance;
} _SensorSetupRequest_default_instance_;
class SensorSetupReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorSetupReply>
      _instance;
} _SensorSetupReply_default_instance_;
class SensorInitializeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorInitializeRequest>
      _instance;
} _SensorInitializeRequest_default_instance_;
class SensorInitializeReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorInitializeReply>
      _instance;
} _SensorInitializeReply_default_instance_;
class SensorUpdateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorUpdateRequest>
      _instance;
} _SensorUpdateRequest_default_instance_;
class SensorUpdateReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorUpdateReply>
      _instance;
} _SensorUpdateReply_default_instance_;
class SensorCloseRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorCloseRequest>
      _instance;
} _SensorCloseRequest_default_instance_;
class SensorCloseReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorCloseReply>
      _instance;
} _SensorCloseReply_default_instance_;
}  // namespace services
}  // namespace metamoto
namespace protobuf_metamoto_2fservices_2fsensor_2eproto {
static void InitDefaultsSensorSetupRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_SensorSetupRequest_default_instance_;
    new (ptr) ::metamoto::services::SensorSetupRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::SensorSetupRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SensorSetupRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSensorSetupRequest}, {
      &protobuf_google_2fprotobuf_2fstruct_2eproto::scc_info_ListValue.base,
      &protobuf_metamoto_2ftypes_2fservice_5fdescription_2eproto::scc_info_ServiceDescription.base,
      &protobuf_metamoto_2ftypes_2ftest_5fcase_2eproto::scc_info_TestCase.base,}};

static void InitDefaultsSensorSetupReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_SensorSetupReply_default_instance_;
    new (ptr) ::metamoto::services::SensorSetupReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::SensorSetupReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SensorSetupReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSensorSetupReply}, {}};

static void InitDefaultsSensorInitializeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_SensorInitializeRequest_default_instance_;
    new (ptr) ::metamoto::services::SensorInitializeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::SensorInitializeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_SensorInitializeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsSensorInitializeRequest}, {
      &protobuf_google_2fprotobuf_2fstruct_2eproto::scc_info_ListValue.base,
      &protobuf_metamoto_2ftypes_2fservice_5fdescription_2eproto::scc_info_ServiceDescription.base,
      &protobuf_metamoto_2ftypes_2fpose_2eproto::scc_info_Pose.base,
      &protobuf_metamoto_2ftypes_2fwaypoint_2eproto::scc_info_Waypoint.base,
      &protobuf_metamoto_2ftypes_2fvehicle_5finfo_2eproto::scc_info_VehicleInfo.base,
      &protobuf_metamoto_2ftypes_2ftest_5fcase_2eproto::scc_info_TestCase.base,}};

static void InitDefaultsSensorInitializeReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_SensorInitializeReply_default_instance_;
    new (ptr) ::metamoto::services::SensorInitializeReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::SensorInitializeReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SensorInitializeReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSensorInitializeReply}, {}};

static void InitDefaultsSensorUpdateRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_SensorUpdateRequest_default_instance_;
    new (ptr) ::metamoto::services::SensorUpdateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::SensorUpdateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SensorUpdateRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSensorUpdateRequest}, {
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Event.base,}};

static void InitDefaultsSensorUpdateReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_SensorUpdateReply_default_instance_;
    new (ptr) ::metamoto::services::SensorUpdateReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::SensorUpdateReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SensorUpdateReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSensorUpdateReply}, {}};

static void InitDefaultsSensorCloseRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_SensorCloseRequest_default_instance_;
    new (ptr) ::metamoto::services::SensorCloseRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::SensorCloseRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SensorCloseRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSensorCloseRequest}, {}};

static void InitDefaultsSensorCloseReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_SensorCloseReply_default_instance_;
    new (ptr) ::metamoto::services::SensorCloseReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::SensorCloseReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SensorCloseReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSensorCloseReply}, {
      &protobuf_metamoto_2ftypes_2fresult_5fmetadata_2eproto::scc_info_ResultMetadata.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SensorSetupRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorSetupReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorInitializeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorInitializeReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorUpdateRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorUpdateReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorCloseRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorCloseReply.base);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorSetupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorSetupRequest, parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorSetupRequest, services_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorSetupRequest, test_case_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorSetupReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorInitializeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorInitializeRequest, parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorInitializeRequest, publish_topics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorInitializeRequest, results_directory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorInitializeRequest, services_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorInitializeRequest, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorInitializeRequest, ego_vehicle_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorInitializeRequest, ego_vehicle_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorInitializeRequest, ego_vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorInitializeRequest, test_case_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorInitializeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorInitializeReply, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorInitializeReply, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorInitializeReply, update_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorInitializeReply, requires_ray_tracing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorInitializeReply, update_timeout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorUpdateRequest, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorUpdateRequest, last_step_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorUpdateRequest, next_step_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorUpdateRequest, event_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorUpdateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorUpdateReply, next_update_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorCloseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorCloseReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SensorCloseReply, results_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::services::SensorSetupRequest)},
  { 8, -1, sizeof(::metamoto::services::SensorSetupReply)},
  { 13, -1, sizeof(::metamoto::services::SensorInitializeRequest)},
  { 27, -1, sizeof(::metamoto::services::SensorInitializeReply)},
  { 37, -1, sizeof(::metamoto::services::SensorUpdateRequest)},
  { 46, -1, sizeof(::metamoto::services::SensorUpdateReply)},
  { 52, -1, sizeof(::metamoto::services::SensorCloseRequest)},
  { 57, -1, sizeof(::metamoto::services::SensorCloseReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_SensorSetupRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_SensorSetupReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_SensorInitializeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_SensorInitializeReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_SensorUpdateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_SensorUpdateReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_SensorCloseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_SensorCloseReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/services/sensor.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\036metamoto/services/sensor.proto\022\021metamo"
      "to.services\032\034google/protobuf/struct.prot"
      "o\032\031metamoto/types/pose.proto\032$metamoto/t"
      "ypes/result_metadata.proto\032\035metamoto/typ"
      "es/scenario.proto\032(metamoto/types/servic"
      "e_description.proto\032\036metamoto/types/test"
      "_case.proto\032!metamoto/types/vehicle_info"
      ".proto\032\035metamoto/types/waypoint.proto\"\244\001"
      "\n\022SensorSetupRequest\022+\n\nparameters\030\001 \001(\013"
      "2\027.google.protobuf.Struct\0224\n\010services\030\002 "
      "\003(\0132\".metamoto.types.ServiceDescription\022"
      "+\n\ttest_case\030\003 \001(\0132\030.metamoto.types.Test"
      "Case\"\022\n\020SensorSetupReply\"\203\003\n\027SensorIniti"
      "alizeRequest\022+\n\nparameters\030\001 \001(\0132\027.googl"
      "e.protobuf.Struct\022\026\n\016publish_topics\030\002 \003("
      "\t\022\031\n\021results_directory\030\003 \001(\t\0224\n\010services"
      "\030\004 \003(\0132\".metamoto.types.ServiceDescripti"
      "on\022\"\n\004pose\030\005 \001(\0132\024.metamoto.types.Pose\0222"
      "\n\020ego_vehicle_path\030\006 \003(\0132\030.metamoto.type"
      "s.Waypoint\0225\n\020ego_vehicle_info\030\007 \001(\0132\033.m"
      "etamoto.types.VehicleInfo\022\026\n\016ego_vehicle"
      "_id\030\010 \001(\t\022+\n\ttest_case\030\t \001(\0132\030.metamoto."
      "types.TestCase\"\201\001\n\025SensorInitializeReply"
      "\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022\023\n\013updat"
      "e_rate\030\003 \001(\001\022\034\n\024requires_ray_tracing\030\004 \001"
      "(\010\022\026\n\016update_timeout\030\005 \001(\r\"y\n\023SensorUpda"
      "teRequest\022\014\n\004time\030\001 \001(\001\022\026\n\016last_step_tim"
      "e\030\002 \001(\001\022\026\n\016next_step_time\030\003 \001(\001\022$\n\005event"
      "\030\004 \001(\0132\025.metamoto.types.Event\"-\n\021SensorU"
      "pdateReply\022\030\n\020next_update_time\030\001 \001(\001\"\024\n\022"
      "SensorCloseRequest\"C\n\020SensorCloseReply\022/"
      "\n\007results\030\001 \003(\0132\036.metamoto.types.ResultM"
      "etadata2\366\002\n\006Sensor\022U\n\005Setup\022%.metamoto.s"
      "ervices.SensorSetupRequest\032#.metamoto.se"
      "rvices.SensorSetupReply\"\000\022d\n\nInitialize\022"
      "*.metamoto.services.SensorInitializeRequ"
      "est\032(.metamoto.services.SensorInitialize"
      "Reply\"\000\022X\n\006Update\022&.metamoto.services.Se"
      "nsorUpdateRequest\032$.metamoto.services.Se"
      "nsorUpdateReply\"\000\022U\n\005Close\022%.metamoto.se"
      "rvices.SensorCloseRequest\032#.metamoto.ser"
      "vices.SensorCloseReply\"\000B\024\252\002\021Metamoto.Se"
      "rvicesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1694);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/services/sensor.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fpose_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fresult_5fmetadata_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fservice_5fdescription_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2ftest_5fcase_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fvehicle_5finfo_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fwaypoint_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2fservices_2fsensor_2eproto
namespace metamoto {
namespace services {

// ===================================================================

void SensorSetupRequest::InitAsDefaultInstance() {
  ::metamoto::services::_SensorSetupRequest_default_instance_._instance.get_mutable()->parameters_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
  ::metamoto::services::_SensorSetupRequest_default_instance_._instance.get_mutable()->test_case_ = const_cast< ::metamoto::types::TestCase*>(
      ::metamoto::types::TestCase::internal_default_instance());
}
void SensorSetupRequest::clear_parameters() {
  if (GetArenaNoVirtual() == NULL && parameters_ != NULL) {
    delete parameters_;
  }
  parameters_ = NULL;
}
void SensorSetupRequest::clear_services() {
  services_.Clear();
}
void SensorSetupRequest::clear_test_case() {
  if (GetArenaNoVirtual() == NULL && test_case_ != NULL) {
    delete test_case_;
  }
  test_case_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorSetupRequest::kParametersFieldNumber;
const int SensorSetupRequest::kServicesFieldNumber;
const int SensorSetupRequest::kTestCaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorSetupRequest::SensorSetupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorSetupRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.SensorSetupRequest)
}
SensorSetupRequest::SensorSetupRequest(const SensorSetupRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      services_(from.services_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_parameters()) {
    parameters_ = new ::google::protobuf::Struct(*from.parameters_);
  } else {
    parameters_ = NULL;
  }
  if (from.has_test_case()) {
    test_case_ = new ::metamoto::types::TestCase(*from.test_case_);
  } else {
    test_case_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.services.SensorSetupRequest)
}

void SensorSetupRequest::SharedCtor() {
  ::memset(&parameters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&test_case_) -
      reinterpret_cast<char*>(&parameters_)) + sizeof(test_case_));
}

SensorSetupRequest::~SensorSetupRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.SensorSetupRequest)
  SharedDtor();
}

void SensorSetupRequest::SharedDtor() {
  if (this != internal_default_instance()) delete parameters_;
  if (this != internal_default_instance()) delete test_case_;
}

void SensorSetupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorSetupRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorSetupRequest& SensorSetupRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorSetupRequest.base);
  return *internal_default_instance();
}


void SensorSetupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.SensorSetupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  if (GetArenaNoVirtual() == NULL && parameters_ != NULL) {
    delete parameters_;
  }
  parameters_ = NULL;
  if (GetArenaNoVirtual() == NULL && test_case_ != NULL) {
    delete test_case_;
  }
  test_case_ = NULL;
  _internal_metadata_.Clear();
}

bool SensorSetupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.SensorSetupRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Struct parameters = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.ServiceDescription services = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_services()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.TestCase test_case = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_test_case()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.SensorSetupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.SensorSetupRequest)
  return false;
#undef DO_
}

void SensorSetupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.SensorSetupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct parameters = 1;
  if (this->has_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_parameters(), output);
  }

  // repeated .metamoto.types.ServiceDescription services = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->services_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->services(static_cast<int>(i)),
      output);
  }

  // .metamoto.types.TestCase test_case = 3;
  if (this->has_test_case()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_test_case(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.SensorSetupRequest)
}

::google::protobuf::uint8* SensorSetupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.SensorSetupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct parameters = 1;
  if (this->has_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_parameters(), deterministic, target);
  }

  // repeated .metamoto.types.ServiceDescription services = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->services_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->services(static_cast<int>(i)), deterministic, target);
  }

  // .metamoto.types.TestCase test_case = 3;
  if (this->has_test_case()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_test_case(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.SensorSetupRequest)
  return target;
}

size_t SensorSetupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.SensorSetupRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.ServiceDescription services = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->services_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->services(static_cast<int>(i)));
    }
  }

  // .google.protobuf.Struct parameters = 1;
  if (this->has_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *parameters_);
  }

  // .metamoto.types.TestCase test_case = 3;
  if (this->has_test_case()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *test_case_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorSetupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.SensorSetupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorSetupRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorSetupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.SensorSetupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.SensorSetupRequest)
    MergeFrom(*source);
  }
}

void SensorSetupRequest::MergeFrom(const SensorSetupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.SensorSetupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
  if (from.has_parameters()) {
    mutable_parameters()->::google::protobuf::Struct::MergeFrom(from.parameters());
  }
  if (from.has_test_case()) {
    mutable_test_case()->::metamoto::types::TestCase::MergeFrom(from.test_case());
  }
}

void SensorSetupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.SensorSetupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorSetupRequest::CopyFrom(const SensorSetupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.SensorSetupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorSetupRequest::IsInitialized() const {
  return true;
}

void SensorSetupRequest::Swap(SensorSetupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorSetupRequest::InternalSwap(SensorSetupRequest* other) {
  using std::swap;
  CastToBase(&services_)->InternalSwap(CastToBase(&other->services_));
  swap(parameters_, other->parameters_);
  swap(test_case_, other->test_case_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorSetupRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorSetupReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorSetupReply::SensorSetupReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorSetupReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.SensorSetupReply)
}
SensorSetupReply::SensorSetupReply(const SensorSetupReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.services.SensorSetupReply)
}

void SensorSetupReply::SharedCtor() {
}

SensorSetupReply::~SensorSetupReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.SensorSetupReply)
  SharedDtor();
}

void SensorSetupReply::SharedDtor() {
}

void SensorSetupReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorSetupReply::descriptor() {
  ::protobuf_metamoto_2fservices_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorSetupReply& SensorSetupReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorSetupReply.base);
  return *internal_default_instance();
}


void SensorSetupReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.SensorSetupReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SensorSetupReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.SensorSetupReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.SensorSetupReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.SensorSetupReply)
  return false;
#undef DO_
}

void SensorSetupReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.SensorSetupReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.SensorSetupReply)
}

::google::protobuf::uint8* SensorSetupReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.SensorSetupReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.SensorSetupReply)
  return target;
}

size_t SensorSetupReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.SensorSetupReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorSetupReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.SensorSetupReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorSetupReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorSetupReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.SensorSetupReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.SensorSetupReply)
    MergeFrom(*source);
  }
}

void SensorSetupReply::MergeFrom(const SensorSetupReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.SensorSetupReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SensorSetupReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.SensorSetupReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorSetupReply::CopyFrom(const SensorSetupReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.SensorSetupReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorSetupReply::IsInitialized() const {
  return true;
}

void SensorSetupReply::Swap(SensorSetupReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorSetupReply::InternalSwap(SensorSetupReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorSetupReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorInitializeRequest::InitAsDefaultInstance() {
  ::metamoto::services::_SensorInitializeRequest_default_instance_._instance.get_mutable()->parameters_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
  ::metamoto::services::_SensorInitializeRequest_default_instance_._instance.get_mutable()->pose_ = const_cast< ::metamoto::types::Pose*>(
      ::metamoto::types::Pose::internal_default_instance());
  ::metamoto::services::_SensorInitializeRequest_default_instance_._instance.get_mutable()->ego_vehicle_info_ = const_cast< ::metamoto::types::VehicleInfo*>(
      ::metamoto::types::VehicleInfo::internal_default_instance());
  ::metamoto::services::_SensorInitializeRequest_default_instance_._instance.get_mutable()->test_case_ = const_cast< ::metamoto::types::TestCase*>(
      ::metamoto::types::TestCase::internal_default_instance());
}
void SensorInitializeRequest::clear_parameters() {
  if (GetArenaNoVirtual() == NULL && parameters_ != NULL) {
    delete parameters_;
  }
  parameters_ = NULL;
}
void SensorInitializeRequest::clear_services() {
  services_.Clear();
}
void SensorInitializeRequest::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
void SensorInitializeRequest::clear_ego_vehicle_path() {
  ego_vehicle_path_.Clear();
}
void SensorInitializeRequest::clear_ego_vehicle_info() {
  if (GetArenaNoVirtual() == NULL && ego_vehicle_info_ != NULL) {
    delete ego_vehicle_info_;
  }
  ego_vehicle_info_ = NULL;
}
void SensorInitializeRequest::clear_test_case() {
  if (GetArenaNoVirtual() == NULL && test_case_ != NULL) {
    delete test_case_;
  }
  test_case_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorInitializeRequest::kParametersFieldNumber;
const int SensorInitializeRequest::kPublishTopicsFieldNumber;
const int SensorInitializeRequest::kResultsDirectoryFieldNumber;
const int SensorInitializeRequest::kServicesFieldNumber;
const int SensorInitializeRequest::kPoseFieldNumber;
const int SensorInitializeRequest::kEgoVehiclePathFieldNumber;
const int SensorInitializeRequest::kEgoVehicleInfoFieldNumber;
const int SensorInitializeRequest::kEgoVehicleIdFieldNumber;
const int SensorInitializeRequest::kTestCaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorInitializeRequest::SensorInitializeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorInitializeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.SensorInitializeRequest)
}
SensorInitializeRequest::SensorInitializeRequest(const SensorInitializeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      publish_topics_(from.publish_topics_),
      services_(from.services_),
      ego_vehicle_path_(from.ego_vehicle_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  results_directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.results_directory().size() > 0) {
    results_directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.results_directory_);
  }
  ego_vehicle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ego_vehicle_id().size() > 0) {
    ego_vehicle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ego_vehicle_id_);
  }
  if (from.has_parameters()) {
    parameters_ = new ::google::protobuf::Struct(*from.parameters_);
  } else {
    parameters_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::metamoto::types::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_ego_vehicle_info()) {
    ego_vehicle_info_ = new ::metamoto::types::VehicleInfo(*from.ego_vehicle_info_);
  } else {
    ego_vehicle_info_ = NULL;
  }
  if (from.has_test_case()) {
    test_case_ = new ::metamoto::types::TestCase(*from.test_case_);
  } else {
    test_case_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.services.SensorInitializeRequest)
}

void SensorInitializeRequest::SharedCtor() {
  results_directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ego_vehicle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&parameters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&test_case_) -
      reinterpret_cast<char*>(&parameters_)) + sizeof(test_case_));
}

SensorInitializeRequest::~SensorInitializeRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.SensorInitializeRequest)
  SharedDtor();
}

void SensorInitializeRequest::SharedDtor() {
  results_directory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ego_vehicle_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parameters_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete ego_vehicle_info_;
  if (this != internal_default_instance()) delete test_case_;
}

void SensorInitializeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorInitializeRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorInitializeRequest& SensorInitializeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorInitializeRequest.base);
  return *internal_default_instance();
}


void SensorInitializeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.SensorInitializeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publish_topics_.Clear();
  services_.Clear();
  ego_vehicle_path_.Clear();
  results_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ego_vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && parameters_ != NULL) {
    delete parameters_;
  }
  parameters_ = NULL;
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && ego_vehicle_info_ != NULL) {
    delete ego_vehicle_info_;
  }
  ego_vehicle_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && test_case_ != NULL) {
    delete test_case_;
  }
  test_case_ = NULL;
  _internal_metadata_.Clear();
}

bool SensorInitializeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.SensorInitializeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Struct parameters = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string publish_topics = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_publish_topics()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->publish_topics(this->publish_topics_size() - 1).data(),
            static_cast<int>(this->publish_topics(this->publish_topics_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.services.SensorInitializeRequest.publish_topics"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string results_directory = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_results_directory()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->results_directory().data(), static_cast<int>(this->results_directory().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.services.SensorInitializeRequest.results_directory"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.ServiceDescription services = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_services()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Pose pose = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Waypoint ego_vehicle_path = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ego_vehicle_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.VehicleInfo ego_vehicle_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ego_vehicle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ego_vehicle_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ego_vehicle_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ego_vehicle_id().data(), static_cast<int>(this->ego_vehicle_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.services.SensorInitializeRequest.ego_vehicle_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.TestCase test_case = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_test_case()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.SensorInitializeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.SensorInitializeRequest)
  return false;
#undef DO_
}

void SensorInitializeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.SensorInitializeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct parameters = 1;
  if (this->has_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_parameters(), output);
  }

  // repeated string publish_topics = 2;
  for (int i = 0, n = this->publish_topics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publish_topics(i).data(), static_cast<int>(this->publish_topics(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.SensorInitializeRequest.publish_topics");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->publish_topics(i), output);
  }

  // string results_directory = 3;
  if (this->results_directory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->results_directory().data(), static_cast<int>(this->results_directory().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.SensorInitializeRequest.results_directory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->results_directory(), output);
  }

  // repeated .metamoto.types.ServiceDescription services = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->services_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->services(static_cast<int>(i)),
      output);
  }

  // .metamoto.types.Pose pose = 5;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_pose(), output);
  }

  // repeated .metamoto.types.Waypoint ego_vehicle_path = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ego_vehicle_path_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->ego_vehicle_path(static_cast<int>(i)),
      output);
  }

  // .metamoto.types.VehicleInfo ego_vehicle_info = 7;
  if (this->has_ego_vehicle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_ego_vehicle_info(), output);
  }

  // string ego_vehicle_id = 8;
  if (this->ego_vehicle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ego_vehicle_id().data(), static_cast<int>(this->ego_vehicle_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.SensorInitializeRequest.ego_vehicle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ego_vehicle_id(), output);
  }

  // .metamoto.types.TestCase test_case = 9;
  if (this->has_test_case()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_test_case(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.SensorInitializeRequest)
}

::google::protobuf::uint8* SensorInitializeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.SensorInitializeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct parameters = 1;
  if (this->has_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_parameters(), deterministic, target);
  }

  // repeated string publish_topics = 2;
  for (int i = 0, n = this->publish_topics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publish_topics(i).data(), static_cast<int>(this->publish_topics(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.SensorInitializeRequest.publish_topics");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->publish_topics(i), target);
  }

  // string results_directory = 3;
  if (this->results_directory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->results_directory().data(), static_cast<int>(this->results_directory().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.SensorInitializeRequest.results_directory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->results_directory(), target);
  }

  // repeated .metamoto.types.ServiceDescription services = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->services_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->services(static_cast<int>(i)), deterministic, target);
  }

  // .metamoto.types.Pose pose = 5;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_pose(), deterministic, target);
  }

  // repeated .metamoto.types.Waypoint ego_vehicle_path = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ego_vehicle_path_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->ego_vehicle_path(static_cast<int>(i)), deterministic, target);
  }

  // .metamoto.types.VehicleInfo ego_vehicle_info = 7;
  if (this->has_ego_vehicle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_ego_vehicle_info(), deterministic, target);
  }

  // string ego_vehicle_id = 8;
  if (this->ego_vehicle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ego_vehicle_id().data(), static_cast<int>(this->ego_vehicle_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.SensorInitializeRequest.ego_vehicle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ego_vehicle_id(), target);
  }

  // .metamoto.types.TestCase test_case = 9;
  if (this->has_test_case()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_test_case(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.SensorInitializeRequest)
  return target;
}

size_t SensorInitializeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.SensorInitializeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string publish_topics = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->publish_topics_size());
  for (int i = 0, n = this->publish_topics_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->publish_topics(i));
  }

  // repeated .metamoto.types.ServiceDescription services = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->services_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->services(static_cast<int>(i)));
    }
  }

  // repeated .metamoto.types.Waypoint ego_vehicle_path = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->ego_vehicle_path_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ego_vehicle_path(static_cast<int>(i)));
    }
  }

  // string results_directory = 3;
  if (this->results_directory().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->results_directory());
  }

  // string ego_vehicle_id = 8;
  if (this->ego_vehicle_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ego_vehicle_id());
  }

  // .google.protobuf.Struct parameters = 1;
  if (this->has_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *parameters_);
  }

  // .metamoto.types.Pose pose = 5;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .metamoto.types.VehicleInfo ego_vehicle_info = 7;
  if (this->has_ego_vehicle_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ego_vehicle_info_);
  }

  // .metamoto.types.TestCase test_case = 9;
  if (this->has_test_case()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *test_case_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorInitializeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.SensorInitializeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorInitializeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorInitializeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.SensorInitializeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.SensorInitializeRequest)
    MergeFrom(*source);
  }
}

void SensorInitializeRequest::MergeFrom(const SensorInitializeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.SensorInitializeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publish_topics_.MergeFrom(from.publish_topics_);
  services_.MergeFrom(from.services_);
  ego_vehicle_path_.MergeFrom(from.ego_vehicle_path_);
  if (from.results_directory().size() > 0) {

    results_directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.results_directory_);
  }
  if (from.ego_vehicle_id().size() > 0) {

    ego_vehicle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ego_vehicle_id_);
  }
  if (from.has_parameters()) {
    mutable_parameters()->::google::protobuf::Struct::MergeFrom(from.parameters());
  }
  if (from.has_pose()) {
    mutable_pose()->::metamoto::types::Pose::MergeFrom(from.pose());
  }
  if (from.has_ego_vehicle_info()) {
    mutable_ego_vehicle_info()->::metamoto::types::VehicleInfo::MergeFrom(from.ego_vehicle_info());
  }
  if (from.has_test_case()) {
    mutable_test_case()->::metamoto::types::TestCase::MergeFrom(from.test_case());
  }
}

void SensorInitializeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.SensorInitializeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorInitializeRequest::CopyFrom(const SensorInitializeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.SensorInitializeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorInitializeRequest::IsInitialized() const {
  return true;
}

void SensorInitializeRequest::Swap(SensorInitializeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorInitializeRequest::InternalSwap(SensorInitializeRequest* other) {
  using std::swap;
  publish_topics_.InternalSwap(CastToBase(&other->publish_topics_));
  CastToBase(&services_)->InternalSwap(CastToBase(&other->services_));
  CastToBase(&ego_vehicle_path_)->InternalSwap(CastToBase(&other->ego_vehicle_path_));
  results_directory_.Swap(&other->results_directory_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ego_vehicle_id_.Swap(&other->ego_vehicle_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(parameters_, other->parameters_);
  swap(pose_, other->pose_);
  swap(ego_vehicle_info_, other->ego_vehicle_info_);
  swap(test_case_, other->test_case_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorInitializeRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorInitializeReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorInitializeReply::kNameFieldNumber;
const int SensorInitializeReply::kVersionFieldNumber;
const int SensorInitializeReply::kUpdateRateFieldNumber;
const int SensorInitializeReply::kRequiresRayTracingFieldNumber;
const int SensorInitializeReply::kUpdateTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorInitializeReply::SensorInitializeReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorInitializeReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.SensorInitializeReply)
}
SensorInitializeReply::SensorInitializeReply(const SensorInitializeReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&update_rate_, &from.update_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_timeout_) -
    reinterpret_cast<char*>(&update_rate_)) + sizeof(update_timeout_));
  // @@protoc_insertion_point(copy_constructor:metamoto.services.SensorInitializeReply)
}

void SensorInitializeReply::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&update_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_timeout_) -
      reinterpret_cast<char*>(&update_rate_)) + sizeof(update_timeout_));
}

SensorInitializeReply::~SensorInitializeReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.SensorInitializeReply)
  SharedDtor();
}

void SensorInitializeReply::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SensorInitializeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorInitializeReply::descriptor() {
  ::protobuf_metamoto_2fservices_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorInitializeReply& SensorInitializeReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorInitializeReply.base);
  return *internal_default_instance();
}


void SensorInitializeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.SensorInitializeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&update_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_timeout_) -
      reinterpret_cast<char*>(&update_rate_)) + sizeof(update_timeout_));
  _internal_metadata_.Clear();
}

bool SensorInitializeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.SensorInitializeReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.services.SensorInitializeReply.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.services.SensorInitializeReply.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double update_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &update_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool requires_ray_tracing = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_ray_tracing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 update_timeout = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.SensorInitializeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.SensorInitializeReply)
  return false;
#undef DO_
}

void SensorInitializeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.SensorInitializeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.SensorInitializeReply.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.SensorInitializeReply.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // double update_rate = 3;
  if (this->update_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->update_rate(), output);
  }

  // bool requires_ray_tracing = 4;
  if (this->requires_ray_tracing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->requires_ray_tracing(), output);
  }

  // uint32 update_timeout = 5;
  if (this->update_timeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->update_timeout(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.SensorInitializeReply)
}

::google::protobuf::uint8* SensorInitializeReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.SensorInitializeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.SensorInitializeReply.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.SensorInitializeReply.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // double update_rate = 3;
  if (this->update_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->update_rate(), target);
  }

  // bool requires_ray_tracing = 4;
  if (this->requires_ray_tracing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->requires_ray_tracing(), target);
  }

  // uint32 update_timeout = 5;
  if (this->update_timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->update_timeout(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.SensorInitializeReply)
  return target;
}

size_t SensorInitializeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.SensorInitializeReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // double update_rate = 3;
  if (this->update_rate() != 0) {
    total_size += 1 + 8;
  }

  // bool requires_ray_tracing = 4;
  if (this->requires_ray_tracing() != 0) {
    total_size += 1 + 1;
  }

  // uint32 update_timeout = 5;
  if (this->update_timeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_timeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorInitializeReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.SensorInitializeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorInitializeReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorInitializeReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.SensorInitializeReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.SensorInitializeReply)
    MergeFrom(*source);
  }
}

void SensorInitializeReply::MergeFrom(const SensorInitializeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.SensorInitializeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.update_rate() != 0) {
    set_update_rate(from.update_rate());
  }
  if (from.requires_ray_tracing() != 0) {
    set_requires_ray_tracing(from.requires_ray_tracing());
  }
  if (from.update_timeout() != 0) {
    set_update_timeout(from.update_timeout());
  }
}

void SensorInitializeReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.SensorInitializeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorInitializeReply::CopyFrom(const SensorInitializeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.SensorInitializeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorInitializeReply::IsInitialized() const {
  return true;
}

void SensorInitializeReply::Swap(SensorInitializeReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorInitializeReply::InternalSwap(SensorInitializeReply* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(update_rate_, other->update_rate_);
  swap(requires_ray_tracing_, other->requires_ray_tracing_);
  swap(update_timeout_, other->update_timeout_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorInitializeReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorUpdateRequest::InitAsDefaultInstance() {
  ::metamoto::services::_SensorUpdateRequest_default_instance_._instance.get_mutable()->event_ = const_cast< ::metamoto::types::Event*>(
      ::metamoto::types::Event::internal_default_instance());
}
void SensorUpdateRequest::clear_event() {
  if (GetArenaNoVirtual() == NULL && event_ != NULL) {
    delete event_;
  }
  event_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorUpdateRequest::kTimeFieldNumber;
const int SensorUpdateRequest::kLastStepTimeFieldNumber;
const int SensorUpdateRequest::kNextStepTimeFieldNumber;
const int SensorUpdateRequest::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorUpdateRequest::SensorUpdateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorUpdateRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.SensorUpdateRequest)
}
SensorUpdateRequest::SensorUpdateRequest(const SensorUpdateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_event()) {
    event_ = new ::metamoto::types::Event(*from.event_);
  } else {
    event_ = NULL;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_step_time_) -
    reinterpret_cast<char*>(&time_)) + sizeof(next_step_time_));
  // @@protoc_insertion_point(copy_constructor:metamoto.services.SensorUpdateRequest)
}

void SensorUpdateRequest::SharedCtor() {
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_step_time_) -
      reinterpret_cast<char*>(&event_)) + sizeof(next_step_time_));
}

SensorUpdateRequest::~SensorUpdateRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.SensorUpdateRequest)
  SharedDtor();
}

void SensorUpdateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete event_;
}

void SensorUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorUpdateRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorUpdateRequest& SensorUpdateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorUpdateRequest.base);
  return *internal_default_instance();
}


void SensorUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.SensorUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && event_ != NULL) {
    delete event_;
  }
  event_ = NULL;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_step_time_) -
      reinterpret_cast<char*>(&time_)) + sizeof(next_step_time_));
  _internal_metadata_.Clear();
}

bool SensorUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.SensorUpdateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double last_step_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_step_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double next_step_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &next_step_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Event event = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.SensorUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.SensorUpdateRequest)
  return false;
#undef DO_
}

void SensorUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.SensorUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time(), output);
  }

  // double last_step_time = 2;
  if (this->last_step_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->last_step_time(), output);
  }

  // double next_step_time = 3;
  if (this->next_step_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->next_step_time(), output);
  }

  // .metamoto.types.Event event = 4;
  if (this->has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_event(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.SensorUpdateRequest)
}

::google::protobuf::uint8* SensorUpdateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.SensorUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time(), target);
  }

  // double last_step_time = 2;
  if (this->last_step_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->last_step_time(), target);
  }

  // double next_step_time = 3;
  if (this->next_step_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->next_step_time(), target);
  }

  // .metamoto.types.Event event = 4;
  if (this->has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_event(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.SensorUpdateRequest)
  return target;
}

size_t SensorUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.SensorUpdateRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.Event event = 4;
  if (this->has_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *event_);
  }

  // double time = 1;
  if (this->time() != 0) {
    total_size += 1 + 8;
  }

  // double last_step_time = 2;
  if (this->last_step_time() != 0) {
    total_size += 1 + 8;
  }

  // double next_step_time = 3;
  if (this->next_step_time() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.SensorUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorUpdateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorUpdateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.SensorUpdateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.SensorUpdateRequest)
    MergeFrom(*source);
  }
}

void SensorUpdateRequest::MergeFrom(const SensorUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.SensorUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_event()) {
    mutable_event()->::metamoto::types::Event::MergeFrom(from.event());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.last_step_time() != 0) {
    set_last_step_time(from.last_step_time());
  }
  if (from.next_step_time() != 0) {
    set_next_step_time(from.next_step_time());
  }
}

void SensorUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.SensorUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorUpdateRequest::CopyFrom(const SensorUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.SensorUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorUpdateRequest::IsInitialized() const {
  return true;
}

void SensorUpdateRequest::Swap(SensorUpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorUpdateRequest::InternalSwap(SensorUpdateRequest* other) {
  using std::swap;
  swap(event_, other->event_);
  swap(time_, other->time_);
  swap(last_step_time_, other->last_step_time_);
  swap(next_step_time_, other->next_step_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorUpdateRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorUpdateReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorUpdateReply::kNextUpdateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorUpdateReply::SensorUpdateReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorUpdateReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.SensorUpdateReply)
}
SensorUpdateReply::SensorUpdateReply(const SensorUpdateReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_update_time_ = from.next_update_time_;
  // @@protoc_insertion_point(copy_constructor:metamoto.services.SensorUpdateReply)
}

void SensorUpdateReply::SharedCtor() {
  next_update_time_ = 0;
}

SensorUpdateReply::~SensorUpdateReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.SensorUpdateReply)
  SharedDtor();
}

void SensorUpdateReply::SharedDtor() {
}

void SensorUpdateReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorUpdateReply::descriptor() {
  ::protobuf_metamoto_2fservices_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorUpdateReply& SensorUpdateReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorUpdateReply.base);
  return *internal_default_instance();
}


void SensorUpdateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.SensorUpdateReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  next_update_time_ = 0;
  _internal_metadata_.Clear();
}

bool SensorUpdateReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.SensorUpdateReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double next_update_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &next_update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.SensorUpdateReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.SensorUpdateReply)
  return false;
#undef DO_
}

void SensorUpdateReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.SensorUpdateReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double next_update_time = 1;
  if (this->next_update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->next_update_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.SensorUpdateReply)
}

::google::protobuf::uint8* SensorUpdateReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.SensorUpdateReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double next_update_time = 1;
  if (this->next_update_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->next_update_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.SensorUpdateReply)
  return target;
}

size_t SensorUpdateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.SensorUpdateReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double next_update_time = 1;
  if (this->next_update_time() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorUpdateReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.SensorUpdateReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorUpdateReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorUpdateReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.SensorUpdateReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.SensorUpdateReply)
    MergeFrom(*source);
  }
}

void SensorUpdateReply::MergeFrom(const SensorUpdateReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.SensorUpdateReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.next_update_time() != 0) {
    set_next_update_time(from.next_update_time());
  }
}

void SensorUpdateReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.SensorUpdateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorUpdateReply::CopyFrom(const SensorUpdateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.SensorUpdateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorUpdateReply::IsInitialized() const {
  return true;
}

void SensorUpdateReply::Swap(SensorUpdateReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorUpdateReply::InternalSwap(SensorUpdateReply* other) {
  using std::swap;
  swap(next_update_time_, other->next_update_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorUpdateReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorCloseRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorCloseRequest::SensorCloseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorCloseRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.SensorCloseRequest)
}
SensorCloseRequest::SensorCloseRequest(const SensorCloseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.services.SensorCloseRequest)
}

void SensorCloseRequest::SharedCtor() {
}

SensorCloseRequest::~SensorCloseRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.SensorCloseRequest)
  SharedDtor();
}

void SensorCloseRequest::SharedDtor() {
}

void SensorCloseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorCloseRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorCloseRequest& SensorCloseRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorCloseRequest.base);
  return *internal_default_instance();
}


void SensorCloseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.SensorCloseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SensorCloseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.SensorCloseRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.SensorCloseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.SensorCloseRequest)
  return false;
#undef DO_
}

void SensorCloseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.SensorCloseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.SensorCloseRequest)
}

::google::protobuf::uint8* SensorCloseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.SensorCloseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.SensorCloseRequest)
  return target;
}

size_t SensorCloseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.SensorCloseRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorCloseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.SensorCloseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorCloseRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorCloseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.SensorCloseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.SensorCloseRequest)
    MergeFrom(*source);
  }
}

void SensorCloseRequest::MergeFrom(const SensorCloseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.SensorCloseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SensorCloseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.SensorCloseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorCloseRequest::CopyFrom(const SensorCloseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.SensorCloseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorCloseRequest::IsInitialized() const {
  return true;
}

void SensorCloseRequest::Swap(SensorCloseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorCloseRequest::InternalSwap(SensorCloseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorCloseRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorCloseReply::InitAsDefaultInstance() {
}
void SensorCloseReply::clear_results() {
  results_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorCloseReply::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorCloseReply::SensorCloseReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorCloseReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.SensorCloseReply)
}
SensorCloseReply::SensorCloseReply(const SensorCloseReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.services.SensorCloseReply)
}

void SensorCloseReply::SharedCtor() {
}

SensorCloseReply::~SensorCloseReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.SensorCloseReply)
  SharedDtor();
}

void SensorCloseReply::SharedDtor() {
}

void SensorCloseReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorCloseReply::descriptor() {
  ::protobuf_metamoto_2fservices_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorCloseReply& SensorCloseReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorCloseReply.base);
  return *internal_default_instance();
}


void SensorCloseReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.SensorCloseReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear();
}

bool SensorCloseReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.SensorCloseReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metamoto.types.ResultMetadata results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.SensorCloseReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.SensorCloseReply)
  return false;
#undef DO_
}

void SensorCloseReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.SensorCloseReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.ResultMetadata results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->results(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.SensorCloseReply)
}

::google::protobuf::uint8* SensorCloseReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.SensorCloseReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.ResultMetadata results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->results(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.SensorCloseReply)
  return target;
}

size_t SensorCloseReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.SensorCloseReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.ResultMetadata results = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorCloseReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.SensorCloseReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorCloseReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorCloseReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.SensorCloseReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.SensorCloseReply)
    MergeFrom(*source);
  }
}

void SensorCloseReply::MergeFrom(const SensorCloseReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.SensorCloseReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void SensorCloseReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.SensorCloseReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorCloseReply::CopyFrom(const SensorCloseReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.SensorCloseReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorCloseReply::IsInitialized() const {
  return true;
}

void SensorCloseReply::Swap(SensorCloseReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorCloseReply::InternalSwap(SensorCloseReply* other) {
  using std::swap;
  CastToBase(&results_)->InternalSwap(CastToBase(&other->results_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorCloseReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace services
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::SensorSetupRequest* Arena::CreateMaybeMessage< ::metamoto::services::SensorSetupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::SensorSetupRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::SensorSetupReply* Arena::CreateMaybeMessage< ::metamoto::services::SensorSetupReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::SensorSetupReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::SensorInitializeRequest* Arena::CreateMaybeMessage< ::metamoto::services::SensorInitializeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::SensorInitializeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::SensorInitializeReply* Arena::CreateMaybeMessage< ::metamoto::services::SensorInitializeReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::SensorInitializeReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::SensorUpdateRequest* Arena::CreateMaybeMessage< ::metamoto::services::SensorUpdateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::SensorUpdateRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::SensorUpdateReply* Arena::CreateMaybeMessage< ::metamoto::services::SensorUpdateReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::SensorUpdateReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::SensorCloseRequest* Arena::CreateMaybeMessage< ::metamoto::services::SensorCloseRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::SensorCloseRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::SensorCloseReply* Arena::CreateMaybeMessage< ::metamoto::services::SensorCloseReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::SensorCloseReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
