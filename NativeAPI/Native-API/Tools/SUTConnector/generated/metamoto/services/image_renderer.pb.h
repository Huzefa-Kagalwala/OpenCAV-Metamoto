// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/services/image_renderer.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2fservices_2fimage_5frenderer_2eproto
#define PROTOBUF_INCLUDED_metamoto_2fservices_2fimage_5frenderer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/vector3.pb.h"
#include "metamoto/types/image.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fimage_5frenderer_2eproto 

namespace protobuf_metamoto_2fservices_2fimage_5frenderer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2fservices_2fimage_5frenderer_2eproto
namespace metamoto {
namespace services {
class ImageRendererGetImageReply;
class ImageRendererGetImageReplyDefaultTypeInternal;
extern ImageRendererGetImageReplyDefaultTypeInternal _ImageRendererGetImageReply_default_instance_;
class ImageRendererGetImageRequest;
class ImageRendererGetImageRequestDefaultTypeInternal;
extern ImageRendererGetImageRequestDefaultTypeInternal _ImageRendererGetImageRequest_default_instance_;
class ImageRendererSetCameraReply;
class ImageRendererSetCameraReplyDefaultTypeInternal;
extern ImageRendererSetCameraReplyDefaultTypeInternal _ImageRendererSetCameraReply_default_instance_;
class ImageRendererSetCameraRequest;
class ImageRendererSetCameraRequestDefaultTypeInternal;
extern ImageRendererSetCameraRequestDefaultTypeInternal _ImageRendererSetCameraRequest_default_instance_;
}  // namespace services
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::services::ImageRendererGetImageReply* Arena::CreateMaybeMessage<::metamoto::services::ImageRendererGetImageReply>(Arena*);
template<> ::metamoto::services::ImageRendererGetImageRequest* Arena::CreateMaybeMessage<::metamoto::services::ImageRendererGetImageRequest>(Arena*);
template<> ::metamoto::services::ImageRendererSetCameraReply* Arena::CreateMaybeMessage<::metamoto::services::ImageRendererSetCameraReply>(Arena*);
template<> ::metamoto::services::ImageRendererSetCameraRequest* Arena::CreateMaybeMessage<::metamoto::services::ImageRendererSetCameraRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace services {

// ===================================================================

class ImageRendererSetCameraRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ImageRendererSetCameraRequest) */ {
 public:
  ImageRendererSetCameraRequest();
  virtual ~ImageRendererSetCameraRequest();

  ImageRendererSetCameraRequest(const ImageRendererSetCameraRequest& from);

  inline ImageRendererSetCameraRequest& operator=(const ImageRendererSetCameraRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageRendererSetCameraRequest(ImageRendererSetCameraRequest&& from) noexcept
    : ImageRendererSetCameraRequest() {
    *this = ::std::move(from);
  }

  inline ImageRendererSetCameraRequest& operator=(ImageRendererSetCameraRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageRendererSetCameraRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageRendererSetCameraRequest* internal_default_instance() {
    return reinterpret_cast<const ImageRendererSetCameraRequest*>(
               &_ImageRendererSetCameraRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ImageRendererSetCameraRequest* other);
  friend void swap(ImageRendererSetCameraRequest& a, ImageRendererSetCameraRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageRendererSetCameraRequest* New() const final {
    return CreateMaybeMessage<ImageRendererSetCameraRequest>(NULL);
  }

  ImageRendererSetCameraRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImageRendererSetCameraRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImageRendererSetCameraRequest& from);
  void MergeFrom(const ImageRendererSetCameraRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageRendererSetCameraRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.types.Vector3 position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  private:
  const ::metamoto::types::Vector3& _internal_position() const;
  public:
  const ::metamoto::types::Vector3& position() const;
  ::metamoto::types::Vector3* release_position();
  ::metamoto::types::Vector3* mutable_position();
  void set_allocated_position(::metamoto::types::Vector3* position);

  // .metamoto.types.Vector3 rotation = 2;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 2;
  private:
  const ::metamoto::types::Vector3& _internal_rotation() const;
  public:
  const ::metamoto::types::Vector3& rotation() const;
  ::metamoto::types::Vector3* release_rotation();
  ::metamoto::types::Vector3* mutable_rotation();
  void set_allocated_rotation(::metamoto::types::Vector3* rotation);

  // uint32 frame_width = 3;
  void clear_frame_width();
  static const int kFrameWidthFieldNumber = 3;
  ::google::protobuf::uint32 frame_width() const;
  void set_frame_width(::google::protobuf::uint32 value);

  // uint32 frame_height = 4;
  void clear_frame_height();
  static const int kFrameHeightFieldNumber = 4;
  ::google::protobuf::uint32 frame_height() const;
  void set_frame_height(::google::protobuf::uint32 value);

  // double frame_rate = 5;
  void clear_frame_rate();
  static const int kFrameRateFieldNumber = 5;
  double frame_rate() const;
  void set_frame_rate(double value);

  // double vfov = 6;
  void clear_vfov();
  static const int kVfovFieldNumber = 6;
  double vfov() const;
  void set_vfov(double value);

  // bool hdr = 7;
  void clear_hdr();
  static const int kHdrFieldNumber = 7;
  bool hdr() const;
  void set_hdr(bool value);

  // @@protoc_insertion_point(class_scope:metamoto.services.ImageRendererSetCameraRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::types::Vector3* position_;
  ::metamoto::types::Vector3* rotation_;
  ::google::protobuf::uint32 frame_width_;
  ::google::protobuf::uint32 frame_height_;
  double frame_rate_;
  double vfov_;
  bool hdr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fimage_5frenderer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageRendererSetCameraReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ImageRendererSetCameraReply) */ {
 public:
  ImageRendererSetCameraReply();
  virtual ~ImageRendererSetCameraReply();

  ImageRendererSetCameraReply(const ImageRendererSetCameraReply& from);

  inline ImageRendererSetCameraReply& operator=(const ImageRendererSetCameraReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageRendererSetCameraReply(ImageRendererSetCameraReply&& from) noexcept
    : ImageRendererSetCameraReply() {
    *this = ::std::move(from);
  }

  inline ImageRendererSetCameraReply& operator=(ImageRendererSetCameraReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageRendererSetCameraReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageRendererSetCameraReply* internal_default_instance() {
    return reinterpret_cast<const ImageRendererSetCameraReply*>(
               &_ImageRendererSetCameraReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ImageRendererSetCameraReply* other);
  friend void swap(ImageRendererSetCameraReply& a, ImageRendererSetCameraReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageRendererSetCameraReply* New() const final {
    return CreateMaybeMessage<ImageRendererSetCameraReply>(NULL);
  }

  ImageRendererSetCameraReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImageRendererSetCameraReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImageRendererSetCameraReply& from);
  void MergeFrom(const ImageRendererSetCameraReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageRendererSetCameraReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:metamoto.services.ImageRendererSetCameraReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fimage_5frenderer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageRendererGetImageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ImageRendererGetImageRequest) */ {
 public:
  ImageRendererGetImageRequest();
  virtual ~ImageRendererGetImageRequest();

  ImageRendererGetImageRequest(const ImageRendererGetImageRequest& from);

  inline ImageRendererGetImageRequest& operator=(const ImageRendererGetImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageRendererGetImageRequest(ImageRendererGetImageRequest&& from) noexcept
    : ImageRendererGetImageRequest() {
    *this = ::std::move(from);
  }

  inline ImageRendererGetImageRequest& operator=(ImageRendererGetImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageRendererGetImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageRendererGetImageRequest* internal_default_instance() {
    return reinterpret_cast<const ImageRendererGetImageRequest*>(
               &_ImageRendererGetImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ImageRendererGetImageRequest* other);
  friend void swap(ImageRendererGetImageRequest& a, ImageRendererGetImageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageRendererGetImageRequest* New() const final {
    return CreateMaybeMessage<ImageRendererGetImageRequest>(NULL);
  }

  ImageRendererGetImageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImageRendererGetImageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImageRendererGetImageRequest& from);
  void MergeFrom(const ImageRendererGetImageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageRendererGetImageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:metamoto.services.ImageRendererGetImageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fimage_5frenderer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageRendererGetImageReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ImageRendererGetImageReply) */ {
 public:
  ImageRendererGetImageReply();
  virtual ~ImageRendererGetImageReply();

  ImageRendererGetImageReply(const ImageRendererGetImageReply& from);

  inline ImageRendererGetImageReply& operator=(const ImageRendererGetImageReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageRendererGetImageReply(ImageRendererGetImageReply&& from) noexcept
    : ImageRendererGetImageReply() {
    *this = ::std::move(from);
  }

  inline ImageRendererGetImageReply& operator=(ImageRendererGetImageReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageRendererGetImageReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageRendererGetImageReply* internal_default_instance() {
    return reinterpret_cast<const ImageRendererGetImageReply*>(
               &_ImageRendererGetImageReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ImageRendererGetImageReply* other);
  friend void swap(ImageRendererGetImageReply& a, ImageRendererGetImageReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageRendererGetImageReply* New() const final {
    return CreateMaybeMessage<ImageRendererGetImageReply>(NULL);
  }

  ImageRendererGetImageReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImageRendererGetImageReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImageRendererGetImageReply& from);
  void MergeFrom(const ImageRendererGetImageReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageRendererGetImageReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.types.Image image = 2;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 2;
  private:
  const ::metamoto::types::Image& _internal_image() const;
  public:
  const ::metamoto::types::Image& image() const;
  ::metamoto::types::Image* release_image();
  ::metamoto::types::Image* mutable_image();
  void set_allocated_image(::metamoto::types::Image* image);

  // double time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // @@protoc_insertion_point(class_scope:metamoto.services.ImageRendererGetImageReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::types::Image* image_;
  double time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fimage_5frenderer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageRendererSetCameraRequest

// .metamoto.types.Vector3 position = 1;
inline bool ImageRendererSetCameraRequest::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::metamoto::types::Vector3& ImageRendererSetCameraRequest::_internal_position() const {
  return *position_;
}
inline const ::metamoto::types::Vector3& ImageRendererSetCameraRequest::position() const {
  const ::metamoto::types::Vector3* p = position_;
  // @@protoc_insertion_point(field_get:metamoto.services.ImageRendererSetCameraRequest.position)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* ImageRendererSetCameraRequest::release_position() {
  // @@protoc_insertion_point(field_release:metamoto.services.ImageRendererSetCameraRequest.position)
  
  ::metamoto::types::Vector3* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* ImageRendererSetCameraRequest::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.ImageRendererSetCameraRequest.position)
  return position_;
}
inline void ImageRendererSetCameraRequest::set_allocated_position(::metamoto::types::Vector3* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ImageRendererSetCameraRequest.position)
}

// .metamoto.types.Vector3 rotation = 2;
inline bool ImageRendererSetCameraRequest::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
inline const ::metamoto::types::Vector3& ImageRendererSetCameraRequest::_internal_rotation() const {
  return *rotation_;
}
inline const ::metamoto::types::Vector3& ImageRendererSetCameraRequest::rotation() const {
  const ::metamoto::types::Vector3* p = rotation_;
  // @@protoc_insertion_point(field_get:metamoto.services.ImageRendererSetCameraRequest.rotation)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* ImageRendererSetCameraRequest::release_rotation() {
  // @@protoc_insertion_point(field_release:metamoto.services.ImageRendererSetCameraRequest.rotation)
  
  ::metamoto::types::Vector3* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* ImageRendererSetCameraRequest::mutable_rotation() {
  
  if (rotation_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.ImageRendererSetCameraRequest.rotation)
  return rotation_;
}
inline void ImageRendererSetCameraRequest::set_allocated_rotation(::metamoto::types::Vector3* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ImageRendererSetCameraRequest.rotation)
}

// uint32 frame_width = 3;
inline void ImageRendererSetCameraRequest::clear_frame_width() {
  frame_width_ = 0u;
}
inline ::google::protobuf::uint32 ImageRendererSetCameraRequest::frame_width() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ImageRendererSetCameraRequest.frame_width)
  return frame_width_;
}
inline void ImageRendererSetCameraRequest::set_frame_width(::google::protobuf::uint32 value) {
  
  frame_width_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.ImageRendererSetCameraRequest.frame_width)
}

// uint32 frame_height = 4;
inline void ImageRendererSetCameraRequest::clear_frame_height() {
  frame_height_ = 0u;
}
inline ::google::protobuf::uint32 ImageRendererSetCameraRequest::frame_height() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ImageRendererSetCameraRequest.frame_height)
  return frame_height_;
}
inline void ImageRendererSetCameraRequest::set_frame_height(::google::protobuf::uint32 value) {
  
  frame_height_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.ImageRendererSetCameraRequest.frame_height)
}

// double frame_rate = 5;
inline void ImageRendererSetCameraRequest::clear_frame_rate() {
  frame_rate_ = 0;
}
inline double ImageRendererSetCameraRequest::frame_rate() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ImageRendererSetCameraRequest.frame_rate)
  return frame_rate_;
}
inline void ImageRendererSetCameraRequest::set_frame_rate(double value) {
  
  frame_rate_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.ImageRendererSetCameraRequest.frame_rate)
}

// double vfov = 6;
inline void ImageRendererSetCameraRequest::clear_vfov() {
  vfov_ = 0;
}
inline double ImageRendererSetCameraRequest::vfov() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ImageRendererSetCameraRequest.vfov)
  return vfov_;
}
inline void ImageRendererSetCameraRequest::set_vfov(double value) {
  
  vfov_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.ImageRendererSetCameraRequest.vfov)
}

// bool hdr = 7;
inline void ImageRendererSetCameraRequest::clear_hdr() {
  hdr_ = false;
}
inline bool ImageRendererSetCameraRequest::hdr() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ImageRendererSetCameraRequest.hdr)
  return hdr_;
}
inline void ImageRendererSetCameraRequest::set_hdr(bool value) {
  
  hdr_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.ImageRendererSetCameraRequest.hdr)
}

// -------------------------------------------------------------------

// ImageRendererSetCameraReply

// string id = 1;
inline void ImageRendererSetCameraReply::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageRendererSetCameraReply::id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ImageRendererSetCameraReply.id)
  return id_.GetNoArena();
}
inline void ImageRendererSetCameraReply::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.ImageRendererSetCameraReply.id)
}
#if LANG_CXX11
inline void ImageRendererSetCameraReply::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.ImageRendererSetCameraReply.id)
}
#endif
inline void ImageRendererSetCameraReply::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.ImageRendererSetCameraReply.id)
}
inline void ImageRendererSetCameraReply::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.ImageRendererSetCameraReply.id)
}
inline ::std::string* ImageRendererSetCameraReply::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.ImageRendererSetCameraReply.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageRendererSetCameraReply::release_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.ImageRendererSetCameraReply.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageRendererSetCameraReply::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ImageRendererSetCameraReply.id)
}

// -------------------------------------------------------------------

// ImageRendererGetImageRequest

// string id = 1;
inline void ImageRendererGetImageRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageRendererGetImageRequest::id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ImageRendererGetImageRequest.id)
  return id_.GetNoArena();
}
inline void ImageRendererGetImageRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.ImageRendererGetImageRequest.id)
}
#if LANG_CXX11
inline void ImageRendererGetImageRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.ImageRendererGetImageRequest.id)
}
#endif
inline void ImageRendererGetImageRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.ImageRendererGetImageRequest.id)
}
inline void ImageRendererGetImageRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.ImageRendererGetImageRequest.id)
}
inline ::std::string* ImageRendererGetImageRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.ImageRendererGetImageRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageRendererGetImageRequest::release_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.ImageRendererGetImageRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageRendererGetImageRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ImageRendererGetImageRequest.id)
}

// -------------------------------------------------------------------

// ImageRendererGetImageReply

// double time = 1;
inline void ImageRendererGetImageReply::clear_time() {
  time_ = 0;
}
inline double ImageRendererGetImageReply::time() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ImageRendererGetImageReply.time)
  return time_;
}
inline void ImageRendererGetImageReply::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.ImageRendererGetImageReply.time)
}

// .metamoto.types.Image image = 2;
inline bool ImageRendererGetImageReply::has_image() const {
  return this != internal_default_instance() && image_ != NULL;
}
inline const ::metamoto::types::Image& ImageRendererGetImageReply::_internal_image() const {
  return *image_;
}
inline const ::metamoto::types::Image& ImageRendererGetImageReply::image() const {
  const ::metamoto::types::Image* p = image_;
  // @@protoc_insertion_point(field_get:metamoto.services.ImageRendererGetImageReply.image)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Image*>(
      &::metamoto::types::_Image_default_instance_);
}
inline ::metamoto::types::Image* ImageRendererGetImageReply::release_image() {
  // @@protoc_insertion_point(field_release:metamoto.services.ImageRendererGetImageReply.image)
  
  ::metamoto::types::Image* temp = image_;
  image_ = NULL;
  return temp;
}
inline ::metamoto::types::Image* ImageRendererGetImageReply::mutable_image() {
  
  if (image_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Image>(GetArenaNoVirtual());
    image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.ImageRendererGetImageReply.image)
  return image_;
}
inline void ImageRendererGetImageReply::set_allocated_image(::metamoto::types::Image* image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(image_);
  }
  if (image) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ImageRendererGetImageReply.image)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace services
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2fservices_2fimage_5frenderer_2eproto
