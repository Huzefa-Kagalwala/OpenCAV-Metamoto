// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metamoto/services/data_bus.proto

#include "metamoto/services/data_bus.pb.h"
#include "metamoto/services/data_bus.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace metamoto {
namespace services {

static const char* DataBus_method_names[] = {
  "/metamoto.services.DataBus/Publish",
  "/metamoto.services.DataBus/Subscribe",
  "/metamoto.services.DataBus/Write",
  "/metamoto.services.DataBus/Read",
  "/metamoto.services.DataBus/ReadAll",
  "/metamoto.services.DataBus/ReadLast",
};

std::unique_ptr< DataBus::Stub> DataBus::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataBus::Stub> stub(new DataBus::Stub(channel));
  return stub;
}

DataBus::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Publish_(DataBus_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Subscribe_(DataBus_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Write_(DataBus_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Read_(DataBus_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadAll_(DataBus_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadLast_(DataBus_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DataBus::Stub::Publish(::grpc::ClientContext* context, const ::metamoto::services::DataBusPublishRequest& request, ::metamoto::services::DataBusPublishReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Publish_, context, request, response);
}

void DataBus::Stub::experimental_async::Publish(::grpc::ClientContext* context, const ::metamoto::services::DataBusPublishRequest* request, ::metamoto::services::DataBusPublishReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Publish_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusPublishReply>* DataBus::Stub::AsyncPublishRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusPublishRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::DataBusPublishReply>::Create(channel_.get(), cq, rpcmethod_Publish_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusPublishReply>* DataBus::Stub::PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusPublishRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::DataBusPublishReply>::Create(channel_.get(), cq, rpcmethod_Publish_, context, request, false);
}

::grpc::Status DataBus::Stub::Subscribe(::grpc::ClientContext* context, const ::metamoto::services::DataBusSubscribeRequest& request, ::metamoto::services::DataBusSubscribeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Subscribe_, context, request, response);
}

void DataBus::Stub::experimental_async::Subscribe(::grpc::ClientContext* context, const ::metamoto::services::DataBusSubscribeRequest* request, ::metamoto::services::DataBusSubscribeReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusSubscribeReply>* DataBus::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::DataBusSubscribeReply>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusSubscribeReply>* DataBus::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::DataBusSubscribeReply>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false);
}

::grpc::Status DataBus::Stub::Write(::grpc::ClientContext* context, const ::metamoto::services::DataBusWriteRequest& request, ::metamoto::services::DataBusWriteReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Write_, context, request, response);
}

void DataBus::Stub::experimental_async::Write(::grpc::ClientContext* context, const ::metamoto::services::DataBusWriteRequest* request, ::metamoto::services::DataBusWriteReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusWriteReply>* DataBus::Stub::AsyncWriteRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusWriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::DataBusWriteReply>::Create(channel_.get(), cq, rpcmethod_Write_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusWriteReply>* DataBus::Stub::PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusWriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::DataBusWriteReply>::Create(channel_.get(), cq, rpcmethod_Write_, context, request, false);
}

::grpc::Status DataBus::Stub::Read(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadRequest& request, ::metamoto::services::DataBusReadReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Read_, context, request, response);
}

void DataBus::Stub::experimental_async::Read(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadRequest* request, ::metamoto::services::DataBusReadReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadReply>* DataBus::Stub::AsyncReadRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::DataBusReadReply>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadReply>* DataBus::Stub::PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::DataBusReadReply>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, false);
}

::grpc::Status DataBus::Stub::ReadAll(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadAllRequest& request, ::metamoto::services::DataBusReadAllReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReadAll_, context, request, response);
}

void DataBus::Stub::experimental_async::ReadAll(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadAllRequest* request, ::metamoto::services::DataBusReadAllReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReadAll_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadAllReply>* DataBus::Stub::AsyncReadAllRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadAllRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::DataBusReadAllReply>::Create(channel_.get(), cq, rpcmethod_ReadAll_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadAllReply>* DataBus::Stub::PrepareAsyncReadAllRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadAllRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::DataBusReadAllReply>::Create(channel_.get(), cq, rpcmethod_ReadAll_, context, request, false);
}

::grpc::Status DataBus::Stub::ReadLast(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadLastRequest& request, ::metamoto::services::DataBusReadLastReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReadLast_, context, request, response);
}

void DataBus::Stub::experimental_async::ReadLast(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadLastRequest* request, ::metamoto::services::DataBusReadLastReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReadLast_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadLastReply>* DataBus::Stub::AsyncReadLastRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadLastRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::DataBusReadLastReply>::Create(channel_.get(), cq, rpcmethod_ReadLast_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadLastReply>* DataBus::Stub::PrepareAsyncReadLastRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadLastRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::DataBusReadLastReply>::Create(channel_.get(), cq, rpcmethod_ReadLast_, context, request, false);
}

DataBus::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataBus_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataBus::Service, ::metamoto::services::DataBusPublishRequest, ::metamoto::services::DataBusPublishReply>(
          std::mem_fn(&DataBus::Service::Publish), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataBus_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataBus::Service, ::metamoto::services::DataBusSubscribeRequest, ::metamoto::services::DataBusSubscribeReply>(
          std::mem_fn(&DataBus::Service::Subscribe), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataBus_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataBus::Service, ::metamoto::services::DataBusWriteRequest, ::metamoto::services::DataBusWriteReply>(
          std::mem_fn(&DataBus::Service::Write), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataBus_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataBus::Service, ::metamoto::services::DataBusReadRequest, ::metamoto::services::DataBusReadReply>(
          std::mem_fn(&DataBus::Service::Read), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataBus_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataBus::Service, ::metamoto::services::DataBusReadAllRequest, ::metamoto::services::DataBusReadAllReply>(
          std::mem_fn(&DataBus::Service::ReadAll), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataBus_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataBus::Service, ::metamoto::services::DataBusReadLastRequest, ::metamoto::services::DataBusReadLastReply>(
          std::mem_fn(&DataBus::Service::ReadLast), this)));
}

DataBus::Service::~Service() {
}

::grpc::Status DataBus::Service::Publish(::grpc::ServerContext* context, const ::metamoto::services::DataBusPublishRequest* request, ::metamoto::services::DataBusPublishReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataBus::Service::Subscribe(::grpc::ServerContext* context, const ::metamoto::services::DataBusSubscribeRequest* request, ::metamoto::services::DataBusSubscribeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataBus::Service::Write(::grpc::ServerContext* context, const ::metamoto::services::DataBusWriteRequest* request, ::metamoto::services::DataBusWriteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataBus::Service::Read(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadRequest* request, ::metamoto::services::DataBusReadReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataBus::Service::ReadAll(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadAllRequest* request, ::metamoto::services::DataBusReadAllReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataBus::Service::ReadLast(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadLastRequest* request, ::metamoto::services::DataBusReadLastReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace metamoto
}  // namespace services

