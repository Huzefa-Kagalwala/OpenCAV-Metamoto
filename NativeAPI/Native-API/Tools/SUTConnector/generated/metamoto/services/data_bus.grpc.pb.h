// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metamoto/services/data_bus.proto
// Original file comments:
// Copyright (c) 2018-2020 Metamoto, Inc. All Rights Reserved.
//
#ifndef GRPC_metamoto_2fservices_2fdata_5fbus_2eproto__INCLUDED
#define GRPC_metamoto_2fservices_2fdata_5fbus_2eproto__INCLUDED

#include "metamoto/services/data_bus.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace metamoto {
namespace services {

class DataBus final {
 public:
  static constexpr char const* service_full_name() {
    return "metamoto.services.DataBus";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Declares the intention to write data to a topic, must be called once before any Write.
    virtual ::grpc::Status Publish(::grpc::ClientContext* context, const ::metamoto::services::DataBusPublishRequest& request, ::metamoto::services::DataBusPublishReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusPublishReply>> AsyncPublish(::grpc::ClientContext* context, const ::metamoto::services::DataBusPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusPublishReply>>(AsyncPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusPublishReply>> PrepareAsyncPublish(::grpc::ClientContext* context, const ::metamoto::services::DataBusPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusPublishReply>>(PrepareAsyncPublishRaw(context, request, cq));
    }
    // Declares the intention to read data from a topic, must be called once before any Read.
    virtual ::grpc::Status Subscribe(::grpc::ClientContext* context, const ::metamoto::services::DataBusSubscribeRequest& request, ::metamoto::services::DataBusSubscribeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusSubscribeReply>> AsyncSubscribe(::grpc::ClientContext* context, const ::metamoto::services::DataBusSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusSubscribeReply>>(AsyncSubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusSubscribeReply>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::metamoto::services::DataBusSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusSubscribeReply>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    // Write a data message to a topic.
    virtual ::grpc::Status Write(::grpc::ClientContext* context, const ::metamoto::services::DataBusWriteRequest& request, ::metamoto::services::DataBusWriteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusWriteReply>> AsyncWrite(::grpc::ClientContext* context, const ::metamoto::services::DataBusWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusWriteReply>>(AsyncWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusWriteReply>> PrepareAsyncWrite(::grpc::ClientContext* context, const ::metamoto::services::DataBusWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusWriteReply>>(PrepareAsyncWriteRaw(context, request, cq));
    }
    // Read one data message from a topic.
    virtual ::grpc::Status Read(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadRequest& request, ::metamoto::services::DataBusReadReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusReadReply>> AsyncRead(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusReadReply>>(AsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusReadReply>> PrepareAsyncRead(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusReadReply>>(PrepareAsyncReadRaw(context, request, cq));
    }
    // Read all messages from a topic.
    virtual ::grpc::Status ReadAll(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadAllRequest& request, ::metamoto::services::DataBusReadAllReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusReadAllReply>> AsyncReadAll(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusReadAllReply>>(AsyncReadAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusReadAllReply>> PrepareAsyncReadAll(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusReadAllReply>>(PrepareAsyncReadAllRaw(context, request, cq));
    }
    // Read all messages from a topic, returning the last one.
    virtual ::grpc::Status ReadLast(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadLastRequest& request, ::metamoto::services::DataBusReadLastReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusReadLastReply>> AsyncReadLast(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadLastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusReadLastReply>>(AsyncReadLastRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusReadLastReply>> PrepareAsyncReadLast(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadLastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusReadLastReply>>(PrepareAsyncReadLastRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Declares the intention to write data to a topic, must be called once before any Write.
      virtual void Publish(::grpc::ClientContext* context, const ::metamoto::services::DataBusPublishRequest* request, ::metamoto::services::DataBusPublishReply* response, std::function<void(::grpc::Status)>) = 0;
      // Declares the intention to read data from a topic, must be called once before any Read.
      virtual void Subscribe(::grpc::ClientContext* context, const ::metamoto::services::DataBusSubscribeRequest* request, ::metamoto::services::DataBusSubscribeReply* response, std::function<void(::grpc::Status)>) = 0;
      // Write a data message to a topic.
      virtual void Write(::grpc::ClientContext* context, const ::metamoto::services::DataBusWriteRequest* request, ::metamoto::services::DataBusWriteReply* response, std::function<void(::grpc::Status)>) = 0;
      // Read one data message from a topic.
      virtual void Read(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadRequest* request, ::metamoto::services::DataBusReadReply* response, std::function<void(::grpc::Status)>) = 0;
      // Read all messages from a topic.
      virtual void ReadAll(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadAllRequest* request, ::metamoto::services::DataBusReadAllReply* response, std::function<void(::grpc::Status)>) = 0;
      // Read all messages from a topic, returning the last one.
      virtual void ReadLast(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadLastRequest* request, ::metamoto::services::DataBusReadLastReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusPublishReply>* AsyncPublishRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusPublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusPublishReply>* PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusPublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusSubscribeReply>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusSubscribeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusSubscribeReply>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusSubscribeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusWriteReply>* AsyncWriteRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusWriteReply>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusReadReply>* AsyncReadRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusReadReply>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusReadAllReply>* AsyncReadAllRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadAllRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusReadAllReply>* PrepareAsyncReadAllRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadAllRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusReadLastReply>* AsyncReadLastRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadLastRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::DataBusReadLastReply>* PrepareAsyncReadLastRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadLastRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Publish(::grpc::ClientContext* context, const ::metamoto::services::DataBusPublishRequest& request, ::metamoto::services::DataBusPublishReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusPublishReply>> AsyncPublish(::grpc::ClientContext* context, const ::metamoto::services::DataBusPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusPublishReply>>(AsyncPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusPublishReply>> PrepareAsyncPublish(::grpc::ClientContext* context, const ::metamoto::services::DataBusPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusPublishReply>>(PrepareAsyncPublishRaw(context, request, cq));
    }
    ::grpc::Status Subscribe(::grpc::ClientContext* context, const ::metamoto::services::DataBusSubscribeRequest& request, ::metamoto::services::DataBusSubscribeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusSubscribeReply>> AsyncSubscribe(::grpc::ClientContext* context, const ::metamoto::services::DataBusSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusSubscribeReply>>(AsyncSubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusSubscribeReply>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::metamoto::services::DataBusSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusSubscribeReply>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    ::grpc::Status Write(::grpc::ClientContext* context, const ::metamoto::services::DataBusWriteRequest& request, ::metamoto::services::DataBusWriteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusWriteReply>> AsyncWrite(::grpc::ClientContext* context, const ::metamoto::services::DataBusWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusWriteReply>>(AsyncWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusWriteReply>> PrepareAsyncWrite(::grpc::ClientContext* context, const ::metamoto::services::DataBusWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusWriteReply>>(PrepareAsyncWriteRaw(context, request, cq));
    }
    ::grpc::Status Read(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadRequest& request, ::metamoto::services::DataBusReadReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadReply>> AsyncRead(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadReply>>(AsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadReply>> PrepareAsyncRead(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadReply>>(PrepareAsyncReadRaw(context, request, cq));
    }
    ::grpc::Status ReadAll(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadAllRequest& request, ::metamoto::services::DataBusReadAllReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadAllReply>> AsyncReadAll(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadAllReply>>(AsyncReadAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadAllReply>> PrepareAsyncReadAll(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadAllReply>>(PrepareAsyncReadAllRaw(context, request, cq));
    }
    ::grpc::Status ReadLast(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadLastRequest& request, ::metamoto::services::DataBusReadLastReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadLastReply>> AsyncReadLast(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadLastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadLastReply>>(AsyncReadLastRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadLastReply>> PrepareAsyncReadLast(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadLastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadLastReply>>(PrepareAsyncReadLastRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Publish(::grpc::ClientContext* context, const ::metamoto::services::DataBusPublishRequest* request, ::metamoto::services::DataBusPublishReply* response, std::function<void(::grpc::Status)>) override;
      void Subscribe(::grpc::ClientContext* context, const ::metamoto::services::DataBusSubscribeRequest* request, ::metamoto::services::DataBusSubscribeReply* response, std::function<void(::grpc::Status)>) override;
      void Write(::grpc::ClientContext* context, const ::metamoto::services::DataBusWriteRequest* request, ::metamoto::services::DataBusWriteReply* response, std::function<void(::grpc::Status)>) override;
      void Read(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadRequest* request, ::metamoto::services::DataBusReadReply* response, std::function<void(::grpc::Status)>) override;
      void ReadAll(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadAllRequest* request, ::metamoto::services::DataBusReadAllReply* response, std::function<void(::grpc::Status)>) override;
      void ReadLast(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadLastRequest* request, ::metamoto::services::DataBusReadLastReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusPublishReply>* AsyncPublishRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusPublishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusPublishReply>* PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusPublishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusSubscribeReply>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusSubscribeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusSubscribeReply>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusSubscribeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusWriteReply>* AsyncWriteRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusWriteReply>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadReply>* AsyncReadRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadReply>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadAllReply>* AsyncReadAllRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadAllRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadAllReply>* PrepareAsyncReadAllRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadAllRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadLastReply>* AsyncReadLastRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadLastRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::DataBusReadLastReply>* PrepareAsyncReadLastRaw(::grpc::ClientContext* context, const ::metamoto::services::DataBusReadLastRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Publish_;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
    const ::grpc::internal::RpcMethod rpcmethod_Write_;
    const ::grpc::internal::RpcMethod rpcmethod_Read_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadAll_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadLast_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Declares the intention to write data to a topic, must be called once before any Write.
    virtual ::grpc::Status Publish(::grpc::ServerContext* context, const ::metamoto::services::DataBusPublishRequest* request, ::metamoto::services::DataBusPublishReply* response);
    // Declares the intention to read data from a topic, must be called once before any Read.
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::metamoto::services::DataBusSubscribeRequest* request, ::metamoto::services::DataBusSubscribeReply* response);
    // Write a data message to a topic.
    virtual ::grpc::Status Write(::grpc::ServerContext* context, const ::metamoto::services::DataBusWriteRequest* request, ::metamoto::services::DataBusWriteReply* response);
    // Read one data message from a topic.
    virtual ::grpc::Status Read(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadRequest* request, ::metamoto::services::DataBusReadReply* response);
    // Read all messages from a topic.
    virtual ::grpc::Status ReadAll(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadAllRequest* request, ::metamoto::services::DataBusReadAllReply* response);
    // Read all messages from a topic, returning the last one.
    virtual ::grpc::Status ReadLast(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadLastRequest* request, ::metamoto::services::DataBusReadLastReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Publish() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* context, const ::metamoto::services::DataBusPublishRequest* request, ::metamoto::services::DataBusPublishReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublish(::grpc::ServerContext* context, ::metamoto::services::DataBusPublishRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::DataBusPublishReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::metamoto::services::DataBusSubscribeRequest* request, ::metamoto::services::DataBusSubscribeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::metamoto::services::DataBusSubscribeRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::DataBusSubscribeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Write() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, const ::metamoto::services::DataBusWriteRequest* request, ::metamoto::services::DataBusWriteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::metamoto::services::DataBusWriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::DataBusWriteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Read() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadRequest* request, ::metamoto::services::DataBusReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::metamoto::services::DataBusReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::DataBusReadReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReadAll() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ReadAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAll(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadAllRequest* request, ::metamoto::services::DataBusReadAllReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadAll(::grpc::ServerContext* context, ::metamoto::services::DataBusReadAllRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::DataBusReadAllReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadLast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReadLast() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ReadLast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadLast(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadLastRequest* request, ::metamoto::services::DataBusReadLastReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadLast(::grpc::ServerContext* context, ::metamoto::services::DataBusReadLastRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::DataBusReadLastReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Publish<WithAsyncMethod_Subscribe<WithAsyncMethod_Write<WithAsyncMethod_Read<WithAsyncMethod_ReadAll<WithAsyncMethod_ReadLast<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Publish() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::DataBusPublishRequest, ::metamoto::services::DataBusPublishReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::DataBusPublishRequest* request,
                 ::metamoto::services::DataBusPublishReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Publish(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* context, const ::metamoto::services::DataBusPublishRequest* request, ::metamoto::services::DataBusPublishReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Publish(::grpc::ServerContext* context, const ::metamoto::services::DataBusPublishRequest* request, ::metamoto::services::DataBusPublishReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Subscribe() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::DataBusSubscribeRequest, ::metamoto::services::DataBusSubscribeReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::DataBusSubscribeRequest* request,
                 ::metamoto::services::DataBusSubscribeReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Subscribe(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::metamoto::services::DataBusSubscribeRequest* request, ::metamoto::services::DataBusSubscribeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Subscribe(::grpc::ServerContext* context, const ::metamoto::services::DataBusSubscribeRequest* request, ::metamoto::services::DataBusSubscribeReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Write() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::DataBusWriteRequest, ::metamoto::services::DataBusWriteReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::DataBusWriteRequest* request,
                 ::metamoto::services::DataBusWriteReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Write(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, const ::metamoto::services::DataBusWriteRequest* request, ::metamoto::services::DataBusWriteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Write(::grpc::ServerContext* context, const ::metamoto::services::DataBusWriteRequest* request, ::metamoto::services::DataBusWriteReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Read() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::DataBusReadRequest, ::metamoto::services::DataBusReadReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::DataBusReadRequest* request,
                 ::metamoto::services::DataBusReadReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Read(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadRequest* request, ::metamoto::services::DataBusReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Read(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadRequest* request, ::metamoto::services::DataBusReadReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReadAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ReadAll() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::DataBusReadAllRequest, ::metamoto::services::DataBusReadAllReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::DataBusReadAllRequest* request,
                 ::metamoto::services::DataBusReadAllReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ReadAll(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ReadAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAll(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadAllRequest* request, ::metamoto::services::DataBusReadAllReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReadAll(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadAllRequest* request, ::metamoto::services::DataBusReadAllReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReadLast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ReadLast() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::DataBusReadLastRequest, ::metamoto::services::DataBusReadLastReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::DataBusReadLastRequest* request,
                 ::metamoto::services::DataBusReadLastReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ReadLast(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ReadLast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadLast(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadLastRequest* request, ::metamoto::services::DataBusReadLastReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReadLast(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadLastRequest* request, ::metamoto::services::DataBusReadLastReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Publish<ExperimentalWithCallbackMethod_Subscribe<ExperimentalWithCallbackMethod_Write<ExperimentalWithCallbackMethod_Read<ExperimentalWithCallbackMethod_ReadAll<ExperimentalWithCallbackMethod_ReadLast<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Publish() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* context, const ::metamoto::services::DataBusPublishRequest* request, ::metamoto::services::DataBusPublishReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::metamoto::services::DataBusSubscribeRequest* request, ::metamoto::services::DataBusSubscribeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Write() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, const ::metamoto::services::DataBusWriteRequest* request, ::metamoto::services::DataBusWriteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Read() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadRequest* request, ::metamoto::services::DataBusReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReadAll() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ReadAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAll(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadAllRequest* request, ::metamoto::services::DataBusReadAllReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadLast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReadLast() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ReadLast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadLast(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadLastRequest* request, ::metamoto::services::DataBusReadLastReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Publish() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* context, const ::metamoto::services::DataBusPublishRequest* request, ::metamoto::services::DataBusPublishReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublish(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::metamoto::services::DataBusSubscribeRequest* request, ::metamoto::services::DataBusSubscribeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Write() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, const ::metamoto::services::DataBusWriteRequest* request, ::metamoto::services::DataBusWriteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Read() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadRequest* request, ::metamoto::services::DataBusReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ReadAll() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ReadAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAll(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadAllRequest* request, ::metamoto::services::DataBusReadAllReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadAll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadLast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ReadLast() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ReadLast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadLast(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadLastRequest* request, ::metamoto::services::DataBusReadLastReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadLast(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Publish() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Publish(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* context, const ::metamoto::services::DataBusPublishRequest* request, ::metamoto::services::DataBusPublishReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Publish(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Subscribe() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Subscribe(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::metamoto::services::DataBusSubscribeRequest* request, ::metamoto::services::DataBusSubscribeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Subscribe(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Write() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Write(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, const ::metamoto::services::DataBusWriteRequest* request, ::metamoto::services::DataBusWriteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Write(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Read() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Read(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadRequest* request, ::metamoto::services::DataBusReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Read(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReadAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ReadAll() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ReadAll(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ReadAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAll(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadAllRequest* request, ::metamoto::services::DataBusReadAllReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReadAll(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReadLast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ReadLast() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ReadLast(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ReadLast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadLast(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadLastRequest* request, ::metamoto::services::DataBusReadLastReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReadLast(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Publish() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::DataBusPublishRequest, ::metamoto::services::DataBusPublishReply>(std::bind(&WithStreamedUnaryMethod_Publish<BaseClass>::StreamedPublish, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Publish(::grpc::ServerContext* context, const ::metamoto::services::DataBusPublishRequest* request, ::metamoto::services::DataBusPublishReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPublish(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::DataBusPublishRequest,::metamoto::services::DataBusPublishReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::DataBusSubscribeRequest, ::metamoto::services::DataBusSubscribeReply>(std::bind(&WithStreamedUnaryMethod_Subscribe<BaseClass>::StreamedSubscribe, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::metamoto::services::DataBusSubscribeRequest* request, ::metamoto::services::DataBusSubscribeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::DataBusSubscribeRequest,::metamoto::services::DataBusSubscribeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Write() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::DataBusWriteRequest, ::metamoto::services::DataBusWriteReply>(std::bind(&WithStreamedUnaryMethod_Write<BaseClass>::StreamedWrite, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, const ::metamoto::services::DataBusWriteRequest* request, ::metamoto::services::DataBusWriteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::DataBusWriteRequest,::metamoto::services::DataBusWriteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Read() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::DataBusReadRequest, ::metamoto::services::DataBusReadReply>(std::bind(&WithStreamedUnaryMethod_Read<BaseClass>::StreamedRead, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadRequest* request, ::metamoto::services::DataBusReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::DataBusReadRequest,::metamoto::services::DataBusReadReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReadAll() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::DataBusReadAllRequest, ::metamoto::services::DataBusReadAllReply>(std::bind(&WithStreamedUnaryMethod_ReadAll<BaseClass>::StreamedReadAll, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReadAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadAll(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadAllRequest* request, ::metamoto::services::DataBusReadAllReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadAll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::DataBusReadAllRequest,::metamoto::services::DataBusReadAllReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadLast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReadLast() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::DataBusReadLastRequest, ::metamoto::services::DataBusReadLastReply>(std::bind(&WithStreamedUnaryMethod_ReadLast<BaseClass>::StreamedReadLast, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReadLast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadLast(::grpc::ServerContext* context, const ::metamoto::services::DataBusReadLastRequest* request, ::metamoto::services::DataBusReadLastReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadLast(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::DataBusReadLastRequest,::metamoto::services::DataBusReadLastReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Publish<WithStreamedUnaryMethod_Subscribe<WithStreamedUnaryMethod_Write<WithStreamedUnaryMethod_Read<WithStreamedUnaryMethod_ReadAll<WithStreamedUnaryMethod_ReadLast<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Publish<WithStreamedUnaryMethod_Subscribe<WithStreamedUnaryMethod_Write<WithStreamedUnaryMethod_Read<WithStreamedUnaryMethod_ReadAll<WithStreamedUnaryMethod_ReadLast<Service > > > > > > StreamedService;
};

}  // namespace services
}  // namespace metamoto


#endif  // GRPC_metamoto_2fservices_2fdata_5fbus_2eproto__INCLUDED
