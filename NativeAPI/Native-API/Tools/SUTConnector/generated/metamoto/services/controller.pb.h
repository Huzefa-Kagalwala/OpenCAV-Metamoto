// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/services/controller.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2fservices_2fcontroller_2eproto
#define PROTOBUF_INCLUDED_metamoto_2fservices_2fcontroller_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
#include "metamoto/types/result_metadata.pb.h"
#include "metamoto/types/scenario.pb.h"
#include "metamoto/types/service_description.pb.h"
#include "metamoto/types/test_case.pb.h"
#include "metamoto/types/vehicle_info.pb.h"
#include "metamoto/types/waypoint.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fcontroller_2eproto 

namespace protobuf_metamoto_2fservices_2fcontroller_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2fservices_2fcontroller_2eproto
namespace metamoto {
namespace services {
class ControllerCloseReply;
class ControllerCloseReplyDefaultTypeInternal;
extern ControllerCloseReplyDefaultTypeInternal _ControllerCloseReply_default_instance_;
class ControllerCloseRequest;
class ControllerCloseRequestDefaultTypeInternal;
extern ControllerCloseRequestDefaultTypeInternal _ControllerCloseRequest_default_instance_;
class ControllerInitializeReply;
class ControllerInitializeReplyDefaultTypeInternal;
extern ControllerInitializeReplyDefaultTypeInternal _ControllerInitializeReply_default_instance_;
class ControllerInitializeRequest;
class ControllerInitializeRequestDefaultTypeInternal;
extern ControllerInitializeRequestDefaultTypeInternal _ControllerInitializeRequest_default_instance_;
class ControllerSetupReply;
class ControllerSetupReplyDefaultTypeInternal;
extern ControllerSetupReplyDefaultTypeInternal _ControllerSetupReply_default_instance_;
class ControllerSetupRequest;
class ControllerSetupRequestDefaultTypeInternal;
extern ControllerSetupRequestDefaultTypeInternal _ControllerSetupRequest_default_instance_;
class ControllerUpdateReply;
class ControllerUpdateReplyDefaultTypeInternal;
extern ControllerUpdateReplyDefaultTypeInternal _ControllerUpdateReply_default_instance_;
class ControllerUpdateRequest;
class ControllerUpdateRequestDefaultTypeInternal;
extern ControllerUpdateRequestDefaultTypeInternal _ControllerUpdateRequest_default_instance_;
}  // namespace services
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::services::ControllerCloseReply* Arena::CreateMaybeMessage<::metamoto::services::ControllerCloseReply>(Arena*);
template<> ::metamoto::services::ControllerCloseRequest* Arena::CreateMaybeMessage<::metamoto::services::ControllerCloseRequest>(Arena*);
template<> ::metamoto::services::ControllerInitializeReply* Arena::CreateMaybeMessage<::metamoto::services::ControllerInitializeReply>(Arena*);
template<> ::metamoto::services::ControllerInitializeRequest* Arena::CreateMaybeMessage<::metamoto::services::ControllerInitializeRequest>(Arena*);
template<> ::metamoto::services::ControllerSetupReply* Arena::CreateMaybeMessage<::metamoto::services::ControllerSetupReply>(Arena*);
template<> ::metamoto::services::ControllerSetupRequest* Arena::CreateMaybeMessage<::metamoto::services::ControllerSetupRequest>(Arena*);
template<> ::metamoto::services::ControllerUpdateReply* Arena::CreateMaybeMessage<::metamoto::services::ControllerUpdateReply>(Arena*);
template<> ::metamoto::services::ControllerUpdateRequest* Arena::CreateMaybeMessage<::metamoto::services::ControllerUpdateRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace services {

// ===================================================================

class ControllerSetupRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ControllerSetupRequest) */ {
 public:
  ControllerSetupRequest();
  virtual ~ControllerSetupRequest();

  ControllerSetupRequest(const ControllerSetupRequest& from);

  inline ControllerSetupRequest& operator=(const ControllerSetupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControllerSetupRequest(ControllerSetupRequest&& from) noexcept
    : ControllerSetupRequest() {
    *this = ::std::move(from);
  }

  inline ControllerSetupRequest& operator=(ControllerSetupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerSetupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerSetupRequest* internal_default_instance() {
    return reinterpret_cast<const ControllerSetupRequest*>(
               &_ControllerSetupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ControllerSetupRequest* other);
  friend void swap(ControllerSetupRequest& a, ControllerSetupRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControllerSetupRequest* New() const final {
    return CreateMaybeMessage<ControllerSetupRequest>(NULL);
  }

  ControllerSetupRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControllerSetupRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControllerSetupRequest& from);
  void MergeFrom(const ControllerSetupRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerSetupRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.ServiceDescription services = 2;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 2;
  ::metamoto::types::ServiceDescription* mutable_services(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription >*
      mutable_services();
  const ::metamoto::types::ServiceDescription& services(int index) const;
  ::metamoto::types::ServiceDescription* add_services();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription >&
      services() const;

  // .google.protobuf.Struct parameters = 1;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 1;
  private:
  const ::google::protobuf::Struct& _internal_parameters() const;
  public:
  const ::google::protobuf::Struct& parameters() const;
  ::google::protobuf::Struct* release_parameters();
  ::google::protobuf::Struct* mutable_parameters();
  void set_allocated_parameters(::google::protobuf::Struct* parameters);

  // .metamoto.types.TestCase test_case = 3;
  bool has_test_case() const;
  void clear_test_case();
  static const int kTestCaseFieldNumber = 3;
  private:
  const ::metamoto::types::TestCase& _internal_test_case() const;
  public:
  const ::metamoto::types::TestCase& test_case() const;
  ::metamoto::types::TestCase* release_test_case();
  ::metamoto::types::TestCase* mutable_test_case();
  void set_allocated_test_case(::metamoto::types::TestCase* test_case);

  // @@protoc_insertion_point(class_scope:metamoto.services.ControllerSetupRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription > services_;
  ::google::protobuf::Struct* parameters_;
  ::metamoto::types::TestCase* test_case_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControllerSetupReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ControllerSetupReply) */ {
 public:
  ControllerSetupReply();
  virtual ~ControllerSetupReply();

  ControllerSetupReply(const ControllerSetupReply& from);

  inline ControllerSetupReply& operator=(const ControllerSetupReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControllerSetupReply(ControllerSetupReply&& from) noexcept
    : ControllerSetupReply() {
    *this = ::std::move(from);
  }

  inline ControllerSetupReply& operator=(ControllerSetupReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerSetupReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerSetupReply* internal_default_instance() {
    return reinterpret_cast<const ControllerSetupReply*>(
               &_ControllerSetupReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ControllerSetupReply* other);
  friend void swap(ControllerSetupReply& a, ControllerSetupReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControllerSetupReply* New() const final {
    return CreateMaybeMessage<ControllerSetupReply>(NULL);
  }

  ControllerSetupReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControllerSetupReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControllerSetupReply& from);
  void MergeFrom(const ControllerSetupReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerSetupReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:metamoto.services.ControllerSetupReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControllerInitializeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ControllerInitializeRequest) */ {
 public:
  ControllerInitializeRequest();
  virtual ~ControllerInitializeRequest();

  ControllerInitializeRequest(const ControllerInitializeRequest& from);

  inline ControllerInitializeRequest& operator=(const ControllerInitializeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControllerInitializeRequest(ControllerInitializeRequest&& from) noexcept
    : ControllerInitializeRequest() {
    *this = ::std::move(from);
  }

  inline ControllerInitializeRequest& operator=(ControllerInitializeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerInitializeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerInitializeRequest* internal_default_instance() {
    return reinterpret_cast<const ControllerInitializeRequest*>(
               &_ControllerInitializeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ControllerInitializeRequest* other);
  friend void swap(ControllerInitializeRequest& a, ControllerInitializeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControllerInitializeRequest* New() const final {
    return CreateMaybeMessage<ControllerInitializeRequest>(NULL);
  }

  ControllerInitializeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControllerInitializeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControllerInitializeRequest& from);
  void MergeFrom(const ControllerInitializeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerInitializeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string publish_topics = 2;
  int publish_topics_size() const;
  void clear_publish_topics();
  static const int kPublishTopicsFieldNumber = 2;
  const ::std::string& publish_topics(int index) const;
  ::std::string* mutable_publish_topics(int index);
  void set_publish_topics(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_publish_topics(int index, ::std::string&& value);
  #endif
  void set_publish_topics(int index, const char* value);
  void set_publish_topics(int index, const char* value, size_t size);
  ::std::string* add_publish_topics();
  void add_publish_topics(const ::std::string& value);
  #if LANG_CXX11
  void add_publish_topics(::std::string&& value);
  #endif
  void add_publish_topics(const char* value);
  void add_publish_topics(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& publish_topics() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_publish_topics();

  // repeated .metamoto.types.ServiceDescription services = 4;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 4;
  ::metamoto::types::ServiceDescription* mutable_services(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription >*
      mutable_services();
  const ::metamoto::types::ServiceDescription& services(int index) const;
  ::metamoto::types::ServiceDescription* add_services();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription >&
      services() const;

  // repeated .metamoto.types.Waypoint ego_vehicle_path = 5;
  int ego_vehicle_path_size() const;
  void clear_ego_vehicle_path();
  static const int kEgoVehiclePathFieldNumber = 5;
  ::metamoto::types::Waypoint* mutable_ego_vehicle_path(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Waypoint >*
      mutable_ego_vehicle_path();
  const ::metamoto::types::Waypoint& ego_vehicle_path(int index) const;
  ::metamoto::types::Waypoint* add_ego_vehicle_path();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Waypoint >&
      ego_vehicle_path() const;

  // string results_directory = 3;
  void clear_results_directory();
  static const int kResultsDirectoryFieldNumber = 3;
  const ::std::string& results_directory() const;
  void set_results_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_results_directory(::std::string&& value);
  #endif
  void set_results_directory(const char* value);
  void set_results_directory(const char* value, size_t size);
  ::std::string* mutable_results_directory();
  ::std::string* release_results_directory();
  void set_allocated_results_directory(::std::string* results_directory);

  // string ego_vehicle_id = 7;
  void clear_ego_vehicle_id();
  static const int kEgoVehicleIdFieldNumber = 7;
  const ::std::string& ego_vehicle_id() const;
  void set_ego_vehicle_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ego_vehicle_id(::std::string&& value);
  #endif
  void set_ego_vehicle_id(const char* value);
  void set_ego_vehicle_id(const char* value, size_t size);
  ::std::string* mutable_ego_vehicle_id();
  ::std::string* release_ego_vehicle_id();
  void set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id);

  // .google.protobuf.Struct parameters = 1;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 1;
  private:
  const ::google::protobuf::Struct& _internal_parameters() const;
  public:
  const ::google::protobuf::Struct& parameters() const;
  ::google::protobuf::Struct* release_parameters();
  ::google::protobuf::Struct* mutable_parameters();
  void set_allocated_parameters(::google::protobuf::Struct* parameters);

  // .metamoto.types.VehicleInfo ego_vehicle_info = 6;
  bool has_ego_vehicle_info() const;
  void clear_ego_vehicle_info();
  static const int kEgoVehicleInfoFieldNumber = 6;
  private:
  const ::metamoto::types::VehicleInfo& _internal_ego_vehicle_info() const;
  public:
  const ::metamoto::types::VehicleInfo& ego_vehicle_info() const;
  ::metamoto::types::VehicleInfo* release_ego_vehicle_info();
  ::metamoto::types::VehicleInfo* mutable_ego_vehicle_info();
  void set_allocated_ego_vehicle_info(::metamoto::types::VehicleInfo* ego_vehicle_info);

  // .metamoto.types.TestCase test_case = 8;
  bool has_test_case() const;
  void clear_test_case();
  static const int kTestCaseFieldNumber = 8;
  private:
  const ::metamoto::types::TestCase& _internal_test_case() const;
  public:
  const ::metamoto::types::TestCase& test_case() const;
  ::metamoto::types::TestCase* release_test_case();
  ::metamoto::types::TestCase* mutable_test_case();
  void set_allocated_test_case(::metamoto::types::TestCase* test_case);

  // @@protoc_insertion_point(class_scope:metamoto.services.ControllerInitializeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> publish_topics_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription > services_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Waypoint > ego_vehicle_path_;
  ::google::protobuf::internal::ArenaStringPtr results_directory_;
  ::google::protobuf::internal::ArenaStringPtr ego_vehicle_id_;
  ::google::protobuf::Struct* parameters_;
  ::metamoto::types::VehicleInfo* ego_vehicle_info_;
  ::metamoto::types::TestCase* test_case_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControllerInitializeReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ControllerInitializeReply) */ {
 public:
  ControllerInitializeReply();
  virtual ~ControllerInitializeReply();

  ControllerInitializeReply(const ControllerInitializeReply& from);

  inline ControllerInitializeReply& operator=(const ControllerInitializeReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControllerInitializeReply(ControllerInitializeReply&& from) noexcept
    : ControllerInitializeReply() {
    *this = ::std::move(from);
  }

  inline ControllerInitializeReply& operator=(ControllerInitializeReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerInitializeReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerInitializeReply* internal_default_instance() {
    return reinterpret_cast<const ControllerInitializeReply*>(
               &_ControllerInitializeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ControllerInitializeReply* other);
  friend void swap(ControllerInitializeReply& a, ControllerInitializeReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControllerInitializeReply* New() const final {
    return CreateMaybeMessage<ControllerInitializeReply>(NULL);
  }

  ControllerInitializeReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControllerInitializeReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControllerInitializeReply& from);
  void MergeFrom(const ControllerInitializeReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerInitializeReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // double update_rate = 3;
  void clear_update_rate();
  static const int kUpdateRateFieldNumber = 3;
  double update_rate() const;
  void set_update_rate(double value);

  // uint32 update_timeout = 4;
  void clear_update_timeout();
  static const int kUpdateTimeoutFieldNumber = 4;
  ::google::protobuf::uint32 update_timeout() const;
  void set_update_timeout(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:metamoto.services.ControllerInitializeReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  double update_rate_;
  ::google::protobuf::uint32 update_timeout_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControllerUpdateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ControllerUpdateRequest) */ {
 public:
  ControllerUpdateRequest();
  virtual ~ControllerUpdateRequest();

  ControllerUpdateRequest(const ControllerUpdateRequest& from);

  inline ControllerUpdateRequest& operator=(const ControllerUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControllerUpdateRequest(ControllerUpdateRequest&& from) noexcept
    : ControllerUpdateRequest() {
    *this = ::std::move(from);
  }

  inline ControllerUpdateRequest& operator=(ControllerUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const ControllerUpdateRequest*>(
               &_ControllerUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ControllerUpdateRequest* other);
  friend void swap(ControllerUpdateRequest& a, ControllerUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControllerUpdateRequest* New() const final {
    return CreateMaybeMessage<ControllerUpdateRequest>(NULL);
  }

  ControllerUpdateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControllerUpdateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControllerUpdateRequest& from);
  void MergeFrom(const ControllerUpdateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.types.Event event = 4;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 4;
  private:
  const ::metamoto::types::Event& _internal_event() const;
  public:
  const ::metamoto::types::Event& event() const;
  ::metamoto::types::Event* release_event();
  ::metamoto::types::Event* mutable_event();
  void set_allocated_event(::metamoto::types::Event* event);

  // double time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // double last_step_time = 2;
  void clear_last_step_time();
  static const int kLastStepTimeFieldNumber = 2;
  double last_step_time() const;
  void set_last_step_time(double value);

  // double next_step_time = 3;
  void clear_next_step_time();
  static const int kNextStepTimeFieldNumber = 3;
  double next_step_time() const;
  void set_next_step_time(double value);

  // @@protoc_insertion_point(class_scope:metamoto.services.ControllerUpdateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::types::Event* event_;
  double time_;
  double last_step_time_;
  double next_step_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControllerUpdateReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ControllerUpdateReply) */ {
 public:
  ControllerUpdateReply();
  virtual ~ControllerUpdateReply();

  ControllerUpdateReply(const ControllerUpdateReply& from);

  inline ControllerUpdateReply& operator=(const ControllerUpdateReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControllerUpdateReply(ControllerUpdateReply&& from) noexcept
    : ControllerUpdateReply() {
    *this = ::std::move(from);
  }

  inline ControllerUpdateReply& operator=(ControllerUpdateReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerUpdateReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerUpdateReply* internal_default_instance() {
    return reinterpret_cast<const ControllerUpdateReply*>(
               &_ControllerUpdateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ControllerUpdateReply* other);
  friend void swap(ControllerUpdateReply& a, ControllerUpdateReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControllerUpdateReply* New() const final {
    return CreateMaybeMessage<ControllerUpdateReply>(NULL);
  }

  ControllerUpdateReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControllerUpdateReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControllerUpdateReply& from);
  void MergeFrom(const ControllerUpdateReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerUpdateReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double next_update_time = 1;
  void clear_next_update_time();
  static const int kNextUpdateTimeFieldNumber = 1;
  double next_update_time() const;
  void set_next_update_time(double value);

  // @@protoc_insertion_point(class_scope:metamoto.services.ControllerUpdateReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double next_update_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControllerCloseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ControllerCloseRequest) */ {
 public:
  ControllerCloseRequest();
  virtual ~ControllerCloseRequest();

  ControllerCloseRequest(const ControllerCloseRequest& from);

  inline ControllerCloseRequest& operator=(const ControllerCloseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControllerCloseRequest(ControllerCloseRequest&& from) noexcept
    : ControllerCloseRequest() {
    *this = ::std::move(from);
  }

  inline ControllerCloseRequest& operator=(ControllerCloseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerCloseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerCloseRequest* internal_default_instance() {
    return reinterpret_cast<const ControllerCloseRequest*>(
               &_ControllerCloseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ControllerCloseRequest* other);
  friend void swap(ControllerCloseRequest& a, ControllerCloseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControllerCloseRequest* New() const final {
    return CreateMaybeMessage<ControllerCloseRequest>(NULL);
  }

  ControllerCloseRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControllerCloseRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControllerCloseRequest& from);
  void MergeFrom(const ControllerCloseRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerCloseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:metamoto.services.ControllerCloseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControllerCloseReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ControllerCloseReply) */ {
 public:
  ControllerCloseReply();
  virtual ~ControllerCloseReply();

  ControllerCloseReply(const ControllerCloseReply& from);

  inline ControllerCloseReply& operator=(const ControllerCloseReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControllerCloseReply(ControllerCloseReply&& from) noexcept
    : ControllerCloseReply() {
    *this = ::std::move(from);
  }

  inline ControllerCloseReply& operator=(ControllerCloseReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerCloseReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerCloseReply* internal_default_instance() {
    return reinterpret_cast<const ControllerCloseReply*>(
               &_ControllerCloseReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ControllerCloseReply* other);
  friend void swap(ControllerCloseReply& a, ControllerCloseReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControllerCloseReply* New() const final {
    return CreateMaybeMessage<ControllerCloseReply>(NULL);
  }

  ControllerCloseReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControllerCloseReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControllerCloseReply& from);
  void MergeFrom(const ControllerCloseReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerCloseReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.ResultMetadata results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::metamoto::types::ResultMetadata* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata >*
      mutable_results();
  const ::metamoto::types::ResultMetadata& results(int index) const;
  ::metamoto::types::ResultMetadata* add_results();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata >&
      results() const;

  // @@protoc_insertion_point(class_scope:metamoto.services.ControllerCloseReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata > results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fcontroller_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControllerSetupRequest

// .google.protobuf.Struct parameters = 1;
inline bool ControllerSetupRequest::has_parameters() const {
  return this != internal_default_instance() && parameters_ != NULL;
}
inline const ::google::protobuf::Struct& ControllerSetupRequest::_internal_parameters() const {
  return *parameters_;
}
inline const ::google::protobuf::Struct& ControllerSetupRequest::parameters() const {
  const ::google::protobuf::Struct* p = parameters_;
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerSetupRequest.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* ControllerSetupRequest::release_parameters() {
  // @@protoc_insertion_point(field_release:metamoto.services.ControllerSetupRequest.parameters)
  
  ::google::protobuf::Struct* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* ControllerSetupRequest::mutable_parameters() {
  
  if (parameters_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.ControllerSetupRequest.parameters)
  return parameters_;
}
inline void ControllerSetupRequest::set_allocated_parameters(::google::protobuf::Struct* parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parameters_);
  }
  if (parameters) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(parameters)->GetArena();
    if (message_arena != submessage_arena) {
      parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ControllerSetupRequest.parameters)
}

// repeated .metamoto.types.ServiceDescription services = 2;
inline int ControllerSetupRequest::services_size() const {
  return services_.size();
}
inline ::metamoto::types::ServiceDescription* ControllerSetupRequest::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.ControllerSetupRequest.services)
  return services_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription >*
ControllerSetupRequest::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.ControllerSetupRequest.services)
  return &services_;
}
inline const ::metamoto::types::ServiceDescription& ControllerSetupRequest::services(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerSetupRequest.services)
  return services_.Get(index);
}
inline ::metamoto::types::ServiceDescription* ControllerSetupRequest::add_services() {
  // @@protoc_insertion_point(field_add:metamoto.services.ControllerSetupRequest.services)
  return services_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription >&
ControllerSetupRequest::services() const {
  // @@protoc_insertion_point(field_list:metamoto.services.ControllerSetupRequest.services)
  return services_;
}

// .metamoto.types.TestCase test_case = 3;
inline bool ControllerSetupRequest::has_test_case() const {
  return this != internal_default_instance() && test_case_ != NULL;
}
inline const ::metamoto::types::TestCase& ControllerSetupRequest::_internal_test_case() const {
  return *test_case_;
}
inline const ::metamoto::types::TestCase& ControllerSetupRequest::test_case() const {
  const ::metamoto::types::TestCase* p = test_case_;
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerSetupRequest.test_case)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::TestCase*>(
      &::metamoto::types::_TestCase_default_instance_);
}
inline ::metamoto::types::TestCase* ControllerSetupRequest::release_test_case() {
  // @@protoc_insertion_point(field_release:metamoto.services.ControllerSetupRequest.test_case)
  
  ::metamoto::types::TestCase* temp = test_case_;
  test_case_ = NULL;
  return temp;
}
inline ::metamoto::types::TestCase* ControllerSetupRequest::mutable_test_case() {
  
  if (test_case_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::TestCase>(GetArenaNoVirtual());
    test_case_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.ControllerSetupRequest.test_case)
  return test_case_;
}
inline void ControllerSetupRequest::set_allocated_test_case(::metamoto::types::TestCase* test_case) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(test_case_);
  }
  if (test_case) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      test_case = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, test_case, submessage_arena);
    }
    
  } else {
    
  }
  test_case_ = test_case;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ControllerSetupRequest.test_case)
}

// -------------------------------------------------------------------

// ControllerSetupReply

// -------------------------------------------------------------------

// ControllerInitializeRequest

// .google.protobuf.Struct parameters = 1;
inline bool ControllerInitializeRequest::has_parameters() const {
  return this != internal_default_instance() && parameters_ != NULL;
}
inline const ::google::protobuf::Struct& ControllerInitializeRequest::_internal_parameters() const {
  return *parameters_;
}
inline const ::google::protobuf::Struct& ControllerInitializeRequest::parameters() const {
  const ::google::protobuf::Struct* p = parameters_;
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerInitializeRequest.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* ControllerInitializeRequest::release_parameters() {
  // @@protoc_insertion_point(field_release:metamoto.services.ControllerInitializeRequest.parameters)
  
  ::google::protobuf::Struct* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* ControllerInitializeRequest::mutable_parameters() {
  
  if (parameters_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.ControllerInitializeRequest.parameters)
  return parameters_;
}
inline void ControllerInitializeRequest::set_allocated_parameters(::google::protobuf::Struct* parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parameters_);
  }
  if (parameters) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(parameters)->GetArena();
    if (message_arena != submessage_arena) {
      parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ControllerInitializeRequest.parameters)
}

// repeated string publish_topics = 2;
inline int ControllerInitializeRequest::publish_topics_size() const {
  return publish_topics_.size();
}
inline void ControllerInitializeRequest::clear_publish_topics() {
  publish_topics_.Clear();
}
inline const ::std::string& ControllerInitializeRequest::publish_topics(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerInitializeRequest.publish_topics)
  return publish_topics_.Get(index);
}
inline ::std::string* ControllerInitializeRequest::mutable_publish_topics(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.ControllerInitializeRequest.publish_topics)
  return publish_topics_.Mutable(index);
}
inline void ControllerInitializeRequest::set_publish_topics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:metamoto.services.ControllerInitializeRequest.publish_topics)
  publish_topics_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ControllerInitializeRequest::set_publish_topics(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:metamoto.services.ControllerInitializeRequest.publish_topics)
  publish_topics_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ControllerInitializeRequest::set_publish_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  publish_topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:metamoto.services.ControllerInitializeRequest.publish_topics)
}
inline void ControllerInitializeRequest::set_publish_topics(int index, const char* value, size_t size) {
  publish_topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.ControllerInitializeRequest.publish_topics)
}
inline ::std::string* ControllerInitializeRequest::add_publish_topics() {
  // @@protoc_insertion_point(field_add_mutable:metamoto.services.ControllerInitializeRequest.publish_topics)
  return publish_topics_.Add();
}
inline void ControllerInitializeRequest::add_publish_topics(const ::std::string& value) {
  publish_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:metamoto.services.ControllerInitializeRequest.publish_topics)
}
#if LANG_CXX11
inline void ControllerInitializeRequest::add_publish_topics(::std::string&& value) {
  publish_topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:metamoto.services.ControllerInitializeRequest.publish_topics)
}
#endif
inline void ControllerInitializeRequest::add_publish_topics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  publish_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:metamoto.services.ControllerInitializeRequest.publish_topics)
}
inline void ControllerInitializeRequest::add_publish_topics(const char* value, size_t size) {
  publish_topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:metamoto.services.ControllerInitializeRequest.publish_topics)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ControllerInitializeRequest::publish_topics() const {
  // @@protoc_insertion_point(field_list:metamoto.services.ControllerInitializeRequest.publish_topics)
  return publish_topics_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ControllerInitializeRequest::mutable_publish_topics() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.ControllerInitializeRequest.publish_topics)
  return &publish_topics_;
}

// string results_directory = 3;
inline void ControllerInitializeRequest::clear_results_directory() {
  results_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControllerInitializeRequest::results_directory() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerInitializeRequest.results_directory)
  return results_directory_.GetNoArena();
}
inline void ControllerInitializeRequest::set_results_directory(const ::std::string& value) {
  
  results_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.ControllerInitializeRequest.results_directory)
}
#if LANG_CXX11
inline void ControllerInitializeRequest::set_results_directory(::std::string&& value) {
  
  results_directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.ControllerInitializeRequest.results_directory)
}
#endif
inline void ControllerInitializeRequest::set_results_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  results_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.ControllerInitializeRequest.results_directory)
}
inline void ControllerInitializeRequest::set_results_directory(const char* value, size_t size) {
  
  results_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.ControllerInitializeRequest.results_directory)
}
inline ::std::string* ControllerInitializeRequest::mutable_results_directory() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.ControllerInitializeRequest.results_directory)
  return results_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControllerInitializeRequest::release_results_directory() {
  // @@protoc_insertion_point(field_release:metamoto.services.ControllerInitializeRequest.results_directory)
  
  return results_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControllerInitializeRequest::set_allocated_results_directory(::std::string* results_directory) {
  if (results_directory != NULL) {
    
  } else {
    
  }
  results_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), results_directory);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ControllerInitializeRequest.results_directory)
}

// repeated .metamoto.types.ServiceDescription services = 4;
inline int ControllerInitializeRequest::services_size() const {
  return services_.size();
}
inline ::metamoto::types::ServiceDescription* ControllerInitializeRequest::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.ControllerInitializeRequest.services)
  return services_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription >*
ControllerInitializeRequest::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.ControllerInitializeRequest.services)
  return &services_;
}
inline const ::metamoto::types::ServiceDescription& ControllerInitializeRequest::services(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerInitializeRequest.services)
  return services_.Get(index);
}
inline ::metamoto::types::ServiceDescription* ControllerInitializeRequest::add_services() {
  // @@protoc_insertion_point(field_add:metamoto.services.ControllerInitializeRequest.services)
  return services_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription >&
ControllerInitializeRequest::services() const {
  // @@protoc_insertion_point(field_list:metamoto.services.ControllerInitializeRequest.services)
  return services_;
}

// repeated .metamoto.types.Waypoint ego_vehicle_path = 5;
inline int ControllerInitializeRequest::ego_vehicle_path_size() const {
  return ego_vehicle_path_.size();
}
inline ::metamoto::types::Waypoint* ControllerInitializeRequest::mutable_ego_vehicle_path(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.ControllerInitializeRequest.ego_vehicle_path)
  return ego_vehicle_path_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::Waypoint >*
ControllerInitializeRequest::mutable_ego_vehicle_path() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.ControllerInitializeRequest.ego_vehicle_path)
  return &ego_vehicle_path_;
}
inline const ::metamoto::types::Waypoint& ControllerInitializeRequest::ego_vehicle_path(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerInitializeRequest.ego_vehicle_path)
  return ego_vehicle_path_.Get(index);
}
inline ::metamoto::types::Waypoint* ControllerInitializeRequest::add_ego_vehicle_path() {
  // @@protoc_insertion_point(field_add:metamoto.services.ControllerInitializeRequest.ego_vehicle_path)
  return ego_vehicle_path_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Waypoint >&
ControllerInitializeRequest::ego_vehicle_path() const {
  // @@protoc_insertion_point(field_list:metamoto.services.ControllerInitializeRequest.ego_vehicle_path)
  return ego_vehicle_path_;
}

// .metamoto.types.VehicleInfo ego_vehicle_info = 6;
inline bool ControllerInitializeRequest::has_ego_vehicle_info() const {
  return this != internal_default_instance() && ego_vehicle_info_ != NULL;
}
inline const ::metamoto::types::VehicleInfo& ControllerInitializeRequest::_internal_ego_vehicle_info() const {
  return *ego_vehicle_info_;
}
inline const ::metamoto::types::VehicleInfo& ControllerInitializeRequest::ego_vehicle_info() const {
  const ::metamoto::types::VehicleInfo* p = ego_vehicle_info_;
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerInitializeRequest.ego_vehicle_info)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::VehicleInfo*>(
      &::metamoto::types::_VehicleInfo_default_instance_);
}
inline ::metamoto::types::VehicleInfo* ControllerInitializeRequest::release_ego_vehicle_info() {
  // @@protoc_insertion_point(field_release:metamoto.services.ControllerInitializeRequest.ego_vehicle_info)
  
  ::metamoto::types::VehicleInfo* temp = ego_vehicle_info_;
  ego_vehicle_info_ = NULL;
  return temp;
}
inline ::metamoto::types::VehicleInfo* ControllerInitializeRequest::mutable_ego_vehicle_info() {
  
  if (ego_vehicle_info_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::VehicleInfo>(GetArenaNoVirtual());
    ego_vehicle_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.ControllerInitializeRequest.ego_vehicle_info)
  return ego_vehicle_info_;
}
inline void ControllerInitializeRequest::set_allocated_ego_vehicle_info(::metamoto::types::VehicleInfo* ego_vehicle_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ego_vehicle_info_);
  }
  if (ego_vehicle_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ego_vehicle_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ego_vehicle_info, submessage_arena);
    }
    
  } else {
    
  }
  ego_vehicle_info_ = ego_vehicle_info;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ControllerInitializeRequest.ego_vehicle_info)
}

// string ego_vehicle_id = 7;
inline void ControllerInitializeRequest::clear_ego_vehicle_id() {
  ego_vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControllerInitializeRequest::ego_vehicle_id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerInitializeRequest.ego_vehicle_id)
  return ego_vehicle_id_.GetNoArena();
}
inline void ControllerInitializeRequest::set_ego_vehicle_id(const ::std::string& value) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.ControllerInitializeRequest.ego_vehicle_id)
}
#if LANG_CXX11
inline void ControllerInitializeRequest::set_ego_vehicle_id(::std::string&& value) {
  
  ego_vehicle_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.ControllerInitializeRequest.ego_vehicle_id)
}
#endif
inline void ControllerInitializeRequest::set_ego_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.ControllerInitializeRequest.ego_vehicle_id)
}
inline void ControllerInitializeRequest::set_ego_vehicle_id(const char* value, size_t size) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.ControllerInitializeRequest.ego_vehicle_id)
}
inline ::std::string* ControllerInitializeRequest::mutable_ego_vehicle_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.ControllerInitializeRequest.ego_vehicle_id)
  return ego_vehicle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControllerInitializeRequest::release_ego_vehicle_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.ControllerInitializeRequest.ego_vehicle_id)
  
  return ego_vehicle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControllerInitializeRequest::set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id) {
  if (ego_vehicle_id != NULL) {
    
  } else {
    
  }
  ego_vehicle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ego_vehicle_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ControllerInitializeRequest.ego_vehicle_id)
}

// .metamoto.types.TestCase test_case = 8;
inline bool ControllerInitializeRequest::has_test_case() const {
  return this != internal_default_instance() && test_case_ != NULL;
}
inline const ::metamoto::types::TestCase& ControllerInitializeRequest::_internal_test_case() const {
  return *test_case_;
}
inline const ::metamoto::types::TestCase& ControllerInitializeRequest::test_case() const {
  const ::metamoto::types::TestCase* p = test_case_;
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerInitializeRequest.test_case)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::TestCase*>(
      &::metamoto::types::_TestCase_default_instance_);
}
inline ::metamoto::types::TestCase* ControllerInitializeRequest::release_test_case() {
  // @@protoc_insertion_point(field_release:metamoto.services.ControllerInitializeRequest.test_case)
  
  ::metamoto::types::TestCase* temp = test_case_;
  test_case_ = NULL;
  return temp;
}
inline ::metamoto::types::TestCase* ControllerInitializeRequest::mutable_test_case() {
  
  if (test_case_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::TestCase>(GetArenaNoVirtual());
    test_case_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.ControllerInitializeRequest.test_case)
  return test_case_;
}
inline void ControllerInitializeRequest::set_allocated_test_case(::metamoto::types::TestCase* test_case) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(test_case_);
  }
  if (test_case) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      test_case = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, test_case, submessage_arena);
    }
    
  } else {
    
  }
  test_case_ = test_case;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ControllerInitializeRequest.test_case)
}

// -------------------------------------------------------------------

// ControllerInitializeReply

// string name = 1;
inline void ControllerInitializeReply::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControllerInitializeReply::name() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerInitializeReply.name)
  return name_.GetNoArena();
}
inline void ControllerInitializeReply::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.ControllerInitializeReply.name)
}
#if LANG_CXX11
inline void ControllerInitializeReply::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.ControllerInitializeReply.name)
}
#endif
inline void ControllerInitializeReply::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.ControllerInitializeReply.name)
}
inline void ControllerInitializeReply::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.ControllerInitializeReply.name)
}
inline ::std::string* ControllerInitializeReply::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.ControllerInitializeReply.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControllerInitializeReply::release_name() {
  // @@protoc_insertion_point(field_release:metamoto.services.ControllerInitializeReply.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControllerInitializeReply::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ControllerInitializeReply.name)
}

// string version = 2;
inline void ControllerInitializeReply::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControllerInitializeReply::version() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerInitializeReply.version)
  return version_.GetNoArena();
}
inline void ControllerInitializeReply::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.ControllerInitializeReply.version)
}
#if LANG_CXX11
inline void ControllerInitializeReply::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.ControllerInitializeReply.version)
}
#endif
inline void ControllerInitializeReply::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.ControllerInitializeReply.version)
}
inline void ControllerInitializeReply::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.ControllerInitializeReply.version)
}
inline ::std::string* ControllerInitializeReply::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.ControllerInitializeReply.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControllerInitializeReply::release_version() {
  // @@protoc_insertion_point(field_release:metamoto.services.ControllerInitializeReply.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControllerInitializeReply::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ControllerInitializeReply.version)
}

// double update_rate = 3;
inline void ControllerInitializeReply::clear_update_rate() {
  update_rate_ = 0;
}
inline double ControllerInitializeReply::update_rate() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerInitializeReply.update_rate)
  return update_rate_;
}
inline void ControllerInitializeReply::set_update_rate(double value) {
  
  update_rate_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.ControllerInitializeReply.update_rate)
}

// uint32 update_timeout = 4;
inline void ControllerInitializeReply::clear_update_timeout() {
  update_timeout_ = 0u;
}
inline ::google::protobuf::uint32 ControllerInitializeReply::update_timeout() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerInitializeReply.update_timeout)
  return update_timeout_;
}
inline void ControllerInitializeReply::set_update_timeout(::google::protobuf::uint32 value) {
  
  update_timeout_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.ControllerInitializeReply.update_timeout)
}

// -------------------------------------------------------------------

// ControllerUpdateRequest

// double time = 1;
inline void ControllerUpdateRequest::clear_time() {
  time_ = 0;
}
inline double ControllerUpdateRequest::time() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerUpdateRequest.time)
  return time_;
}
inline void ControllerUpdateRequest::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.ControllerUpdateRequest.time)
}

// double last_step_time = 2;
inline void ControllerUpdateRequest::clear_last_step_time() {
  last_step_time_ = 0;
}
inline double ControllerUpdateRequest::last_step_time() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerUpdateRequest.last_step_time)
  return last_step_time_;
}
inline void ControllerUpdateRequest::set_last_step_time(double value) {
  
  last_step_time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.ControllerUpdateRequest.last_step_time)
}

// double next_step_time = 3;
inline void ControllerUpdateRequest::clear_next_step_time() {
  next_step_time_ = 0;
}
inline double ControllerUpdateRequest::next_step_time() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerUpdateRequest.next_step_time)
  return next_step_time_;
}
inline void ControllerUpdateRequest::set_next_step_time(double value) {
  
  next_step_time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.ControllerUpdateRequest.next_step_time)
}

// .metamoto.types.Event event = 4;
inline bool ControllerUpdateRequest::has_event() const {
  return this != internal_default_instance() && event_ != NULL;
}
inline const ::metamoto::types::Event& ControllerUpdateRequest::_internal_event() const {
  return *event_;
}
inline const ::metamoto::types::Event& ControllerUpdateRequest::event() const {
  const ::metamoto::types::Event* p = event_;
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerUpdateRequest.event)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Event*>(
      &::metamoto::types::_Event_default_instance_);
}
inline ::metamoto::types::Event* ControllerUpdateRequest::release_event() {
  // @@protoc_insertion_point(field_release:metamoto.services.ControllerUpdateRequest.event)
  
  ::metamoto::types::Event* temp = event_;
  event_ = NULL;
  return temp;
}
inline ::metamoto::types::Event* ControllerUpdateRequest::mutable_event() {
  
  if (event_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Event>(GetArenaNoVirtual());
    event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.ControllerUpdateRequest.event)
  return event_;
}
inline void ControllerUpdateRequest::set_allocated_event(::metamoto::types::Event* event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(event_);
  }
  if (event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ControllerUpdateRequest.event)
}

// -------------------------------------------------------------------

// ControllerUpdateReply

// double next_update_time = 1;
inline void ControllerUpdateReply::clear_next_update_time() {
  next_update_time_ = 0;
}
inline double ControllerUpdateReply::next_update_time() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerUpdateReply.next_update_time)
  return next_update_time_;
}
inline void ControllerUpdateReply::set_next_update_time(double value) {
  
  next_update_time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.ControllerUpdateReply.next_update_time)
}

// -------------------------------------------------------------------

// ControllerCloseRequest

// -------------------------------------------------------------------

// ControllerCloseReply

// repeated .metamoto.types.ResultMetadata results = 1;
inline int ControllerCloseReply::results_size() const {
  return results_.size();
}
inline ::metamoto::types::ResultMetadata* ControllerCloseReply::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.ControllerCloseReply.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata >*
ControllerCloseReply::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.ControllerCloseReply.results)
  return &results_;
}
inline const ::metamoto::types::ResultMetadata& ControllerCloseReply::results(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.ControllerCloseReply.results)
  return results_.Get(index);
}
inline ::metamoto::types::ResultMetadata* ControllerCloseReply::add_results() {
  // @@protoc_insertion_point(field_add:metamoto.services.ControllerCloseReply.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata >&
ControllerCloseReply::results() const {
  // @@protoc_insertion_point(field_list:metamoto.services.ControllerCloseReply.results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace services
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2fservices_2fcontroller_2eproto
