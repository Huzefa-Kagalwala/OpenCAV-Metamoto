// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/services/reporting.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2fservices_2freporting_2eproto
#define PROTOBUF_INCLUDED_metamoto_2fservices_2freporting_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/messages/log_message.pb.h"
#include "metamoto/messages/visualization.pb.h"
#include "metamoto/types/enumerations.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2freporting_2eproto 

namespace protobuf_metamoto_2fservices_2freporting_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2fservices_2freporting_2eproto
namespace metamoto {
namespace services {
class ReportingAddTimeSeriesValueReply;
class ReportingAddTimeSeriesValueReplyDefaultTypeInternal;
extern ReportingAddTimeSeriesValueReplyDefaultTypeInternal _ReportingAddTimeSeriesValueReply_default_instance_;
class ReportingAddTimeSeriesValueRequest;
class ReportingAddTimeSeriesValueRequestDefaultTypeInternal;
extern ReportingAddTimeSeriesValueRequestDefaultTypeInternal _ReportingAddTimeSeriesValueRequest_default_instance_;
class ReportingLogReply;
class ReportingLogReplyDefaultTypeInternal;
extern ReportingLogReplyDefaultTypeInternal _ReportingLogReply_default_instance_;
class ReportingLogRequest;
class ReportingLogRequestDefaultTypeInternal;
extern ReportingLogRequestDefaultTypeInternal _ReportingLogRequest_default_instance_;
class ReportingReportEventReply;
class ReportingReportEventReplyDefaultTypeInternal;
extern ReportingReportEventReplyDefaultTypeInternal _ReportingReportEventReply_default_instance_;
class ReportingReportEventRequest;
class ReportingReportEventRequestDefaultTypeInternal;
extern ReportingReportEventRequestDefaultTypeInternal _ReportingReportEventRequest_default_instance_;
class ReportingVisualizeReply;
class ReportingVisualizeReplyDefaultTypeInternal;
extern ReportingVisualizeReplyDefaultTypeInternal _ReportingVisualizeReply_default_instance_;
class ReportingVisualizeRequest;
class ReportingVisualizeRequestDefaultTypeInternal;
extern ReportingVisualizeRequestDefaultTypeInternal _ReportingVisualizeRequest_default_instance_;
}  // namespace services
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::services::ReportingAddTimeSeriesValueReply* Arena::CreateMaybeMessage<::metamoto::services::ReportingAddTimeSeriesValueReply>(Arena*);
template<> ::metamoto::services::ReportingAddTimeSeriesValueRequest* Arena::CreateMaybeMessage<::metamoto::services::ReportingAddTimeSeriesValueRequest>(Arena*);
template<> ::metamoto::services::ReportingLogReply* Arena::CreateMaybeMessage<::metamoto::services::ReportingLogReply>(Arena*);
template<> ::metamoto::services::ReportingLogRequest* Arena::CreateMaybeMessage<::metamoto::services::ReportingLogRequest>(Arena*);
template<> ::metamoto::services::ReportingReportEventReply* Arena::CreateMaybeMessage<::metamoto::services::ReportingReportEventReply>(Arena*);
template<> ::metamoto::services::ReportingReportEventRequest* Arena::CreateMaybeMessage<::metamoto::services::ReportingReportEventRequest>(Arena*);
template<> ::metamoto::services::ReportingVisualizeReply* Arena::CreateMaybeMessage<::metamoto::services::ReportingVisualizeReply>(Arena*);
template<> ::metamoto::services::ReportingVisualizeRequest* Arena::CreateMaybeMessage<::metamoto::services::ReportingVisualizeRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace services {

// ===================================================================

class ReportingAddTimeSeriesValueRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ReportingAddTimeSeriesValueRequest) */ {
 public:
  ReportingAddTimeSeriesValueRequest();
  virtual ~ReportingAddTimeSeriesValueRequest();

  ReportingAddTimeSeriesValueRequest(const ReportingAddTimeSeriesValueRequest& from);

  inline ReportingAddTimeSeriesValueRequest& operator=(const ReportingAddTimeSeriesValueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportingAddTimeSeriesValueRequest(ReportingAddTimeSeriesValueRequest&& from) noexcept
    : ReportingAddTimeSeriesValueRequest() {
    *this = ::std::move(from);
  }

  inline ReportingAddTimeSeriesValueRequest& operator=(ReportingAddTimeSeriesValueRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportingAddTimeSeriesValueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportingAddTimeSeriesValueRequest* internal_default_instance() {
    return reinterpret_cast<const ReportingAddTimeSeriesValueRequest*>(
               &_ReportingAddTimeSeriesValueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ReportingAddTimeSeriesValueRequest* other);
  friend void swap(ReportingAddTimeSeriesValueRequest& a, ReportingAddTimeSeriesValueRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportingAddTimeSeriesValueRequest* New() const final {
    return CreateMaybeMessage<ReportingAddTimeSeriesValueRequest>(NULL);
  }

  ReportingAddTimeSeriesValueRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportingAddTimeSeriesValueRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportingAddTimeSeriesValueRequest& from);
  void MergeFrom(const ReportingAddTimeSeriesValueRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportingAddTimeSeriesValueRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string units = 2;
  void clear_units();
  static const int kUnitsFieldNumber = 2;
  const ::std::string& units() const;
  void set_units(const ::std::string& value);
  #if LANG_CXX11
  void set_units(::std::string&& value);
  #endif
  void set_units(const char* value);
  void set_units(const char* value, size_t size);
  ::std::string* mutable_units();
  ::std::string* release_units();
  void set_allocated_units(::std::string* units);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string ego_vehicle_id = 6;
  void clear_ego_vehicle_id();
  static const int kEgoVehicleIdFieldNumber = 6;
  const ::std::string& ego_vehicle_id() const;
  void set_ego_vehicle_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ego_vehicle_id(::std::string&& value);
  #endif
  void set_ego_vehicle_id(const char* value);
  void set_ego_vehicle_id(const char* value, size_t size);
  ::std::string* mutable_ego_vehicle_id();
  ::std::string* release_ego_vehicle_id();
  void set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id);

  // double time = 4;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  double time() const;
  void set_time(double value);

  // float value = 5;
  void clear_value();
  static const int kValueFieldNumber = 5;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:metamoto.services.ReportingAddTimeSeriesValueRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr units_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr ego_vehicle_id_;
  double time_;
  float value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2freporting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportingAddTimeSeriesValueReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ReportingAddTimeSeriesValueReply) */ {
 public:
  ReportingAddTimeSeriesValueReply();
  virtual ~ReportingAddTimeSeriesValueReply();

  ReportingAddTimeSeriesValueReply(const ReportingAddTimeSeriesValueReply& from);

  inline ReportingAddTimeSeriesValueReply& operator=(const ReportingAddTimeSeriesValueReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportingAddTimeSeriesValueReply(ReportingAddTimeSeriesValueReply&& from) noexcept
    : ReportingAddTimeSeriesValueReply() {
    *this = ::std::move(from);
  }

  inline ReportingAddTimeSeriesValueReply& operator=(ReportingAddTimeSeriesValueReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportingAddTimeSeriesValueReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportingAddTimeSeriesValueReply* internal_default_instance() {
    return reinterpret_cast<const ReportingAddTimeSeriesValueReply*>(
               &_ReportingAddTimeSeriesValueReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ReportingAddTimeSeriesValueReply* other);
  friend void swap(ReportingAddTimeSeriesValueReply& a, ReportingAddTimeSeriesValueReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportingAddTimeSeriesValueReply* New() const final {
    return CreateMaybeMessage<ReportingAddTimeSeriesValueReply>(NULL);
  }

  ReportingAddTimeSeriesValueReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportingAddTimeSeriesValueReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportingAddTimeSeriesValueReply& from);
  void MergeFrom(const ReportingAddTimeSeriesValueReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportingAddTimeSeriesValueReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:metamoto.services.ReportingAddTimeSeriesValueReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2freporting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportingLogRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ReportingLogRequest) */ {
 public:
  ReportingLogRequest();
  virtual ~ReportingLogRequest();

  ReportingLogRequest(const ReportingLogRequest& from);

  inline ReportingLogRequest& operator=(const ReportingLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportingLogRequest(ReportingLogRequest&& from) noexcept
    : ReportingLogRequest() {
    *this = ::std::move(from);
  }

  inline ReportingLogRequest& operator=(ReportingLogRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportingLogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportingLogRequest* internal_default_instance() {
    return reinterpret_cast<const ReportingLogRequest*>(
               &_ReportingLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ReportingLogRequest* other);
  friend void swap(ReportingLogRequest& a, ReportingLogRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportingLogRequest* New() const final {
    return CreateMaybeMessage<ReportingLogRequest>(NULL);
  }

  ReportingLogRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportingLogRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportingLogRequest& from);
  void MergeFrom(const ReportingLogRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportingLogRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ego_vehicle_id = 2;
  void clear_ego_vehicle_id();
  static const int kEgoVehicleIdFieldNumber = 2;
  const ::std::string& ego_vehicle_id() const;
  void set_ego_vehicle_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ego_vehicle_id(::std::string&& value);
  #endif
  void set_ego_vehicle_id(const char* value);
  void set_ego_vehicle_id(const char* value, size_t size);
  ::std::string* mutable_ego_vehicle_id();
  ::std::string* release_ego_vehicle_id();
  void set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id);

  // .metamoto.messages.LogMessage log_message = 1;
  bool has_log_message() const;
  void clear_log_message();
  static const int kLogMessageFieldNumber = 1;
  private:
  const ::metamoto::messages::LogMessage& _internal_log_message() const;
  public:
  const ::metamoto::messages::LogMessage& log_message() const;
  ::metamoto::messages::LogMessage* release_log_message();
  ::metamoto::messages::LogMessage* mutable_log_message();
  void set_allocated_log_message(::metamoto::messages::LogMessage* log_message);

  // @@protoc_insertion_point(class_scope:metamoto.services.ReportingLogRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ego_vehicle_id_;
  ::metamoto::messages::LogMessage* log_message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2freporting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportingLogReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ReportingLogReply) */ {
 public:
  ReportingLogReply();
  virtual ~ReportingLogReply();

  ReportingLogReply(const ReportingLogReply& from);

  inline ReportingLogReply& operator=(const ReportingLogReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportingLogReply(ReportingLogReply&& from) noexcept
    : ReportingLogReply() {
    *this = ::std::move(from);
  }

  inline ReportingLogReply& operator=(ReportingLogReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportingLogReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportingLogReply* internal_default_instance() {
    return reinterpret_cast<const ReportingLogReply*>(
               &_ReportingLogReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ReportingLogReply* other);
  friend void swap(ReportingLogReply& a, ReportingLogReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportingLogReply* New() const final {
    return CreateMaybeMessage<ReportingLogReply>(NULL);
  }

  ReportingLogReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportingLogReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportingLogReply& from);
  void MergeFrom(const ReportingLogReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportingLogReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:metamoto.services.ReportingLogReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2freporting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportingReportEventRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ReportingReportEventRequest) */ {
 public:
  ReportingReportEventRequest();
  virtual ~ReportingReportEventRequest();

  ReportingReportEventRequest(const ReportingReportEventRequest& from);

  inline ReportingReportEventRequest& operator=(const ReportingReportEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportingReportEventRequest(ReportingReportEventRequest&& from) noexcept
    : ReportingReportEventRequest() {
    *this = ::std::move(from);
  }

  inline ReportingReportEventRequest& operator=(ReportingReportEventRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportingReportEventRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportingReportEventRequest* internal_default_instance() {
    return reinterpret_cast<const ReportingReportEventRequest*>(
               &_ReportingReportEventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ReportingReportEventRequest* other);
  friend void swap(ReportingReportEventRequest& a, ReportingReportEventRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportingReportEventRequest* New() const final {
    return CreateMaybeMessage<ReportingReportEventRequest>(NULL);
  }

  ReportingReportEventRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportingReportEventRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportingReportEventRequest& from);
  void MergeFrom(const ReportingReportEventRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportingReportEventRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string ego_vehicle_id = 4;
  void clear_ego_vehicle_id();
  static const int kEgoVehicleIdFieldNumber = 4;
  const ::std::string& ego_vehicle_id() const;
  void set_ego_vehicle_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ego_vehicle_id(::std::string&& value);
  #endif
  void set_ego_vehicle_id(const char* value);
  void set_ego_vehicle_id(const char* value, size_t size);
  ::std::string* mutable_ego_vehicle_id();
  ::std::string* release_ego_vehicle_id();
  void set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id);

  // double time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // .metamoto.types.Action action = 2;
  void clear_action();
  static const int kActionFieldNumber = 2;
  ::metamoto::types::Action action() const;
  void set_action(::metamoto::types::Action value);

  // @@protoc_insertion_point(class_scope:metamoto.services.ReportingReportEventRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr ego_vehicle_id_;
  double time_;
  int action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2freporting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportingReportEventReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ReportingReportEventReply) */ {
 public:
  ReportingReportEventReply();
  virtual ~ReportingReportEventReply();

  ReportingReportEventReply(const ReportingReportEventReply& from);

  inline ReportingReportEventReply& operator=(const ReportingReportEventReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportingReportEventReply(ReportingReportEventReply&& from) noexcept
    : ReportingReportEventReply() {
    *this = ::std::move(from);
  }

  inline ReportingReportEventReply& operator=(ReportingReportEventReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportingReportEventReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportingReportEventReply* internal_default_instance() {
    return reinterpret_cast<const ReportingReportEventReply*>(
               &_ReportingReportEventReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ReportingReportEventReply* other);
  friend void swap(ReportingReportEventReply& a, ReportingReportEventReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportingReportEventReply* New() const final {
    return CreateMaybeMessage<ReportingReportEventReply>(NULL);
  }

  ReportingReportEventReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportingReportEventReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportingReportEventReply& from);
  void MergeFrom(const ReportingReportEventReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportingReportEventReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:metamoto.services.ReportingReportEventReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2freporting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportingVisualizeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ReportingVisualizeRequest) */ {
 public:
  ReportingVisualizeRequest();
  virtual ~ReportingVisualizeRequest();

  ReportingVisualizeRequest(const ReportingVisualizeRequest& from);

  inline ReportingVisualizeRequest& operator=(const ReportingVisualizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportingVisualizeRequest(ReportingVisualizeRequest&& from) noexcept
    : ReportingVisualizeRequest() {
    *this = ::std::move(from);
  }

  inline ReportingVisualizeRequest& operator=(ReportingVisualizeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportingVisualizeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportingVisualizeRequest* internal_default_instance() {
    return reinterpret_cast<const ReportingVisualizeRequest*>(
               &_ReportingVisualizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ReportingVisualizeRequest* other);
  friend void swap(ReportingVisualizeRequest& a, ReportingVisualizeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportingVisualizeRequest* New() const final {
    return CreateMaybeMessage<ReportingVisualizeRequest>(NULL);
  }

  ReportingVisualizeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportingVisualizeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportingVisualizeRequest& from);
  void MergeFrom(const ReportingVisualizeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportingVisualizeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ego_vehicle_id = 2;
  void clear_ego_vehicle_id();
  static const int kEgoVehicleIdFieldNumber = 2;
  const ::std::string& ego_vehicle_id() const;
  void set_ego_vehicle_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ego_vehicle_id(::std::string&& value);
  #endif
  void set_ego_vehicle_id(const char* value);
  void set_ego_vehicle_id(const char* value, size_t size);
  ::std::string* mutable_ego_vehicle_id();
  ::std::string* release_ego_vehicle_id();
  void set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id);

  // .metamoto.messages.Visualization visualization = 1;
  bool has_visualization() const;
  void clear_visualization();
  static const int kVisualizationFieldNumber = 1;
  private:
  const ::metamoto::messages::Visualization& _internal_visualization() const;
  public:
  const ::metamoto::messages::Visualization& visualization() const;
  ::metamoto::messages::Visualization* release_visualization();
  ::metamoto::messages::Visualization* mutable_visualization();
  void set_allocated_visualization(::metamoto::messages::Visualization* visualization);

  // @@protoc_insertion_point(class_scope:metamoto.services.ReportingVisualizeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ego_vehicle_id_;
  ::metamoto::messages::Visualization* visualization_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2freporting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportingVisualizeReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.ReportingVisualizeReply) */ {
 public:
  ReportingVisualizeReply();
  virtual ~ReportingVisualizeReply();

  ReportingVisualizeReply(const ReportingVisualizeReply& from);

  inline ReportingVisualizeReply& operator=(const ReportingVisualizeReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportingVisualizeReply(ReportingVisualizeReply&& from) noexcept
    : ReportingVisualizeReply() {
    *this = ::std::move(from);
  }

  inline ReportingVisualizeReply& operator=(ReportingVisualizeReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportingVisualizeReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportingVisualizeReply* internal_default_instance() {
    return reinterpret_cast<const ReportingVisualizeReply*>(
               &_ReportingVisualizeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ReportingVisualizeReply* other);
  friend void swap(ReportingVisualizeReply& a, ReportingVisualizeReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportingVisualizeReply* New() const final {
    return CreateMaybeMessage<ReportingVisualizeReply>(NULL);
  }

  ReportingVisualizeReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportingVisualizeReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportingVisualizeReply& from);
  void MergeFrom(const ReportingVisualizeReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportingVisualizeReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:metamoto.services.ReportingVisualizeReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2freporting_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReportingAddTimeSeriesValueRequest

// string name = 1;
inline void ReportingAddTimeSeriesValueRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportingAddTimeSeriesValueRequest::name() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ReportingAddTimeSeriesValueRequest.name)
  return name_.GetNoArena();
}
inline void ReportingAddTimeSeriesValueRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.ReportingAddTimeSeriesValueRequest.name)
}
#if LANG_CXX11
inline void ReportingAddTimeSeriesValueRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.ReportingAddTimeSeriesValueRequest.name)
}
#endif
inline void ReportingAddTimeSeriesValueRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.ReportingAddTimeSeriesValueRequest.name)
}
inline void ReportingAddTimeSeriesValueRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.ReportingAddTimeSeriesValueRequest.name)
}
inline ::std::string* ReportingAddTimeSeriesValueRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.ReportingAddTimeSeriesValueRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportingAddTimeSeriesValueRequest::release_name() {
  // @@protoc_insertion_point(field_release:metamoto.services.ReportingAddTimeSeriesValueRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportingAddTimeSeriesValueRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ReportingAddTimeSeriesValueRequest.name)
}

// string units = 2;
inline void ReportingAddTimeSeriesValueRequest::clear_units() {
  units_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportingAddTimeSeriesValueRequest::units() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ReportingAddTimeSeriesValueRequest.units)
  return units_.GetNoArena();
}
inline void ReportingAddTimeSeriesValueRequest::set_units(const ::std::string& value) {
  
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.ReportingAddTimeSeriesValueRequest.units)
}
#if LANG_CXX11
inline void ReportingAddTimeSeriesValueRequest::set_units(::std::string&& value) {
  
  units_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.ReportingAddTimeSeriesValueRequest.units)
}
#endif
inline void ReportingAddTimeSeriesValueRequest::set_units(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.ReportingAddTimeSeriesValueRequest.units)
}
inline void ReportingAddTimeSeriesValueRequest::set_units(const char* value, size_t size) {
  
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.ReportingAddTimeSeriesValueRequest.units)
}
inline ::std::string* ReportingAddTimeSeriesValueRequest::mutable_units() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.ReportingAddTimeSeriesValueRequest.units)
  return units_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportingAddTimeSeriesValueRequest::release_units() {
  // @@protoc_insertion_point(field_release:metamoto.services.ReportingAddTimeSeriesValueRequest.units)
  
  return units_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportingAddTimeSeriesValueRequest::set_allocated_units(::std::string* units) {
  if (units != NULL) {
    
  } else {
    
  }
  units_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), units);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ReportingAddTimeSeriesValueRequest.units)
}

// string description = 3;
inline void ReportingAddTimeSeriesValueRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportingAddTimeSeriesValueRequest::description() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ReportingAddTimeSeriesValueRequest.description)
  return description_.GetNoArena();
}
inline void ReportingAddTimeSeriesValueRequest::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.ReportingAddTimeSeriesValueRequest.description)
}
#if LANG_CXX11
inline void ReportingAddTimeSeriesValueRequest::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.ReportingAddTimeSeriesValueRequest.description)
}
#endif
inline void ReportingAddTimeSeriesValueRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.ReportingAddTimeSeriesValueRequest.description)
}
inline void ReportingAddTimeSeriesValueRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.ReportingAddTimeSeriesValueRequest.description)
}
inline ::std::string* ReportingAddTimeSeriesValueRequest::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.ReportingAddTimeSeriesValueRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportingAddTimeSeriesValueRequest::release_description() {
  // @@protoc_insertion_point(field_release:metamoto.services.ReportingAddTimeSeriesValueRequest.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportingAddTimeSeriesValueRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ReportingAddTimeSeriesValueRequest.description)
}

// double time = 4;
inline void ReportingAddTimeSeriesValueRequest::clear_time() {
  time_ = 0;
}
inline double ReportingAddTimeSeriesValueRequest::time() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ReportingAddTimeSeriesValueRequest.time)
  return time_;
}
inline void ReportingAddTimeSeriesValueRequest::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.ReportingAddTimeSeriesValueRequest.time)
}

// float value = 5;
inline void ReportingAddTimeSeriesValueRequest::clear_value() {
  value_ = 0;
}
inline float ReportingAddTimeSeriesValueRequest::value() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ReportingAddTimeSeriesValueRequest.value)
  return value_;
}
inline void ReportingAddTimeSeriesValueRequest::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.ReportingAddTimeSeriesValueRequest.value)
}

// string ego_vehicle_id = 6;
inline void ReportingAddTimeSeriesValueRequest::clear_ego_vehicle_id() {
  ego_vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportingAddTimeSeriesValueRequest::ego_vehicle_id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ReportingAddTimeSeriesValueRequest.ego_vehicle_id)
  return ego_vehicle_id_.GetNoArena();
}
inline void ReportingAddTimeSeriesValueRequest::set_ego_vehicle_id(const ::std::string& value) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.ReportingAddTimeSeriesValueRequest.ego_vehicle_id)
}
#if LANG_CXX11
inline void ReportingAddTimeSeriesValueRequest::set_ego_vehicle_id(::std::string&& value) {
  
  ego_vehicle_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.ReportingAddTimeSeriesValueRequest.ego_vehicle_id)
}
#endif
inline void ReportingAddTimeSeriesValueRequest::set_ego_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.ReportingAddTimeSeriesValueRequest.ego_vehicle_id)
}
inline void ReportingAddTimeSeriesValueRequest::set_ego_vehicle_id(const char* value, size_t size) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.ReportingAddTimeSeriesValueRequest.ego_vehicle_id)
}
inline ::std::string* ReportingAddTimeSeriesValueRequest::mutable_ego_vehicle_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.ReportingAddTimeSeriesValueRequest.ego_vehicle_id)
  return ego_vehicle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportingAddTimeSeriesValueRequest::release_ego_vehicle_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.ReportingAddTimeSeriesValueRequest.ego_vehicle_id)
  
  return ego_vehicle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportingAddTimeSeriesValueRequest::set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id) {
  if (ego_vehicle_id != NULL) {
    
  } else {
    
  }
  ego_vehicle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ego_vehicle_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ReportingAddTimeSeriesValueRequest.ego_vehicle_id)
}

// -------------------------------------------------------------------

// ReportingAddTimeSeriesValueReply

// -------------------------------------------------------------------

// ReportingLogRequest

// .metamoto.messages.LogMessage log_message = 1;
inline bool ReportingLogRequest::has_log_message() const {
  return this != internal_default_instance() && log_message_ != NULL;
}
inline const ::metamoto::messages::LogMessage& ReportingLogRequest::_internal_log_message() const {
  return *log_message_;
}
inline const ::metamoto::messages::LogMessage& ReportingLogRequest::log_message() const {
  const ::metamoto::messages::LogMessage* p = log_message_;
  // @@protoc_insertion_point(field_get:metamoto.services.ReportingLogRequest.log_message)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::messages::LogMessage*>(
      &::metamoto::messages::_LogMessage_default_instance_);
}
inline ::metamoto::messages::LogMessage* ReportingLogRequest::release_log_message() {
  // @@protoc_insertion_point(field_release:metamoto.services.ReportingLogRequest.log_message)
  
  ::metamoto::messages::LogMessage* temp = log_message_;
  log_message_ = NULL;
  return temp;
}
inline ::metamoto::messages::LogMessage* ReportingLogRequest::mutable_log_message() {
  
  if (log_message_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::messages::LogMessage>(GetArenaNoVirtual());
    log_message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.ReportingLogRequest.log_message)
  return log_message_;
}
inline void ReportingLogRequest::set_allocated_log_message(::metamoto::messages::LogMessage* log_message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(log_message_);
  }
  if (log_message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      log_message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log_message, submessage_arena);
    }
    
  } else {
    
  }
  log_message_ = log_message;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ReportingLogRequest.log_message)
}

// string ego_vehicle_id = 2;
inline void ReportingLogRequest::clear_ego_vehicle_id() {
  ego_vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportingLogRequest::ego_vehicle_id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ReportingLogRequest.ego_vehicle_id)
  return ego_vehicle_id_.GetNoArena();
}
inline void ReportingLogRequest::set_ego_vehicle_id(const ::std::string& value) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.ReportingLogRequest.ego_vehicle_id)
}
#if LANG_CXX11
inline void ReportingLogRequest::set_ego_vehicle_id(::std::string&& value) {
  
  ego_vehicle_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.ReportingLogRequest.ego_vehicle_id)
}
#endif
inline void ReportingLogRequest::set_ego_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.ReportingLogRequest.ego_vehicle_id)
}
inline void ReportingLogRequest::set_ego_vehicle_id(const char* value, size_t size) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.ReportingLogRequest.ego_vehicle_id)
}
inline ::std::string* ReportingLogRequest::mutable_ego_vehicle_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.ReportingLogRequest.ego_vehicle_id)
  return ego_vehicle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportingLogRequest::release_ego_vehicle_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.ReportingLogRequest.ego_vehicle_id)
  
  return ego_vehicle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportingLogRequest::set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id) {
  if (ego_vehicle_id != NULL) {
    
  } else {
    
  }
  ego_vehicle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ego_vehicle_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ReportingLogRequest.ego_vehicle_id)
}

// -------------------------------------------------------------------

// ReportingLogReply

// -------------------------------------------------------------------

// ReportingReportEventRequest

// double time = 1;
inline void ReportingReportEventRequest::clear_time() {
  time_ = 0;
}
inline double ReportingReportEventRequest::time() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ReportingReportEventRequest.time)
  return time_;
}
inline void ReportingReportEventRequest::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.ReportingReportEventRequest.time)
}

// .metamoto.types.Action action = 2;
inline void ReportingReportEventRequest::clear_action() {
  action_ = 0;
}
inline ::metamoto::types::Action ReportingReportEventRequest::action() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ReportingReportEventRequest.action)
  return static_cast< ::metamoto::types::Action >(action_);
}
inline void ReportingReportEventRequest::set_action(::metamoto::types::Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.ReportingReportEventRequest.action)
}

// string description = 3;
inline void ReportingReportEventRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportingReportEventRequest::description() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ReportingReportEventRequest.description)
  return description_.GetNoArena();
}
inline void ReportingReportEventRequest::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.ReportingReportEventRequest.description)
}
#if LANG_CXX11
inline void ReportingReportEventRequest::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.ReportingReportEventRequest.description)
}
#endif
inline void ReportingReportEventRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.ReportingReportEventRequest.description)
}
inline void ReportingReportEventRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.ReportingReportEventRequest.description)
}
inline ::std::string* ReportingReportEventRequest::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.ReportingReportEventRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportingReportEventRequest::release_description() {
  // @@protoc_insertion_point(field_release:metamoto.services.ReportingReportEventRequest.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportingReportEventRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ReportingReportEventRequest.description)
}

// string ego_vehicle_id = 4;
inline void ReportingReportEventRequest::clear_ego_vehicle_id() {
  ego_vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportingReportEventRequest::ego_vehicle_id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ReportingReportEventRequest.ego_vehicle_id)
  return ego_vehicle_id_.GetNoArena();
}
inline void ReportingReportEventRequest::set_ego_vehicle_id(const ::std::string& value) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.ReportingReportEventRequest.ego_vehicle_id)
}
#if LANG_CXX11
inline void ReportingReportEventRequest::set_ego_vehicle_id(::std::string&& value) {
  
  ego_vehicle_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.ReportingReportEventRequest.ego_vehicle_id)
}
#endif
inline void ReportingReportEventRequest::set_ego_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.ReportingReportEventRequest.ego_vehicle_id)
}
inline void ReportingReportEventRequest::set_ego_vehicle_id(const char* value, size_t size) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.ReportingReportEventRequest.ego_vehicle_id)
}
inline ::std::string* ReportingReportEventRequest::mutable_ego_vehicle_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.ReportingReportEventRequest.ego_vehicle_id)
  return ego_vehicle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportingReportEventRequest::release_ego_vehicle_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.ReportingReportEventRequest.ego_vehicle_id)
  
  return ego_vehicle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportingReportEventRequest::set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id) {
  if (ego_vehicle_id != NULL) {
    
  } else {
    
  }
  ego_vehicle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ego_vehicle_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ReportingReportEventRequest.ego_vehicle_id)
}

// -------------------------------------------------------------------

// ReportingReportEventReply

// -------------------------------------------------------------------

// ReportingVisualizeRequest

// .metamoto.messages.Visualization visualization = 1;
inline bool ReportingVisualizeRequest::has_visualization() const {
  return this != internal_default_instance() && visualization_ != NULL;
}
inline const ::metamoto::messages::Visualization& ReportingVisualizeRequest::_internal_visualization() const {
  return *visualization_;
}
inline const ::metamoto::messages::Visualization& ReportingVisualizeRequest::visualization() const {
  const ::metamoto::messages::Visualization* p = visualization_;
  // @@protoc_insertion_point(field_get:metamoto.services.ReportingVisualizeRequest.visualization)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::messages::Visualization*>(
      &::metamoto::messages::_Visualization_default_instance_);
}
inline ::metamoto::messages::Visualization* ReportingVisualizeRequest::release_visualization() {
  // @@protoc_insertion_point(field_release:metamoto.services.ReportingVisualizeRequest.visualization)
  
  ::metamoto::messages::Visualization* temp = visualization_;
  visualization_ = NULL;
  return temp;
}
inline ::metamoto::messages::Visualization* ReportingVisualizeRequest::mutable_visualization() {
  
  if (visualization_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::messages::Visualization>(GetArenaNoVirtual());
    visualization_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.ReportingVisualizeRequest.visualization)
  return visualization_;
}
inline void ReportingVisualizeRequest::set_allocated_visualization(::metamoto::messages::Visualization* visualization) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(visualization_);
  }
  if (visualization) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      visualization = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, visualization, submessage_arena);
    }
    
  } else {
    
  }
  visualization_ = visualization;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ReportingVisualizeRequest.visualization)
}

// string ego_vehicle_id = 2;
inline void ReportingVisualizeRequest::clear_ego_vehicle_id() {
  ego_vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportingVisualizeRequest::ego_vehicle_id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.ReportingVisualizeRequest.ego_vehicle_id)
  return ego_vehicle_id_.GetNoArena();
}
inline void ReportingVisualizeRequest::set_ego_vehicle_id(const ::std::string& value) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.ReportingVisualizeRequest.ego_vehicle_id)
}
#if LANG_CXX11
inline void ReportingVisualizeRequest::set_ego_vehicle_id(::std::string&& value) {
  
  ego_vehicle_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.ReportingVisualizeRequest.ego_vehicle_id)
}
#endif
inline void ReportingVisualizeRequest::set_ego_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.ReportingVisualizeRequest.ego_vehicle_id)
}
inline void ReportingVisualizeRequest::set_ego_vehicle_id(const char* value, size_t size) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.ReportingVisualizeRequest.ego_vehicle_id)
}
inline ::std::string* ReportingVisualizeRequest::mutable_ego_vehicle_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.ReportingVisualizeRequest.ego_vehicle_id)
  return ego_vehicle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportingVisualizeRequest::release_ego_vehicle_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.ReportingVisualizeRequest.ego_vehicle_id)
  
  return ego_vehicle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportingVisualizeRequest::set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id) {
  if (ego_vehicle_id != NULL) {
    
  } else {
    
  }
  ego_vehicle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ego_vehicle_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.ReportingVisualizeRequest.ego_vehicle_id)
}

// -------------------------------------------------------------------

// ReportingVisualizeReply

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace services
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2fservices_2freporting_2eproto
