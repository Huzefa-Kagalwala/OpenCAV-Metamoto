// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metamoto/services/reporting.proto
// Original file comments:
// Copyright (c) 2018-2020 Metamoto, Inc. All Rights Reserved.
//
#ifndef GRPC_metamoto_2fservices_2freporting_2eproto__INCLUDED
#define GRPC_metamoto_2fservices_2freporting_2eproto__INCLUDED

#include "metamoto/services/reporting.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace metamoto {
namespace services {

// Logging and reporting service for SUTs.
class Reporting final {
 public:
  static constexpr char const* service_full_name() {
    return "metamoto.services.Reporting";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AddTimeSeriesValue(::grpc::ClientContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest& request, ::metamoto::services::ReportingAddTimeSeriesValueReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingAddTimeSeriesValueReply>> AsyncAddTimeSeriesValue(::grpc::ClientContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingAddTimeSeriesValueReply>>(AsyncAddTimeSeriesValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingAddTimeSeriesValueReply>> PrepareAsyncAddTimeSeriesValue(::grpc::ClientContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingAddTimeSeriesValueReply>>(PrepareAsyncAddTimeSeriesValueRaw(context, request, cq));
    }
    virtual ::grpc::Status Log(::grpc::ClientContext* context, const ::metamoto::services::ReportingLogRequest& request, ::metamoto::services::ReportingLogReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingLogReply>> AsyncLog(::grpc::ClientContext* context, const ::metamoto::services::ReportingLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingLogReply>>(AsyncLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingLogReply>> PrepareAsyncLog(::grpc::ClientContext* context, const ::metamoto::services::ReportingLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingLogReply>>(PrepareAsyncLogRaw(context, request, cq));
    }
    virtual ::grpc::Status ReportEvent(::grpc::ClientContext* context, const ::metamoto::services::ReportingReportEventRequest& request, ::metamoto::services::ReportingReportEventReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingReportEventReply>> AsyncReportEvent(::grpc::ClientContext* context, const ::metamoto::services::ReportingReportEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingReportEventReply>>(AsyncReportEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingReportEventReply>> PrepareAsyncReportEvent(::grpc::ClientContext* context, const ::metamoto::services::ReportingReportEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingReportEventReply>>(PrepareAsyncReportEventRaw(context, request, cq));
    }
    virtual ::grpc::Status Visualize(::grpc::ClientContext* context, const ::metamoto::services::ReportingVisualizeRequest& request, ::metamoto::services::ReportingVisualizeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingVisualizeReply>> AsyncVisualize(::grpc::ClientContext* context, const ::metamoto::services::ReportingVisualizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingVisualizeReply>>(AsyncVisualizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingVisualizeReply>> PrepareAsyncVisualize(::grpc::ClientContext* context, const ::metamoto::services::ReportingVisualizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingVisualizeReply>>(PrepareAsyncVisualizeRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void AddTimeSeriesValue(::grpc::ClientContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest* request, ::metamoto::services::ReportingAddTimeSeriesValueReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Log(::grpc::ClientContext* context, const ::metamoto::services::ReportingLogRequest* request, ::metamoto::services::ReportingLogReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReportEvent(::grpc::ClientContext* context, const ::metamoto::services::ReportingReportEventRequest* request, ::metamoto::services::ReportingReportEventReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Visualize(::grpc::ClientContext* context, const ::metamoto::services::ReportingVisualizeRequest* request, ::metamoto::services::ReportingVisualizeReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingAddTimeSeriesValueReply>* AsyncAddTimeSeriesValueRaw(::grpc::ClientContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingAddTimeSeriesValueReply>* PrepareAsyncAddTimeSeriesValueRaw(::grpc::ClientContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingLogReply>* AsyncLogRaw(::grpc::ClientContext* context, const ::metamoto::services::ReportingLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingLogReply>* PrepareAsyncLogRaw(::grpc::ClientContext* context, const ::metamoto::services::ReportingLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingReportEventReply>* AsyncReportEventRaw(::grpc::ClientContext* context, const ::metamoto::services::ReportingReportEventRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingReportEventReply>* PrepareAsyncReportEventRaw(::grpc::ClientContext* context, const ::metamoto::services::ReportingReportEventRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingVisualizeReply>* AsyncVisualizeRaw(::grpc::ClientContext* context, const ::metamoto::services::ReportingVisualizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ReportingVisualizeReply>* PrepareAsyncVisualizeRaw(::grpc::ClientContext* context, const ::metamoto::services::ReportingVisualizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status AddTimeSeriesValue(::grpc::ClientContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest& request, ::metamoto::services::ReportingAddTimeSeriesValueReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingAddTimeSeriesValueReply>> AsyncAddTimeSeriesValue(::grpc::ClientContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingAddTimeSeriesValueReply>>(AsyncAddTimeSeriesValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingAddTimeSeriesValueReply>> PrepareAsyncAddTimeSeriesValue(::grpc::ClientContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingAddTimeSeriesValueReply>>(PrepareAsyncAddTimeSeriesValueRaw(context, request, cq));
    }
    ::grpc::Status Log(::grpc::ClientContext* context, const ::metamoto::services::ReportingLogRequest& request, ::metamoto::services::ReportingLogReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingLogReply>> AsyncLog(::grpc::ClientContext* context, const ::metamoto::services::ReportingLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingLogReply>>(AsyncLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingLogReply>> PrepareAsyncLog(::grpc::ClientContext* context, const ::metamoto::services::ReportingLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingLogReply>>(PrepareAsyncLogRaw(context, request, cq));
    }
    ::grpc::Status ReportEvent(::grpc::ClientContext* context, const ::metamoto::services::ReportingReportEventRequest& request, ::metamoto::services::ReportingReportEventReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingReportEventReply>> AsyncReportEvent(::grpc::ClientContext* context, const ::metamoto::services::ReportingReportEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingReportEventReply>>(AsyncReportEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingReportEventReply>> PrepareAsyncReportEvent(::grpc::ClientContext* context, const ::metamoto::services::ReportingReportEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingReportEventReply>>(PrepareAsyncReportEventRaw(context, request, cq));
    }
    ::grpc::Status Visualize(::grpc::ClientContext* context, const ::metamoto::services::ReportingVisualizeRequest& request, ::metamoto::services::ReportingVisualizeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingVisualizeReply>> AsyncVisualize(::grpc::ClientContext* context, const ::metamoto::services::ReportingVisualizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingVisualizeReply>>(AsyncVisualizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingVisualizeReply>> PrepareAsyncVisualize(::grpc::ClientContext* context, const ::metamoto::services::ReportingVisualizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingVisualizeReply>>(PrepareAsyncVisualizeRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void AddTimeSeriesValue(::grpc::ClientContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest* request, ::metamoto::services::ReportingAddTimeSeriesValueReply* response, std::function<void(::grpc::Status)>) override;
      void Log(::grpc::ClientContext* context, const ::metamoto::services::ReportingLogRequest* request, ::metamoto::services::ReportingLogReply* response, std::function<void(::grpc::Status)>) override;
      void ReportEvent(::grpc::ClientContext* context, const ::metamoto::services::ReportingReportEventRequest* request, ::metamoto::services::ReportingReportEventReply* response, std::function<void(::grpc::Status)>) override;
      void Visualize(::grpc::ClientContext* context, const ::metamoto::services::ReportingVisualizeRequest* request, ::metamoto::services::ReportingVisualizeReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingAddTimeSeriesValueReply>* AsyncAddTimeSeriesValueRaw(::grpc::ClientContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingAddTimeSeriesValueReply>* PrepareAsyncAddTimeSeriesValueRaw(::grpc::ClientContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingLogReply>* AsyncLogRaw(::grpc::ClientContext* context, const ::metamoto::services::ReportingLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingLogReply>* PrepareAsyncLogRaw(::grpc::ClientContext* context, const ::metamoto::services::ReportingLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingReportEventReply>* AsyncReportEventRaw(::grpc::ClientContext* context, const ::metamoto::services::ReportingReportEventRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingReportEventReply>* PrepareAsyncReportEventRaw(::grpc::ClientContext* context, const ::metamoto::services::ReportingReportEventRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingVisualizeReply>* AsyncVisualizeRaw(::grpc::ClientContext* context, const ::metamoto::services::ReportingVisualizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ReportingVisualizeReply>* PrepareAsyncVisualizeRaw(::grpc::ClientContext* context, const ::metamoto::services::ReportingVisualizeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddTimeSeriesValue_;
    const ::grpc::internal::RpcMethod rpcmethod_Log_;
    const ::grpc::internal::RpcMethod rpcmethod_ReportEvent_;
    const ::grpc::internal::RpcMethod rpcmethod_Visualize_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AddTimeSeriesValue(::grpc::ServerContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest* request, ::metamoto::services::ReportingAddTimeSeriesValueReply* response);
    virtual ::grpc::Status Log(::grpc::ServerContext* context, const ::metamoto::services::ReportingLogRequest* request, ::metamoto::services::ReportingLogReply* response);
    virtual ::grpc::Status ReportEvent(::grpc::ServerContext* context, const ::metamoto::services::ReportingReportEventRequest* request, ::metamoto::services::ReportingReportEventReply* response);
    virtual ::grpc::Status Visualize(::grpc::ServerContext* context, const ::metamoto::services::ReportingVisualizeRequest* request, ::metamoto::services::ReportingVisualizeReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddTimeSeriesValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddTimeSeriesValue() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddTimeSeriesValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTimeSeriesValue(::grpc::ServerContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest* request, ::metamoto::services::ReportingAddTimeSeriesValueReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTimeSeriesValue(::grpc::ServerContext* context, ::metamoto::services::ReportingAddTimeSeriesValueRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::ReportingAddTimeSeriesValueReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Log() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* context, const ::metamoto::services::ReportingLogRequest* request, ::metamoto::services::ReportingLogReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLog(::grpc::ServerContext* context, ::metamoto::services::ReportingLogRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::ReportingLogReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReportEvent() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ReportEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportEvent(::grpc::ServerContext* context, const ::metamoto::services::ReportingReportEventRequest* request, ::metamoto::services::ReportingReportEventReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportEvent(::grpc::ServerContext* context, ::metamoto::services::ReportingReportEventRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::ReportingReportEventReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Visualize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Visualize() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Visualize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Visualize(::grpc::ServerContext* context, const ::metamoto::services::ReportingVisualizeRequest* request, ::metamoto::services::ReportingVisualizeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVisualize(::grpc::ServerContext* context, ::metamoto::services::ReportingVisualizeRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::ReportingVisualizeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddTimeSeriesValue<WithAsyncMethod_Log<WithAsyncMethod_ReportEvent<WithAsyncMethod_Visualize<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddTimeSeriesValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_AddTimeSeriesValue() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::ReportingAddTimeSeriesValueRequest, ::metamoto::services::ReportingAddTimeSeriesValueReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::ReportingAddTimeSeriesValueRequest* request,
                 ::metamoto::services::ReportingAddTimeSeriesValueReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AddTimeSeriesValue(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_AddTimeSeriesValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTimeSeriesValue(::grpc::ServerContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest* request, ::metamoto::services::ReportingAddTimeSeriesValueReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddTimeSeriesValue(::grpc::ServerContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest* request, ::metamoto::services::ReportingAddTimeSeriesValueReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Log() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::ReportingLogRequest, ::metamoto::services::ReportingLogReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::ReportingLogRequest* request,
                 ::metamoto::services::ReportingLogReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Log(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* context, const ::metamoto::services::ReportingLogRequest* request, ::metamoto::services::ReportingLogReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Log(::grpc::ServerContext* context, const ::metamoto::services::ReportingLogRequest* request, ::metamoto::services::ReportingLogReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReportEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ReportEvent() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::ReportingReportEventRequest, ::metamoto::services::ReportingReportEventReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::ReportingReportEventRequest* request,
                 ::metamoto::services::ReportingReportEventReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ReportEvent(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ReportEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportEvent(::grpc::ServerContext* context, const ::metamoto::services::ReportingReportEventRequest* request, ::metamoto::services::ReportingReportEventReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReportEvent(::grpc::ServerContext* context, const ::metamoto::services::ReportingReportEventRequest* request, ::metamoto::services::ReportingReportEventReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Visualize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Visualize() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::ReportingVisualizeRequest, ::metamoto::services::ReportingVisualizeReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::ReportingVisualizeRequest* request,
                 ::metamoto::services::ReportingVisualizeReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Visualize(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Visualize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Visualize(::grpc::ServerContext* context, const ::metamoto::services::ReportingVisualizeRequest* request, ::metamoto::services::ReportingVisualizeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Visualize(::grpc::ServerContext* context, const ::metamoto::services::ReportingVisualizeRequest* request, ::metamoto::services::ReportingVisualizeReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_AddTimeSeriesValue<ExperimentalWithCallbackMethod_Log<ExperimentalWithCallbackMethod_ReportEvent<ExperimentalWithCallbackMethod_Visualize<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddTimeSeriesValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddTimeSeriesValue() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddTimeSeriesValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTimeSeriesValue(::grpc::ServerContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest* request, ::metamoto::services::ReportingAddTimeSeriesValueReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Log() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* context, const ::metamoto::services::ReportingLogRequest* request, ::metamoto::services::ReportingLogReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReportEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReportEvent() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ReportEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportEvent(::grpc::ServerContext* context, const ::metamoto::services::ReportingReportEventRequest* request, ::metamoto::services::ReportingReportEventReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Visualize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Visualize() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Visualize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Visualize(::grpc::ServerContext* context, const ::metamoto::services::ReportingVisualizeRequest* request, ::metamoto::services::ReportingVisualizeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddTimeSeriesValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddTimeSeriesValue() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddTimeSeriesValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTimeSeriesValue(::grpc::ServerContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest* request, ::metamoto::services::ReportingAddTimeSeriesValueReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTimeSeriesValue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Log() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* context, const ::metamoto::services::ReportingLogRequest* request, ::metamoto::services::ReportingLogReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReportEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ReportEvent() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ReportEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportEvent(::grpc::ServerContext* context, const ::metamoto::services::ReportingReportEventRequest* request, ::metamoto::services::ReportingReportEventReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportEvent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Visualize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Visualize() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Visualize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Visualize(::grpc::ServerContext* context, const ::metamoto::services::ReportingVisualizeRequest* request, ::metamoto::services::ReportingVisualizeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVisualize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddTimeSeriesValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_AddTimeSeriesValue() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AddTimeSeriesValue(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AddTimeSeriesValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTimeSeriesValue(::grpc::ServerContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest* request, ::metamoto::services::ReportingAddTimeSeriesValueReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddTimeSeriesValue(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Log() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Log(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* context, const ::metamoto::services::ReportingLogRequest* request, ::metamoto::services::ReportingLogReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Log(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReportEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ReportEvent() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ReportEvent(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ReportEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportEvent(::grpc::ServerContext* context, const ::metamoto::services::ReportingReportEventRequest* request, ::metamoto::services::ReportingReportEventReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReportEvent(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Visualize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Visualize() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Visualize(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Visualize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Visualize(::grpc::ServerContext* context, const ::metamoto::services::ReportingVisualizeRequest* request, ::metamoto::services::ReportingVisualizeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Visualize(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddTimeSeriesValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddTimeSeriesValue() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::ReportingAddTimeSeriesValueRequest, ::metamoto::services::ReportingAddTimeSeriesValueReply>(std::bind(&WithStreamedUnaryMethod_AddTimeSeriesValue<BaseClass>::StreamedAddTimeSeriesValue, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddTimeSeriesValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddTimeSeriesValue(::grpc::ServerContext* context, const ::metamoto::services::ReportingAddTimeSeriesValueRequest* request, ::metamoto::services::ReportingAddTimeSeriesValueReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddTimeSeriesValue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::ReportingAddTimeSeriesValueRequest,::metamoto::services::ReportingAddTimeSeriesValueReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Log() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::ReportingLogRequest, ::metamoto::services::ReportingLogReply>(std::bind(&WithStreamedUnaryMethod_Log<BaseClass>::StreamedLog, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Log(::grpc::ServerContext* context, const ::metamoto::services::ReportingLogRequest* request, ::metamoto::services::ReportingLogReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::ReportingLogRequest,::metamoto::services::ReportingLogReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReportEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReportEvent() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::ReportingReportEventRequest, ::metamoto::services::ReportingReportEventReply>(std::bind(&WithStreamedUnaryMethod_ReportEvent<BaseClass>::StreamedReportEvent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReportEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReportEvent(::grpc::ServerContext* context, const ::metamoto::services::ReportingReportEventRequest* request, ::metamoto::services::ReportingReportEventReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReportEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::ReportingReportEventRequest,::metamoto::services::ReportingReportEventReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Visualize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Visualize() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::ReportingVisualizeRequest, ::metamoto::services::ReportingVisualizeReply>(std::bind(&WithStreamedUnaryMethod_Visualize<BaseClass>::StreamedVisualize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Visualize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Visualize(::grpc::ServerContext* context, const ::metamoto::services::ReportingVisualizeRequest* request, ::metamoto::services::ReportingVisualizeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVisualize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::ReportingVisualizeRequest,::metamoto::services::ReportingVisualizeReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddTimeSeriesValue<WithStreamedUnaryMethod_Log<WithStreamedUnaryMethod_ReportEvent<WithStreamedUnaryMethod_Visualize<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddTimeSeriesValue<WithStreamedUnaryMethod_Log<WithStreamedUnaryMethod_ReportEvent<WithStreamedUnaryMethod_Visualize<Service > > > > StreamedService;
};

}  // namespace services
}  // namespace metamoto


#endif  // GRPC_metamoto_2fservices_2freporting_2eproto__INCLUDED
