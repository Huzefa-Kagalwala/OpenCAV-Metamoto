// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metamoto/services/controller.proto

#include "metamoto/services/controller.pb.h"
#include "metamoto/services/controller.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace metamoto {
namespace services {

static const char* Controller_method_names[] = {
  "/metamoto.services.Controller/Setup",
  "/metamoto.services.Controller/Initialize",
  "/metamoto.services.Controller/Update",
  "/metamoto.services.Controller/Close",
};

std::unique_ptr< Controller::Stub> Controller::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Controller::Stub> stub(new Controller::Stub(channel));
  return stub;
}

Controller::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Setup_(Controller_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Initialize_(Controller_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(Controller_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Close_(Controller_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Controller::Stub::Setup(::grpc::ClientContext* context, const ::metamoto::services::ControllerSetupRequest& request, ::metamoto::services::ControllerSetupReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Setup_, context, request, response);
}

void Controller::Stub::experimental_async::Setup(::grpc::ClientContext* context, const ::metamoto::services::ControllerSetupRequest* request, ::metamoto::services::ControllerSetupReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Setup_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ControllerSetupReply>* Controller::Stub::AsyncSetupRaw(::grpc::ClientContext* context, const ::metamoto::services::ControllerSetupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ControllerSetupReply>::Create(channel_.get(), cq, rpcmethod_Setup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ControllerSetupReply>* Controller::Stub::PrepareAsyncSetupRaw(::grpc::ClientContext* context, const ::metamoto::services::ControllerSetupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ControllerSetupReply>::Create(channel_.get(), cq, rpcmethod_Setup_, context, request, false);
}

::grpc::Status Controller::Stub::Initialize(::grpc::ClientContext* context, const ::metamoto::services::ControllerInitializeRequest& request, ::metamoto::services::ControllerInitializeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Initialize_, context, request, response);
}

void Controller::Stub::experimental_async::Initialize(::grpc::ClientContext* context, const ::metamoto::services::ControllerInitializeRequest* request, ::metamoto::services::ControllerInitializeReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Initialize_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ControllerInitializeReply>* Controller::Stub::AsyncInitializeRaw(::grpc::ClientContext* context, const ::metamoto::services::ControllerInitializeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ControllerInitializeReply>::Create(channel_.get(), cq, rpcmethod_Initialize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ControllerInitializeReply>* Controller::Stub::PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::metamoto::services::ControllerInitializeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ControllerInitializeReply>::Create(channel_.get(), cq, rpcmethod_Initialize_, context, request, false);
}

::grpc::Status Controller::Stub::Update(::grpc::ClientContext* context, const ::metamoto::services::ControllerUpdateRequest& request, ::metamoto::services::ControllerUpdateReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Update_, context, request, response);
}

void Controller::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::metamoto::services::ControllerUpdateRequest* request, ::metamoto::services::ControllerUpdateReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ControllerUpdateReply>* Controller::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::metamoto::services::ControllerUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ControllerUpdateReply>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ControllerUpdateReply>* Controller::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::metamoto::services::ControllerUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ControllerUpdateReply>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, false);
}

::grpc::Status Controller::Stub::Close(::grpc::ClientContext* context, const ::metamoto::services::ControllerCloseRequest& request, ::metamoto::services::ControllerCloseReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Close_, context, request, response);
}

void Controller::Stub::experimental_async::Close(::grpc::ClientContext* context, const ::metamoto::services::ControllerCloseRequest* request, ::metamoto::services::ControllerCloseReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Close_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ControllerCloseReply>* Controller::Stub::AsyncCloseRaw(::grpc::ClientContext* context, const ::metamoto::services::ControllerCloseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ControllerCloseReply>::Create(channel_.get(), cq, rpcmethod_Close_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ControllerCloseReply>* Controller::Stub::PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::metamoto::services::ControllerCloseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ControllerCloseReply>::Create(channel_.get(), cq, rpcmethod_Close_, context, request, false);
}

Controller::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::metamoto::services::ControllerSetupRequest, ::metamoto::services::ControllerSetupReply>(
          std::mem_fn(&Controller::Service::Setup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::metamoto::services::ControllerInitializeRequest, ::metamoto::services::ControllerInitializeReply>(
          std::mem_fn(&Controller::Service::Initialize), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::metamoto::services::ControllerUpdateRequest, ::metamoto::services::ControllerUpdateReply>(
          std::mem_fn(&Controller::Service::Update), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::metamoto::services::ControllerCloseRequest, ::metamoto::services::ControllerCloseReply>(
          std::mem_fn(&Controller::Service::Close), this)));
}

Controller::Service::~Service() {
}

::grpc::Status Controller::Service::Setup(::grpc::ServerContext* context, const ::metamoto::services::ControllerSetupRequest* request, ::metamoto::services::ControllerSetupReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::Initialize(::grpc::ServerContext* context, const ::metamoto::services::ControllerInitializeRequest* request, ::metamoto::services::ControllerInitializeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::Update(::grpc::ServerContext* context, const ::metamoto::services::ControllerUpdateRequest* request, ::metamoto::services::ControllerUpdateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::Close(::grpc::ServerContext* context, const ::metamoto::services::ControllerCloseRequest* request, ::metamoto::services::ControllerCloseReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace metamoto
}  // namespace services

