// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metamoto/services/sut_connector.proto
// Original file comments:
// Copyright (c) 2018-2020 Metamoto, Inc. All Rights Reserved.
//
#ifndef GRPC_metamoto_2fservices_2fsut_5fconnector_2eproto__INCLUDED
#define GRPC_metamoto_2fservices_2fsut_5fconnector_2eproto__INCLUDED

#include "metamoto/services/sut_connector.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace metamoto {
namespace services {

class SUTConnector final {
 public:
  static constexpr char const* service_full_name() {
    return "metamoto.services.SUTConnector";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>> Connect(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>>(ConnectRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>> AsyncConnect(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>>(AsyncConnectRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>> PrepareAsyncConnect(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>>(PrepareAsyncConnectRaw(context, cq));
    }
    virtual ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest& request, ::metamoto::services::SUTConnectorHeartbeatReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SUTConnectorHeartbeatReply>> AsyncHeartbeat(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SUTConnectorHeartbeatReply>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SUTConnectorHeartbeatReply>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SUTConnectorHeartbeatReply>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Connect(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::metamoto::services::SUTConnectorRequest,::metamoto::services::SUTConnectorReply>* reactor) = 0;
      virtual void Heartbeat(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest* request, ::metamoto::services::SUTConnectorHeartbeatReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>* ConnectRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>* AsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SUTConnectorHeartbeatReply>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SUTConnectorHeartbeatReply>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>> Connect(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>>(ConnectRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>> AsyncConnect(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>>(AsyncConnectRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>> PrepareAsyncConnect(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>>(PrepareAsyncConnectRaw(context, cq));
    }
    ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest& request, ::metamoto::services::SUTConnectorHeartbeatReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SUTConnectorHeartbeatReply>> AsyncHeartbeat(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SUTConnectorHeartbeatReply>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SUTConnectorHeartbeatReply>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SUTConnectorHeartbeatReply>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Connect(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::metamoto::services::SUTConnectorRequest,::metamoto::services::SUTConnectorReply>* reactor) override;
      void Heartbeat(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest* request, ::metamoto::services::SUTConnectorHeartbeatReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReaderWriter< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>* ConnectRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>* AsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::SUTConnectorHeartbeatReply>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::SUTConnectorHeartbeatReply>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Connect_;
    const ::grpc::internal::RpcMethod rpcmethod_Heartbeat_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::metamoto::services::SUTConnectorReply, ::metamoto::services::SUTConnectorRequest>* stream);
    virtual ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest* request, ::metamoto::services::SUTConnectorHeartbeatReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Connect() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::metamoto::services::SUTConnectorReply, ::metamoto::services::SUTConnectorRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnect(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::metamoto::services::SUTConnectorReply, ::metamoto::services::SUTConnectorRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Heartbeat() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest* request, ::metamoto::services::SUTConnectorHeartbeatReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::metamoto::services::SUTConnectorHeartbeatRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::SUTConnectorHeartbeatReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Connect<WithAsyncMethod_Heartbeat<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Connect() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackBidiHandler< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>(
          [this] { return this->Connect(); }));
    }
    ~ExperimentalWithCallbackMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::metamoto::services::SUTConnectorReply, ::metamoto::services::SUTConnectorRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>* Connect() {
      return new ::grpc::internal::UnimplementedBidiReactor<
        ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Heartbeat() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::SUTConnectorHeartbeatRequest, ::metamoto::services::SUTConnectorHeartbeatReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::SUTConnectorHeartbeatRequest* request,
                 ::metamoto::services::SUTConnectorHeartbeatReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Heartbeat(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest* request, ::metamoto::services::SUTConnectorHeartbeatReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Heartbeat(::grpc::ServerContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest* request, ::metamoto::services::SUTConnectorHeartbeatReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Connect<ExperimentalWithCallbackMethod_Heartbeat<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Connect() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::metamoto::services::SUTConnectorReply, ::metamoto::services::SUTConnectorRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Heartbeat() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest* request, ::metamoto::services::SUTConnectorHeartbeatReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Connect() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::metamoto::services::SUTConnectorReply, ::metamoto::services::SUTConnectorRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnect(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Heartbeat() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest* request, ::metamoto::services::SUTConnectorHeartbeatReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Connect() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Connect(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::metamoto::services::SUTConnectorReply, ::metamoto::services::SUTConnectorRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Connect() {
      return new ::grpc::internal::UnimplementedBidiReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Heartbeat() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Heartbeat(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest* request, ::metamoto::services::SUTConnectorHeartbeatReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Heartbeat(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Heartbeat() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::SUTConnectorHeartbeatRequest, ::metamoto::services::SUTConnectorHeartbeatReply>(std::bind(&WithStreamedUnaryMethod_Heartbeat<BaseClass>::StreamedHeartbeat, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest* request, ::metamoto::services::SUTConnectorHeartbeatReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHeartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::SUTConnectorHeartbeatRequest,::metamoto::services::SUTConnectorHeartbeatReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Heartbeat<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Heartbeat<Service > StreamedService;
};

class SUTConnectorQuery final {
 public:
  static constexpr char const* service_full_name() {
    return "metamoto.services.SUTConnectorQuery";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetConnectedSUTs(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest& request, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>> AsyncGetConnectedSUTs(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>>(AsyncGetConnectedSUTsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>> PrepareAsyncGetConnectedSUTs(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>>(PrepareAsyncGetConnectedSUTsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetConnectedSUTs(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest* request, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>* AsyncGetConnectedSUTsRaw(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>* PrepareAsyncGetConnectedSUTsRaw(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetConnectedSUTs(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest& request, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>> AsyncGetConnectedSUTs(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>>(AsyncGetConnectedSUTsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>> PrepareAsyncGetConnectedSUTs(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>>(PrepareAsyncGetConnectedSUTsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetConnectedSUTs(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest* request, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>* AsyncGetConnectedSUTsRaw(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>* PrepareAsyncGetConnectedSUTsRaw(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetConnectedSUTs_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetConnectedSUTs(::grpc::ServerContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest* request, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetConnectedSUTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetConnectedSUTs() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetConnectedSUTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnectedSUTs(::grpc::ServerContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest* request, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConnectedSUTs(::grpc::ServerContext* context, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetConnectedSUTs<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetConnectedSUTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetConnectedSUTs() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest* request,
                 ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetConnectedSUTs(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetConnectedSUTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnectedSUTs(::grpc::ServerContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest* request, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetConnectedSUTs(::grpc::ServerContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest* request, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GetConnectedSUTs<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetConnectedSUTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetConnectedSUTs() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetConnectedSUTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnectedSUTs(::grpc::ServerContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest* request, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetConnectedSUTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetConnectedSUTs() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetConnectedSUTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnectedSUTs(::grpc::ServerContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest* request, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConnectedSUTs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetConnectedSUTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetConnectedSUTs() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetConnectedSUTs(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetConnectedSUTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnectedSUTs(::grpc::ServerContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest* request, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetConnectedSUTs(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetConnectedSUTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetConnectedSUTs() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>(std::bind(&WithStreamedUnaryMethod_GetConnectedSUTs<BaseClass>::StreamedGetConnectedSUTs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetConnectedSUTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetConnectedSUTs(::grpc::ServerContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest* request, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetConnectedSUTs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest,::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetConnectedSUTs<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetConnectedSUTs<Service > StreamedService;
};

}  // namespace services
}  // namespace metamoto


#endif  // GRPC_metamoto_2fservices_2fsut_5fconnector_2eproto__INCLUDED
