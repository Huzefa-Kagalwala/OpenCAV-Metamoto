// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metamoto/services/sensor.proto
// Original file comments:
// Copyright (c) 2018-2020 Metamoto, Inc. All Rights Reserved.
//
#ifndef GRPC_metamoto_2fservices_2fsensor_2eproto__INCLUDED
#define GRPC_metamoto_2fservices_2fsensor_2eproto__INCLUDED

#include "metamoto/services/sensor.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace metamoto {
namespace services {

class Sensor final {
 public:
  static constexpr char const* service_full_name() {
    return "metamoto.services.Sensor";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Setup(::grpc::ClientContext* context, const ::metamoto::services::SensorSetupRequest& request, ::metamoto::services::SensorSetupReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorSetupReply>> AsyncSetup(::grpc::ClientContext* context, const ::metamoto::services::SensorSetupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorSetupReply>>(AsyncSetupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorSetupReply>> PrepareAsyncSetup(::grpc::ClientContext* context, const ::metamoto::services::SensorSetupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorSetupReply>>(PrepareAsyncSetupRaw(context, request, cq));
    }
    virtual ::grpc::Status Initialize(::grpc::ClientContext* context, const ::metamoto::services::SensorInitializeRequest& request, ::metamoto::services::SensorInitializeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorInitializeReply>> AsyncInitialize(::grpc::ClientContext* context, const ::metamoto::services::SensorInitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorInitializeReply>>(AsyncInitializeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorInitializeReply>> PrepareAsyncInitialize(::grpc::ClientContext* context, const ::metamoto::services::SensorInitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorInitializeReply>>(PrepareAsyncInitializeRaw(context, request, cq));
    }
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::metamoto::services::SensorUpdateRequest& request, ::metamoto::services::SensorUpdateReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorUpdateReply>> AsyncUpdate(::grpc::ClientContext* context, const ::metamoto::services::SensorUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorUpdateReply>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorUpdateReply>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::metamoto::services::SensorUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorUpdateReply>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status Close(::grpc::ClientContext* context, const ::metamoto::services::SensorCloseRequest& request, ::metamoto::services::SensorCloseReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorCloseReply>> AsyncClose(::grpc::ClientContext* context, const ::metamoto::services::SensorCloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorCloseReply>>(AsyncCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorCloseReply>> PrepareAsyncClose(::grpc::ClientContext* context, const ::metamoto::services::SensorCloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorCloseReply>>(PrepareAsyncCloseRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Setup(::grpc::ClientContext* context, const ::metamoto::services::SensorSetupRequest* request, ::metamoto::services::SensorSetupReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Initialize(::grpc::ClientContext* context, const ::metamoto::services::SensorInitializeRequest* request, ::metamoto::services::SensorInitializeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::metamoto::services::SensorUpdateRequest* request, ::metamoto::services::SensorUpdateReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Close(::grpc::ClientContext* context, const ::metamoto::services::SensorCloseRequest* request, ::metamoto::services::SensorCloseReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorSetupReply>* AsyncSetupRaw(::grpc::ClientContext* context, const ::metamoto::services::SensorSetupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorSetupReply>* PrepareAsyncSetupRaw(::grpc::ClientContext* context, const ::metamoto::services::SensorSetupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorInitializeReply>* AsyncInitializeRaw(::grpc::ClientContext* context, const ::metamoto::services::SensorInitializeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorInitializeReply>* PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::metamoto::services::SensorInitializeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorUpdateReply>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::metamoto::services::SensorUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorUpdateReply>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::metamoto::services::SensorUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorCloseReply>* AsyncCloseRaw(::grpc::ClientContext* context, const ::metamoto::services::SensorCloseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::SensorCloseReply>* PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::metamoto::services::SensorCloseRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Setup(::grpc::ClientContext* context, const ::metamoto::services::SensorSetupRequest& request, ::metamoto::services::SensorSetupReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorSetupReply>> AsyncSetup(::grpc::ClientContext* context, const ::metamoto::services::SensorSetupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorSetupReply>>(AsyncSetupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorSetupReply>> PrepareAsyncSetup(::grpc::ClientContext* context, const ::metamoto::services::SensorSetupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorSetupReply>>(PrepareAsyncSetupRaw(context, request, cq));
    }
    ::grpc::Status Initialize(::grpc::ClientContext* context, const ::metamoto::services::SensorInitializeRequest& request, ::metamoto::services::SensorInitializeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorInitializeReply>> AsyncInitialize(::grpc::ClientContext* context, const ::metamoto::services::SensorInitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorInitializeReply>>(AsyncInitializeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorInitializeReply>> PrepareAsyncInitialize(::grpc::ClientContext* context, const ::metamoto::services::SensorInitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorInitializeReply>>(PrepareAsyncInitializeRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::metamoto::services::SensorUpdateRequest& request, ::metamoto::services::SensorUpdateReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorUpdateReply>> AsyncUpdate(::grpc::ClientContext* context, const ::metamoto::services::SensorUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorUpdateReply>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorUpdateReply>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::metamoto::services::SensorUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorUpdateReply>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status Close(::grpc::ClientContext* context, const ::metamoto::services::SensorCloseRequest& request, ::metamoto::services::SensorCloseReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorCloseReply>> AsyncClose(::grpc::ClientContext* context, const ::metamoto::services::SensorCloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorCloseReply>>(AsyncCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorCloseReply>> PrepareAsyncClose(::grpc::ClientContext* context, const ::metamoto::services::SensorCloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorCloseReply>>(PrepareAsyncCloseRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Setup(::grpc::ClientContext* context, const ::metamoto::services::SensorSetupRequest* request, ::metamoto::services::SensorSetupReply* response, std::function<void(::grpc::Status)>) override;
      void Initialize(::grpc::ClientContext* context, const ::metamoto::services::SensorInitializeRequest* request, ::metamoto::services::SensorInitializeReply* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::metamoto::services::SensorUpdateRequest* request, ::metamoto::services::SensorUpdateReply* response, std::function<void(::grpc::Status)>) override;
      void Close(::grpc::ClientContext* context, const ::metamoto::services::SensorCloseRequest* request, ::metamoto::services::SensorCloseReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorSetupReply>* AsyncSetupRaw(::grpc::ClientContext* context, const ::metamoto::services::SensorSetupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorSetupReply>* PrepareAsyncSetupRaw(::grpc::ClientContext* context, const ::metamoto::services::SensorSetupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorInitializeReply>* AsyncInitializeRaw(::grpc::ClientContext* context, const ::metamoto::services::SensorInitializeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorInitializeReply>* PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::metamoto::services::SensorInitializeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorUpdateReply>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::metamoto::services::SensorUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorUpdateReply>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::metamoto::services::SensorUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorCloseReply>* AsyncCloseRaw(::grpc::ClientContext* context, const ::metamoto::services::SensorCloseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::SensorCloseReply>* PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::metamoto::services::SensorCloseRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Setup_;
    const ::grpc::internal::RpcMethod rpcmethod_Initialize_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_Close_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Setup(::grpc::ServerContext* context, const ::metamoto::services::SensorSetupRequest* request, ::metamoto::services::SensorSetupReply* response);
    virtual ::grpc::Status Initialize(::grpc::ServerContext* context, const ::metamoto::services::SensorInitializeRequest* request, ::metamoto::services::SensorInitializeReply* response);
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::metamoto::services::SensorUpdateRequest* request, ::metamoto::services::SensorUpdateReply* response);
    virtual ::grpc::Status Close(::grpc::ServerContext* context, const ::metamoto::services::SensorCloseRequest* request, ::metamoto::services::SensorCloseReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Setup() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Setup(::grpc::ServerContext* context, const ::metamoto::services::SensorSetupRequest* request, ::metamoto::services::SensorSetupReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetup(::grpc::ServerContext* context, ::metamoto::services::SensorSetupRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::SensorSetupReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Initialize() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* context, const ::metamoto::services::SensorInitializeRequest* request, ::metamoto::services::SensorInitializeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitialize(::grpc::ServerContext* context, ::metamoto::services::SensorInitializeRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::SensorInitializeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::metamoto::services::SensorUpdateRequest* request, ::metamoto::services::SensorUpdateReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::metamoto::services::SensorUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::SensorUpdateReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Close() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* context, const ::metamoto::services::SensorCloseRequest* request, ::metamoto::services::SensorCloseReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClose(::grpc::ServerContext* context, ::metamoto::services::SensorCloseRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::SensorCloseReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Setup<WithAsyncMethod_Initialize<WithAsyncMethod_Update<WithAsyncMethod_Close<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Setup() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::SensorSetupRequest, ::metamoto::services::SensorSetupReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::SensorSetupRequest* request,
                 ::metamoto::services::SensorSetupReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Setup(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Setup(::grpc::ServerContext* context, const ::metamoto::services::SensorSetupRequest* request, ::metamoto::services::SensorSetupReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Setup(::grpc::ServerContext* context, const ::metamoto::services::SensorSetupRequest* request, ::metamoto::services::SensorSetupReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Initialize() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::SensorInitializeRequest, ::metamoto::services::SensorInitializeReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::SensorInitializeRequest* request,
                 ::metamoto::services::SensorInitializeReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Initialize(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* context, const ::metamoto::services::SensorInitializeRequest* request, ::metamoto::services::SensorInitializeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Initialize(::grpc::ServerContext* context, const ::metamoto::services::SensorInitializeRequest* request, ::metamoto::services::SensorInitializeReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Update() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::SensorUpdateRequest, ::metamoto::services::SensorUpdateReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::SensorUpdateRequest* request,
                 ::metamoto::services::SensorUpdateReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Update(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::metamoto::services::SensorUpdateRequest* request, ::metamoto::services::SensorUpdateReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Update(::grpc::ServerContext* context, const ::metamoto::services::SensorUpdateRequest* request, ::metamoto::services::SensorUpdateReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Close() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::SensorCloseRequest, ::metamoto::services::SensorCloseReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::SensorCloseRequest* request,
                 ::metamoto::services::SensorCloseReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Close(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* context, const ::metamoto::services::SensorCloseRequest* request, ::metamoto::services::SensorCloseReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Close(::grpc::ServerContext* context, const ::metamoto::services::SensorCloseRequest* request, ::metamoto::services::SensorCloseReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Setup<ExperimentalWithCallbackMethod_Initialize<ExperimentalWithCallbackMethod_Update<ExperimentalWithCallbackMethod_Close<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Setup() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Setup(::grpc::ServerContext* context, const ::metamoto::services::SensorSetupRequest* request, ::metamoto::services::SensorSetupReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Initialize() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* context, const ::metamoto::services::SensorInitializeRequest* request, ::metamoto::services::SensorInitializeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::metamoto::services::SensorUpdateRequest* request, ::metamoto::services::SensorUpdateReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Close() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* context, const ::metamoto::services::SensorCloseRequest* request, ::metamoto::services::SensorCloseReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Setup() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Setup(::grpc::ServerContext* context, const ::metamoto::services::SensorSetupRequest* request, ::metamoto::services::SensorSetupReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Initialize() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* context, const ::metamoto::services::SensorInitializeRequest* request, ::metamoto::services::SensorInitializeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitialize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::metamoto::services::SensorUpdateRequest* request, ::metamoto::services::SensorUpdateReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Close() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* context, const ::metamoto::services::SensorCloseRequest* request, ::metamoto::services::SensorCloseReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Setup() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Setup(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Setup(::grpc::ServerContext* context, const ::metamoto::services::SensorSetupRequest* request, ::metamoto::services::SensorSetupReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Setup(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Initialize() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Initialize(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* context, const ::metamoto::services::SensorInitializeRequest* request, ::metamoto::services::SensorInitializeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Initialize(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Update() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Update(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::metamoto::services::SensorUpdateRequest* request, ::metamoto::services::SensorUpdateReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Update(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Close() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Close(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* context, const ::metamoto::services::SensorCloseRequest* request, ::metamoto::services::SensorCloseReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Close(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Setup() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::SensorSetupRequest, ::metamoto::services::SensorSetupReply>(std::bind(&WithStreamedUnaryMethod_Setup<BaseClass>::StreamedSetup, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Setup(::grpc::ServerContext* context, const ::metamoto::services::SensorSetupRequest* request, ::metamoto::services::SensorSetupReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::SensorSetupRequest,::metamoto::services::SensorSetupReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Initialize() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::SensorInitializeRequest, ::metamoto::services::SensorInitializeReply>(std::bind(&WithStreamedUnaryMethod_Initialize<BaseClass>::StreamedInitialize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* context, const ::metamoto::services::SensorInitializeRequest* request, ::metamoto::services::SensorInitializeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitialize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::SensorInitializeRequest,::metamoto::services::SensorInitializeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::SensorUpdateRequest, ::metamoto::services::SensorUpdateReply>(std::bind(&WithStreamedUnaryMethod_Update<BaseClass>::StreamedUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::metamoto::services::SensorUpdateRequest* request, ::metamoto::services::SensorUpdateReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::SensorUpdateRequest,::metamoto::services::SensorUpdateReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Close() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::SensorCloseRequest, ::metamoto::services::SensorCloseReply>(std::bind(&WithStreamedUnaryMethod_Close<BaseClass>::StreamedClose, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Close(::grpc::ServerContext* context, const ::metamoto::services::SensorCloseRequest* request, ::metamoto::services::SensorCloseReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::SensorCloseRequest,::metamoto::services::SensorCloseReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Setup<WithStreamedUnaryMethod_Initialize<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Close<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Setup<WithStreamedUnaryMethod_Initialize<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Close<Service > > > > StreamedService;
};

}  // namespace services
}  // namespace metamoto


#endif  // GRPC_metamoto_2fservices_2fsensor_2eproto__INCLUDED
