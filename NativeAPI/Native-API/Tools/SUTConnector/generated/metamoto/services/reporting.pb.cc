// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/services/reporting.proto

#include "metamoto/services/reporting.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_metamoto_2fmessages_2flog_5fmessage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2flog_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LogMessage;
}  // namespace protobuf_metamoto_2fmessages_2flog_5fmessage_2eproto
namespace protobuf_metamoto_2fmessages_2fvisualization_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fmessages_2fvisualization_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Visualization;
}  // namespace protobuf_metamoto_2fmessages_2fvisualization_2eproto
namespace metamoto {
namespace services {
class ReportingAddTimeSeriesValueRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportingAddTimeSeriesValueRequest>
      _instance;
} _ReportingAddTimeSeriesValueRequest_default_instance_;
class ReportingAddTimeSeriesValueReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportingAddTimeSeriesValueReply>
      _instance;
} _ReportingAddTimeSeriesValueReply_default_instance_;
class ReportingLogRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportingLogRequest>
      _instance;
} _ReportingLogRequest_default_instance_;
class ReportingLogReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportingLogReply>
      _instance;
} _ReportingLogReply_default_instance_;
class ReportingReportEventRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportingReportEventRequest>
      _instance;
} _ReportingReportEventRequest_default_instance_;
class ReportingReportEventReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportingReportEventReply>
      _instance;
} _ReportingReportEventReply_default_instance_;
class ReportingVisualizeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportingVisualizeRequest>
      _instance;
} _ReportingVisualizeRequest_default_instance_;
class ReportingVisualizeReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportingVisualizeReply>
      _instance;
} _ReportingVisualizeReply_default_instance_;
}  // namespace services
}  // namespace metamoto
namespace protobuf_metamoto_2fservices_2freporting_2eproto {
static void InitDefaultsReportingAddTimeSeriesValueRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_ReportingAddTimeSeriesValueRequest_default_instance_;
    new (ptr) ::metamoto::services::ReportingAddTimeSeriesValueRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::ReportingAddTimeSeriesValueRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReportingAddTimeSeriesValueRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReportingAddTimeSeriesValueRequest}, {}};

static void InitDefaultsReportingAddTimeSeriesValueReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_ReportingAddTimeSeriesValueReply_default_instance_;
    new (ptr) ::metamoto::services::ReportingAddTimeSeriesValueReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::ReportingAddTimeSeriesValueReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReportingAddTimeSeriesValueReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReportingAddTimeSeriesValueReply}, {}};

static void InitDefaultsReportingLogRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_ReportingLogRequest_default_instance_;
    new (ptr) ::metamoto::services::ReportingLogRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::ReportingLogRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReportingLogRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReportingLogRequest}, {
      &protobuf_metamoto_2fmessages_2flog_5fmessage_2eproto::scc_info_LogMessage.base,}};

static void InitDefaultsReportingLogReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_ReportingLogReply_default_instance_;
    new (ptr) ::metamoto::services::ReportingLogReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::ReportingLogReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReportingLogReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReportingLogReply}, {}};

static void InitDefaultsReportingReportEventRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_ReportingReportEventRequest_default_instance_;
    new (ptr) ::metamoto::services::ReportingReportEventRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::ReportingReportEventRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReportingReportEventRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReportingReportEventRequest}, {}};

static void InitDefaultsReportingReportEventReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_ReportingReportEventReply_default_instance_;
    new (ptr) ::metamoto::services::ReportingReportEventReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::ReportingReportEventReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReportingReportEventReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReportingReportEventReply}, {}};

static void InitDefaultsReportingVisualizeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_ReportingVisualizeRequest_default_instance_;
    new (ptr) ::metamoto::services::ReportingVisualizeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::ReportingVisualizeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReportingVisualizeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReportingVisualizeRequest}, {
      &protobuf_metamoto_2fmessages_2fvisualization_2eproto::scc_info_Visualization.base,}};

static void InitDefaultsReportingVisualizeReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_ReportingVisualizeReply_default_instance_;
    new (ptr) ::metamoto::services::ReportingVisualizeReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::ReportingVisualizeReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReportingVisualizeReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReportingVisualizeReply}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ReportingAddTimeSeriesValueRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportingAddTimeSeriesValueReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportingLogRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportingLogReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportingReportEventRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportingReportEventReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportingVisualizeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportingVisualizeReply.base);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingAddTimeSeriesValueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingAddTimeSeriesValueRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingAddTimeSeriesValueRequest, units_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingAddTimeSeriesValueRequest, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingAddTimeSeriesValueRequest, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingAddTimeSeriesValueRequest, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingAddTimeSeriesValueRequest, ego_vehicle_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingAddTimeSeriesValueReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingLogRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingLogRequest, log_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingLogRequest, ego_vehicle_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingLogReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingReportEventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingReportEventRequest, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingReportEventRequest, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingReportEventRequest, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingReportEventRequest, ego_vehicle_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingReportEventReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingVisualizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingVisualizeRequest, visualization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingVisualizeRequest, ego_vehicle_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::ReportingVisualizeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::services::ReportingAddTimeSeriesValueRequest)},
  { 11, -1, sizeof(::metamoto::services::ReportingAddTimeSeriesValueReply)},
  { 16, -1, sizeof(::metamoto::services::ReportingLogRequest)},
  { 23, -1, sizeof(::metamoto::services::ReportingLogReply)},
  { 28, -1, sizeof(::metamoto::services::ReportingReportEventRequest)},
  { 37, -1, sizeof(::metamoto::services::ReportingReportEventReply)},
  { 42, -1, sizeof(::metamoto::services::ReportingVisualizeRequest)},
  { 49, -1, sizeof(::metamoto::services::ReportingVisualizeReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_ReportingAddTimeSeriesValueRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_ReportingAddTimeSeriesValueReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_ReportingLogRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_ReportingLogReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_ReportingReportEventRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_ReportingReportEventReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_ReportingVisualizeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_ReportingVisualizeReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/services/reporting.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!metamoto/services/reporting.proto\022\021met"
      "amoto.services\032#metamoto/messages/log_me"
      "ssage.proto\032%metamoto/messages/visualiza"
      "tion.proto\032!metamoto/types/enumerations."
      "proto\"\213\001\n\"ReportingAddTimeSeriesValueReq"
      "uest\022\014\n\004name\030\001 \001(\t\022\r\n\005units\030\002 \001(\t\022\023\n\013des"
      "cription\030\003 \001(\t\022\014\n\004time\030\004 \001(\001\022\r\n\005value\030\005 "
      "\001(\002\022\026\n\016ego_vehicle_id\030\006 \001(\t\"\"\n Reporting"
      "AddTimeSeriesValueReply\"a\n\023ReportingLogR"
      "equest\0222\n\013log_message\030\001 \001(\0132\035.metamoto.m"
      "essages.LogMessage\022\026\n\016ego_vehicle_id\030\002 \001"
      "(\t\"\023\n\021ReportingLogReply\"\200\001\n\033ReportingRep"
      "ortEventRequest\022\014\n\004time\030\001 \001(\001\022&\n\006action\030"
      "\002 \001(\0162\026.metamoto.types.Action\022\023\n\013descrip"
      "tion\030\003 \001(\t\022\026\n\016ego_vehicle_id\030\004 \001(\t\"\033\n\031Re"
      "portingReportEventReply\"l\n\031ReportingVisu"
      "alizeRequest\0227\n\rvisualization\030\001 \001(\0132 .me"
      "tamoto.messages.Visualization\022\026\n\016ego_veh"
      "icle_id\030\002 \001(\t\"\031\n\027ReportingVisualizeReply"
      "2\277\003\n\tReporting\022\202\001\n\022AddTimeSeriesValue\0225."
      "metamoto.services.ReportingAddTimeSeries"
      "ValueRequest\0323.metamoto.services.Reporti"
      "ngAddTimeSeriesValueReply\"\000\022U\n\003Log\022&.met"
      "amoto.services.ReportingLogRequest\032$.met"
      "amoto.services.ReportingLogReply\"\000\022m\n\013Re"
      "portEvent\022..metamoto.services.ReportingR"
      "eportEventRequest\032,.metamoto.services.Re"
      "portingReportEventReply\"\000\022g\n\tVisualize\022,"
      ".metamoto.services.ReportingVisualizeReq"
      "uest\032*.metamoto.services.ReportingVisual"
      "izeReply\"\000B\024\252\002\021Metamoto.Servicesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1240);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/services/reporting.proto", &protobuf_RegisterTypes);
  ::protobuf_metamoto_2fmessages_2flog_5fmessage_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fmessages_2fvisualization_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fenumerations_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2fservices_2freporting_2eproto
namespace metamoto {
namespace services {

// ===================================================================

void ReportingAddTimeSeriesValueRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportingAddTimeSeriesValueRequest::kNameFieldNumber;
const int ReportingAddTimeSeriesValueRequest::kUnitsFieldNumber;
const int ReportingAddTimeSeriesValueRequest::kDescriptionFieldNumber;
const int ReportingAddTimeSeriesValueRequest::kTimeFieldNumber;
const int ReportingAddTimeSeriesValueRequest::kValueFieldNumber;
const int ReportingAddTimeSeriesValueRequest::kEgoVehicleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportingAddTimeSeriesValueRequest::ReportingAddTimeSeriesValueRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingAddTimeSeriesValueRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.ReportingAddTimeSeriesValueRequest)
}
ReportingAddTimeSeriesValueRequest::ReportingAddTimeSeriesValueRequest(const ReportingAddTimeSeriesValueRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  units_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.units().size() > 0) {
    units_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.units_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ego_vehicle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ego_vehicle_id().size() > 0) {
    ego_vehicle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ego_vehicle_id_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&time_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:metamoto.services.ReportingAddTimeSeriesValueRequest)
}

void ReportingAddTimeSeriesValueRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  units_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ego_vehicle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&time_)) + sizeof(value_));
}

ReportingAddTimeSeriesValueRequest::~ReportingAddTimeSeriesValueRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.ReportingAddTimeSeriesValueRequest)
  SharedDtor();
}

void ReportingAddTimeSeriesValueRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  units_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ego_vehicle_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReportingAddTimeSeriesValueRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReportingAddTimeSeriesValueRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2freporting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2freporting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportingAddTimeSeriesValueRequest& ReportingAddTimeSeriesValueRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingAddTimeSeriesValueRequest.base);
  return *internal_default_instance();
}


void ReportingAddTimeSeriesValueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.ReportingAddTimeSeriesValueRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  units_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ego_vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&time_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

bool ReportingAddTimeSeriesValueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.ReportingAddTimeSeriesValueRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.services.ReportingAddTimeSeriesValueRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string units = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->units().data(), static_cast<int>(this->units().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.services.ReportingAddTimeSeriesValueRequest.units"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.services.ReportingAddTimeSeriesValueRequest.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ego_vehicle_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ego_vehicle_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ego_vehicle_id().data(), static_cast<int>(this->ego_vehicle_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.services.ReportingAddTimeSeriesValueRequest.ego_vehicle_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.ReportingAddTimeSeriesValueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.ReportingAddTimeSeriesValueRequest)
  return false;
#undef DO_
}

void ReportingAddTimeSeriesValueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.ReportingAddTimeSeriesValueRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.ReportingAddTimeSeriesValueRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string units = 2;
  if (this->units().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->units().data(), static_cast<int>(this->units().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.ReportingAddTimeSeriesValueRequest.units");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->units(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.ReportingAddTimeSeriesValueRequest.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // double time = 4;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->time(), output);
  }

  // float value = 5;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->value(), output);
  }

  // string ego_vehicle_id = 6;
  if (this->ego_vehicle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ego_vehicle_id().data(), static_cast<int>(this->ego_vehicle_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.ReportingAddTimeSeriesValueRequest.ego_vehicle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ego_vehicle_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.ReportingAddTimeSeriesValueRequest)
}

::google::protobuf::uint8* ReportingAddTimeSeriesValueRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.ReportingAddTimeSeriesValueRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.ReportingAddTimeSeriesValueRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string units = 2;
  if (this->units().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->units().data(), static_cast<int>(this->units().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.ReportingAddTimeSeriesValueRequest.units");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->units(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.ReportingAddTimeSeriesValueRequest.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // double time = 4;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->time(), target);
  }

  // float value = 5;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->value(), target);
  }

  // string ego_vehicle_id = 6;
  if (this->ego_vehicle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ego_vehicle_id().data(), static_cast<int>(this->ego_vehicle_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.ReportingAddTimeSeriesValueRequest.ego_vehicle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ego_vehicle_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.ReportingAddTimeSeriesValueRequest)
  return target;
}

size_t ReportingAddTimeSeriesValueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.ReportingAddTimeSeriesValueRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string units = 2;
  if (this->units().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->units());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string ego_vehicle_id = 6;
  if (this->ego_vehicle_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ego_vehicle_id());
  }

  // double time = 4;
  if (this->time() != 0) {
    total_size += 1 + 8;
  }

  // float value = 5;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportingAddTimeSeriesValueRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.ReportingAddTimeSeriesValueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportingAddTimeSeriesValueRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportingAddTimeSeriesValueRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.ReportingAddTimeSeriesValueRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.ReportingAddTimeSeriesValueRequest)
    MergeFrom(*source);
  }
}

void ReportingAddTimeSeriesValueRequest::MergeFrom(const ReportingAddTimeSeriesValueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.ReportingAddTimeSeriesValueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.units().size() > 0) {

    units_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.units_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.ego_vehicle_id().size() > 0) {

    ego_vehicle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ego_vehicle_id_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void ReportingAddTimeSeriesValueRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.ReportingAddTimeSeriesValueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportingAddTimeSeriesValueRequest::CopyFrom(const ReportingAddTimeSeriesValueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.ReportingAddTimeSeriesValueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportingAddTimeSeriesValueRequest::IsInitialized() const {
  return true;
}

void ReportingAddTimeSeriesValueRequest::Swap(ReportingAddTimeSeriesValueRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportingAddTimeSeriesValueRequest::InternalSwap(ReportingAddTimeSeriesValueRequest* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  units_.Swap(&other->units_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ego_vehicle_id_.Swap(&other->ego_vehicle_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReportingAddTimeSeriesValueRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2freporting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2freporting_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReportingAddTimeSeriesValueReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportingAddTimeSeriesValueReply::ReportingAddTimeSeriesValueReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingAddTimeSeriesValueReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.ReportingAddTimeSeriesValueReply)
}
ReportingAddTimeSeriesValueReply::ReportingAddTimeSeriesValueReply(const ReportingAddTimeSeriesValueReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.services.ReportingAddTimeSeriesValueReply)
}

void ReportingAddTimeSeriesValueReply::SharedCtor() {
}

ReportingAddTimeSeriesValueReply::~ReportingAddTimeSeriesValueReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.ReportingAddTimeSeriesValueReply)
  SharedDtor();
}

void ReportingAddTimeSeriesValueReply::SharedDtor() {
}

void ReportingAddTimeSeriesValueReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReportingAddTimeSeriesValueReply::descriptor() {
  ::protobuf_metamoto_2fservices_2freporting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2freporting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportingAddTimeSeriesValueReply& ReportingAddTimeSeriesValueReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingAddTimeSeriesValueReply.base);
  return *internal_default_instance();
}


void ReportingAddTimeSeriesValueReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.ReportingAddTimeSeriesValueReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ReportingAddTimeSeriesValueReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.ReportingAddTimeSeriesValueReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.ReportingAddTimeSeriesValueReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.ReportingAddTimeSeriesValueReply)
  return false;
#undef DO_
}

void ReportingAddTimeSeriesValueReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.ReportingAddTimeSeriesValueReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.ReportingAddTimeSeriesValueReply)
}

::google::protobuf::uint8* ReportingAddTimeSeriesValueReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.ReportingAddTimeSeriesValueReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.ReportingAddTimeSeriesValueReply)
  return target;
}

size_t ReportingAddTimeSeriesValueReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.ReportingAddTimeSeriesValueReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportingAddTimeSeriesValueReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.ReportingAddTimeSeriesValueReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportingAddTimeSeriesValueReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportingAddTimeSeriesValueReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.ReportingAddTimeSeriesValueReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.ReportingAddTimeSeriesValueReply)
    MergeFrom(*source);
  }
}

void ReportingAddTimeSeriesValueReply::MergeFrom(const ReportingAddTimeSeriesValueReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.ReportingAddTimeSeriesValueReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReportingAddTimeSeriesValueReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.ReportingAddTimeSeriesValueReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportingAddTimeSeriesValueReply::CopyFrom(const ReportingAddTimeSeriesValueReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.ReportingAddTimeSeriesValueReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportingAddTimeSeriesValueReply::IsInitialized() const {
  return true;
}

void ReportingAddTimeSeriesValueReply::Swap(ReportingAddTimeSeriesValueReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportingAddTimeSeriesValueReply::InternalSwap(ReportingAddTimeSeriesValueReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReportingAddTimeSeriesValueReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2freporting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2freporting_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReportingLogRequest::InitAsDefaultInstance() {
  ::metamoto::services::_ReportingLogRequest_default_instance_._instance.get_mutable()->log_message_ = const_cast< ::metamoto::messages::LogMessage*>(
      ::metamoto::messages::LogMessage::internal_default_instance());
}
void ReportingLogRequest::clear_log_message() {
  if (GetArenaNoVirtual() == NULL && log_message_ != NULL) {
    delete log_message_;
  }
  log_message_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportingLogRequest::kLogMessageFieldNumber;
const int ReportingLogRequest::kEgoVehicleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportingLogRequest::ReportingLogRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingLogRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.ReportingLogRequest)
}
ReportingLogRequest::ReportingLogRequest(const ReportingLogRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ego_vehicle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ego_vehicle_id().size() > 0) {
    ego_vehicle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ego_vehicle_id_);
  }
  if (from.has_log_message()) {
    log_message_ = new ::metamoto::messages::LogMessage(*from.log_message_);
  } else {
    log_message_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.services.ReportingLogRequest)
}

void ReportingLogRequest::SharedCtor() {
  ego_vehicle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_message_ = NULL;
}

ReportingLogRequest::~ReportingLogRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.ReportingLogRequest)
  SharedDtor();
}

void ReportingLogRequest::SharedDtor() {
  ego_vehicle_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete log_message_;
}

void ReportingLogRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReportingLogRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2freporting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2freporting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportingLogRequest& ReportingLogRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingLogRequest.base);
  return *internal_default_instance();
}


void ReportingLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.ReportingLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ego_vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && log_message_ != NULL) {
    delete log_message_;
  }
  log_message_ = NULL;
  _internal_metadata_.Clear();
}

bool ReportingLogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.ReportingLogRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.messages.LogMessage log_message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_log_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ego_vehicle_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ego_vehicle_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ego_vehicle_id().data(), static_cast<int>(this->ego_vehicle_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.services.ReportingLogRequest.ego_vehicle_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.ReportingLogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.ReportingLogRequest)
  return false;
#undef DO_
}

void ReportingLogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.ReportingLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.messages.LogMessage log_message = 1;
  if (this->has_log_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_log_message(), output);
  }

  // string ego_vehicle_id = 2;
  if (this->ego_vehicle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ego_vehicle_id().data(), static_cast<int>(this->ego_vehicle_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.ReportingLogRequest.ego_vehicle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ego_vehicle_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.ReportingLogRequest)
}

::google::protobuf::uint8* ReportingLogRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.ReportingLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.messages.LogMessage log_message = 1;
  if (this->has_log_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_log_message(), deterministic, target);
  }

  // string ego_vehicle_id = 2;
  if (this->ego_vehicle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ego_vehicle_id().data(), static_cast<int>(this->ego_vehicle_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.ReportingLogRequest.ego_vehicle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ego_vehicle_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.ReportingLogRequest)
  return target;
}

size_t ReportingLogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.ReportingLogRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ego_vehicle_id = 2;
  if (this->ego_vehicle_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ego_vehicle_id());
  }

  // .metamoto.messages.LogMessage log_message = 1;
  if (this->has_log_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *log_message_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportingLogRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.ReportingLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportingLogRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportingLogRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.ReportingLogRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.ReportingLogRequest)
    MergeFrom(*source);
  }
}

void ReportingLogRequest::MergeFrom(const ReportingLogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.ReportingLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ego_vehicle_id().size() > 0) {

    ego_vehicle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ego_vehicle_id_);
  }
  if (from.has_log_message()) {
    mutable_log_message()->::metamoto::messages::LogMessage::MergeFrom(from.log_message());
  }
}

void ReportingLogRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.ReportingLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportingLogRequest::CopyFrom(const ReportingLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.ReportingLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportingLogRequest::IsInitialized() const {
  return true;
}

void ReportingLogRequest::Swap(ReportingLogRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportingLogRequest::InternalSwap(ReportingLogRequest* other) {
  using std::swap;
  ego_vehicle_id_.Swap(&other->ego_vehicle_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(log_message_, other->log_message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReportingLogRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2freporting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2freporting_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReportingLogReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportingLogReply::ReportingLogReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingLogReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.ReportingLogReply)
}
ReportingLogReply::ReportingLogReply(const ReportingLogReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.services.ReportingLogReply)
}

void ReportingLogReply::SharedCtor() {
}

ReportingLogReply::~ReportingLogReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.ReportingLogReply)
  SharedDtor();
}

void ReportingLogReply::SharedDtor() {
}

void ReportingLogReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReportingLogReply::descriptor() {
  ::protobuf_metamoto_2fservices_2freporting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2freporting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportingLogReply& ReportingLogReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingLogReply.base);
  return *internal_default_instance();
}


void ReportingLogReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.ReportingLogReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ReportingLogReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.ReportingLogReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.ReportingLogReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.ReportingLogReply)
  return false;
#undef DO_
}

void ReportingLogReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.ReportingLogReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.ReportingLogReply)
}

::google::protobuf::uint8* ReportingLogReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.ReportingLogReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.ReportingLogReply)
  return target;
}

size_t ReportingLogReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.ReportingLogReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportingLogReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.ReportingLogReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportingLogReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportingLogReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.ReportingLogReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.ReportingLogReply)
    MergeFrom(*source);
  }
}

void ReportingLogReply::MergeFrom(const ReportingLogReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.ReportingLogReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReportingLogReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.ReportingLogReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportingLogReply::CopyFrom(const ReportingLogReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.ReportingLogReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportingLogReply::IsInitialized() const {
  return true;
}

void ReportingLogReply::Swap(ReportingLogReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportingLogReply::InternalSwap(ReportingLogReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReportingLogReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2freporting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2freporting_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReportingReportEventRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportingReportEventRequest::kTimeFieldNumber;
const int ReportingReportEventRequest::kActionFieldNumber;
const int ReportingReportEventRequest::kDescriptionFieldNumber;
const int ReportingReportEventRequest::kEgoVehicleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportingReportEventRequest::ReportingReportEventRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingReportEventRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.ReportingReportEventRequest)
}
ReportingReportEventRequest::ReportingReportEventRequest(const ReportingReportEventRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ego_vehicle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ego_vehicle_id().size() > 0) {
    ego_vehicle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ego_vehicle_id_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&time_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:metamoto.services.ReportingReportEventRequest)
}

void ReportingReportEventRequest::SharedCtor() {
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ego_vehicle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&time_)) + sizeof(action_));
}

ReportingReportEventRequest::~ReportingReportEventRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.ReportingReportEventRequest)
  SharedDtor();
}

void ReportingReportEventRequest::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ego_vehicle_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReportingReportEventRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReportingReportEventRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2freporting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2freporting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportingReportEventRequest& ReportingReportEventRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingReportEventRequest.base);
  return *internal_default_instance();
}


void ReportingReportEventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.ReportingReportEventRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ego_vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&time_)) + sizeof(action_));
  _internal_metadata_.Clear();
}

bool ReportingReportEventRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.ReportingReportEventRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Action action = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::metamoto::types::Action >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.services.ReportingReportEventRequest.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ego_vehicle_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ego_vehicle_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ego_vehicle_id().data(), static_cast<int>(this->ego_vehicle_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.services.ReportingReportEventRequest.ego_vehicle_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.ReportingReportEventRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.ReportingReportEventRequest)
  return false;
#undef DO_
}

void ReportingReportEventRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.ReportingReportEventRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time(), output);
  }

  // .metamoto.types.Action action = 2;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.ReportingReportEventRequest.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // string ego_vehicle_id = 4;
  if (this->ego_vehicle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ego_vehicle_id().data(), static_cast<int>(this->ego_vehicle_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.ReportingReportEventRequest.ego_vehicle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ego_vehicle_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.ReportingReportEventRequest)
}

::google::protobuf::uint8* ReportingReportEventRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.ReportingReportEventRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time(), target);
  }

  // .metamoto.types.Action action = 2;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.ReportingReportEventRequest.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // string ego_vehicle_id = 4;
  if (this->ego_vehicle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ego_vehicle_id().data(), static_cast<int>(this->ego_vehicle_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.ReportingReportEventRequest.ego_vehicle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ego_vehicle_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.ReportingReportEventRequest)
  return target;
}

size_t ReportingReportEventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.ReportingReportEventRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string ego_vehicle_id = 4;
  if (this->ego_vehicle_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ego_vehicle_id());
  }

  // double time = 1;
  if (this->time() != 0) {
    total_size += 1 + 8;
  }

  // .metamoto.types.Action action = 2;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportingReportEventRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.ReportingReportEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportingReportEventRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportingReportEventRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.ReportingReportEventRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.ReportingReportEventRequest)
    MergeFrom(*source);
  }
}

void ReportingReportEventRequest::MergeFrom(const ReportingReportEventRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.ReportingReportEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.ego_vehicle_id().size() > 0) {

    ego_vehicle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ego_vehicle_id_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void ReportingReportEventRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.ReportingReportEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportingReportEventRequest::CopyFrom(const ReportingReportEventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.ReportingReportEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportingReportEventRequest::IsInitialized() const {
  return true;
}

void ReportingReportEventRequest::Swap(ReportingReportEventRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportingReportEventRequest::InternalSwap(ReportingReportEventRequest* other) {
  using std::swap;
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ego_vehicle_id_.Swap(&other->ego_vehicle_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(action_, other->action_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReportingReportEventRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2freporting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2freporting_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReportingReportEventReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportingReportEventReply::ReportingReportEventReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingReportEventReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.ReportingReportEventReply)
}
ReportingReportEventReply::ReportingReportEventReply(const ReportingReportEventReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.services.ReportingReportEventReply)
}

void ReportingReportEventReply::SharedCtor() {
}

ReportingReportEventReply::~ReportingReportEventReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.ReportingReportEventReply)
  SharedDtor();
}

void ReportingReportEventReply::SharedDtor() {
}

void ReportingReportEventReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReportingReportEventReply::descriptor() {
  ::protobuf_metamoto_2fservices_2freporting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2freporting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportingReportEventReply& ReportingReportEventReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingReportEventReply.base);
  return *internal_default_instance();
}


void ReportingReportEventReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.ReportingReportEventReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ReportingReportEventReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.ReportingReportEventReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.ReportingReportEventReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.ReportingReportEventReply)
  return false;
#undef DO_
}

void ReportingReportEventReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.ReportingReportEventReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.ReportingReportEventReply)
}

::google::protobuf::uint8* ReportingReportEventReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.ReportingReportEventReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.ReportingReportEventReply)
  return target;
}

size_t ReportingReportEventReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.ReportingReportEventReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportingReportEventReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.ReportingReportEventReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportingReportEventReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportingReportEventReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.ReportingReportEventReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.ReportingReportEventReply)
    MergeFrom(*source);
  }
}

void ReportingReportEventReply::MergeFrom(const ReportingReportEventReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.ReportingReportEventReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReportingReportEventReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.ReportingReportEventReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportingReportEventReply::CopyFrom(const ReportingReportEventReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.ReportingReportEventReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportingReportEventReply::IsInitialized() const {
  return true;
}

void ReportingReportEventReply::Swap(ReportingReportEventReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportingReportEventReply::InternalSwap(ReportingReportEventReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReportingReportEventReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2freporting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2freporting_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReportingVisualizeRequest::InitAsDefaultInstance() {
  ::metamoto::services::_ReportingVisualizeRequest_default_instance_._instance.get_mutable()->visualization_ = const_cast< ::metamoto::messages::Visualization*>(
      ::metamoto::messages::Visualization::internal_default_instance());
}
void ReportingVisualizeRequest::clear_visualization() {
  if (GetArenaNoVirtual() == NULL && visualization_ != NULL) {
    delete visualization_;
  }
  visualization_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportingVisualizeRequest::kVisualizationFieldNumber;
const int ReportingVisualizeRequest::kEgoVehicleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportingVisualizeRequest::ReportingVisualizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingVisualizeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.ReportingVisualizeRequest)
}
ReportingVisualizeRequest::ReportingVisualizeRequest(const ReportingVisualizeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ego_vehicle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ego_vehicle_id().size() > 0) {
    ego_vehicle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ego_vehicle_id_);
  }
  if (from.has_visualization()) {
    visualization_ = new ::metamoto::messages::Visualization(*from.visualization_);
  } else {
    visualization_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.services.ReportingVisualizeRequest)
}

void ReportingVisualizeRequest::SharedCtor() {
  ego_vehicle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visualization_ = NULL;
}

ReportingVisualizeRequest::~ReportingVisualizeRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.ReportingVisualizeRequest)
  SharedDtor();
}

void ReportingVisualizeRequest::SharedDtor() {
  ego_vehicle_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete visualization_;
}

void ReportingVisualizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReportingVisualizeRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2freporting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2freporting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportingVisualizeRequest& ReportingVisualizeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingVisualizeRequest.base);
  return *internal_default_instance();
}


void ReportingVisualizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.ReportingVisualizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ego_vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && visualization_ != NULL) {
    delete visualization_;
  }
  visualization_ = NULL;
  _internal_metadata_.Clear();
}

bool ReportingVisualizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.ReportingVisualizeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.messages.Visualization visualization = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_visualization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ego_vehicle_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ego_vehicle_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ego_vehicle_id().data(), static_cast<int>(this->ego_vehicle_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.services.ReportingVisualizeRequest.ego_vehicle_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.ReportingVisualizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.ReportingVisualizeRequest)
  return false;
#undef DO_
}

void ReportingVisualizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.ReportingVisualizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.messages.Visualization visualization = 1;
  if (this->has_visualization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_visualization(), output);
  }

  // string ego_vehicle_id = 2;
  if (this->ego_vehicle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ego_vehicle_id().data(), static_cast<int>(this->ego_vehicle_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.ReportingVisualizeRequest.ego_vehicle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ego_vehicle_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.ReportingVisualizeRequest)
}

::google::protobuf::uint8* ReportingVisualizeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.ReportingVisualizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.messages.Visualization visualization = 1;
  if (this->has_visualization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_visualization(), deterministic, target);
  }

  // string ego_vehicle_id = 2;
  if (this->ego_vehicle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ego_vehicle_id().data(), static_cast<int>(this->ego_vehicle_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.ReportingVisualizeRequest.ego_vehicle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ego_vehicle_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.ReportingVisualizeRequest)
  return target;
}

size_t ReportingVisualizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.ReportingVisualizeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ego_vehicle_id = 2;
  if (this->ego_vehicle_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ego_vehicle_id());
  }

  // .metamoto.messages.Visualization visualization = 1;
  if (this->has_visualization()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *visualization_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportingVisualizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.ReportingVisualizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportingVisualizeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportingVisualizeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.ReportingVisualizeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.ReportingVisualizeRequest)
    MergeFrom(*source);
  }
}

void ReportingVisualizeRequest::MergeFrom(const ReportingVisualizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.ReportingVisualizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ego_vehicle_id().size() > 0) {

    ego_vehicle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ego_vehicle_id_);
  }
  if (from.has_visualization()) {
    mutable_visualization()->::metamoto::messages::Visualization::MergeFrom(from.visualization());
  }
}

void ReportingVisualizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.ReportingVisualizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportingVisualizeRequest::CopyFrom(const ReportingVisualizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.ReportingVisualizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportingVisualizeRequest::IsInitialized() const {
  return true;
}

void ReportingVisualizeRequest::Swap(ReportingVisualizeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportingVisualizeRequest::InternalSwap(ReportingVisualizeRequest* other) {
  using std::swap;
  ego_vehicle_id_.Swap(&other->ego_vehicle_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(visualization_, other->visualization_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReportingVisualizeRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2freporting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2freporting_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReportingVisualizeReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportingVisualizeReply::ReportingVisualizeReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingVisualizeReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.ReportingVisualizeReply)
}
ReportingVisualizeReply::ReportingVisualizeReply(const ReportingVisualizeReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.services.ReportingVisualizeReply)
}

void ReportingVisualizeReply::SharedCtor() {
}

ReportingVisualizeReply::~ReportingVisualizeReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.ReportingVisualizeReply)
  SharedDtor();
}

void ReportingVisualizeReply::SharedDtor() {
}

void ReportingVisualizeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReportingVisualizeReply::descriptor() {
  ::protobuf_metamoto_2fservices_2freporting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2freporting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportingVisualizeReply& ReportingVisualizeReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingVisualizeReply.base);
  return *internal_default_instance();
}


void ReportingVisualizeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.ReportingVisualizeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ReportingVisualizeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.ReportingVisualizeReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.ReportingVisualizeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.ReportingVisualizeReply)
  return false;
#undef DO_
}

void ReportingVisualizeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.ReportingVisualizeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.ReportingVisualizeReply)
}

::google::protobuf::uint8* ReportingVisualizeReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.ReportingVisualizeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.ReportingVisualizeReply)
  return target;
}

size_t ReportingVisualizeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.ReportingVisualizeReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportingVisualizeReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.ReportingVisualizeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportingVisualizeReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportingVisualizeReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.ReportingVisualizeReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.ReportingVisualizeReply)
    MergeFrom(*source);
  }
}

void ReportingVisualizeReply::MergeFrom(const ReportingVisualizeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.ReportingVisualizeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReportingVisualizeReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.ReportingVisualizeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportingVisualizeReply::CopyFrom(const ReportingVisualizeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.ReportingVisualizeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportingVisualizeReply::IsInitialized() const {
  return true;
}

void ReportingVisualizeReply::Swap(ReportingVisualizeReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportingVisualizeReply::InternalSwap(ReportingVisualizeReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReportingVisualizeReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2freporting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2freporting_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace services
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::ReportingAddTimeSeriesValueRequest* Arena::CreateMaybeMessage< ::metamoto::services::ReportingAddTimeSeriesValueRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::ReportingAddTimeSeriesValueRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::ReportingAddTimeSeriesValueReply* Arena::CreateMaybeMessage< ::metamoto::services::ReportingAddTimeSeriesValueReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::ReportingAddTimeSeriesValueReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::ReportingLogRequest* Arena::CreateMaybeMessage< ::metamoto::services::ReportingLogRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::ReportingLogRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::ReportingLogReply* Arena::CreateMaybeMessage< ::metamoto::services::ReportingLogReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::ReportingLogReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::ReportingReportEventRequest* Arena::CreateMaybeMessage< ::metamoto::services::ReportingReportEventRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::ReportingReportEventRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::ReportingReportEventReply* Arena::CreateMaybeMessage< ::metamoto::services::ReportingReportEventReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::ReportingReportEventReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::ReportingVisualizeRequest* Arena::CreateMaybeMessage< ::metamoto::services::ReportingVisualizeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::ReportingVisualizeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::ReportingVisualizeReply* Arena::CreateMaybeMessage< ::metamoto::services::ReportingVisualizeReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::ReportingVisualizeReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
