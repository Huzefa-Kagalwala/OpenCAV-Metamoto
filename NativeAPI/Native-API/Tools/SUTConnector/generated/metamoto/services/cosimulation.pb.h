// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/services/cosimulation.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2fservices_2fcosimulation_2eproto
#define PROTOBUF_INCLUDED_metamoto_2fservices_2fcosimulation_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/messages/ground_truth.pb.h"
#include "metamoto/messages/data_bus_message.pb.h"
#include "metamoto/types/ego_vehicle.pb.h"
#include "metamoto/types/enumerations.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fcosimulation_2eproto 

namespace protobuf_metamoto_2fservices_2fcosimulation_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2fservices_2fcosimulation_2eproto
namespace metamoto {
namespace services {
class CosimulationCloseReply;
class CosimulationCloseReplyDefaultTypeInternal;
extern CosimulationCloseReplyDefaultTypeInternal _CosimulationCloseReply_default_instance_;
class CosimulationCloseRequest;
class CosimulationCloseRequestDefaultTypeInternal;
extern CosimulationCloseRequestDefaultTypeInternal _CosimulationCloseRequest_default_instance_;
class CosimulationInitializeReply;
class CosimulationInitializeReplyDefaultTypeInternal;
extern CosimulationInitializeReplyDefaultTypeInternal _CosimulationInitializeReply_default_instance_;
class CosimulationInitializeRequest;
class CosimulationInitializeRequestDefaultTypeInternal;
extern CosimulationInitializeRequestDefaultTypeInternal _CosimulationInitializeRequest_default_instance_;
class CosimulationReadReply;
class CosimulationReadReplyDefaultTypeInternal;
extern CosimulationReadReplyDefaultTypeInternal _CosimulationReadReply_default_instance_;
class CosimulationReadRequest;
class CosimulationReadRequestDefaultTypeInternal;
extern CosimulationReadRequestDefaultTypeInternal _CosimulationReadRequest_default_instance_;
class CosimulationUpdateReply;
class CosimulationUpdateReplyDefaultTypeInternal;
extern CosimulationUpdateReplyDefaultTypeInternal _CosimulationUpdateReply_default_instance_;
class CosimulationUpdateRequest;
class CosimulationUpdateRequestDefaultTypeInternal;
extern CosimulationUpdateRequestDefaultTypeInternal _CosimulationUpdateRequest_default_instance_;
}  // namespace services
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::services::CosimulationCloseReply* Arena::CreateMaybeMessage<::metamoto::services::CosimulationCloseReply>(Arena*);
template<> ::metamoto::services::CosimulationCloseRequest* Arena::CreateMaybeMessage<::metamoto::services::CosimulationCloseRequest>(Arena*);
template<> ::metamoto::services::CosimulationInitializeReply* Arena::CreateMaybeMessage<::metamoto::services::CosimulationInitializeReply>(Arena*);
template<> ::metamoto::services::CosimulationInitializeRequest* Arena::CreateMaybeMessage<::metamoto::services::CosimulationInitializeRequest>(Arena*);
template<> ::metamoto::services::CosimulationReadReply* Arena::CreateMaybeMessage<::metamoto::services::CosimulationReadReply>(Arena*);
template<> ::metamoto::services::CosimulationReadRequest* Arena::CreateMaybeMessage<::metamoto::services::CosimulationReadRequest>(Arena*);
template<> ::metamoto::services::CosimulationUpdateReply* Arena::CreateMaybeMessage<::metamoto::services::CosimulationUpdateReply>(Arena*);
template<> ::metamoto::services::CosimulationUpdateRequest* Arena::CreateMaybeMessage<::metamoto::services::CosimulationUpdateRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace services {

// ===================================================================

class CosimulationInitializeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.CosimulationInitializeRequest) */ {
 public:
  CosimulationInitializeRequest();
  virtual ~CosimulationInitializeRequest();

  CosimulationInitializeRequest(const CosimulationInitializeRequest& from);

  inline CosimulationInitializeRequest& operator=(const CosimulationInitializeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CosimulationInitializeRequest(CosimulationInitializeRequest&& from) noexcept
    : CosimulationInitializeRequest() {
    *this = ::std::move(from);
  }

  inline CosimulationInitializeRequest& operator=(CosimulationInitializeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CosimulationInitializeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CosimulationInitializeRequest* internal_default_instance() {
    return reinterpret_cast<const CosimulationInitializeRequest*>(
               &_CosimulationInitializeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CosimulationInitializeRequest* other);
  friend void swap(CosimulationInitializeRequest& a, CosimulationInitializeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CosimulationInitializeRequest* New() const final {
    return CreateMaybeMessage<CosimulationInitializeRequest>(NULL);
  }

  CosimulationInitializeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CosimulationInitializeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CosimulationInitializeRequest& from);
  void MergeFrom(const CosimulationInitializeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosimulationInitializeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.messages.GroundTruth ground_truth = 1;
  bool has_ground_truth() const;
  void clear_ground_truth();
  static const int kGroundTruthFieldNumber = 1;
  private:
  const ::metamoto::messages::GroundTruth& _internal_ground_truth() const;
  public:
  const ::metamoto::messages::GroundTruth& ground_truth() const;
  ::metamoto::messages::GroundTruth* release_ground_truth();
  ::metamoto::messages::GroundTruth* mutable_ground_truth();
  void set_allocated_ground_truth(::metamoto::messages::GroundTruth* ground_truth);

  // @@protoc_insertion_point(class_scope:metamoto.services.CosimulationInitializeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::messages::GroundTruth* ground_truth_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fcosimulation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CosimulationInitializeReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.CosimulationInitializeReply) */ {
 public:
  CosimulationInitializeReply();
  virtual ~CosimulationInitializeReply();

  CosimulationInitializeReply(const CosimulationInitializeReply& from);

  inline CosimulationInitializeReply& operator=(const CosimulationInitializeReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CosimulationInitializeReply(CosimulationInitializeReply&& from) noexcept
    : CosimulationInitializeReply() {
    *this = ::std::move(from);
  }

  inline CosimulationInitializeReply& operator=(CosimulationInitializeReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CosimulationInitializeReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CosimulationInitializeReply* internal_default_instance() {
    return reinterpret_cast<const CosimulationInitializeReply*>(
               &_CosimulationInitializeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CosimulationInitializeReply* other);
  friend void swap(CosimulationInitializeReply& a, CosimulationInitializeReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CosimulationInitializeReply* New() const final {
    return CreateMaybeMessage<CosimulationInitializeReply>(NULL);
  }

  CosimulationInitializeReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CosimulationInitializeReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CosimulationInitializeReply& from);
  void MergeFrom(const CosimulationInitializeReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosimulationInitializeReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.EgoVehicle ego_vehicles = 2;
  int ego_vehicles_size() const;
  void clear_ego_vehicles();
  static const int kEgoVehiclesFieldNumber = 2;
  ::metamoto::types::EgoVehicle* mutable_ego_vehicles(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::EgoVehicle >*
      mutable_ego_vehicles();
  const ::metamoto::types::EgoVehicle& ego_vehicles(int index) const;
  ::metamoto::types::EgoVehicle* add_ego_vehicles();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::EgoVehicle >&
      ego_vehicles() const;

  // @@protoc_insertion_point(class_scope:metamoto.services.CosimulationInitializeReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::EgoVehicle > ego_vehicles_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fcosimulation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CosimulationUpdateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.CosimulationUpdateRequest) */ {
 public:
  CosimulationUpdateRequest();
  virtual ~CosimulationUpdateRequest();

  CosimulationUpdateRequest(const CosimulationUpdateRequest& from);

  inline CosimulationUpdateRequest& operator=(const CosimulationUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CosimulationUpdateRequest(CosimulationUpdateRequest&& from) noexcept
    : CosimulationUpdateRequest() {
    *this = ::std::move(from);
  }

  inline CosimulationUpdateRequest& operator=(CosimulationUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CosimulationUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CosimulationUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const CosimulationUpdateRequest*>(
               &_CosimulationUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CosimulationUpdateRequest* other);
  friend void swap(CosimulationUpdateRequest& a, CosimulationUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CosimulationUpdateRequest* New() const final {
    return CreateMaybeMessage<CosimulationUpdateRequest>(NULL);
  }

  CosimulationUpdateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CosimulationUpdateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CosimulationUpdateRequest& from);
  void MergeFrom(const CosimulationUpdateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosimulationUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.messages.GroundTruth ground_truth = 2;
  bool has_ground_truth() const;
  void clear_ground_truth();
  static const int kGroundTruthFieldNumber = 2;
  private:
  const ::metamoto::messages::GroundTruth& _internal_ground_truth() const;
  public:
  const ::metamoto::messages::GroundTruth& ground_truth() const;
  ::metamoto::messages::GroundTruth* release_ground_truth();
  ::metamoto::messages::GroundTruth* mutable_ground_truth();
  void set_allocated_ground_truth(::metamoto::messages::GroundTruth* ground_truth);

  // double time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // @@protoc_insertion_point(class_scope:metamoto.services.CosimulationUpdateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::messages::GroundTruth* ground_truth_;
  double time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fcosimulation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CosimulationUpdateReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.CosimulationUpdateReply) */ {
 public:
  CosimulationUpdateReply();
  virtual ~CosimulationUpdateReply();

  CosimulationUpdateReply(const CosimulationUpdateReply& from);

  inline CosimulationUpdateReply& operator=(const CosimulationUpdateReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CosimulationUpdateReply(CosimulationUpdateReply&& from) noexcept
    : CosimulationUpdateReply() {
    *this = ::std::move(from);
  }

  inline CosimulationUpdateReply& operator=(CosimulationUpdateReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CosimulationUpdateReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CosimulationUpdateReply* internal_default_instance() {
    return reinterpret_cast<const CosimulationUpdateReply*>(
               &_CosimulationUpdateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CosimulationUpdateReply* other);
  friend void swap(CosimulationUpdateReply& a, CosimulationUpdateReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CosimulationUpdateReply* New() const final {
    return CreateMaybeMessage<CosimulationUpdateReply>(NULL);
  }

  CosimulationUpdateReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CosimulationUpdateReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CosimulationUpdateReply& from);
  void MergeFrom(const CosimulationUpdateReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosimulationUpdateReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:metamoto.services.CosimulationUpdateReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fcosimulation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CosimulationReadRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.CosimulationReadRequest) */ {
 public:
  CosimulationReadRequest();
  virtual ~CosimulationReadRequest();

  CosimulationReadRequest(const CosimulationReadRequest& from);

  inline CosimulationReadRequest& operator=(const CosimulationReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CosimulationReadRequest(CosimulationReadRequest&& from) noexcept
    : CosimulationReadRequest() {
    *this = ::std::move(from);
  }

  inline CosimulationReadRequest& operator=(CosimulationReadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CosimulationReadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CosimulationReadRequest* internal_default_instance() {
    return reinterpret_cast<const CosimulationReadRequest*>(
               &_CosimulationReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CosimulationReadRequest* other);
  friend void swap(CosimulationReadRequest& a, CosimulationReadRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CosimulationReadRequest* New() const final {
    return CreateMaybeMessage<CosimulationReadRequest>(NULL);
  }

  CosimulationReadRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CosimulationReadRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CosimulationReadRequest& from);
  void MergeFrom(const CosimulationReadRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosimulationReadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ego_vehicle_id = 1;
  void clear_ego_vehicle_id();
  static const int kEgoVehicleIdFieldNumber = 1;
  const ::std::string& ego_vehicle_id() const;
  void set_ego_vehicle_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ego_vehicle_id(::std::string&& value);
  #endif
  void set_ego_vehicle_id(const char* value);
  void set_ego_vehicle_id(const char* value, size_t size);
  ::std::string* mutable_ego_vehicle_id();
  ::std::string* release_ego_vehicle_id();
  void set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id);

  // string topic = 2;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // @@protoc_insertion_point(class_scope:metamoto.services.CosimulationReadRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ego_vehicle_id_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fcosimulation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CosimulationReadReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.CosimulationReadReply) */ {
 public:
  CosimulationReadReply();
  virtual ~CosimulationReadReply();

  CosimulationReadReply(const CosimulationReadReply& from);

  inline CosimulationReadReply& operator=(const CosimulationReadReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CosimulationReadReply(CosimulationReadReply&& from) noexcept
    : CosimulationReadReply() {
    *this = ::std::move(from);
  }

  inline CosimulationReadReply& operator=(CosimulationReadReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CosimulationReadReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CosimulationReadReply* internal_default_instance() {
    return reinterpret_cast<const CosimulationReadReply*>(
               &_CosimulationReadReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CosimulationReadReply* other);
  friend void swap(CosimulationReadReply& a, CosimulationReadReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CosimulationReadReply* New() const final {
    return CreateMaybeMessage<CosimulationReadReply>(NULL);
  }

  CosimulationReadReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CosimulationReadReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CosimulationReadReply& from);
  void MergeFrom(const CosimulationReadReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosimulationReadReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.messages.DataBusMessage message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  private:
  const ::metamoto::messages::DataBusMessage& _internal_message() const;
  public:
  const ::metamoto::messages::DataBusMessage& message() const;
  ::metamoto::messages::DataBusMessage* release_message();
  ::metamoto::messages::DataBusMessage* mutable_message();
  void set_allocated_message(::metamoto::messages::DataBusMessage* message);

  // @@protoc_insertion_point(class_scope:metamoto.services.CosimulationReadReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::messages::DataBusMessage* message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fcosimulation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CosimulationCloseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.CosimulationCloseRequest) */ {
 public:
  CosimulationCloseRequest();
  virtual ~CosimulationCloseRequest();

  CosimulationCloseRequest(const CosimulationCloseRequest& from);

  inline CosimulationCloseRequest& operator=(const CosimulationCloseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CosimulationCloseRequest(CosimulationCloseRequest&& from) noexcept
    : CosimulationCloseRequest() {
    *this = ::std::move(from);
  }

  inline CosimulationCloseRequest& operator=(CosimulationCloseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CosimulationCloseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CosimulationCloseRequest* internal_default_instance() {
    return reinterpret_cast<const CosimulationCloseRequest*>(
               &_CosimulationCloseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CosimulationCloseRequest* other);
  friend void swap(CosimulationCloseRequest& a, CosimulationCloseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CosimulationCloseRequest* New() const final {
    return CreateMaybeMessage<CosimulationCloseRequest>(NULL);
  }

  CosimulationCloseRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CosimulationCloseRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CosimulationCloseRequest& from);
  void MergeFrom(const CosimulationCloseRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosimulationCloseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .metamoto.types.Action action = 1;
  void clear_action();
  static const int kActionFieldNumber = 1;
  ::metamoto::types::Action action() const;
  void set_action(::metamoto::types::Action value);

  // @@protoc_insertion_point(class_scope:metamoto.services.CosimulationCloseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  int action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fcosimulation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CosimulationCloseReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.CosimulationCloseReply) */ {
 public:
  CosimulationCloseReply();
  virtual ~CosimulationCloseReply();

  CosimulationCloseReply(const CosimulationCloseReply& from);

  inline CosimulationCloseReply& operator=(const CosimulationCloseReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CosimulationCloseReply(CosimulationCloseReply&& from) noexcept
    : CosimulationCloseReply() {
    *this = ::std::move(from);
  }

  inline CosimulationCloseReply& operator=(CosimulationCloseReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CosimulationCloseReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CosimulationCloseReply* internal_default_instance() {
    return reinterpret_cast<const CosimulationCloseReply*>(
               &_CosimulationCloseReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CosimulationCloseReply* other);
  friend void swap(CosimulationCloseReply& a, CosimulationCloseReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CosimulationCloseReply* New() const final {
    return CreateMaybeMessage<CosimulationCloseReply>(NULL);
  }

  CosimulationCloseReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CosimulationCloseReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CosimulationCloseReply& from);
  void MergeFrom(const CosimulationCloseReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosimulationCloseReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:metamoto.services.CosimulationCloseReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fcosimulation_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CosimulationInitializeRequest

// .metamoto.messages.GroundTruth ground_truth = 1;
inline bool CosimulationInitializeRequest::has_ground_truth() const {
  return this != internal_default_instance() && ground_truth_ != NULL;
}
inline const ::metamoto::messages::GroundTruth& CosimulationInitializeRequest::_internal_ground_truth() const {
  return *ground_truth_;
}
inline const ::metamoto::messages::GroundTruth& CosimulationInitializeRequest::ground_truth() const {
  const ::metamoto::messages::GroundTruth* p = ground_truth_;
  // @@protoc_insertion_point(field_get:metamoto.services.CosimulationInitializeRequest.ground_truth)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::messages::GroundTruth*>(
      &::metamoto::messages::_GroundTruth_default_instance_);
}
inline ::metamoto::messages::GroundTruth* CosimulationInitializeRequest::release_ground_truth() {
  // @@protoc_insertion_point(field_release:metamoto.services.CosimulationInitializeRequest.ground_truth)
  
  ::metamoto::messages::GroundTruth* temp = ground_truth_;
  ground_truth_ = NULL;
  return temp;
}
inline ::metamoto::messages::GroundTruth* CosimulationInitializeRequest::mutable_ground_truth() {
  
  if (ground_truth_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::messages::GroundTruth>(GetArenaNoVirtual());
    ground_truth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.CosimulationInitializeRequest.ground_truth)
  return ground_truth_;
}
inline void CosimulationInitializeRequest::set_allocated_ground_truth(::metamoto::messages::GroundTruth* ground_truth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ground_truth_);
  }
  if (ground_truth) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ground_truth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ground_truth, submessage_arena);
    }
    
  } else {
    
  }
  ground_truth_ = ground_truth;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.CosimulationInitializeRequest.ground_truth)
}

// -------------------------------------------------------------------

// CosimulationInitializeReply

// repeated .metamoto.types.EgoVehicle ego_vehicles = 2;
inline int CosimulationInitializeReply::ego_vehicles_size() const {
  return ego_vehicles_.size();
}
inline ::metamoto::types::EgoVehicle* CosimulationInitializeReply::mutable_ego_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.CosimulationInitializeReply.ego_vehicles)
  return ego_vehicles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::EgoVehicle >*
CosimulationInitializeReply::mutable_ego_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.CosimulationInitializeReply.ego_vehicles)
  return &ego_vehicles_;
}
inline const ::metamoto::types::EgoVehicle& CosimulationInitializeReply::ego_vehicles(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.CosimulationInitializeReply.ego_vehicles)
  return ego_vehicles_.Get(index);
}
inline ::metamoto::types::EgoVehicle* CosimulationInitializeReply::add_ego_vehicles() {
  // @@protoc_insertion_point(field_add:metamoto.services.CosimulationInitializeReply.ego_vehicles)
  return ego_vehicles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::EgoVehicle >&
CosimulationInitializeReply::ego_vehicles() const {
  // @@protoc_insertion_point(field_list:metamoto.services.CosimulationInitializeReply.ego_vehicles)
  return ego_vehicles_;
}

// -------------------------------------------------------------------

// CosimulationUpdateRequest

// double time = 1;
inline void CosimulationUpdateRequest::clear_time() {
  time_ = 0;
}
inline double CosimulationUpdateRequest::time() const {
  // @@protoc_insertion_point(field_get:metamoto.services.CosimulationUpdateRequest.time)
  return time_;
}
inline void CosimulationUpdateRequest::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.CosimulationUpdateRequest.time)
}

// .metamoto.messages.GroundTruth ground_truth = 2;
inline bool CosimulationUpdateRequest::has_ground_truth() const {
  return this != internal_default_instance() && ground_truth_ != NULL;
}
inline const ::metamoto::messages::GroundTruth& CosimulationUpdateRequest::_internal_ground_truth() const {
  return *ground_truth_;
}
inline const ::metamoto::messages::GroundTruth& CosimulationUpdateRequest::ground_truth() const {
  const ::metamoto::messages::GroundTruth* p = ground_truth_;
  // @@protoc_insertion_point(field_get:metamoto.services.CosimulationUpdateRequest.ground_truth)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::messages::GroundTruth*>(
      &::metamoto::messages::_GroundTruth_default_instance_);
}
inline ::metamoto::messages::GroundTruth* CosimulationUpdateRequest::release_ground_truth() {
  // @@protoc_insertion_point(field_release:metamoto.services.CosimulationUpdateRequest.ground_truth)
  
  ::metamoto::messages::GroundTruth* temp = ground_truth_;
  ground_truth_ = NULL;
  return temp;
}
inline ::metamoto::messages::GroundTruth* CosimulationUpdateRequest::mutable_ground_truth() {
  
  if (ground_truth_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::messages::GroundTruth>(GetArenaNoVirtual());
    ground_truth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.CosimulationUpdateRequest.ground_truth)
  return ground_truth_;
}
inline void CosimulationUpdateRequest::set_allocated_ground_truth(::metamoto::messages::GroundTruth* ground_truth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ground_truth_);
  }
  if (ground_truth) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ground_truth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ground_truth, submessage_arena);
    }
    
  } else {
    
  }
  ground_truth_ = ground_truth;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.CosimulationUpdateRequest.ground_truth)
}

// -------------------------------------------------------------------

// CosimulationUpdateReply

// -------------------------------------------------------------------

// CosimulationReadRequest

// string ego_vehicle_id = 1;
inline void CosimulationReadRequest::clear_ego_vehicle_id() {
  ego_vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosimulationReadRequest::ego_vehicle_id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.CosimulationReadRequest.ego_vehicle_id)
  return ego_vehicle_id_.GetNoArena();
}
inline void CosimulationReadRequest::set_ego_vehicle_id(const ::std::string& value) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.CosimulationReadRequest.ego_vehicle_id)
}
#if LANG_CXX11
inline void CosimulationReadRequest::set_ego_vehicle_id(::std::string&& value) {
  
  ego_vehicle_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.CosimulationReadRequest.ego_vehicle_id)
}
#endif
inline void CosimulationReadRequest::set_ego_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.CosimulationReadRequest.ego_vehicle_id)
}
inline void CosimulationReadRequest::set_ego_vehicle_id(const char* value, size_t size) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.CosimulationReadRequest.ego_vehicle_id)
}
inline ::std::string* CosimulationReadRequest::mutable_ego_vehicle_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.CosimulationReadRequest.ego_vehicle_id)
  return ego_vehicle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosimulationReadRequest::release_ego_vehicle_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.CosimulationReadRequest.ego_vehicle_id)
  
  return ego_vehicle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosimulationReadRequest::set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id) {
  if (ego_vehicle_id != NULL) {
    
  } else {
    
  }
  ego_vehicle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ego_vehicle_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.CosimulationReadRequest.ego_vehicle_id)
}

// string topic = 2;
inline void CosimulationReadRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosimulationReadRequest::topic() const {
  // @@protoc_insertion_point(field_get:metamoto.services.CosimulationReadRequest.topic)
  return topic_.GetNoArena();
}
inline void CosimulationReadRequest::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.CosimulationReadRequest.topic)
}
#if LANG_CXX11
inline void CosimulationReadRequest::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.CosimulationReadRequest.topic)
}
#endif
inline void CosimulationReadRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.CosimulationReadRequest.topic)
}
inline void CosimulationReadRequest::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.CosimulationReadRequest.topic)
}
inline ::std::string* CosimulationReadRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.CosimulationReadRequest.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosimulationReadRequest::release_topic() {
  // @@protoc_insertion_point(field_release:metamoto.services.CosimulationReadRequest.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosimulationReadRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.CosimulationReadRequest.topic)
}

// -------------------------------------------------------------------

// CosimulationReadReply

// .metamoto.messages.DataBusMessage message = 1;
inline bool CosimulationReadReply::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline const ::metamoto::messages::DataBusMessage& CosimulationReadReply::_internal_message() const {
  return *message_;
}
inline const ::metamoto::messages::DataBusMessage& CosimulationReadReply::message() const {
  const ::metamoto::messages::DataBusMessage* p = message_;
  // @@protoc_insertion_point(field_get:metamoto.services.CosimulationReadReply.message)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::messages::DataBusMessage*>(
      &::metamoto::messages::_DataBusMessage_default_instance_);
}
inline ::metamoto::messages::DataBusMessage* CosimulationReadReply::release_message() {
  // @@protoc_insertion_point(field_release:metamoto.services.CosimulationReadReply.message)
  
  ::metamoto::messages::DataBusMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::metamoto::messages::DataBusMessage* CosimulationReadReply::mutable_message() {
  
  if (message_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::messages::DataBusMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.CosimulationReadReply.message)
  return message_;
}
inline void CosimulationReadReply::set_allocated_message(::metamoto::messages::DataBusMessage* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(message_);
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.CosimulationReadReply.message)
}

// -------------------------------------------------------------------

// CosimulationCloseRequest

// .metamoto.types.Action action = 1;
inline void CosimulationCloseRequest::clear_action() {
  action_ = 0;
}
inline ::metamoto::types::Action CosimulationCloseRequest::action() const {
  // @@protoc_insertion_point(field_get:metamoto.services.CosimulationCloseRequest.action)
  return static_cast< ::metamoto::types::Action >(action_);
}
inline void CosimulationCloseRequest::set_action(::metamoto::types::Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.CosimulationCloseRequest.action)
}

// string description = 2;
inline void CosimulationCloseRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosimulationCloseRequest::description() const {
  // @@protoc_insertion_point(field_get:metamoto.services.CosimulationCloseRequest.description)
  return description_.GetNoArena();
}
inline void CosimulationCloseRequest::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.CosimulationCloseRequest.description)
}
#if LANG_CXX11
inline void CosimulationCloseRequest::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.CosimulationCloseRequest.description)
}
#endif
inline void CosimulationCloseRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.CosimulationCloseRequest.description)
}
inline void CosimulationCloseRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.CosimulationCloseRequest.description)
}
inline ::std::string* CosimulationCloseRequest::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.CosimulationCloseRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosimulationCloseRequest::release_description() {
  // @@protoc_insertion_point(field_release:metamoto.services.CosimulationCloseRequest.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosimulationCloseRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.CosimulationCloseRequest.description)
}

// -------------------------------------------------------------------

// CosimulationCloseReply

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace services
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2fservices_2fcosimulation_2eproto
