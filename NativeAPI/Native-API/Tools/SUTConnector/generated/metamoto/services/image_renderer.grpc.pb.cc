// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metamoto/services/image_renderer.proto

#include "metamoto/services/image_renderer.pb.h"
#include "metamoto/services/image_renderer.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace metamoto {
namespace services {

static const char* ImageRenderer_method_names[] = {
  "/metamoto.services.ImageRenderer/SetCamera",
  "/metamoto.services.ImageRenderer/GetImage",
};

std::unique_ptr< ImageRenderer::Stub> ImageRenderer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ImageRenderer::Stub> stub(new ImageRenderer::Stub(channel));
  return stub;
}

ImageRenderer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetCamera_(ImageRenderer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImage_(ImageRenderer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ImageRenderer::Stub::SetCamera(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererSetCameraRequest& request, ::metamoto::services::ImageRendererSetCameraReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCamera_, context, request, response);
}

void ImageRenderer::Stub::experimental_async::SetCamera(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererSetCameraRequest* request, ::metamoto::services::ImageRendererSetCameraReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCamera_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ImageRendererSetCameraReply>* ImageRenderer::Stub::AsyncSetCameraRaw(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererSetCameraRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ImageRendererSetCameraReply>::Create(channel_.get(), cq, rpcmethod_SetCamera_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ImageRendererSetCameraReply>* ImageRenderer::Stub::PrepareAsyncSetCameraRaw(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererSetCameraRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ImageRendererSetCameraReply>::Create(channel_.get(), cq, rpcmethod_SetCamera_, context, request, false);
}

::grpc::Status ImageRenderer::Stub::GetImage(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererGetImageRequest& request, ::metamoto::services::ImageRendererGetImageReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetImage_, context, request, response);
}

void ImageRenderer::Stub::experimental_async::GetImage(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererGetImageRequest* request, ::metamoto::services::ImageRendererGetImageReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetImage_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ImageRendererGetImageReply>* ImageRenderer::Stub::AsyncGetImageRaw(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererGetImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ImageRendererGetImageReply>::Create(channel_.get(), cq, rpcmethod_GetImage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ImageRendererGetImageReply>* ImageRenderer::Stub::PrepareAsyncGetImageRaw(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererGetImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ImageRendererGetImageReply>::Create(channel_.get(), cq, rpcmethod_GetImage_, context, request, false);
}

ImageRenderer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageRenderer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageRenderer::Service, ::metamoto::services::ImageRendererSetCameraRequest, ::metamoto::services::ImageRendererSetCameraReply>(
          std::mem_fn(&ImageRenderer::Service::SetCamera), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageRenderer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageRenderer::Service, ::metamoto::services::ImageRendererGetImageRequest, ::metamoto::services::ImageRendererGetImageReply>(
          std::mem_fn(&ImageRenderer::Service::GetImage), this)));
}

ImageRenderer::Service::~Service() {
}

::grpc::Status ImageRenderer::Service::SetCamera(::grpc::ServerContext* context, const ::metamoto::services::ImageRendererSetCameraRequest* request, ::metamoto::services::ImageRendererSetCameraReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImageRenderer::Service::GetImage(::grpc::ServerContext* context, const ::metamoto::services::ImageRendererGetImageRequest* request, ::metamoto::services::ImageRendererGetImageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace metamoto
}  // namespace services

