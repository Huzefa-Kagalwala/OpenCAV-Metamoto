// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metamoto/services/image_renderer.proto
// Original file comments:
// Copyright (c) 2018-2020 Metamoto, Inc. All Rights Reserved.
//
#ifndef GRPC_metamoto_2fservices_2fimage_5frenderer_2eproto__INCLUDED
#define GRPC_metamoto_2fservices_2fimage_5frenderer_2eproto__INCLUDED

#include "metamoto/services/image_renderer.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace metamoto {
namespace services {

// The image renderer service provides the ability to acquire images from the simulator's
// rendering engine. Use SetCamera at initialization to create and configure a new camera.
// Then during each update, call GetImage using the camera ID returned by SetCamera to
// retrieve the latest image.
class ImageRenderer final {
 public:
  static constexpr char const* service_full_name() {
    return "metamoto.services.ImageRenderer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SetCamera(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererSetCameraRequest& request, ::metamoto::services::ImageRendererSetCameraReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ImageRendererSetCameraReply>> AsyncSetCamera(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererSetCameraRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ImageRendererSetCameraReply>>(AsyncSetCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ImageRendererSetCameraReply>> PrepareAsyncSetCamera(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererSetCameraRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ImageRendererSetCameraReply>>(PrepareAsyncSetCameraRaw(context, request, cq));
    }
    virtual ::grpc::Status GetImage(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererGetImageRequest& request, ::metamoto::services::ImageRendererGetImageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ImageRendererGetImageReply>> AsyncGetImage(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererGetImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ImageRendererGetImageReply>>(AsyncGetImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ImageRendererGetImageReply>> PrepareAsyncGetImage(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererGetImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ImageRendererGetImageReply>>(PrepareAsyncGetImageRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void SetCamera(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererSetCameraRequest* request, ::metamoto::services::ImageRendererSetCameraReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetImage(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererGetImageRequest* request, ::metamoto::services::ImageRendererGetImageReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ImageRendererSetCameraReply>* AsyncSetCameraRaw(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererSetCameraRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ImageRendererSetCameraReply>* PrepareAsyncSetCameraRaw(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererSetCameraRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ImageRendererGetImageReply>* AsyncGetImageRaw(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererGetImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ImageRendererGetImageReply>* PrepareAsyncGetImageRaw(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererGetImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SetCamera(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererSetCameraRequest& request, ::metamoto::services::ImageRendererSetCameraReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ImageRendererSetCameraReply>> AsyncSetCamera(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererSetCameraRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ImageRendererSetCameraReply>>(AsyncSetCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ImageRendererSetCameraReply>> PrepareAsyncSetCamera(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererSetCameraRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ImageRendererSetCameraReply>>(PrepareAsyncSetCameraRaw(context, request, cq));
    }
    ::grpc::Status GetImage(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererGetImageRequest& request, ::metamoto::services::ImageRendererGetImageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ImageRendererGetImageReply>> AsyncGetImage(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererGetImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ImageRendererGetImageReply>>(AsyncGetImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ImageRendererGetImageReply>> PrepareAsyncGetImage(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererGetImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ImageRendererGetImageReply>>(PrepareAsyncGetImageRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SetCamera(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererSetCameraRequest* request, ::metamoto::services::ImageRendererSetCameraReply* response, std::function<void(::grpc::Status)>) override;
      void GetImage(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererGetImageRequest* request, ::metamoto::services::ImageRendererGetImageReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ImageRendererSetCameraReply>* AsyncSetCameraRaw(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererSetCameraRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ImageRendererSetCameraReply>* PrepareAsyncSetCameraRaw(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererSetCameraRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ImageRendererGetImageReply>* AsyncGetImageRaw(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererGetImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ImageRendererGetImageReply>* PrepareAsyncGetImageRaw(::grpc::ClientContext* context, const ::metamoto::services::ImageRendererGetImageRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetCamera_;
    const ::grpc::internal::RpcMethod rpcmethod_GetImage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SetCamera(::grpc::ServerContext* context, const ::metamoto::services::ImageRendererSetCameraRequest* request, ::metamoto::services::ImageRendererSetCameraReply* response);
    virtual ::grpc::Status GetImage(::grpc::ServerContext* context, const ::metamoto::services::ImageRendererGetImageRequest* request, ::metamoto::services::ImageRendererGetImageReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetCamera() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCamera(::grpc::ServerContext* context, const ::metamoto::services::ImageRendererSetCameraRequest* request, ::metamoto::services::ImageRendererSetCameraReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCamera(::grpc::ServerContext* context, ::metamoto::services::ImageRendererSetCameraRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::ImageRendererSetCameraReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetImage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* context, const ::metamoto::services::ImageRendererGetImageRequest* request, ::metamoto::services::ImageRendererGetImageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImage(::grpc::ServerContext* context, ::metamoto::services::ImageRendererGetImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::ImageRendererGetImageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetCamera<WithAsyncMethod_GetImage<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetCamera() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::ImageRendererSetCameraRequest, ::metamoto::services::ImageRendererSetCameraReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::ImageRendererSetCameraRequest* request,
                 ::metamoto::services::ImageRendererSetCameraReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetCamera(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SetCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCamera(::grpc::ServerContext* context, const ::metamoto::services::ImageRendererSetCameraRequest* request, ::metamoto::services::ImageRendererSetCameraReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetCamera(::grpc::ServerContext* context, const ::metamoto::services::ImageRendererSetCameraRequest* request, ::metamoto::services::ImageRendererSetCameraReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetImage() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::ImageRendererGetImageRequest, ::metamoto::services::ImageRendererGetImageReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::ImageRendererGetImageRequest* request,
                 ::metamoto::services::ImageRendererGetImageReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetImage(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* context, const ::metamoto::services::ImageRendererGetImageRequest* request, ::metamoto::services::ImageRendererGetImageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetImage(::grpc::ServerContext* context, const ::metamoto::services::ImageRendererGetImageRequest* request, ::metamoto::services::ImageRendererGetImageReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_SetCamera<ExperimentalWithCallbackMethod_GetImage<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetCamera() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCamera(::grpc::ServerContext* context, const ::metamoto::services::ImageRendererSetCameraRequest* request, ::metamoto::services::ImageRendererSetCameraReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetImage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* context, const ::metamoto::services::ImageRendererGetImageRequest* request, ::metamoto::services::ImageRendererGetImageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetCamera() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCamera(::grpc::ServerContext* context, const ::metamoto::services::ImageRendererSetCameraRequest* request, ::metamoto::services::ImageRendererSetCameraReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCamera(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetImage() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* context, const ::metamoto::services::ImageRendererGetImageRequest* request, ::metamoto::services::ImageRendererGetImageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetCamera() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetCamera(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCamera(::grpc::ServerContext* context, const ::metamoto::services::ImageRendererSetCameraRequest* request, ::metamoto::services::ImageRendererSetCameraReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetCamera(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetImage() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetImage(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* context, const ::metamoto::services::ImageRendererGetImageRequest* request, ::metamoto::services::ImageRendererGetImageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetImage(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetCamera() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::ImageRendererSetCameraRequest, ::metamoto::services::ImageRendererSetCameraReply>(std::bind(&WithStreamedUnaryMethod_SetCamera<BaseClass>::StreamedSetCamera, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetCamera(::grpc::ServerContext* context, const ::metamoto::services::ImageRendererSetCameraRequest* request, ::metamoto::services::ImageRendererSetCameraReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetCamera(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::ImageRendererSetCameraRequest,::metamoto::services::ImageRendererSetCameraReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetImage() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::ImageRendererGetImageRequest, ::metamoto::services::ImageRendererGetImageReply>(std::bind(&WithStreamedUnaryMethod_GetImage<BaseClass>::StreamedGetImage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* context, const ::metamoto::services::ImageRendererGetImageRequest* request, ::metamoto::services::ImageRendererGetImageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::ImageRendererGetImageRequest,::metamoto::services::ImageRendererGetImageReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetCamera<WithStreamedUnaryMethod_GetImage<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetCamera<WithStreamedUnaryMethod_GetImage<Service > > StreamedService;
};

}  // namespace services
}  // namespace metamoto


#endif  // GRPC_metamoto_2fservices_2fimage_5frenderer_2eproto__INCLUDED
