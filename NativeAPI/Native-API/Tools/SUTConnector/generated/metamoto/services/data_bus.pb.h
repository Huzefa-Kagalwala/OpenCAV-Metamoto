// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/services/data_bus.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2fservices_2fdata_5fbus_2eproto
#define PROTOBUF_INCLUDED_metamoto_2fservices_2fdata_5fbus_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/messages/data_bus_message.pb.h"
#include "metamoto/types/normal_distribution.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fdata_5fbus_2eproto 

namespace protobuf_metamoto_2fservices_2fdata_5fbus_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2fservices_2fdata_5fbus_2eproto
namespace metamoto {
namespace services {
class DataBusPublishReply;
class DataBusPublishReplyDefaultTypeInternal;
extern DataBusPublishReplyDefaultTypeInternal _DataBusPublishReply_default_instance_;
class DataBusPublishRequest;
class DataBusPublishRequestDefaultTypeInternal;
extern DataBusPublishRequestDefaultTypeInternal _DataBusPublishRequest_default_instance_;
class DataBusReadAllReply;
class DataBusReadAllReplyDefaultTypeInternal;
extern DataBusReadAllReplyDefaultTypeInternal _DataBusReadAllReply_default_instance_;
class DataBusReadAllRequest;
class DataBusReadAllRequestDefaultTypeInternal;
extern DataBusReadAllRequestDefaultTypeInternal _DataBusReadAllRequest_default_instance_;
class DataBusReadLastReply;
class DataBusReadLastReplyDefaultTypeInternal;
extern DataBusReadLastReplyDefaultTypeInternal _DataBusReadLastReply_default_instance_;
class DataBusReadLastRequest;
class DataBusReadLastRequestDefaultTypeInternal;
extern DataBusReadLastRequestDefaultTypeInternal _DataBusReadLastRequest_default_instance_;
class DataBusReadReply;
class DataBusReadReplyDefaultTypeInternal;
extern DataBusReadReplyDefaultTypeInternal _DataBusReadReply_default_instance_;
class DataBusReadRequest;
class DataBusReadRequestDefaultTypeInternal;
extern DataBusReadRequestDefaultTypeInternal _DataBusReadRequest_default_instance_;
class DataBusSubscribeReply;
class DataBusSubscribeReplyDefaultTypeInternal;
extern DataBusSubscribeReplyDefaultTypeInternal _DataBusSubscribeReply_default_instance_;
class DataBusSubscribeRequest;
class DataBusSubscribeRequestDefaultTypeInternal;
extern DataBusSubscribeRequestDefaultTypeInternal _DataBusSubscribeRequest_default_instance_;
class DataBusWriteReply;
class DataBusWriteReplyDefaultTypeInternal;
extern DataBusWriteReplyDefaultTypeInternal _DataBusWriteReply_default_instance_;
class DataBusWriteRequest;
class DataBusWriteRequestDefaultTypeInternal;
extern DataBusWriteRequestDefaultTypeInternal _DataBusWriteRequest_default_instance_;
}  // namespace services
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::services::DataBusPublishReply* Arena::CreateMaybeMessage<::metamoto::services::DataBusPublishReply>(Arena*);
template<> ::metamoto::services::DataBusPublishRequest* Arena::CreateMaybeMessage<::metamoto::services::DataBusPublishRequest>(Arena*);
template<> ::metamoto::services::DataBusReadAllReply* Arena::CreateMaybeMessage<::metamoto::services::DataBusReadAllReply>(Arena*);
template<> ::metamoto::services::DataBusReadAllRequest* Arena::CreateMaybeMessage<::metamoto::services::DataBusReadAllRequest>(Arena*);
template<> ::metamoto::services::DataBusReadLastReply* Arena::CreateMaybeMessage<::metamoto::services::DataBusReadLastReply>(Arena*);
template<> ::metamoto::services::DataBusReadLastRequest* Arena::CreateMaybeMessage<::metamoto::services::DataBusReadLastRequest>(Arena*);
template<> ::metamoto::services::DataBusReadReply* Arena::CreateMaybeMessage<::metamoto::services::DataBusReadReply>(Arena*);
template<> ::metamoto::services::DataBusReadRequest* Arena::CreateMaybeMessage<::metamoto::services::DataBusReadRequest>(Arena*);
template<> ::metamoto::services::DataBusSubscribeReply* Arena::CreateMaybeMessage<::metamoto::services::DataBusSubscribeReply>(Arena*);
template<> ::metamoto::services::DataBusSubscribeRequest* Arena::CreateMaybeMessage<::metamoto::services::DataBusSubscribeRequest>(Arena*);
template<> ::metamoto::services::DataBusWriteReply* Arena::CreateMaybeMessage<::metamoto::services::DataBusWriteReply>(Arena*);
template<> ::metamoto::services::DataBusWriteRequest* Arena::CreateMaybeMessage<::metamoto::services::DataBusWriteRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace services {

// ===================================================================

class DataBusPublishRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.DataBusPublishRequest) */ {
 public:
  DataBusPublishRequest();
  virtual ~DataBusPublishRequest();

  DataBusPublishRequest(const DataBusPublishRequest& from);

  inline DataBusPublishRequest& operator=(const DataBusPublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataBusPublishRequest(DataBusPublishRequest&& from) noexcept
    : DataBusPublishRequest() {
    *this = ::std::move(from);
  }

  inline DataBusPublishRequest& operator=(DataBusPublishRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBusPublishRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataBusPublishRequest* internal_default_instance() {
    return reinterpret_cast<const DataBusPublishRequest*>(
               &_DataBusPublishRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DataBusPublishRequest* other);
  friend void swap(DataBusPublishRequest& a, DataBusPublishRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataBusPublishRequest* New() const final {
    return CreateMaybeMessage<DataBusPublishRequest>(NULL);
  }

  DataBusPublishRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataBusPublishRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataBusPublishRequest& from);
  void MergeFrom(const DataBusPublishRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataBusPublishRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // string writer_name = 2;
  void clear_writer_name();
  static const int kWriterNameFieldNumber = 2;
  const ::std::string& writer_name() const;
  void set_writer_name(const ::std::string& value);
  #if LANG_CXX11
  void set_writer_name(::std::string&& value);
  #endif
  void set_writer_name(const char* value);
  void set_writer_name(const char* value, size_t size);
  ::std::string* mutable_writer_name();
  ::std::string* release_writer_name();
  void set_allocated_writer_name(::std::string* writer_name);

  // string ego_vehicle_id = 4;
  void clear_ego_vehicle_id();
  static const int kEgoVehicleIdFieldNumber = 4;
  const ::std::string& ego_vehicle_id() const;
  void set_ego_vehicle_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ego_vehicle_id(::std::string&& value);
  #endif
  void set_ego_vehicle_id(const char* value);
  void set_ego_vehicle_id(const char* value, size_t size);
  ::std::string* mutable_ego_vehicle_id();
  ::std::string* release_ego_vehicle_id();
  void set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id);

  // .metamoto.types.NormalDistribution latency = 3;
  bool has_latency() const;
  void clear_latency();
  static const int kLatencyFieldNumber = 3;
  private:
  const ::metamoto::types::NormalDistribution& _internal_latency() const;
  public:
  const ::metamoto::types::NormalDistribution& latency() const;
  ::metamoto::types::NormalDistribution* release_latency();
  ::metamoto::types::NormalDistribution* mutable_latency();
  void set_allocated_latency(::metamoto::types::NormalDistribution* latency);

  // @@protoc_insertion_point(class_scope:metamoto.services.DataBusPublishRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr writer_name_;
  ::google::protobuf::internal::ArenaStringPtr ego_vehicle_id_;
  ::metamoto::types::NormalDistribution* latency_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataBusPublishReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.DataBusPublishReply) */ {
 public:
  DataBusPublishReply();
  virtual ~DataBusPublishReply();

  DataBusPublishReply(const DataBusPublishReply& from);

  inline DataBusPublishReply& operator=(const DataBusPublishReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataBusPublishReply(DataBusPublishReply&& from) noexcept
    : DataBusPublishReply() {
    *this = ::std::move(from);
  }

  inline DataBusPublishReply& operator=(DataBusPublishReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBusPublishReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataBusPublishReply* internal_default_instance() {
    return reinterpret_cast<const DataBusPublishReply*>(
               &_DataBusPublishReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DataBusPublishReply* other);
  friend void swap(DataBusPublishReply& a, DataBusPublishReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataBusPublishReply* New() const final {
    return CreateMaybeMessage<DataBusPublishReply>(NULL);
  }

  DataBusPublishReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataBusPublishReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataBusPublishReply& from);
  void MergeFrom(const DataBusPublishReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataBusPublishReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:metamoto.services.DataBusPublishReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataBusSubscribeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.DataBusSubscribeRequest) */ {
 public:
  DataBusSubscribeRequest();
  virtual ~DataBusSubscribeRequest();

  DataBusSubscribeRequest(const DataBusSubscribeRequest& from);

  inline DataBusSubscribeRequest& operator=(const DataBusSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataBusSubscribeRequest(DataBusSubscribeRequest&& from) noexcept
    : DataBusSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline DataBusSubscribeRequest& operator=(DataBusSubscribeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBusSubscribeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataBusSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const DataBusSubscribeRequest*>(
               &_DataBusSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DataBusSubscribeRequest* other);
  friend void swap(DataBusSubscribeRequest& a, DataBusSubscribeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataBusSubscribeRequest* New() const final {
    return CreateMaybeMessage<DataBusSubscribeRequest>(NULL);
  }

  DataBusSubscribeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataBusSubscribeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataBusSubscribeRequest& from);
  void MergeFrom(const DataBusSubscribeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataBusSubscribeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // string reader_name = 2;
  void clear_reader_name();
  static const int kReaderNameFieldNumber = 2;
  const ::std::string& reader_name() const;
  void set_reader_name(const ::std::string& value);
  #if LANG_CXX11
  void set_reader_name(::std::string&& value);
  #endif
  void set_reader_name(const char* value);
  void set_reader_name(const char* value, size_t size);
  ::std::string* mutable_reader_name();
  ::std::string* release_reader_name();
  void set_allocated_reader_name(::std::string* reader_name);

  // string ego_vehicle_id = 4;
  void clear_ego_vehicle_id();
  static const int kEgoVehicleIdFieldNumber = 4;
  const ::std::string& ego_vehicle_id() const;
  void set_ego_vehicle_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ego_vehicle_id(::std::string&& value);
  #endif
  void set_ego_vehicle_id(const char* value);
  void set_ego_vehicle_id(const char* value, size_t size);
  ::std::string* mutable_ego_vehicle_id();
  ::std::string* release_ego_vehicle_id();
  void set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id);

  // .metamoto.types.NormalDistribution latency = 3;
  bool has_latency() const;
  void clear_latency();
  static const int kLatencyFieldNumber = 3;
  private:
  const ::metamoto::types::NormalDistribution& _internal_latency() const;
  public:
  const ::metamoto::types::NormalDistribution& latency() const;
  ::metamoto::types::NormalDistribution* release_latency();
  ::metamoto::types::NormalDistribution* mutable_latency();
  void set_allocated_latency(::metamoto::types::NormalDistribution* latency);

  // @@protoc_insertion_point(class_scope:metamoto.services.DataBusSubscribeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr reader_name_;
  ::google::protobuf::internal::ArenaStringPtr ego_vehicle_id_;
  ::metamoto::types::NormalDistribution* latency_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataBusSubscribeReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.DataBusSubscribeReply) */ {
 public:
  DataBusSubscribeReply();
  virtual ~DataBusSubscribeReply();

  DataBusSubscribeReply(const DataBusSubscribeReply& from);

  inline DataBusSubscribeReply& operator=(const DataBusSubscribeReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataBusSubscribeReply(DataBusSubscribeReply&& from) noexcept
    : DataBusSubscribeReply() {
    *this = ::std::move(from);
  }

  inline DataBusSubscribeReply& operator=(DataBusSubscribeReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBusSubscribeReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataBusSubscribeReply* internal_default_instance() {
    return reinterpret_cast<const DataBusSubscribeReply*>(
               &_DataBusSubscribeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DataBusSubscribeReply* other);
  friend void swap(DataBusSubscribeReply& a, DataBusSubscribeReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataBusSubscribeReply* New() const final {
    return CreateMaybeMessage<DataBusSubscribeReply>(NULL);
  }

  DataBusSubscribeReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataBusSubscribeReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataBusSubscribeReply& from);
  void MergeFrom(const DataBusSubscribeReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataBusSubscribeReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:metamoto.services.DataBusSubscribeReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataBusWriteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.DataBusWriteRequest) */ {
 public:
  DataBusWriteRequest();
  virtual ~DataBusWriteRequest();

  DataBusWriteRequest(const DataBusWriteRequest& from);

  inline DataBusWriteRequest& operator=(const DataBusWriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataBusWriteRequest(DataBusWriteRequest&& from) noexcept
    : DataBusWriteRequest() {
    *this = ::std::move(from);
  }

  inline DataBusWriteRequest& operator=(DataBusWriteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBusWriteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataBusWriteRequest* internal_default_instance() {
    return reinterpret_cast<const DataBusWriteRequest*>(
               &_DataBusWriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DataBusWriteRequest* other);
  friend void swap(DataBusWriteRequest& a, DataBusWriteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataBusWriteRequest* New() const final {
    return CreateMaybeMessage<DataBusWriteRequest>(NULL);
  }

  DataBusWriteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataBusWriteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataBusWriteRequest& from);
  void MergeFrom(const DataBusWriteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataBusWriteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // string writer_name = 2;
  void clear_writer_name();
  static const int kWriterNameFieldNumber = 2;
  const ::std::string& writer_name() const;
  void set_writer_name(const ::std::string& value);
  #if LANG_CXX11
  void set_writer_name(::std::string&& value);
  #endif
  void set_writer_name(const char* value);
  void set_writer_name(const char* value, size_t size);
  ::std::string* mutable_writer_name();
  ::std::string* release_writer_name();
  void set_allocated_writer_name(::std::string* writer_name);

  // string ego_vehicle_id = 4;
  void clear_ego_vehicle_id();
  static const int kEgoVehicleIdFieldNumber = 4;
  const ::std::string& ego_vehicle_id() const;
  void set_ego_vehicle_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ego_vehicle_id(::std::string&& value);
  #endif
  void set_ego_vehicle_id(const char* value);
  void set_ego_vehicle_id(const char* value, size_t size);
  ::std::string* mutable_ego_vehicle_id();
  ::std::string* release_ego_vehicle_id();
  void set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id);

  // .metamoto.messages.DataBusMessage message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  private:
  const ::metamoto::messages::DataBusMessage& _internal_message() const;
  public:
  const ::metamoto::messages::DataBusMessage& message() const;
  ::metamoto::messages::DataBusMessage* release_message();
  ::metamoto::messages::DataBusMessage* mutable_message();
  void set_allocated_message(::metamoto::messages::DataBusMessage* message);

  // @@protoc_insertion_point(class_scope:metamoto.services.DataBusWriteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr writer_name_;
  ::google::protobuf::internal::ArenaStringPtr ego_vehicle_id_;
  ::metamoto::messages::DataBusMessage* message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataBusWriteReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.DataBusWriteReply) */ {
 public:
  DataBusWriteReply();
  virtual ~DataBusWriteReply();

  DataBusWriteReply(const DataBusWriteReply& from);

  inline DataBusWriteReply& operator=(const DataBusWriteReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataBusWriteReply(DataBusWriteReply&& from) noexcept
    : DataBusWriteReply() {
    *this = ::std::move(from);
  }

  inline DataBusWriteReply& operator=(DataBusWriteReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBusWriteReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataBusWriteReply* internal_default_instance() {
    return reinterpret_cast<const DataBusWriteReply*>(
               &_DataBusWriteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DataBusWriteReply* other);
  friend void swap(DataBusWriteReply& a, DataBusWriteReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataBusWriteReply* New() const final {
    return CreateMaybeMessage<DataBusWriteReply>(NULL);
  }

  DataBusWriteReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataBusWriteReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataBusWriteReply& from);
  void MergeFrom(const DataBusWriteReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataBusWriteReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:metamoto.services.DataBusWriteReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataBusReadRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.DataBusReadRequest) */ {
 public:
  DataBusReadRequest();
  virtual ~DataBusReadRequest();

  DataBusReadRequest(const DataBusReadRequest& from);

  inline DataBusReadRequest& operator=(const DataBusReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataBusReadRequest(DataBusReadRequest&& from) noexcept
    : DataBusReadRequest() {
    *this = ::std::move(from);
  }

  inline DataBusReadRequest& operator=(DataBusReadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBusReadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataBusReadRequest* internal_default_instance() {
    return reinterpret_cast<const DataBusReadRequest*>(
               &_DataBusReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DataBusReadRequest* other);
  friend void swap(DataBusReadRequest& a, DataBusReadRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataBusReadRequest* New() const final {
    return CreateMaybeMessage<DataBusReadRequest>(NULL);
  }

  DataBusReadRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataBusReadRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataBusReadRequest& from);
  void MergeFrom(const DataBusReadRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataBusReadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // string reader_name = 2;
  void clear_reader_name();
  static const int kReaderNameFieldNumber = 2;
  const ::std::string& reader_name() const;
  void set_reader_name(const ::std::string& value);
  #if LANG_CXX11
  void set_reader_name(::std::string&& value);
  #endif
  void set_reader_name(const char* value);
  void set_reader_name(const char* value, size_t size);
  ::std::string* mutable_reader_name();
  ::std::string* release_reader_name();
  void set_allocated_reader_name(::std::string* reader_name);

  // string ego_vehicle_id = 4;
  void clear_ego_vehicle_id();
  static const int kEgoVehicleIdFieldNumber = 4;
  const ::std::string& ego_vehicle_id() const;
  void set_ego_vehicle_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ego_vehicle_id(::std::string&& value);
  #endif
  void set_ego_vehicle_id(const char* value);
  void set_ego_vehicle_id(const char* value, size_t size);
  ::std::string* mutable_ego_vehicle_id();
  ::std::string* release_ego_vehicle_id();
  void set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id);

  // double time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  double time() const;
  void set_time(double value);

  // @@protoc_insertion_point(class_scope:metamoto.services.DataBusReadRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr reader_name_;
  ::google::protobuf::internal::ArenaStringPtr ego_vehicle_id_;
  double time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataBusReadReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.DataBusReadReply) */ {
 public:
  DataBusReadReply();
  virtual ~DataBusReadReply();

  DataBusReadReply(const DataBusReadReply& from);

  inline DataBusReadReply& operator=(const DataBusReadReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataBusReadReply(DataBusReadReply&& from) noexcept
    : DataBusReadReply() {
    *this = ::std::move(from);
  }

  inline DataBusReadReply& operator=(DataBusReadReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBusReadReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataBusReadReply* internal_default_instance() {
    return reinterpret_cast<const DataBusReadReply*>(
               &_DataBusReadReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DataBusReadReply* other);
  friend void swap(DataBusReadReply& a, DataBusReadReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataBusReadReply* New() const final {
    return CreateMaybeMessage<DataBusReadReply>(NULL);
  }

  DataBusReadReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataBusReadReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataBusReadReply& from);
  void MergeFrom(const DataBusReadReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataBusReadReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.messages.DataBusMessage message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  private:
  const ::metamoto::messages::DataBusMessage& _internal_message() const;
  public:
  const ::metamoto::messages::DataBusMessage& message() const;
  ::metamoto::messages::DataBusMessage* release_message();
  ::metamoto::messages::DataBusMessage* mutable_message();
  void set_allocated_message(::metamoto::messages::DataBusMessage* message);

  // @@protoc_insertion_point(class_scope:metamoto.services.DataBusReadReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::messages::DataBusMessage* message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataBusReadAllRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.DataBusReadAllRequest) */ {
 public:
  DataBusReadAllRequest();
  virtual ~DataBusReadAllRequest();

  DataBusReadAllRequest(const DataBusReadAllRequest& from);

  inline DataBusReadAllRequest& operator=(const DataBusReadAllRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataBusReadAllRequest(DataBusReadAllRequest&& from) noexcept
    : DataBusReadAllRequest() {
    *this = ::std::move(from);
  }

  inline DataBusReadAllRequest& operator=(DataBusReadAllRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBusReadAllRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataBusReadAllRequest* internal_default_instance() {
    return reinterpret_cast<const DataBusReadAllRequest*>(
               &_DataBusReadAllRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DataBusReadAllRequest* other);
  friend void swap(DataBusReadAllRequest& a, DataBusReadAllRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataBusReadAllRequest* New() const final {
    return CreateMaybeMessage<DataBusReadAllRequest>(NULL);
  }

  DataBusReadAllRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataBusReadAllRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataBusReadAllRequest& from);
  void MergeFrom(const DataBusReadAllRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataBusReadAllRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // string reader_name = 2;
  void clear_reader_name();
  static const int kReaderNameFieldNumber = 2;
  const ::std::string& reader_name() const;
  void set_reader_name(const ::std::string& value);
  #if LANG_CXX11
  void set_reader_name(::std::string&& value);
  #endif
  void set_reader_name(const char* value);
  void set_reader_name(const char* value, size_t size);
  ::std::string* mutable_reader_name();
  ::std::string* release_reader_name();
  void set_allocated_reader_name(::std::string* reader_name);

  // string ego_vehicle_id = 4;
  void clear_ego_vehicle_id();
  static const int kEgoVehicleIdFieldNumber = 4;
  const ::std::string& ego_vehicle_id() const;
  void set_ego_vehicle_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ego_vehicle_id(::std::string&& value);
  #endif
  void set_ego_vehicle_id(const char* value);
  void set_ego_vehicle_id(const char* value, size_t size);
  ::std::string* mutable_ego_vehicle_id();
  ::std::string* release_ego_vehicle_id();
  void set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id);

  // double time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  double time() const;
  void set_time(double value);

  // @@protoc_insertion_point(class_scope:metamoto.services.DataBusReadAllRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr reader_name_;
  ::google::protobuf::internal::ArenaStringPtr ego_vehicle_id_;
  double time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataBusReadAllReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.DataBusReadAllReply) */ {
 public:
  DataBusReadAllReply();
  virtual ~DataBusReadAllReply();

  DataBusReadAllReply(const DataBusReadAllReply& from);

  inline DataBusReadAllReply& operator=(const DataBusReadAllReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataBusReadAllReply(DataBusReadAllReply&& from) noexcept
    : DataBusReadAllReply() {
    *this = ::std::move(from);
  }

  inline DataBusReadAllReply& operator=(DataBusReadAllReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBusReadAllReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataBusReadAllReply* internal_default_instance() {
    return reinterpret_cast<const DataBusReadAllReply*>(
               &_DataBusReadAllReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(DataBusReadAllReply* other);
  friend void swap(DataBusReadAllReply& a, DataBusReadAllReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataBusReadAllReply* New() const final {
    return CreateMaybeMessage<DataBusReadAllReply>(NULL);
  }

  DataBusReadAllReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataBusReadAllReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataBusReadAllReply& from);
  void MergeFrom(const DataBusReadAllReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataBusReadAllReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.messages.DataBusMessage messages = 1;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 1;
  ::metamoto::messages::DataBusMessage* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::messages::DataBusMessage >*
      mutable_messages();
  const ::metamoto::messages::DataBusMessage& messages(int index) const;
  ::metamoto::messages::DataBusMessage* add_messages();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::messages::DataBusMessage >&
      messages() const;

  // @@protoc_insertion_point(class_scope:metamoto.services.DataBusReadAllReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::messages::DataBusMessage > messages_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataBusReadLastRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.DataBusReadLastRequest) */ {
 public:
  DataBusReadLastRequest();
  virtual ~DataBusReadLastRequest();

  DataBusReadLastRequest(const DataBusReadLastRequest& from);

  inline DataBusReadLastRequest& operator=(const DataBusReadLastRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataBusReadLastRequest(DataBusReadLastRequest&& from) noexcept
    : DataBusReadLastRequest() {
    *this = ::std::move(from);
  }

  inline DataBusReadLastRequest& operator=(DataBusReadLastRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBusReadLastRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataBusReadLastRequest* internal_default_instance() {
    return reinterpret_cast<const DataBusReadLastRequest*>(
               &_DataBusReadLastRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(DataBusReadLastRequest* other);
  friend void swap(DataBusReadLastRequest& a, DataBusReadLastRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataBusReadLastRequest* New() const final {
    return CreateMaybeMessage<DataBusReadLastRequest>(NULL);
  }

  DataBusReadLastRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataBusReadLastRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataBusReadLastRequest& from);
  void MergeFrom(const DataBusReadLastRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataBusReadLastRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // string reader_name = 2;
  void clear_reader_name();
  static const int kReaderNameFieldNumber = 2;
  const ::std::string& reader_name() const;
  void set_reader_name(const ::std::string& value);
  #if LANG_CXX11
  void set_reader_name(::std::string&& value);
  #endif
  void set_reader_name(const char* value);
  void set_reader_name(const char* value, size_t size);
  ::std::string* mutable_reader_name();
  ::std::string* release_reader_name();
  void set_allocated_reader_name(::std::string* reader_name);

  // string ego_vehicle_id = 4;
  void clear_ego_vehicle_id();
  static const int kEgoVehicleIdFieldNumber = 4;
  const ::std::string& ego_vehicle_id() const;
  void set_ego_vehicle_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ego_vehicle_id(::std::string&& value);
  #endif
  void set_ego_vehicle_id(const char* value);
  void set_ego_vehicle_id(const char* value, size_t size);
  ::std::string* mutable_ego_vehicle_id();
  ::std::string* release_ego_vehicle_id();
  void set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id);

  // double time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  double time() const;
  void set_time(double value);

  // @@protoc_insertion_point(class_scope:metamoto.services.DataBusReadLastRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr reader_name_;
  ::google::protobuf::internal::ArenaStringPtr ego_vehicle_id_;
  double time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataBusReadLastReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.DataBusReadLastReply) */ {
 public:
  DataBusReadLastReply();
  virtual ~DataBusReadLastReply();

  DataBusReadLastReply(const DataBusReadLastReply& from);

  inline DataBusReadLastReply& operator=(const DataBusReadLastReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataBusReadLastReply(DataBusReadLastReply&& from) noexcept
    : DataBusReadLastReply() {
    *this = ::std::move(from);
  }

  inline DataBusReadLastReply& operator=(DataBusReadLastReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBusReadLastReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataBusReadLastReply* internal_default_instance() {
    return reinterpret_cast<const DataBusReadLastReply*>(
               &_DataBusReadLastReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(DataBusReadLastReply* other);
  friend void swap(DataBusReadLastReply& a, DataBusReadLastReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataBusReadLastReply* New() const final {
    return CreateMaybeMessage<DataBusReadLastReply>(NULL);
  }

  DataBusReadLastReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataBusReadLastReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataBusReadLastReply& from);
  void MergeFrom(const DataBusReadLastReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataBusReadLastReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.messages.DataBusMessage message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  private:
  const ::metamoto::messages::DataBusMessage& _internal_message() const;
  public:
  const ::metamoto::messages::DataBusMessage& message() const;
  ::metamoto::messages::DataBusMessage* release_message();
  ::metamoto::messages::DataBusMessage* mutable_message();
  void set_allocated_message(::metamoto::messages::DataBusMessage* message);

  // @@protoc_insertion_point(class_scope:metamoto.services.DataBusReadLastReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::messages::DataBusMessage* message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataBusPublishRequest

// string topic = 1;
inline void DataBusPublishRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBusPublishRequest::topic() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusPublishRequest.topic)
  return topic_.GetNoArena();
}
inline void DataBusPublishRequest::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusPublishRequest.topic)
}
#if LANG_CXX11
inline void DataBusPublishRequest::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.DataBusPublishRequest.topic)
}
#endif
inline void DataBusPublishRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.DataBusPublishRequest.topic)
}
inline void DataBusPublishRequest::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.DataBusPublishRequest.topic)
}
inline ::std::string* DataBusPublishRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusPublishRequest.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBusPublishRequest::release_topic() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusPublishRequest.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBusPublishRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusPublishRequest.topic)
}

// string writer_name = 2;
inline void DataBusPublishRequest::clear_writer_name() {
  writer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBusPublishRequest::writer_name() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusPublishRequest.writer_name)
  return writer_name_.GetNoArena();
}
inline void DataBusPublishRequest::set_writer_name(const ::std::string& value) {
  
  writer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusPublishRequest.writer_name)
}
#if LANG_CXX11
inline void DataBusPublishRequest::set_writer_name(::std::string&& value) {
  
  writer_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.DataBusPublishRequest.writer_name)
}
#endif
inline void DataBusPublishRequest::set_writer_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  writer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.DataBusPublishRequest.writer_name)
}
inline void DataBusPublishRequest::set_writer_name(const char* value, size_t size) {
  
  writer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.DataBusPublishRequest.writer_name)
}
inline ::std::string* DataBusPublishRequest::mutable_writer_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusPublishRequest.writer_name)
  return writer_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBusPublishRequest::release_writer_name() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusPublishRequest.writer_name)
  
  return writer_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBusPublishRequest::set_allocated_writer_name(::std::string* writer_name) {
  if (writer_name != NULL) {
    
  } else {
    
  }
  writer_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), writer_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusPublishRequest.writer_name)
}

// .metamoto.types.NormalDistribution latency = 3;
inline bool DataBusPublishRequest::has_latency() const {
  return this != internal_default_instance() && latency_ != NULL;
}
inline const ::metamoto::types::NormalDistribution& DataBusPublishRequest::_internal_latency() const {
  return *latency_;
}
inline const ::metamoto::types::NormalDistribution& DataBusPublishRequest::latency() const {
  const ::metamoto::types::NormalDistribution* p = latency_;
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusPublishRequest.latency)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::NormalDistribution*>(
      &::metamoto::types::_NormalDistribution_default_instance_);
}
inline ::metamoto::types::NormalDistribution* DataBusPublishRequest::release_latency() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusPublishRequest.latency)
  
  ::metamoto::types::NormalDistribution* temp = latency_;
  latency_ = NULL;
  return temp;
}
inline ::metamoto::types::NormalDistribution* DataBusPublishRequest::mutable_latency() {
  
  if (latency_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::NormalDistribution>(GetArenaNoVirtual());
    latency_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusPublishRequest.latency)
  return latency_;
}
inline void DataBusPublishRequest::set_allocated_latency(::metamoto::types::NormalDistribution* latency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(latency_);
  }
  if (latency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      latency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, latency, submessage_arena);
    }
    
  } else {
    
  }
  latency_ = latency;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusPublishRequest.latency)
}

// string ego_vehicle_id = 4;
inline void DataBusPublishRequest::clear_ego_vehicle_id() {
  ego_vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBusPublishRequest::ego_vehicle_id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusPublishRequest.ego_vehicle_id)
  return ego_vehicle_id_.GetNoArena();
}
inline void DataBusPublishRequest::set_ego_vehicle_id(const ::std::string& value) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusPublishRequest.ego_vehicle_id)
}
#if LANG_CXX11
inline void DataBusPublishRequest::set_ego_vehicle_id(::std::string&& value) {
  
  ego_vehicle_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.DataBusPublishRequest.ego_vehicle_id)
}
#endif
inline void DataBusPublishRequest::set_ego_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.DataBusPublishRequest.ego_vehicle_id)
}
inline void DataBusPublishRequest::set_ego_vehicle_id(const char* value, size_t size) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.DataBusPublishRequest.ego_vehicle_id)
}
inline ::std::string* DataBusPublishRequest::mutable_ego_vehicle_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusPublishRequest.ego_vehicle_id)
  return ego_vehicle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBusPublishRequest::release_ego_vehicle_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusPublishRequest.ego_vehicle_id)
  
  return ego_vehicle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBusPublishRequest::set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id) {
  if (ego_vehicle_id != NULL) {
    
  } else {
    
  }
  ego_vehicle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ego_vehicle_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusPublishRequest.ego_vehicle_id)
}

// -------------------------------------------------------------------

// DataBusPublishReply

// -------------------------------------------------------------------

// DataBusSubscribeRequest

// string topic = 1;
inline void DataBusSubscribeRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBusSubscribeRequest::topic() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusSubscribeRequest.topic)
  return topic_.GetNoArena();
}
inline void DataBusSubscribeRequest::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusSubscribeRequest.topic)
}
#if LANG_CXX11
inline void DataBusSubscribeRequest::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.DataBusSubscribeRequest.topic)
}
#endif
inline void DataBusSubscribeRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.DataBusSubscribeRequest.topic)
}
inline void DataBusSubscribeRequest::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.DataBusSubscribeRequest.topic)
}
inline ::std::string* DataBusSubscribeRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusSubscribeRequest.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBusSubscribeRequest::release_topic() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusSubscribeRequest.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBusSubscribeRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusSubscribeRequest.topic)
}

// string reader_name = 2;
inline void DataBusSubscribeRequest::clear_reader_name() {
  reader_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBusSubscribeRequest::reader_name() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusSubscribeRequest.reader_name)
  return reader_name_.GetNoArena();
}
inline void DataBusSubscribeRequest::set_reader_name(const ::std::string& value) {
  
  reader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusSubscribeRequest.reader_name)
}
#if LANG_CXX11
inline void DataBusSubscribeRequest::set_reader_name(::std::string&& value) {
  
  reader_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.DataBusSubscribeRequest.reader_name)
}
#endif
inline void DataBusSubscribeRequest::set_reader_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.DataBusSubscribeRequest.reader_name)
}
inline void DataBusSubscribeRequest::set_reader_name(const char* value, size_t size) {
  
  reader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.DataBusSubscribeRequest.reader_name)
}
inline ::std::string* DataBusSubscribeRequest::mutable_reader_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusSubscribeRequest.reader_name)
  return reader_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBusSubscribeRequest::release_reader_name() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusSubscribeRequest.reader_name)
  
  return reader_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBusSubscribeRequest::set_allocated_reader_name(::std::string* reader_name) {
  if (reader_name != NULL) {
    
  } else {
    
  }
  reader_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reader_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusSubscribeRequest.reader_name)
}

// .metamoto.types.NormalDistribution latency = 3;
inline bool DataBusSubscribeRequest::has_latency() const {
  return this != internal_default_instance() && latency_ != NULL;
}
inline const ::metamoto::types::NormalDistribution& DataBusSubscribeRequest::_internal_latency() const {
  return *latency_;
}
inline const ::metamoto::types::NormalDistribution& DataBusSubscribeRequest::latency() const {
  const ::metamoto::types::NormalDistribution* p = latency_;
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusSubscribeRequest.latency)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::NormalDistribution*>(
      &::metamoto::types::_NormalDistribution_default_instance_);
}
inline ::metamoto::types::NormalDistribution* DataBusSubscribeRequest::release_latency() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusSubscribeRequest.latency)
  
  ::metamoto::types::NormalDistribution* temp = latency_;
  latency_ = NULL;
  return temp;
}
inline ::metamoto::types::NormalDistribution* DataBusSubscribeRequest::mutable_latency() {
  
  if (latency_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::NormalDistribution>(GetArenaNoVirtual());
    latency_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusSubscribeRequest.latency)
  return latency_;
}
inline void DataBusSubscribeRequest::set_allocated_latency(::metamoto::types::NormalDistribution* latency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(latency_);
  }
  if (latency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      latency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, latency, submessage_arena);
    }
    
  } else {
    
  }
  latency_ = latency;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusSubscribeRequest.latency)
}

// string ego_vehicle_id = 4;
inline void DataBusSubscribeRequest::clear_ego_vehicle_id() {
  ego_vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBusSubscribeRequest::ego_vehicle_id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusSubscribeRequest.ego_vehicle_id)
  return ego_vehicle_id_.GetNoArena();
}
inline void DataBusSubscribeRequest::set_ego_vehicle_id(const ::std::string& value) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusSubscribeRequest.ego_vehicle_id)
}
#if LANG_CXX11
inline void DataBusSubscribeRequest::set_ego_vehicle_id(::std::string&& value) {
  
  ego_vehicle_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.DataBusSubscribeRequest.ego_vehicle_id)
}
#endif
inline void DataBusSubscribeRequest::set_ego_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.DataBusSubscribeRequest.ego_vehicle_id)
}
inline void DataBusSubscribeRequest::set_ego_vehicle_id(const char* value, size_t size) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.DataBusSubscribeRequest.ego_vehicle_id)
}
inline ::std::string* DataBusSubscribeRequest::mutable_ego_vehicle_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusSubscribeRequest.ego_vehicle_id)
  return ego_vehicle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBusSubscribeRequest::release_ego_vehicle_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusSubscribeRequest.ego_vehicle_id)
  
  return ego_vehicle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBusSubscribeRequest::set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id) {
  if (ego_vehicle_id != NULL) {
    
  } else {
    
  }
  ego_vehicle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ego_vehicle_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusSubscribeRequest.ego_vehicle_id)
}

// -------------------------------------------------------------------

// DataBusSubscribeReply

// -------------------------------------------------------------------

// DataBusWriteRequest

// string topic = 1;
inline void DataBusWriteRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBusWriteRequest::topic() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusWriteRequest.topic)
  return topic_.GetNoArena();
}
inline void DataBusWriteRequest::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusWriteRequest.topic)
}
#if LANG_CXX11
inline void DataBusWriteRequest::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.DataBusWriteRequest.topic)
}
#endif
inline void DataBusWriteRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.DataBusWriteRequest.topic)
}
inline void DataBusWriteRequest::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.DataBusWriteRequest.topic)
}
inline ::std::string* DataBusWriteRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusWriteRequest.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBusWriteRequest::release_topic() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusWriteRequest.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBusWriteRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusWriteRequest.topic)
}

// string writer_name = 2;
inline void DataBusWriteRequest::clear_writer_name() {
  writer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBusWriteRequest::writer_name() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusWriteRequest.writer_name)
  return writer_name_.GetNoArena();
}
inline void DataBusWriteRequest::set_writer_name(const ::std::string& value) {
  
  writer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusWriteRequest.writer_name)
}
#if LANG_CXX11
inline void DataBusWriteRequest::set_writer_name(::std::string&& value) {
  
  writer_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.DataBusWriteRequest.writer_name)
}
#endif
inline void DataBusWriteRequest::set_writer_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  writer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.DataBusWriteRequest.writer_name)
}
inline void DataBusWriteRequest::set_writer_name(const char* value, size_t size) {
  
  writer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.DataBusWriteRequest.writer_name)
}
inline ::std::string* DataBusWriteRequest::mutable_writer_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusWriteRequest.writer_name)
  return writer_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBusWriteRequest::release_writer_name() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusWriteRequest.writer_name)
  
  return writer_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBusWriteRequest::set_allocated_writer_name(::std::string* writer_name) {
  if (writer_name != NULL) {
    
  } else {
    
  }
  writer_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), writer_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusWriteRequest.writer_name)
}

// .metamoto.messages.DataBusMessage message = 3;
inline bool DataBusWriteRequest::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline const ::metamoto::messages::DataBusMessage& DataBusWriteRequest::_internal_message() const {
  return *message_;
}
inline const ::metamoto::messages::DataBusMessage& DataBusWriteRequest::message() const {
  const ::metamoto::messages::DataBusMessage* p = message_;
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusWriteRequest.message)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::messages::DataBusMessage*>(
      &::metamoto::messages::_DataBusMessage_default_instance_);
}
inline ::metamoto::messages::DataBusMessage* DataBusWriteRequest::release_message() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusWriteRequest.message)
  
  ::metamoto::messages::DataBusMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::metamoto::messages::DataBusMessage* DataBusWriteRequest::mutable_message() {
  
  if (message_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::messages::DataBusMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusWriteRequest.message)
  return message_;
}
inline void DataBusWriteRequest::set_allocated_message(::metamoto::messages::DataBusMessage* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(message_);
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusWriteRequest.message)
}

// string ego_vehicle_id = 4;
inline void DataBusWriteRequest::clear_ego_vehicle_id() {
  ego_vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBusWriteRequest::ego_vehicle_id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusWriteRequest.ego_vehicle_id)
  return ego_vehicle_id_.GetNoArena();
}
inline void DataBusWriteRequest::set_ego_vehicle_id(const ::std::string& value) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusWriteRequest.ego_vehicle_id)
}
#if LANG_CXX11
inline void DataBusWriteRequest::set_ego_vehicle_id(::std::string&& value) {
  
  ego_vehicle_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.DataBusWriteRequest.ego_vehicle_id)
}
#endif
inline void DataBusWriteRequest::set_ego_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.DataBusWriteRequest.ego_vehicle_id)
}
inline void DataBusWriteRequest::set_ego_vehicle_id(const char* value, size_t size) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.DataBusWriteRequest.ego_vehicle_id)
}
inline ::std::string* DataBusWriteRequest::mutable_ego_vehicle_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusWriteRequest.ego_vehicle_id)
  return ego_vehicle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBusWriteRequest::release_ego_vehicle_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusWriteRequest.ego_vehicle_id)
  
  return ego_vehicle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBusWriteRequest::set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id) {
  if (ego_vehicle_id != NULL) {
    
  } else {
    
  }
  ego_vehicle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ego_vehicle_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusWriteRequest.ego_vehicle_id)
}

// -------------------------------------------------------------------

// DataBusWriteReply

// -------------------------------------------------------------------

// DataBusReadRequest

// string topic = 1;
inline void DataBusReadRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBusReadRequest::topic() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusReadRequest.topic)
  return topic_.GetNoArena();
}
inline void DataBusReadRequest::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusReadRequest.topic)
}
#if LANG_CXX11
inline void DataBusReadRequest::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.DataBusReadRequest.topic)
}
#endif
inline void DataBusReadRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.DataBusReadRequest.topic)
}
inline void DataBusReadRequest::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.DataBusReadRequest.topic)
}
inline ::std::string* DataBusReadRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusReadRequest.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBusReadRequest::release_topic() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusReadRequest.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBusReadRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusReadRequest.topic)
}

// string reader_name = 2;
inline void DataBusReadRequest::clear_reader_name() {
  reader_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBusReadRequest::reader_name() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusReadRequest.reader_name)
  return reader_name_.GetNoArena();
}
inline void DataBusReadRequest::set_reader_name(const ::std::string& value) {
  
  reader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusReadRequest.reader_name)
}
#if LANG_CXX11
inline void DataBusReadRequest::set_reader_name(::std::string&& value) {
  
  reader_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.DataBusReadRequest.reader_name)
}
#endif
inline void DataBusReadRequest::set_reader_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.DataBusReadRequest.reader_name)
}
inline void DataBusReadRequest::set_reader_name(const char* value, size_t size) {
  
  reader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.DataBusReadRequest.reader_name)
}
inline ::std::string* DataBusReadRequest::mutable_reader_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusReadRequest.reader_name)
  return reader_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBusReadRequest::release_reader_name() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusReadRequest.reader_name)
  
  return reader_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBusReadRequest::set_allocated_reader_name(::std::string* reader_name) {
  if (reader_name != NULL) {
    
  } else {
    
  }
  reader_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reader_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusReadRequest.reader_name)
}

// double time = 3;
inline void DataBusReadRequest::clear_time() {
  time_ = 0;
}
inline double DataBusReadRequest::time() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusReadRequest.time)
  return time_;
}
inline void DataBusReadRequest::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusReadRequest.time)
}

// string ego_vehicle_id = 4;
inline void DataBusReadRequest::clear_ego_vehicle_id() {
  ego_vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBusReadRequest::ego_vehicle_id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusReadRequest.ego_vehicle_id)
  return ego_vehicle_id_.GetNoArena();
}
inline void DataBusReadRequest::set_ego_vehicle_id(const ::std::string& value) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusReadRequest.ego_vehicle_id)
}
#if LANG_CXX11
inline void DataBusReadRequest::set_ego_vehicle_id(::std::string&& value) {
  
  ego_vehicle_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.DataBusReadRequest.ego_vehicle_id)
}
#endif
inline void DataBusReadRequest::set_ego_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.DataBusReadRequest.ego_vehicle_id)
}
inline void DataBusReadRequest::set_ego_vehicle_id(const char* value, size_t size) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.DataBusReadRequest.ego_vehicle_id)
}
inline ::std::string* DataBusReadRequest::mutable_ego_vehicle_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusReadRequest.ego_vehicle_id)
  return ego_vehicle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBusReadRequest::release_ego_vehicle_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusReadRequest.ego_vehicle_id)
  
  return ego_vehicle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBusReadRequest::set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id) {
  if (ego_vehicle_id != NULL) {
    
  } else {
    
  }
  ego_vehicle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ego_vehicle_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusReadRequest.ego_vehicle_id)
}

// -------------------------------------------------------------------

// DataBusReadReply

// .metamoto.messages.DataBusMessage message = 1;
inline bool DataBusReadReply::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline const ::metamoto::messages::DataBusMessage& DataBusReadReply::_internal_message() const {
  return *message_;
}
inline const ::metamoto::messages::DataBusMessage& DataBusReadReply::message() const {
  const ::metamoto::messages::DataBusMessage* p = message_;
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusReadReply.message)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::messages::DataBusMessage*>(
      &::metamoto::messages::_DataBusMessage_default_instance_);
}
inline ::metamoto::messages::DataBusMessage* DataBusReadReply::release_message() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusReadReply.message)
  
  ::metamoto::messages::DataBusMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::metamoto::messages::DataBusMessage* DataBusReadReply::mutable_message() {
  
  if (message_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::messages::DataBusMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusReadReply.message)
  return message_;
}
inline void DataBusReadReply::set_allocated_message(::metamoto::messages::DataBusMessage* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(message_);
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusReadReply.message)
}

// -------------------------------------------------------------------

// DataBusReadAllRequest

// string topic = 1;
inline void DataBusReadAllRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBusReadAllRequest::topic() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusReadAllRequest.topic)
  return topic_.GetNoArena();
}
inline void DataBusReadAllRequest::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusReadAllRequest.topic)
}
#if LANG_CXX11
inline void DataBusReadAllRequest::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.DataBusReadAllRequest.topic)
}
#endif
inline void DataBusReadAllRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.DataBusReadAllRequest.topic)
}
inline void DataBusReadAllRequest::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.DataBusReadAllRequest.topic)
}
inline ::std::string* DataBusReadAllRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusReadAllRequest.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBusReadAllRequest::release_topic() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusReadAllRequest.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBusReadAllRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusReadAllRequest.topic)
}

// string reader_name = 2;
inline void DataBusReadAllRequest::clear_reader_name() {
  reader_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBusReadAllRequest::reader_name() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusReadAllRequest.reader_name)
  return reader_name_.GetNoArena();
}
inline void DataBusReadAllRequest::set_reader_name(const ::std::string& value) {
  
  reader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusReadAllRequest.reader_name)
}
#if LANG_CXX11
inline void DataBusReadAllRequest::set_reader_name(::std::string&& value) {
  
  reader_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.DataBusReadAllRequest.reader_name)
}
#endif
inline void DataBusReadAllRequest::set_reader_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.DataBusReadAllRequest.reader_name)
}
inline void DataBusReadAllRequest::set_reader_name(const char* value, size_t size) {
  
  reader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.DataBusReadAllRequest.reader_name)
}
inline ::std::string* DataBusReadAllRequest::mutable_reader_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusReadAllRequest.reader_name)
  return reader_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBusReadAllRequest::release_reader_name() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusReadAllRequest.reader_name)
  
  return reader_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBusReadAllRequest::set_allocated_reader_name(::std::string* reader_name) {
  if (reader_name != NULL) {
    
  } else {
    
  }
  reader_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reader_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusReadAllRequest.reader_name)
}

// double time = 3;
inline void DataBusReadAllRequest::clear_time() {
  time_ = 0;
}
inline double DataBusReadAllRequest::time() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusReadAllRequest.time)
  return time_;
}
inline void DataBusReadAllRequest::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusReadAllRequest.time)
}

// string ego_vehicle_id = 4;
inline void DataBusReadAllRequest::clear_ego_vehicle_id() {
  ego_vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBusReadAllRequest::ego_vehicle_id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusReadAllRequest.ego_vehicle_id)
  return ego_vehicle_id_.GetNoArena();
}
inline void DataBusReadAllRequest::set_ego_vehicle_id(const ::std::string& value) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusReadAllRequest.ego_vehicle_id)
}
#if LANG_CXX11
inline void DataBusReadAllRequest::set_ego_vehicle_id(::std::string&& value) {
  
  ego_vehicle_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.DataBusReadAllRequest.ego_vehicle_id)
}
#endif
inline void DataBusReadAllRequest::set_ego_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.DataBusReadAllRequest.ego_vehicle_id)
}
inline void DataBusReadAllRequest::set_ego_vehicle_id(const char* value, size_t size) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.DataBusReadAllRequest.ego_vehicle_id)
}
inline ::std::string* DataBusReadAllRequest::mutable_ego_vehicle_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusReadAllRequest.ego_vehicle_id)
  return ego_vehicle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBusReadAllRequest::release_ego_vehicle_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusReadAllRequest.ego_vehicle_id)
  
  return ego_vehicle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBusReadAllRequest::set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id) {
  if (ego_vehicle_id != NULL) {
    
  } else {
    
  }
  ego_vehicle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ego_vehicle_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusReadAllRequest.ego_vehicle_id)
}

// -------------------------------------------------------------------

// DataBusReadAllReply

// repeated .metamoto.messages.DataBusMessage messages = 1;
inline int DataBusReadAllReply::messages_size() const {
  return messages_.size();
}
inline ::metamoto::messages::DataBusMessage* DataBusReadAllReply::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusReadAllReply.messages)
  return messages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::messages::DataBusMessage >*
DataBusReadAllReply::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.DataBusReadAllReply.messages)
  return &messages_;
}
inline const ::metamoto::messages::DataBusMessage& DataBusReadAllReply::messages(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusReadAllReply.messages)
  return messages_.Get(index);
}
inline ::metamoto::messages::DataBusMessage* DataBusReadAllReply::add_messages() {
  // @@protoc_insertion_point(field_add:metamoto.services.DataBusReadAllReply.messages)
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::messages::DataBusMessage >&
DataBusReadAllReply::messages() const {
  // @@protoc_insertion_point(field_list:metamoto.services.DataBusReadAllReply.messages)
  return messages_;
}

// -------------------------------------------------------------------

// DataBusReadLastRequest

// string topic = 1;
inline void DataBusReadLastRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBusReadLastRequest::topic() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusReadLastRequest.topic)
  return topic_.GetNoArena();
}
inline void DataBusReadLastRequest::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusReadLastRequest.topic)
}
#if LANG_CXX11
inline void DataBusReadLastRequest::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.DataBusReadLastRequest.topic)
}
#endif
inline void DataBusReadLastRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.DataBusReadLastRequest.topic)
}
inline void DataBusReadLastRequest::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.DataBusReadLastRequest.topic)
}
inline ::std::string* DataBusReadLastRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusReadLastRequest.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBusReadLastRequest::release_topic() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusReadLastRequest.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBusReadLastRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusReadLastRequest.topic)
}

// string reader_name = 2;
inline void DataBusReadLastRequest::clear_reader_name() {
  reader_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBusReadLastRequest::reader_name() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusReadLastRequest.reader_name)
  return reader_name_.GetNoArena();
}
inline void DataBusReadLastRequest::set_reader_name(const ::std::string& value) {
  
  reader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusReadLastRequest.reader_name)
}
#if LANG_CXX11
inline void DataBusReadLastRequest::set_reader_name(::std::string&& value) {
  
  reader_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.DataBusReadLastRequest.reader_name)
}
#endif
inline void DataBusReadLastRequest::set_reader_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.DataBusReadLastRequest.reader_name)
}
inline void DataBusReadLastRequest::set_reader_name(const char* value, size_t size) {
  
  reader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.DataBusReadLastRequest.reader_name)
}
inline ::std::string* DataBusReadLastRequest::mutable_reader_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusReadLastRequest.reader_name)
  return reader_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBusReadLastRequest::release_reader_name() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusReadLastRequest.reader_name)
  
  return reader_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBusReadLastRequest::set_allocated_reader_name(::std::string* reader_name) {
  if (reader_name != NULL) {
    
  } else {
    
  }
  reader_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reader_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusReadLastRequest.reader_name)
}

// double time = 3;
inline void DataBusReadLastRequest::clear_time() {
  time_ = 0;
}
inline double DataBusReadLastRequest::time() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusReadLastRequest.time)
  return time_;
}
inline void DataBusReadLastRequest::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusReadLastRequest.time)
}

// string ego_vehicle_id = 4;
inline void DataBusReadLastRequest::clear_ego_vehicle_id() {
  ego_vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBusReadLastRequest::ego_vehicle_id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusReadLastRequest.ego_vehicle_id)
  return ego_vehicle_id_.GetNoArena();
}
inline void DataBusReadLastRequest::set_ego_vehicle_id(const ::std::string& value) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.DataBusReadLastRequest.ego_vehicle_id)
}
#if LANG_CXX11
inline void DataBusReadLastRequest::set_ego_vehicle_id(::std::string&& value) {
  
  ego_vehicle_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.DataBusReadLastRequest.ego_vehicle_id)
}
#endif
inline void DataBusReadLastRequest::set_ego_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.DataBusReadLastRequest.ego_vehicle_id)
}
inline void DataBusReadLastRequest::set_ego_vehicle_id(const char* value, size_t size) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.DataBusReadLastRequest.ego_vehicle_id)
}
inline ::std::string* DataBusReadLastRequest::mutable_ego_vehicle_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusReadLastRequest.ego_vehicle_id)
  return ego_vehicle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBusReadLastRequest::release_ego_vehicle_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusReadLastRequest.ego_vehicle_id)
  
  return ego_vehicle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBusReadLastRequest::set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id) {
  if (ego_vehicle_id != NULL) {
    
  } else {
    
  }
  ego_vehicle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ego_vehicle_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusReadLastRequest.ego_vehicle_id)
}

// -------------------------------------------------------------------

// DataBusReadLastReply

// .metamoto.messages.DataBusMessage message = 1;
inline bool DataBusReadLastReply::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline const ::metamoto::messages::DataBusMessage& DataBusReadLastReply::_internal_message() const {
  return *message_;
}
inline const ::metamoto::messages::DataBusMessage& DataBusReadLastReply::message() const {
  const ::metamoto::messages::DataBusMessage* p = message_;
  // @@protoc_insertion_point(field_get:metamoto.services.DataBusReadLastReply.message)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::messages::DataBusMessage*>(
      &::metamoto::messages::_DataBusMessage_default_instance_);
}
inline ::metamoto::messages::DataBusMessage* DataBusReadLastReply::release_message() {
  // @@protoc_insertion_point(field_release:metamoto.services.DataBusReadLastReply.message)
  
  ::metamoto::messages::DataBusMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::metamoto::messages::DataBusMessage* DataBusReadLastReply::mutable_message() {
  
  if (message_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::messages::DataBusMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.DataBusReadLastReply.message)
  return message_;
}
inline void DataBusReadLastReply::set_allocated_message(::metamoto::messages::DataBusMessage* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(message_);
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.DataBusReadLastReply.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace services
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2fservices_2fdata_5fbus_2eproto
