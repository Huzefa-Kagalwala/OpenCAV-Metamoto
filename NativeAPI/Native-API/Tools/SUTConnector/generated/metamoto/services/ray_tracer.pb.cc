// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/services/ray_tracer.proto

#include "metamoto/services/ray_tracer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_metamoto_2fservices_2fray_5ftracer_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fray_5ftracer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RayTracerTraceRequest_OutputFields;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fray_5ftracer_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Ray;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fray_5ftracer_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RayHit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fray_5ftracer_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RayTracerRadiationPattern;
}  // namespace protobuf_metamoto_2fservices_2fray_5ftracer_2eproto
namespace protobuf_metamoto_2ftypes_2fvector3_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fvector3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3;
}  // namespace protobuf_metamoto_2ftypes_2fvector3_2eproto
namespace metamoto {
namespace services {
class RayTracerRadiationPatternDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RayTracerRadiationPattern>
      _instance;
} _RayTracerRadiationPattern_default_instance_;
class RayTracerSetPatternsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RayTracerSetPatternsRequest>
      _instance;
} _RayTracerSetPatternsRequest_default_instance_;
class RayTracerSetPatternsReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RayTracerSetPatternsReply>
      _instance;
} _RayTracerSetPatternsReply_default_instance_;
class RayTracerTraceRequest_OutputFieldsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RayTracerTraceRequest_OutputFields>
      _instance;
} _RayTracerTraceRequest_OutputFields_default_instance_;
class RayTracerTraceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RayTracerTraceRequest>
      _instance;
} _RayTracerTraceRequest_default_instance_;
class RayTracerTraceReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RayTracerTraceReply>
      _instance;
} _RayTracerTraceReply_default_instance_;
class RayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ray>
      _instance;
} _Ray_default_instance_;
class RayHitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RayHit>
      _instance;
} _RayHit_default_instance_;
}  // namespace services
}  // namespace metamoto
namespace protobuf_metamoto_2fservices_2fray_5ftracer_2eproto {
static void InitDefaultsRayTracerRadiationPattern() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_RayTracerRadiationPattern_default_instance_;
    new (ptr) ::metamoto::services::RayTracerRadiationPattern();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::RayTracerRadiationPattern::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RayTracerRadiationPattern =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRayTracerRadiationPattern}, {
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsRayTracerSetPatternsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_RayTracerSetPatternsRequest_default_instance_;
    new (ptr) ::metamoto::services::RayTracerSetPatternsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::RayTracerSetPatternsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RayTracerSetPatternsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRayTracerSetPatternsRequest}, {
      &protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayTracerRadiationPattern.base,}};

static void InitDefaultsRayTracerSetPatternsReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_RayTracerSetPatternsReply_default_instance_;
    new (ptr) ::metamoto::services::RayTracerSetPatternsReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::RayTracerSetPatternsReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RayTracerSetPatternsReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRayTracerSetPatternsReply}, {}};

static void InitDefaultsRayTracerTraceRequest_OutputFields() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_RayTracerTraceRequest_OutputFields_default_instance_;
    new (ptr) ::metamoto::services::RayTracerTraceRequest_OutputFields();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::RayTracerTraceRequest_OutputFields::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RayTracerTraceRequest_OutputFields =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRayTracerTraceRequest_OutputFields}, {}};

static void InitDefaultsRayTracerTraceRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_RayTracerTraceRequest_default_instance_;
    new (ptr) ::metamoto::services::RayTracerTraceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::RayTracerTraceRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RayTracerTraceRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRayTracerTraceRequest}, {
      &protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_Ray.base,
      &protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayTracerTraceRequest_OutputFields.base,}};

static void InitDefaultsRayTracerTraceReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_RayTracerTraceReply_default_instance_;
    new (ptr) ::metamoto::services::RayTracerTraceReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::RayTracerTraceReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RayTracerTraceReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRayTracerTraceReply}, {
      &protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayHit.base,}};

static void InitDefaultsRay() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_Ray_default_instance_;
    new (ptr) ::metamoto::services::Ray();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::Ray::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Ray =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRay}, {
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsRayHit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_RayHit_default_instance_;
    new (ptr) ::metamoto::services::RayHit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::RayHit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RayHit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRayHit}, {
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RayTracerRadiationPattern.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RayTracerSetPatternsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RayTracerSetPatternsReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RayTracerTraceRequest_OutputFields.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RayTracerTraceRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RayTracerTraceReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ray.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RayHit.base);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerRadiationPattern, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerRadiationPattern, intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerRadiationPattern, direction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerSetPatternsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerSetPatternsRequest, pattern_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerSetPatternsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerSetPatternsReply, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest_OutputFields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest_OutputFields, object_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest_OutputFields, object_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest_OutputFields, material_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest_OutputFields, angle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest, rays_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest, maximum_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest, minimum_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest, number_of_returns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest, wavelength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest, beam_intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest, use_beam_widening_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest, gaussian_beam_profile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest, number_of_rays_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest, beam_waist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest, beam_divergence_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest, use_radiation_pattern_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest, radiation_pattern_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest, return_raw_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest, transparent_permeability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest, transparent_cutoff_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest, output_fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceRequest, range_error_stdev_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayTracerTraceReply, hits_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::Ray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::Ray, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::Ray, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::Ray, radiation_pattern_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayHit, ray_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayHit, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayHit, intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayHit, object_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayHit, object_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayHit, material_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayHit, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::RayHit, cos_incidence_angle_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::services::RayTracerRadiationPattern)},
  { 7, -1, sizeof(::metamoto::services::RayTracerSetPatternsRequest)},
  { 13, -1, sizeof(::metamoto::services::RayTracerSetPatternsReply)},
  { 19, -1, sizeof(::metamoto::services::RayTracerTraceRequest_OutputFields)},
  { 28, -1, sizeof(::metamoto::services::RayTracerTraceRequest)},
  { 51, -1, sizeof(::metamoto::services::RayTracerTraceReply)},
  { 57, -1, sizeof(::metamoto::services::Ray)},
  { 65, -1, sizeof(::metamoto::services::RayHit)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_RayTracerRadiationPattern_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_RayTracerSetPatternsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_RayTracerSetPatternsReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_RayTracerTraceRequest_OutputFields_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_RayTracerTraceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_RayTracerTraceReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_Ray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_RayHit_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/services/ray_tracer.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\"metamoto/services/ray_tracer.proto\022\021me"
      "tamoto.services\032!metamoto/types/enumerat"
      "ions.proto\032\034metamoto/types/vector3.proto"
      "\"Z\n\031RayTracerRadiationPattern\022\021\n\tintensi"
      "ty\030\001 \003(\002\022*\n\tdirection\030\002 \003(\0132\027.metamoto.t"
      "ypes.Vector3\"\\\n\033RayTracerSetPatternsRequ"
      "est\022=\n\007pattern\030\001 \003(\0132,.metamoto.services"
      ".RayTracerRadiationPattern\"\'\n\031RayTracerS"
      "etPatternsReply\022\n\n\002id\030\001 \001(\t\"\231\005\n\025RayTrace"
      "rTraceRequest\022$\n\004rays\030\001 \003(\0132\026.metamoto.s"
      "ervices.Ray\022\030\n\020maximum_distance\030\002 \001(\001\022\030\n"
      "\020minimum_distance\030\003 \001(\001\022\031\n\021number_of_ret"
      "urns\030\004 \001(\r\022\022\n\nwavelength\030\005 \001(\001\022\026\n\016beam_i"
      "ntensity\030\006 \001(\001\022\031\n\021use_beam_widening\030\007 \001("
      "\010\022\035\n\025gaussian_beam_profile\030\010 \001(\010\022\026\n\016numb"
      "er_of_rays\030\t \001(\r\022\022\n\nbeam_waist\030\n \001(\001\022\035\n\025"
      "beam_divergence_angle\030\013 \001(\001\022\035\n\025use_radia"
      "tion_pattern\030\014 \001(\010\022\034\n\024radiation_pattern_"
      "id\030\r \001(\t\022\027\n\017return_raw_data\030\016 \001(\010\022 \n\030tra"
      "nsparent_permeability\030\017 \001(\002\022 \n\030transpare"
      "nt_cutoff_angle\030\020 \001(\002\022L\n\routput_fields\030\021"
      " \001(\01325.metamoto.services.RayTracerTraceR"
      "equest.OutputFields\022\031\n\021range_error_stdev"
      "\030\022 \001(\002\032W\n\014OutputFields\022\021\n\tobject_id\030\001 \001("
      "\010\022\023\n\013object_type\030\002 \001(\010\022\020\n\010material\030\003 \001(\010"
      "\022\r\n\005angle\030\004 \001(\010\">\n\023RayTracerTraceReply\022\'"
      "\n\004hits\030\001 \003(\0132\031.metamoto.services.RayHit\""
      "{\n\003Ray\022\'\n\006origin\030\001 \001(\0132\027.metamoto.types."
      "Vector3\022*\n\tdirection\030\002 \001(\0132\027.metamoto.ty"
      "pes.Vector3\022\037\n\027radiation_pattern_index\030\003"
      " \001(\r\"\371\001\n\006RayHit\022\021\n\tray_index\030\001 \001(\r\022)\n\010po"
      "sition\030\002 \001(\0132\027.metamoto.types.Vector3\022\021\n"
      "\tintensity\030\003 \001(\002\022/\n\013object_type\030\004 \001(\0162\032."
      "metamoto.types.ObjectType\022\021\n\tobject_id\030\005"
      " \001(\r\022.\n\010material\030\006 \001(\0162\034.metamoto.types."
      "MaterialType\022\r\n\005color\030\007 \001(\002\022\033\n\023cos_incid"
      "ence_angle\030\010 \001(\0022\327\001\n\tRayTracer\022m\n\013SetPat"
      "terns\022..metamoto.services.RayTracerSetPa"
      "tternsRequest\032,.metamoto.services.RayTra"
      "cerSetPatternsReply\"\000\022[\n\005Trace\022(.metamot"
      "o.services.RayTracerTraceRequest\032&.metam"
      "oto.services.RayTracerTraceReply\"\000B\024\252\002\021M"
      "etamoto.Servicesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1704);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/services/ray_tracer.proto", &protobuf_RegisterTypes);
  ::protobuf_metamoto_2ftypes_2fenumerations_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fvector3_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2fservices_2fray_5ftracer_2eproto
namespace metamoto {
namespace services {

// ===================================================================

void RayTracerRadiationPattern::InitAsDefaultInstance() {
}
void RayTracerRadiationPattern::clear_direction() {
  direction_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RayTracerRadiationPattern::kIntensityFieldNumber;
const int RayTracerRadiationPattern::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RayTracerRadiationPattern::RayTracerRadiationPattern()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayTracerRadiationPattern.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.RayTracerRadiationPattern)
}
RayTracerRadiationPattern::RayTracerRadiationPattern(const RayTracerRadiationPattern& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      intensity_(from.intensity_),
      direction_(from.direction_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.services.RayTracerRadiationPattern)
}

void RayTracerRadiationPattern::SharedCtor() {
}

RayTracerRadiationPattern::~RayTracerRadiationPattern() {
  // @@protoc_insertion_point(destructor:metamoto.services.RayTracerRadiationPattern)
  SharedDtor();
}

void RayTracerRadiationPattern::SharedDtor() {
}

void RayTracerRadiationPattern::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RayTracerRadiationPattern::descriptor() {
  ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RayTracerRadiationPattern& RayTracerRadiationPattern::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayTracerRadiationPattern.base);
  return *internal_default_instance();
}


void RayTracerRadiationPattern::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.RayTracerRadiationPattern)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intensity_.Clear();
  direction_.Clear();
  _internal_metadata_.Clear();
}

bool RayTracerRadiationPattern::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.RayTracerRadiationPattern)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float intensity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_intensity())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_intensity())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Vector3 direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.RayTracerRadiationPattern)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.RayTracerRadiationPattern)
  return false;
#undef DO_
}

void RayTracerRadiationPattern::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.RayTracerRadiationPattern)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float intensity = 1;
  if (this->intensity_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _intensity_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->intensity().data(), this->intensity_size(), output);
  }

  // repeated .metamoto.types.Vector3 direction = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->direction_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->direction(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.RayTracerRadiationPattern)
}

::google::protobuf::uint8* RayTracerRadiationPattern::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.RayTracerRadiationPattern)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float intensity = 1;
  if (this->intensity_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _intensity_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->intensity_, target);
  }

  // repeated .metamoto.types.Vector3 direction = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->direction_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->direction(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.RayTracerRadiationPattern)
  return target;
}

size_t RayTracerRadiationPattern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.RayTracerRadiationPattern)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float intensity = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->intensity_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _intensity_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .metamoto.types.Vector3 direction = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->direction_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->direction(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RayTracerRadiationPattern::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.RayTracerRadiationPattern)
  GOOGLE_DCHECK_NE(&from, this);
  const RayTracerRadiationPattern* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RayTracerRadiationPattern>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.RayTracerRadiationPattern)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.RayTracerRadiationPattern)
    MergeFrom(*source);
  }
}

void RayTracerRadiationPattern::MergeFrom(const RayTracerRadiationPattern& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.RayTracerRadiationPattern)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intensity_.MergeFrom(from.intensity_);
  direction_.MergeFrom(from.direction_);
}

void RayTracerRadiationPattern::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.RayTracerRadiationPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RayTracerRadiationPattern::CopyFrom(const RayTracerRadiationPattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.RayTracerRadiationPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RayTracerRadiationPattern::IsInitialized() const {
  return true;
}

void RayTracerRadiationPattern::Swap(RayTracerRadiationPattern* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RayTracerRadiationPattern::InternalSwap(RayTracerRadiationPattern* other) {
  using std::swap;
  intensity_.InternalSwap(&other->intensity_);
  CastToBase(&direction_)->InternalSwap(CastToBase(&other->direction_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RayTracerRadiationPattern::GetMetadata() const {
  protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RayTracerSetPatternsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RayTracerSetPatternsRequest::kPatternFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RayTracerSetPatternsRequest::RayTracerSetPatternsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayTracerSetPatternsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.RayTracerSetPatternsRequest)
}
RayTracerSetPatternsRequest::RayTracerSetPatternsRequest(const RayTracerSetPatternsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pattern_(from.pattern_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.services.RayTracerSetPatternsRequest)
}

void RayTracerSetPatternsRequest::SharedCtor() {
}

RayTracerSetPatternsRequest::~RayTracerSetPatternsRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.RayTracerSetPatternsRequest)
  SharedDtor();
}

void RayTracerSetPatternsRequest::SharedDtor() {
}

void RayTracerSetPatternsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RayTracerSetPatternsRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RayTracerSetPatternsRequest& RayTracerSetPatternsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayTracerSetPatternsRequest.base);
  return *internal_default_instance();
}


void RayTracerSetPatternsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.RayTracerSetPatternsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pattern_.Clear();
  _internal_metadata_.Clear();
}

bool RayTracerSetPatternsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.RayTracerSetPatternsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metamoto.services.RayTracerRadiationPattern pattern = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pattern()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.RayTracerSetPatternsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.RayTracerSetPatternsRequest)
  return false;
#undef DO_
}

void RayTracerSetPatternsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.RayTracerSetPatternsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.services.RayTracerRadiationPattern pattern = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pattern_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->pattern(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.RayTracerSetPatternsRequest)
}

::google::protobuf::uint8* RayTracerSetPatternsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.RayTracerSetPatternsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.services.RayTracerRadiationPattern pattern = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pattern_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->pattern(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.RayTracerSetPatternsRequest)
  return target;
}

size_t RayTracerSetPatternsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.RayTracerSetPatternsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.services.RayTracerRadiationPattern pattern = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->pattern_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pattern(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RayTracerSetPatternsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.RayTracerSetPatternsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RayTracerSetPatternsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RayTracerSetPatternsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.RayTracerSetPatternsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.RayTracerSetPatternsRequest)
    MergeFrom(*source);
  }
}

void RayTracerSetPatternsRequest::MergeFrom(const RayTracerSetPatternsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.RayTracerSetPatternsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pattern_.MergeFrom(from.pattern_);
}

void RayTracerSetPatternsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.RayTracerSetPatternsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RayTracerSetPatternsRequest::CopyFrom(const RayTracerSetPatternsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.RayTracerSetPatternsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RayTracerSetPatternsRequest::IsInitialized() const {
  return true;
}

void RayTracerSetPatternsRequest::Swap(RayTracerSetPatternsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RayTracerSetPatternsRequest::InternalSwap(RayTracerSetPatternsRequest* other) {
  using std::swap;
  CastToBase(&pattern_)->InternalSwap(CastToBase(&other->pattern_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RayTracerSetPatternsRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RayTracerSetPatternsReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RayTracerSetPatternsReply::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RayTracerSetPatternsReply::RayTracerSetPatternsReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayTracerSetPatternsReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.RayTracerSetPatternsReply)
}
RayTracerSetPatternsReply::RayTracerSetPatternsReply(const RayTracerSetPatternsReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.services.RayTracerSetPatternsReply)
}

void RayTracerSetPatternsReply::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RayTracerSetPatternsReply::~RayTracerSetPatternsReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.RayTracerSetPatternsReply)
  SharedDtor();
}

void RayTracerSetPatternsReply::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RayTracerSetPatternsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RayTracerSetPatternsReply::descriptor() {
  ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RayTracerSetPatternsReply& RayTracerSetPatternsReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayTracerSetPatternsReply.base);
  return *internal_default_instance();
}


void RayTracerSetPatternsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.RayTracerSetPatternsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RayTracerSetPatternsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.RayTracerSetPatternsReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.services.RayTracerSetPatternsReply.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.RayTracerSetPatternsReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.RayTracerSetPatternsReply)
  return false;
#undef DO_
}

void RayTracerSetPatternsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.RayTracerSetPatternsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.RayTracerSetPatternsReply.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.RayTracerSetPatternsReply)
}

::google::protobuf::uint8* RayTracerSetPatternsReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.RayTracerSetPatternsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.RayTracerSetPatternsReply.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.RayTracerSetPatternsReply)
  return target;
}

size_t RayTracerSetPatternsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.RayTracerSetPatternsReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RayTracerSetPatternsReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.RayTracerSetPatternsReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RayTracerSetPatternsReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RayTracerSetPatternsReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.RayTracerSetPatternsReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.RayTracerSetPatternsReply)
    MergeFrom(*source);
  }
}

void RayTracerSetPatternsReply::MergeFrom(const RayTracerSetPatternsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.RayTracerSetPatternsReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void RayTracerSetPatternsReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.RayTracerSetPatternsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RayTracerSetPatternsReply::CopyFrom(const RayTracerSetPatternsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.RayTracerSetPatternsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RayTracerSetPatternsReply::IsInitialized() const {
  return true;
}

void RayTracerSetPatternsReply::Swap(RayTracerSetPatternsReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RayTracerSetPatternsReply::InternalSwap(RayTracerSetPatternsReply* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RayTracerSetPatternsReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RayTracerTraceRequest_OutputFields::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RayTracerTraceRequest_OutputFields::kObjectIdFieldNumber;
const int RayTracerTraceRequest_OutputFields::kObjectTypeFieldNumber;
const int RayTracerTraceRequest_OutputFields::kMaterialFieldNumber;
const int RayTracerTraceRequest_OutputFields::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RayTracerTraceRequest_OutputFields::RayTracerTraceRequest_OutputFields()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayTracerTraceRequest_OutputFields.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.RayTracerTraceRequest.OutputFields)
}
RayTracerTraceRequest_OutputFields::RayTracerTraceRequest_OutputFields(const RayTracerTraceRequest_OutputFields& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:metamoto.services.RayTracerTraceRequest.OutputFields)
}

void RayTracerTraceRequest_OutputFields::SharedCtor() {
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(angle_));
}

RayTracerTraceRequest_OutputFields::~RayTracerTraceRequest_OutputFields() {
  // @@protoc_insertion_point(destructor:metamoto.services.RayTracerTraceRequest.OutputFields)
  SharedDtor();
}

void RayTracerTraceRequest_OutputFields::SharedDtor() {
}

void RayTracerTraceRequest_OutputFields::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RayTracerTraceRequest_OutputFields::descriptor() {
  ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RayTracerTraceRequest_OutputFields& RayTracerTraceRequest_OutputFields::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayTracerTraceRequest_OutputFields.base);
  return *internal_default_instance();
}


void RayTracerTraceRequest_OutputFields::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.RayTracerTraceRequest.OutputFields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(angle_));
  _internal_metadata_.Clear();
}

bool RayTracerTraceRequest_OutputFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.RayTracerTraceRequest.OutputFields)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool object_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &object_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool object_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &object_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool material = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &material_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool angle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.RayTracerTraceRequest.OutputFields)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.RayTracerTraceRequest.OutputFields)
  return false;
#undef DO_
}

void RayTracerTraceRequest_OutputFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.RayTracerTraceRequest.OutputFields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool object_id = 1;
  if (this->object_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->object_id(), output);
  }

  // bool object_type = 2;
  if (this->object_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->object_type(), output);
  }

  // bool material = 3;
  if (this->material() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->material(), output);
  }

  // bool angle = 4;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->angle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.RayTracerTraceRequest.OutputFields)
}

::google::protobuf::uint8* RayTracerTraceRequest_OutputFields::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.RayTracerTraceRequest.OutputFields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool object_id = 1;
  if (this->object_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->object_id(), target);
  }

  // bool object_type = 2;
  if (this->object_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->object_type(), target);
  }

  // bool material = 3;
  if (this->material() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->material(), target);
  }

  // bool angle = 4;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->angle(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.RayTracerTraceRequest.OutputFields)
  return target;
}

size_t RayTracerTraceRequest_OutputFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.RayTracerTraceRequest.OutputFields)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 + 1;
  }

  // bool object_type = 2;
  if (this->object_type() != 0) {
    total_size += 1 + 1;
  }

  // bool material = 3;
  if (this->material() != 0) {
    total_size += 1 + 1;
  }

  // bool angle = 4;
  if (this->angle() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RayTracerTraceRequest_OutputFields::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.RayTracerTraceRequest.OutputFields)
  GOOGLE_DCHECK_NE(&from, this);
  const RayTracerTraceRequest_OutputFields* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RayTracerTraceRequest_OutputFields>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.RayTracerTraceRequest.OutputFields)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.RayTracerTraceRequest.OutputFields)
    MergeFrom(*source);
  }
}

void RayTracerTraceRequest_OutputFields::MergeFrom(const RayTracerTraceRequest_OutputFields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.RayTracerTraceRequest.OutputFields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    set_object_id(from.object_id());
  }
  if (from.object_type() != 0) {
    set_object_type(from.object_type());
  }
  if (from.material() != 0) {
    set_material(from.material());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
}

void RayTracerTraceRequest_OutputFields::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.RayTracerTraceRequest.OutputFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RayTracerTraceRequest_OutputFields::CopyFrom(const RayTracerTraceRequest_OutputFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.RayTracerTraceRequest.OutputFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RayTracerTraceRequest_OutputFields::IsInitialized() const {
  return true;
}

void RayTracerTraceRequest_OutputFields::Swap(RayTracerTraceRequest_OutputFields* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RayTracerTraceRequest_OutputFields::InternalSwap(RayTracerTraceRequest_OutputFields* other) {
  using std::swap;
  swap(object_id_, other->object_id_);
  swap(object_type_, other->object_type_);
  swap(material_, other->material_);
  swap(angle_, other->angle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RayTracerTraceRequest_OutputFields::GetMetadata() const {
  protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RayTracerTraceRequest::InitAsDefaultInstance() {
  ::metamoto::services::_RayTracerTraceRequest_default_instance_._instance.get_mutable()->output_fields_ = const_cast< ::metamoto::services::RayTracerTraceRequest_OutputFields*>(
      ::metamoto::services::RayTracerTraceRequest_OutputFields::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RayTracerTraceRequest::kRaysFieldNumber;
const int RayTracerTraceRequest::kMaximumDistanceFieldNumber;
const int RayTracerTraceRequest::kMinimumDistanceFieldNumber;
const int RayTracerTraceRequest::kNumberOfReturnsFieldNumber;
const int RayTracerTraceRequest::kWavelengthFieldNumber;
const int RayTracerTraceRequest::kBeamIntensityFieldNumber;
const int RayTracerTraceRequest::kUseBeamWideningFieldNumber;
const int RayTracerTraceRequest::kGaussianBeamProfileFieldNumber;
const int RayTracerTraceRequest::kNumberOfRaysFieldNumber;
const int RayTracerTraceRequest::kBeamWaistFieldNumber;
const int RayTracerTraceRequest::kBeamDivergenceAngleFieldNumber;
const int RayTracerTraceRequest::kUseRadiationPatternFieldNumber;
const int RayTracerTraceRequest::kRadiationPatternIdFieldNumber;
const int RayTracerTraceRequest::kReturnRawDataFieldNumber;
const int RayTracerTraceRequest::kTransparentPermeabilityFieldNumber;
const int RayTracerTraceRequest::kTransparentCutoffAngleFieldNumber;
const int RayTracerTraceRequest::kOutputFieldsFieldNumber;
const int RayTracerTraceRequest::kRangeErrorStdevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RayTracerTraceRequest::RayTracerTraceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayTracerTraceRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.RayTracerTraceRequest)
}
RayTracerTraceRequest::RayTracerTraceRequest(const RayTracerTraceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rays_(from.rays_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  radiation_pattern_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.radiation_pattern_id().size() > 0) {
    radiation_pattern_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiation_pattern_id_);
  }
  if (from.has_output_fields()) {
    output_fields_ = new ::metamoto::services::RayTracerTraceRequest_OutputFields(*from.output_fields_);
  } else {
    output_fields_ = NULL;
  }
  ::memcpy(&maximum_distance_, &from.maximum_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_error_stdev_) -
    reinterpret_cast<char*>(&maximum_distance_)) + sizeof(range_error_stdev_));
  // @@protoc_insertion_point(copy_constructor:metamoto.services.RayTracerTraceRequest)
}

void RayTracerTraceRequest::SharedCtor() {
  radiation_pattern_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&output_fields_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_error_stdev_) -
      reinterpret_cast<char*>(&output_fields_)) + sizeof(range_error_stdev_));
}

RayTracerTraceRequest::~RayTracerTraceRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.RayTracerTraceRequest)
  SharedDtor();
}

void RayTracerTraceRequest::SharedDtor() {
  radiation_pattern_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete output_fields_;
}

void RayTracerTraceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RayTracerTraceRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RayTracerTraceRequest& RayTracerTraceRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayTracerTraceRequest.base);
  return *internal_default_instance();
}


void RayTracerTraceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.RayTracerTraceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rays_.Clear();
  radiation_pattern_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && output_fields_ != NULL) {
    delete output_fields_;
  }
  output_fields_ = NULL;
  ::memset(&maximum_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_error_stdev_) -
      reinterpret_cast<char*>(&maximum_distance_)) + sizeof(range_error_stdev_));
  _internal_metadata_.Clear();
}

bool RayTracerTraceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.RayTracerTraceRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metamoto.services.Ray rays = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rays()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double maximum_distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maximum_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double minimum_distance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimum_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_of_returns = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_returns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wavelength = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wavelength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double beam_intensity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beam_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_beam_widening = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_beam_widening_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool gaussian_beam_profile = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gaussian_beam_profile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_of_rays = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_rays_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double beam_waist = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beam_waist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double beam_divergence_angle = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beam_divergence_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_radiation_pattern = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_radiation_pattern_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string radiation_pattern_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radiation_pattern_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->radiation_pattern_id().data(), static_cast<int>(this->radiation_pattern_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.services.RayTracerTraceRequest.radiation_pattern_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool return_raw_data = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_raw_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float transparent_permeability = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transparent_permeability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float transparent_cutoff_angle = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transparent_cutoff_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.RayTracerTraceRequest.OutputFields output_fields = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float range_error_stdev = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_error_stdev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.RayTracerTraceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.RayTracerTraceRequest)
  return false;
#undef DO_
}

void RayTracerTraceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.RayTracerTraceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.services.Ray rays = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rays_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->rays(static_cast<int>(i)),
      output);
  }

  // double maximum_distance = 2;
  if (this->maximum_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->maximum_distance(), output);
  }

  // double minimum_distance = 3;
  if (this->minimum_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->minimum_distance(), output);
  }

  // uint32 number_of_returns = 4;
  if (this->number_of_returns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->number_of_returns(), output);
  }

  // double wavelength = 5;
  if (this->wavelength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->wavelength(), output);
  }

  // double beam_intensity = 6;
  if (this->beam_intensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->beam_intensity(), output);
  }

  // bool use_beam_widening = 7;
  if (this->use_beam_widening() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->use_beam_widening(), output);
  }

  // bool gaussian_beam_profile = 8;
  if (this->gaussian_beam_profile() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->gaussian_beam_profile(), output);
  }

  // uint32 number_of_rays = 9;
  if (this->number_of_rays() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->number_of_rays(), output);
  }

  // double beam_waist = 10;
  if (this->beam_waist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->beam_waist(), output);
  }

  // double beam_divergence_angle = 11;
  if (this->beam_divergence_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->beam_divergence_angle(), output);
  }

  // bool use_radiation_pattern = 12;
  if (this->use_radiation_pattern() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->use_radiation_pattern(), output);
  }

  // string radiation_pattern_id = 13;
  if (this->radiation_pattern_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->radiation_pattern_id().data(), static_cast<int>(this->radiation_pattern_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.RayTracerTraceRequest.radiation_pattern_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->radiation_pattern_id(), output);
  }

  // bool return_raw_data = 14;
  if (this->return_raw_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->return_raw_data(), output);
  }

  // float transparent_permeability = 15;
  if (this->transparent_permeability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->transparent_permeability(), output);
  }

  // float transparent_cutoff_angle = 16;
  if (this->transparent_cutoff_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->transparent_cutoff_angle(), output);
  }

  // .metamoto.services.RayTracerTraceRequest.OutputFields output_fields = 17;
  if (this->has_output_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_output_fields(), output);
  }

  // float range_error_stdev = 18;
  if (this->range_error_stdev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->range_error_stdev(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.RayTracerTraceRequest)
}

::google::protobuf::uint8* RayTracerTraceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.RayTracerTraceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.services.Ray rays = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rays_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->rays(static_cast<int>(i)), deterministic, target);
  }

  // double maximum_distance = 2;
  if (this->maximum_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->maximum_distance(), target);
  }

  // double minimum_distance = 3;
  if (this->minimum_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->minimum_distance(), target);
  }

  // uint32 number_of_returns = 4;
  if (this->number_of_returns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->number_of_returns(), target);
  }

  // double wavelength = 5;
  if (this->wavelength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->wavelength(), target);
  }

  // double beam_intensity = 6;
  if (this->beam_intensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->beam_intensity(), target);
  }

  // bool use_beam_widening = 7;
  if (this->use_beam_widening() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->use_beam_widening(), target);
  }

  // bool gaussian_beam_profile = 8;
  if (this->gaussian_beam_profile() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->gaussian_beam_profile(), target);
  }

  // uint32 number_of_rays = 9;
  if (this->number_of_rays() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->number_of_rays(), target);
  }

  // double beam_waist = 10;
  if (this->beam_waist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->beam_waist(), target);
  }

  // double beam_divergence_angle = 11;
  if (this->beam_divergence_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->beam_divergence_angle(), target);
  }

  // bool use_radiation_pattern = 12;
  if (this->use_radiation_pattern() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->use_radiation_pattern(), target);
  }

  // string radiation_pattern_id = 13;
  if (this->radiation_pattern_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->radiation_pattern_id().data(), static_cast<int>(this->radiation_pattern_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.RayTracerTraceRequest.radiation_pattern_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->radiation_pattern_id(), target);
  }

  // bool return_raw_data = 14;
  if (this->return_raw_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->return_raw_data(), target);
  }

  // float transparent_permeability = 15;
  if (this->transparent_permeability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->transparent_permeability(), target);
  }

  // float transparent_cutoff_angle = 16;
  if (this->transparent_cutoff_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->transparent_cutoff_angle(), target);
  }

  // .metamoto.services.RayTracerTraceRequest.OutputFields output_fields = 17;
  if (this->has_output_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_output_fields(), deterministic, target);
  }

  // float range_error_stdev = 18;
  if (this->range_error_stdev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->range_error_stdev(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.RayTracerTraceRequest)
  return target;
}

size_t RayTracerTraceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.RayTracerTraceRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.services.Ray rays = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rays_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rays(static_cast<int>(i)));
    }
  }

  // string radiation_pattern_id = 13;
  if (this->radiation_pattern_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->radiation_pattern_id());
  }

  // .metamoto.services.RayTracerTraceRequest.OutputFields output_fields = 17;
  if (this->has_output_fields()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *output_fields_);
  }

  // double maximum_distance = 2;
  if (this->maximum_distance() != 0) {
    total_size += 1 + 8;
  }

  // double minimum_distance = 3;
  if (this->minimum_distance() != 0) {
    total_size += 1 + 8;
  }

  // double wavelength = 5;
  if (this->wavelength() != 0) {
    total_size += 1 + 8;
  }

  // double beam_intensity = 6;
  if (this->beam_intensity() != 0) {
    total_size += 1 + 8;
  }

  // uint32 number_of_returns = 4;
  if (this->number_of_returns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_of_returns());
  }

  // uint32 number_of_rays = 9;
  if (this->number_of_rays() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_of_rays());
  }

  // double beam_waist = 10;
  if (this->beam_waist() != 0) {
    total_size += 1 + 8;
  }

  // double beam_divergence_angle = 11;
  if (this->beam_divergence_angle() != 0) {
    total_size += 1 + 8;
  }

  // bool use_beam_widening = 7;
  if (this->use_beam_widening() != 0) {
    total_size += 1 + 1;
  }

  // bool gaussian_beam_profile = 8;
  if (this->gaussian_beam_profile() != 0) {
    total_size += 1 + 1;
  }

  // bool use_radiation_pattern = 12;
  if (this->use_radiation_pattern() != 0) {
    total_size += 1 + 1;
  }

  // bool return_raw_data = 14;
  if (this->return_raw_data() != 0) {
    total_size += 1 + 1;
  }

  // float transparent_permeability = 15;
  if (this->transparent_permeability() != 0) {
    total_size += 1 + 4;
  }

  // float transparent_cutoff_angle = 16;
  if (this->transparent_cutoff_angle() != 0) {
    total_size += 2 + 4;
  }

  // float range_error_stdev = 18;
  if (this->range_error_stdev() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RayTracerTraceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.RayTracerTraceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RayTracerTraceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RayTracerTraceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.RayTracerTraceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.RayTracerTraceRequest)
    MergeFrom(*source);
  }
}

void RayTracerTraceRequest::MergeFrom(const RayTracerTraceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.RayTracerTraceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rays_.MergeFrom(from.rays_);
  if (from.radiation_pattern_id().size() > 0) {

    radiation_pattern_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiation_pattern_id_);
  }
  if (from.has_output_fields()) {
    mutable_output_fields()->::metamoto::services::RayTracerTraceRequest_OutputFields::MergeFrom(from.output_fields());
  }
  if (from.maximum_distance() != 0) {
    set_maximum_distance(from.maximum_distance());
  }
  if (from.minimum_distance() != 0) {
    set_minimum_distance(from.minimum_distance());
  }
  if (from.wavelength() != 0) {
    set_wavelength(from.wavelength());
  }
  if (from.beam_intensity() != 0) {
    set_beam_intensity(from.beam_intensity());
  }
  if (from.number_of_returns() != 0) {
    set_number_of_returns(from.number_of_returns());
  }
  if (from.number_of_rays() != 0) {
    set_number_of_rays(from.number_of_rays());
  }
  if (from.beam_waist() != 0) {
    set_beam_waist(from.beam_waist());
  }
  if (from.beam_divergence_angle() != 0) {
    set_beam_divergence_angle(from.beam_divergence_angle());
  }
  if (from.use_beam_widening() != 0) {
    set_use_beam_widening(from.use_beam_widening());
  }
  if (from.gaussian_beam_profile() != 0) {
    set_gaussian_beam_profile(from.gaussian_beam_profile());
  }
  if (from.use_radiation_pattern() != 0) {
    set_use_radiation_pattern(from.use_radiation_pattern());
  }
  if (from.return_raw_data() != 0) {
    set_return_raw_data(from.return_raw_data());
  }
  if (from.transparent_permeability() != 0) {
    set_transparent_permeability(from.transparent_permeability());
  }
  if (from.transparent_cutoff_angle() != 0) {
    set_transparent_cutoff_angle(from.transparent_cutoff_angle());
  }
  if (from.range_error_stdev() != 0) {
    set_range_error_stdev(from.range_error_stdev());
  }
}

void RayTracerTraceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.RayTracerTraceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RayTracerTraceRequest::CopyFrom(const RayTracerTraceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.RayTracerTraceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RayTracerTraceRequest::IsInitialized() const {
  return true;
}

void RayTracerTraceRequest::Swap(RayTracerTraceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RayTracerTraceRequest::InternalSwap(RayTracerTraceRequest* other) {
  using std::swap;
  CastToBase(&rays_)->InternalSwap(CastToBase(&other->rays_));
  radiation_pattern_id_.Swap(&other->radiation_pattern_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(output_fields_, other->output_fields_);
  swap(maximum_distance_, other->maximum_distance_);
  swap(minimum_distance_, other->minimum_distance_);
  swap(wavelength_, other->wavelength_);
  swap(beam_intensity_, other->beam_intensity_);
  swap(number_of_returns_, other->number_of_returns_);
  swap(number_of_rays_, other->number_of_rays_);
  swap(beam_waist_, other->beam_waist_);
  swap(beam_divergence_angle_, other->beam_divergence_angle_);
  swap(use_beam_widening_, other->use_beam_widening_);
  swap(gaussian_beam_profile_, other->gaussian_beam_profile_);
  swap(use_radiation_pattern_, other->use_radiation_pattern_);
  swap(return_raw_data_, other->return_raw_data_);
  swap(transparent_permeability_, other->transparent_permeability_);
  swap(transparent_cutoff_angle_, other->transparent_cutoff_angle_);
  swap(range_error_stdev_, other->range_error_stdev_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RayTracerTraceRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RayTracerTraceReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RayTracerTraceReply::kHitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RayTracerTraceReply::RayTracerTraceReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayTracerTraceReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.RayTracerTraceReply)
}
RayTracerTraceReply::RayTracerTraceReply(const RayTracerTraceReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hits_(from.hits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.services.RayTracerTraceReply)
}

void RayTracerTraceReply::SharedCtor() {
}

RayTracerTraceReply::~RayTracerTraceReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.RayTracerTraceReply)
  SharedDtor();
}

void RayTracerTraceReply::SharedDtor() {
}

void RayTracerTraceReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RayTracerTraceReply::descriptor() {
  ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RayTracerTraceReply& RayTracerTraceReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayTracerTraceReply.base);
  return *internal_default_instance();
}


void RayTracerTraceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.RayTracerTraceReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hits_.Clear();
  _internal_metadata_.Clear();
}

bool RayTracerTraceReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.RayTracerTraceReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metamoto.services.RayHit hits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_hits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.RayTracerTraceReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.RayTracerTraceReply)
  return false;
#undef DO_
}

void RayTracerTraceReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.RayTracerTraceReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.services.RayHit hits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->hits(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.RayTracerTraceReply)
}

::google::protobuf::uint8* RayTracerTraceReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.RayTracerTraceReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.services.RayHit hits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->hits(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.RayTracerTraceReply)
  return target;
}

size_t RayTracerTraceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.RayTracerTraceReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.services.RayHit hits = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->hits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hits(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RayTracerTraceReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.RayTracerTraceReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RayTracerTraceReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RayTracerTraceReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.RayTracerTraceReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.RayTracerTraceReply)
    MergeFrom(*source);
  }
}

void RayTracerTraceReply::MergeFrom(const RayTracerTraceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.RayTracerTraceReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hits_.MergeFrom(from.hits_);
}

void RayTracerTraceReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.RayTracerTraceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RayTracerTraceReply::CopyFrom(const RayTracerTraceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.RayTracerTraceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RayTracerTraceReply::IsInitialized() const {
  return true;
}

void RayTracerTraceReply::Swap(RayTracerTraceReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RayTracerTraceReply::InternalSwap(RayTracerTraceReply* other) {
  using std::swap;
  CastToBase(&hits_)->InternalSwap(CastToBase(&other->hits_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RayTracerTraceReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ray::InitAsDefaultInstance() {
  ::metamoto::services::_Ray_default_instance_._instance.get_mutable()->origin_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
  ::metamoto::services::_Ray_default_instance_._instance.get_mutable()->direction_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
}
void Ray::clear_origin() {
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) {
    delete origin_;
  }
  origin_ = NULL;
}
void Ray::clear_direction() {
  if (GetArenaNoVirtual() == NULL && direction_ != NULL) {
    delete direction_;
  }
  direction_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ray::kOriginFieldNumber;
const int Ray::kDirectionFieldNumber;
const int Ray::kRadiationPatternIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ray::Ray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_Ray.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.Ray)
}
Ray::Ray(const Ray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::metamoto::types::Vector3(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_direction()) {
    direction_ = new ::metamoto::types::Vector3(*from.direction_);
  } else {
    direction_ = NULL;
  }
  radiation_pattern_index_ = from.radiation_pattern_index_;
  // @@protoc_insertion_point(copy_constructor:metamoto.services.Ray)
}

void Ray::SharedCtor() {
  ::memset(&origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radiation_pattern_index_) -
      reinterpret_cast<char*>(&origin_)) + sizeof(radiation_pattern_index_));
}

Ray::~Ray() {
  // @@protoc_insertion_point(destructor:metamoto.services.Ray)
  SharedDtor();
}

void Ray::SharedDtor() {
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete direction_;
}

void Ray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ray::descriptor() {
  ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ray& Ray::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_Ray.base);
  return *internal_default_instance();
}


void Ray::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.Ray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && origin_ != NULL) {
    delete origin_;
  }
  origin_ = NULL;
  if (GetArenaNoVirtual() == NULL && direction_ != NULL) {
    delete direction_;
  }
  direction_ = NULL;
  radiation_pattern_index_ = 0u;
  _internal_metadata_.Clear();
}

bool Ray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.Ray)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.Vector3 origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 radiation_pattern_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiation_pattern_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.Ray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.Ray)
  return false;
#undef DO_
}

void Ray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.Ray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Vector3 origin = 1;
  if (this->has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_origin(), output);
  }

  // .metamoto.types.Vector3 direction = 2;
  if (this->has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_direction(), output);
  }

  // uint32 radiation_pattern_index = 3;
  if (this->radiation_pattern_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->radiation_pattern_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.Ray)
}

::google::protobuf::uint8* Ray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.Ray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Vector3 origin = 1;
  if (this->has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_origin(), deterministic, target);
  }

  // .metamoto.types.Vector3 direction = 2;
  if (this->has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_direction(), deterministic, target);
  }

  // uint32 radiation_pattern_index = 3;
  if (this->radiation_pattern_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->radiation_pattern_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.Ray)
  return target;
}

size_t Ray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.Ray)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.Vector3 origin = 1;
  if (this->has_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  // .metamoto.types.Vector3 direction = 2;
  if (this->has_direction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *direction_);
  }

  // uint32 radiation_pattern_index = 3;
  if (this->radiation_pattern_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->radiation_pattern_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.Ray)
  GOOGLE_DCHECK_NE(&from, this);
  const Ray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.Ray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.Ray)
    MergeFrom(*source);
  }
}

void Ray::MergeFrom(const Ray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.Ray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_origin()) {
    mutable_origin()->::metamoto::types::Vector3::MergeFrom(from.origin());
  }
  if (from.has_direction()) {
    mutable_direction()->::metamoto::types::Vector3::MergeFrom(from.direction());
  }
  if (from.radiation_pattern_index() != 0) {
    set_radiation_pattern_index(from.radiation_pattern_index());
  }
}

void Ray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.Ray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ray::CopyFrom(const Ray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.Ray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ray::IsInitialized() const {
  return true;
}

void Ray::Swap(Ray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ray::InternalSwap(Ray* other) {
  using std::swap;
  swap(origin_, other->origin_);
  swap(direction_, other->direction_);
  swap(radiation_pattern_index_, other->radiation_pattern_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ray::GetMetadata() const {
  protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RayHit::InitAsDefaultInstance() {
  ::metamoto::services::_RayHit_default_instance_._instance.get_mutable()->position_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
}
void RayHit::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RayHit::kRayIndexFieldNumber;
const int RayHit::kPositionFieldNumber;
const int RayHit::kIntensityFieldNumber;
const int RayHit::kObjectTypeFieldNumber;
const int RayHit::kObjectIdFieldNumber;
const int RayHit::kMaterialFieldNumber;
const int RayHit::kColorFieldNumber;
const int RayHit::kCosIncidenceAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RayHit::RayHit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayHit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.RayHit)
}
RayHit::RayHit(const RayHit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::metamoto::types::Vector3(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&ray_index_, &from.ray_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&cos_incidence_angle_) -
    reinterpret_cast<char*>(&ray_index_)) + sizeof(cos_incidence_angle_));
  // @@protoc_insertion_point(copy_constructor:metamoto.services.RayHit)
}

void RayHit::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cos_incidence_angle_) -
      reinterpret_cast<char*>(&position_)) + sizeof(cos_incidence_angle_));
}

RayHit::~RayHit() {
  // @@protoc_insertion_point(destructor:metamoto.services.RayHit)
  SharedDtor();
}

void RayHit::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void RayHit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RayHit::descriptor() {
  ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RayHit& RayHit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayHit.base);
  return *internal_default_instance();
}


void RayHit::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.RayHit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  ::memset(&ray_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cos_incidence_angle_) -
      reinterpret_cast<char*>(&ray_index_)) + sizeof(cos_incidence_angle_));
  _internal_metadata_.Clear();
}

bool RayHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.RayHit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ray_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ray_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float intensity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.ObjectType object_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_object_type(static_cast< ::metamoto::types::ObjectType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 object_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &object_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.MaterialType material = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_material(static_cast< ::metamoto::types::MaterialType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float color = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cos_incidence_angle = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cos_incidence_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.RayHit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.RayHit)
  return false;
#undef DO_
}

void RayHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.RayHit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ray_index = 1;
  if (this->ray_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ray_index(), output);
  }

  // .metamoto.types.Vector3 position = 2;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_position(), output);
  }

  // float intensity = 3;
  if (this->intensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->intensity(), output);
  }

  // .metamoto.types.ObjectType object_type = 4;
  if (this->object_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->object_type(), output);
  }

  // uint32 object_id = 5;
  if (this->object_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->object_id(), output);
  }

  // .metamoto.types.MaterialType material = 6;
  if (this->material() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->material(), output);
  }

  // float color = 7;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->color(), output);
  }

  // float cos_incidence_angle = 8;
  if (this->cos_incidence_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->cos_incidence_angle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.RayHit)
}

::google::protobuf::uint8* RayHit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.RayHit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ray_index = 1;
  if (this->ray_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ray_index(), target);
  }

  // .metamoto.types.Vector3 position = 2;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_position(), deterministic, target);
  }

  // float intensity = 3;
  if (this->intensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->intensity(), target);
  }

  // .metamoto.types.ObjectType object_type = 4;
  if (this->object_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->object_type(), target);
  }

  // uint32 object_id = 5;
  if (this->object_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->object_id(), target);
  }

  // .metamoto.types.MaterialType material = 6;
  if (this->material() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->material(), target);
  }

  // float color = 7;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->color(), target);
  }

  // float cos_incidence_angle = 8;
  if (this->cos_incidence_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->cos_incidence_angle(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.RayHit)
  return target;
}

size_t RayHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.RayHit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.Vector3 position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // uint32 ray_index = 1;
  if (this->ray_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ray_index());
  }

  // float intensity = 3;
  if (this->intensity() != 0) {
    total_size += 1 + 4;
  }

  // .metamoto.types.ObjectType object_type = 4;
  if (this->object_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->object_type());
  }

  // uint32 object_id = 5;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->object_id());
  }

  // .metamoto.types.MaterialType material = 6;
  if (this->material() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->material());
  }

  // float color = 7;
  if (this->color() != 0) {
    total_size += 1 + 4;
  }

  // float cos_incidence_angle = 8;
  if (this->cos_incidence_angle() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RayHit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.RayHit)
  GOOGLE_DCHECK_NE(&from, this);
  const RayHit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RayHit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.RayHit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.RayHit)
    MergeFrom(*source);
  }
}

void RayHit::MergeFrom(const RayHit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.RayHit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::metamoto::types::Vector3::MergeFrom(from.position());
  }
  if (from.ray_index() != 0) {
    set_ray_index(from.ray_index());
  }
  if (from.intensity() != 0) {
    set_intensity(from.intensity());
  }
  if (from.object_type() != 0) {
    set_object_type(from.object_type());
  }
  if (from.object_id() != 0) {
    set_object_id(from.object_id());
  }
  if (from.material() != 0) {
    set_material(from.material());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.cos_incidence_angle() != 0) {
    set_cos_incidence_angle(from.cos_incidence_angle());
  }
}

void RayHit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.RayHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RayHit::CopyFrom(const RayHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.RayHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RayHit::IsInitialized() const {
  return true;
}

void RayHit::Swap(RayHit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RayHit::InternalSwap(RayHit* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(ray_index_, other->ray_index_);
  swap(intensity_, other->intensity_);
  swap(object_type_, other->object_type_);
  swap(object_id_, other->object_id_);
  swap(material_, other->material_);
  swap(color_, other->color_);
  swap(cos_incidence_angle_, other->cos_incidence_angle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RayHit::GetMetadata() const {
  protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace services
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::RayTracerRadiationPattern* Arena::CreateMaybeMessage< ::metamoto::services::RayTracerRadiationPattern >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::RayTracerRadiationPattern >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::RayTracerSetPatternsRequest* Arena::CreateMaybeMessage< ::metamoto::services::RayTracerSetPatternsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::RayTracerSetPatternsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::RayTracerSetPatternsReply* Arena::CreateMaybeMessage< ::metamoto::services::RayTracerSetPatternsReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::RayTracerSetPatternsReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::RayTracerTraceRequest_OutputFields* Arena::CreateMaybeMessage< ::metamoto::services::RayTracerTraceRequest_OutputFields >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::RayTracerTraceRequest_OutputFields >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::RayTracerTraceRequest* Arena::CreateMaybeMessage< ::metamoto::services::RayTracerTraceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::RayTracerTraceRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::RayTracerTraceReply* Arena::CreateMaybeMessage< ::metamoto::services::RayTracerTraceReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::RayTracerTraceReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::Ray* Arena::CreateMaybeMessage< ::metamoto::services::Ray >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::Ray >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::RayHit* Arena::CreateMaybeMessage< ::metamoto::services::RayHit >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::RayHit >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
