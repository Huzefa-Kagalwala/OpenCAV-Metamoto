// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metamoto/services/vehicle_dynamics.proto

#include "metamoto/services/vehicle_dynamics.pb.h"
#include "metamoto/services/vehicle_dynamics.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace metamoto {
namespace services {

static const char* VehicleDynamics_method_names[] = {
  "/metamoto.services.VehicleDynamics/Initialize",
  "/metamoto.services.VehicleDynamics/Update",
  "/metamoto.services.VehicleDynamics/Close",
};

std::unique_ptr< VehicleDynamics::Stub> VehicleDynamics::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VehicleDynamics::Stub> stub(new VehicleDynamics::Stub(channel));
  return stub;
}

VehicleDynamics::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Initialize_(VehicleDynamics_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(VehicleDynamics_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Close_(VehicleDynamics_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VehicleDynamics::Stub::Initialize(::grpc::ClientContext* context, const ::metamoto::services::VehicleDynamicsInitializeRequest& request, ::metamoto::services::VehicleDynamicsInitializeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Initialize_, context, request, response);
}

void VehicleDynamics::Stub::experimental_async::Initialize(::grpc::ClientContext* context, const ::metamoto::services::VehicleDynamicsInitializeRequest* request, ::metamoto::services::VehicleDynamicsInitializeReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Initialize_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::VehicleDynamicsInitializeReply>* VehicleDynamics::Stub::AsyncInitializeRaw(::grpc::ClientContext* context, const ::metamoto::services::VehicleDynamicsInitializeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::VehicleDynamicsInitializeReply>::Create(channel_.get(), cq, rpcmethod_Initialize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::VehicleDynamicsInitializeReply>* VehicleDynamics::Stub::PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::metamoto::services::VehicleDynamicsInitializeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::VehicleDynamicsInitializeReply>::Create(channel_.get(), cq, rpcmethod_Initialize_, context, request, false);
}

::grpc::Status VehicleDynamics::Stub::Update(::grpc::ClientContext* context, const ::metamoto::services::VehicleDynamicsUpdateRequest& request, ::metamoto::services::VehicleDynamicsUpdateReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Update_, context, request, response);
}

void VehicleDynamics::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::metamoto::services::VehicleDynamicsUpdateRequest* request, ::metamoto::services::VehicleDynamicsUpdateReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::VehicleDynamicsUpdateReply>* VehicleDynamics::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::metamoto::services::VehicleDynamicsUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::VehicleDynamicsUpdateReply>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::VehicleDynamicsUpdateReply>* VehicleDynamics::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::metamoto::services::VehicleDynamicsUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::VehicleDynamicsUpdateReply>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, false);
}

::grpc::Status VehicleDynamics::Stub::Close(::grpc::ClientContext* context, const ::metamoto::services::VehicleDynamicsCloseRequest& request, ::metamoto::services::VehicleDynamicsCloseReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Close_, context, request, response);
}

void VehicleDynamics::Stub::experimental_async::Close(::grpc::ClientContext* context, const ::metamoto::services::VehicleDynamicsCloseRequest* request, ::metamoto::services::VehicleDynamicsCloseReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Close_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::VehicleDynamicsCloseReply>* VehicleDynamics::Stub::AsyncCloseRaw(::grpc::ClientContext* context, const ::metamoto::services::VehicleDynamicsCloseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::VehicleDynamicsCloseReply>::Create(channel_.get(), cq, rpcmethod_Close_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::VehicleDynamicsCloseReply>* VehicleDynamics::Stub::PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::metamoto::services::VehicleDynamicsCloseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::VehicleDynamicsCloseReply>::Create(channel_.get(), cq, rpcmethod_Close_, context, request, false);
}

VehicleDynamics::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VehicleDynamics_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VehicleDynamics::Service, ::metamoto::services::VehicleDynamicsInitializeRequest, ::metamoto::services::VehicleDynamicsInitializeReply>(
          std::mem_fn(&VehicleDynamics::Service::Initialize), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VehicleDynamics_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VehicleDynamics::Service, ::metamoto::services::VehicleDynamicsUpdateRequest, ::metamoto::services::VehicleDynamicsUpdateReply>(
          std::mem_fn(&VehicleDynamics::Service::Update), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VehicleDynamics_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VehicleDynamics::Service, ::metamoto::services::VehicleDynamicsCloseRequest, ::metamoto::services::VehicleDynamicsCloseReply>(
          std::mem_fn(&VehicleDynamics::Service::Close), this)));
}

VehicleDynamics::Service::~Service() {
}

::grpc::Status VehicleDynamics::Service::Initialize(::grpc::ServerContext* context, const ::metamoto::services::VehicleDynamicsInitializeRequest* request, ::metamoto::services::VehicleDynamicsInitializeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VehicleDynamics::Service::Update(::grpc::ServerContext* context, const ::metamoto::services::VehicleDynamicsUpdateRequest* request, ::metamoto::services::VehicleDynamicsUpdateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VehicleDynamics::Service::Close(::grpc::ServerContext* context, const ::metamoto::services::VehicleDynamicsCloseRequest* request, ::metamoto::services::VehicleDynamicsCloseReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace metamoto
}  // namespace services

