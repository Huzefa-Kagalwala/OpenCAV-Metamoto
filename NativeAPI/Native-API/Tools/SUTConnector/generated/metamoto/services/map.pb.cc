// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/services/map.proto

#include "metamoto/services/map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_metamoto_2ftypes_2froads_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2froads_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RoadPoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2froads_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_RoadNetwork;
}  // namespace protobuf_metamoto_2ftypes_2froads_2eproto
namespace protobuf_metamoto_2ftypes_2fvector3_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fvector3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3;
}  // namespace protobuf_metamoto_2ftypes_2fvector3_2eproto
namespace protobuf_metamoto_2ftypes_2fwaypoint_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fwaypoint_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Waypoint;
}  // namespace protobuf_metamoto_2ftypes_2fwaypoint_2eproto
namespace metamoto {
namespace services {
class MapGetRoadNetworkRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapGetRoadNetworkRequest>
      _instance;
} _MapGetRoadNetworkRequest_default_instance_;
class MapGetRoadNetworkReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapGetRoadNetworkReply>
      _instance;
} _MapGetRoadNetworkReply_default_instance_;
class MapToRoadPointRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapToRoadPointRequest>
      _instance;
} _MapToRoadPointRequest_default_instance_;
class MapToRoadPointReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapToRoadPointReply>
      _instance;
} _MapToRoadPointReply_default_instance_;
class MapToWorldPointRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapToWorldPointRequest>
      _instance;
} _MapToWorldPointRequest_default_instance_;
class MapToWorldPointReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapToWorldPointReply>
      _instance;
} _MapToWorldPointReply_default_instance_;
class MapGetHeadingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapGetHeadingRequest>
      _instance;
} _MapGetHeadingRequest_default_instance_;
class MapGetHeadingReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapGetHeadingReply>
      _instance;
} _MapGetHeadingReply_default_instance_;
class MapGetPathRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapGetPathRequest>
      _instance;
} _MapGetPathRequest_default_instance_;
class MapGetPathReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapGetPathReply>
      _instance;
} _MapGetPathReply_default_instance_;
}  // namespace services
}  // namespace metamoto
namespace protobuf_metamoto_2fservices_2fmap_2eproto {
static void InitDefaultsMapGetRoadNetworkRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_MapGetRoadNetworkRequest_default_instance_;
    new (ptr) ::metamoto::services::MapGetRoadNetworkRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::MapGetRoadNetworkRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MapGetRoadNetworkRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMapGetRoadNetworkRequest}, {}};

static void InitDefaultsMapGetRoadNetworkReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_MapGetRoadNetworkReply_default_instance_;
    new (ptr) ::metamoto::services::MapGetRoadNetworkReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::MapGetRoadNetworkReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapGetRoadNetworkReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapGetRoadNetworkReply}, {
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_RoadNetwork.base,}};

static void InitDefaultsMapToRoadPointRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_MapToRoadPointRequest_default_instance_;
    new (ptr) ::metamoto::services::MapToRoadPointRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::MapToRoadPointRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapToRoadPointRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapToRoadPointRequest}, {
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsMapToRoadPointReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_MapToRoadPointReply_default_instance_;
    new (ptr) ::metamoto::services::MapToRoadPointReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::MapToRoadPointReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapToRoadPointReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapToRoadPointReply}, {
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_RoadPoint.base,}};

static void InitDefaultsMapToWorldPointRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_MapToWorldPointRequest_default_instance_;
    new (ptr) ::metamoto::services::MapToWorldPointRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::MapToWorldPointRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapToWorldPointRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapToWorldPointRequest}, {
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_RoadPoint.base,}};

static void InitDefaultsMapToWorldPointReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_MapToWorldPointReply_default_instance_;
    new (ptr) ::metamoto::services::MapToWorldPointReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::MapToWorldPointReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapToWorldPointReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapToWorldPointReply}, {
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsMapGetHeadingRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_MapGetHeadingRequest_default_instance_;
    new (ptr) ::metamoto::services::MapGetHeadingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::MapGetHeadingRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapGetHeadingRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapGetHeadingRequest}, {
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_RoadPoint.base,}};

static void InitDefaultsMapGetHeadingReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_MapGetHeadingReply_default_instance_;
    new (ptr) ::metamoto::services::MapGetHeadingReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::MapGetHeadingReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapGetHeadingReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapGetHeadingReply}, {
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsMapGetPathRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_MapGetPathRequest_default_instance_;
    new (ptr) ::metamoto::services::MapGetPathRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::MapGetPathRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapGetPathRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapGetPathRequest}, {
      &protobuf_metamoto_2ftypes_2fwaypoint_2eproto::scc_info_Waypoint.base,}};

static void InitDefaultsMapGetPathReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_MapGetPathReply_default_instance_;
    new (ptr) ::metamoto::services::MapGetPathReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::MapGetPathReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapGetPathReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapGetPathReply}, {
      &protobuf_metamoto_2ftypes_2fwaypoint_2eproto::scc_info_Waypoint.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MapGetRoadNetworkRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapGetRoadNetworkReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapToRoadPointRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapToRoadPointReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapToWorldPointRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapToWorldPointReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapGetHeadingRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapGetHeadingReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapGetPathRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapGetPathReply.base);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapGetRoadNetworkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapGetRoadNetworkReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapGetRoadNetworkReply, road_network_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapToRoadPointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapToRoadPointRequest, world_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapToRoadPointRequest, vertical_tolerance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapToRoadPointReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapToRoadPointReply, road_points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapToWorldPointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapToWorldPointRequest, road_point_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapToWorldPointReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapToWorldPointReply, world_point_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapGetHeadingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapGetHeadingRequest, road_point_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapGetHeadingReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapGetHeadingReply, heading_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapGetPathRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapGetPathRequest, from_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapGetPathRequest, to_point_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapGetPathReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::MapGetPathReply, path_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::services::MapGetRoadNetworkRequest)},
  { 5, -1, sizeof(::metamoto::services::MapGetRoadNetworkReply)},
  { 11, -1, sizeof(::metamoto::services::MapToRoadPointRequest)},
  { 18, -1, sizeof(::metamoto::services::MapToRoadPointReply)},
  { 24, -1, sizeof(::metamoto::services::MapToWorldPointRequest)},
  { 30, -1, sizeof(::metamoto::services::MapToWorldPointReply)},
  { 36, -1, sizeof(::metamoto::services::MapGetHeadingRequest)},
  { 42, -1, sizeof(::metamoto::services::MapGetHeadingReply)},
  { 48, -1, sizeof(::metamoto::services::MapGetPathRequest)},
  { 55, -1, sizeof(::metamoto::services::MapGetPathReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_MapGetRoadNetworkRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_MapGetRoadNetworkReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_MapToRoadPointRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_MapToRoadPointReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_MapToWorldPointRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_MapToWorldPointReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_MapGetHeadingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_MapGetHeadingReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_MapGetPathRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_MapGetPathReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/services/map.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033metamoto/services/map.proto\022\021metamoto."
      "services\032\032metamoto/types/roads.proto\032\034me"
      "tamoto/types/vector3.proto\032\035metamoto/typ"
      "es/waypoint.proto\"\032\n\030MapGetRoadNetworkRe"
      "quest\"K\n\026MapGetRoadNetworkReply\0221\n\014road_"
      "network\030\001 \001(\0132\033.metamoto.types.RoadNetwo"
      "rk\"a\n\025MapToRoadPointRequest\022,\n\013world_poi"
      "nt\030\001 \001(\0132\027.metamoto.types.Vector3\022\032\n\022ver"
      "tical_tolerance\030\002 \001(\002\"E\n\023MapToRoadPointR"
      "eply\022.\n\013road_points\030\001 \003(\0132\031.metamoto.typ"
      "es.RoadPoint\"G\n\026MapToWorldPointRequest\022-"
      "\n\nroad_point\030\001 \001(\0132\031.metamoto.types.Road"
      "Point\"D\n\024MapToWorldPointReply\022,\n\013world_p"
      "oint\030\001 \001(\0132\027.metamoto.types.Vector3\"E\n\024M"
      "apGetHeadingRequest\022-\n\nroad_point\030\001 \001(\0132"
      "\031.metamoto.types.RoadPoint\">\n\022MapGetHead"
      "ingReply\022(\n\007heading\030\001 \001(\0132\027.metamoto.typ"
      "es.Vector3\"m\n\021MapGetPathRequest\022,\n\nfrom_"
      "point\030\001 \001(\0132\030.metamoto.types.Waypoint\022*\n"
      "\010to_point\030\002 \001(\0132\030.metamoto.types.Waypoin"
      "t\"9\n\017MapGetPathReply\022&\n\004path\030\001 \003(\0132\030.met"
      "amoto.types.Waypoint2\361\003\n\003Map\022j\n\016GetRoadN"
      "etwork\022+.metamoto.services.MapGetRoadNet"
      "workRequest\032).metamoto.services.MapGetRo"
      "adNetworkReply\"\000\022a\n\013ToRoadPoint\022(.metamo"
      "to.services.MapToRoadPointRequest\032&.meta"
      "moto.services.MapToRoadPointReply\"\000\022d\n\014T"
      "oWorldPoint\022).metamoto.services.MapToWor"
      "ldPointRequest\032\'.metamoto.services.MapTo"
      "WorldPointReply\"\000\022^\n\nGetHeading\022\'.metamo"
      "to.services.MapGetHeadingRequest\032%.metam"
      "oto.services.MapGetHeadingReply\"\000\022U\n\007Get"
      "Path\022$.metamoto.services.MapGetPathReque"
      "st\032\".metamoto.services.MapGetPathReply\"\000"
      "B\031\n\025com.metamoto.servicesP\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1395);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/services/map.proto", &protobuf_RegisterTypes);
  ::protobuf_metamoto_2ftypes_2froads_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fvector3_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fwaypoint_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2fservices_2fmap_2eproto
namespace metamoto {
namespace services {

// ===================================================================

void MapGetRoadNetworkRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapGetRoadNetworkRequest::MapGetRoadNetworkRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapGetRoadNetworkRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.MapGetRoadNetworkRequest)
}
MapGetRoadNetworkRequest::MapGetRoadNetworkRequest(const MapGetRoadNetworkRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.services.MapGetRoadNetworkRequest)
}

void MapGetRoadNetworkRequest::SharedCtor() {
}

MapGetRoadNetworkRequest::~MapGetRoadNetworkRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.MapGetRoadNetworkRequest)
  SharedDtor();
}

void MapGetRoadNetworkRequest::SharedDtor() {
}

void MapGetRoadNetworkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapGetRoadNetworkRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapGetRoadNetworkRequest& MapGetRoadNetworkRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapGetRoadNetworkRequest.base);
  return *internal_default_instance();
}


void MapGetRoadNetworkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.MapGetRoadNetworkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool MapGetRoadNetworkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.MapGetRoadNetworkRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.MapGetRoadNetworkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.MapGetRoadNetworkRequest)
  return false;
#undef DO_
}

void MapGetRoadNetworkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.MapGetRoadNetworkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.MapGetRoadNetworkRequest)
}

::google::protobuf::uint8* MapGetRoadNetworkRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.MapGetRoadNetworkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.MapGetRoadNetworkRequest)
  return target;
}

size_t MapGetRoadNetworkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.MapGetRoadNetworkRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapGetRoadNetworkRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.MapGetRoadNetworkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MapGetRoadNetworkRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapGetRoadNetworkRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.MapGetRoadNetworkRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.MapGetRoadNetworkRequest)
    MergeFrom(*source);
  }
}

void MapGetRoadNetworkRequest::MergeFrom(const MapGetRoadNetworkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.MapGetRoadNetworkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MapGetRoadNetworkRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.MapGetRoadNetworkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapGetRoadNetworkRequest::CopyFrom(const MapGetRoadNetworkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.MapGetRoadNetworkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapGetRoadNetworkRequest::IsInitialized() const {
  return true;
}

void MapGetRoadNetworkRequest::Swap(MapGetRoadNetworkRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapGetRoadNetworkRequest::InternalSwap(MapGetRoadNetworkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapGetRoadNetworkRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapGetRoadNetworkReply::InitAsDefaultInstance() {
  ::metamoto::services::_MapGetRoadNetworkReply_default_instance_._instance.get_mutable()->road_network_ = const_cast< ::metamoto::types::RoadNetwork*>(
      ::metamoto::types::RoadNetwork::internal_default_instance());
}
void MapGetRoadNetworkReply::clear_road_network() {
  if (GetArenaNoVirtual() == NULL && road_network_ != NULL) {
    delete road_network_;
  }
  road_network_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapGetRoadNetworkReply::kRoadNetworkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapGetRoadNetworkReply::MapGetRoadNetworkReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapGetRoadNetworkReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.MapGetRoadNetworkReply)
}
MapGetRoadNetworkReply::MapGetRoadNetworkReply(const MapGetRoadNetworkReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_road_network()) {
    road_network_ = new ::metamoto::types::RoadNetwork(*from.road_network_);
  } else {
    road_network_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.services.MapGetRoadNetworkReply)
}

void MapGetRoadNetworkReply::SharedCtor() {
  road_network_ = NULL;
}

MapGetRoadNetworkReply::~MapGetRoadNetworkReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.MapGetRoadNetworkReply)
  SharedDtor();
}

void MapGetRoadNetworkReply::SharedDtor() {
  if (this != internal_default_instance()) delete road_network_;
}

void MapGetRoadNetworkReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapGetRoadNetworkReply::descriptor() {
  ::protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapGetRoadNetworkReply& MapGetRoadNetworkReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapGetRoadNetworkReply.base);
  return *internal_default_instance();
}


void MapGetRoadNetworkReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.MapGetRoadNetworkReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && road_network_ != NULL) {
    delete road_network_;
  }
  road_network_ = NULL;
  _internal_metadata_.Clear();
}

bool MapGetRoadNetworkReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.MapGetRoadNetworkReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.RoadNetwork road_network = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_road_network()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.MapGetRoadNetworkReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.MapGetRoadNetworkReply)
  return false;
#undef DO_
}

void MapGetRoadNetworkReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.MapGetRoadNetworkReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.RoadNetwork road_network = 1;
  if (this->has_road_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_road_network(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.MapGetRoadNetworkReply)
}

::google::protobuf::uint8* MapGetRoadNetworkReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.MapGetRoadNetworkReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.RoadNetwork road_network = 1;
  if (this->has_road_network()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_road_network(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.MapGetRoadNetworkReply)
  return target;
}

size_t MapGetRoadNetworkReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.MapGetRoadNetworkReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.RoadNetwork road_network = 1;
  if (this->has_road_network()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *road_network_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapGetRoadNetworkReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.MapGetRoadNetworkReply)
  GOOGLE_DCHECK_NE(&from, this);
  const MapGetRoadNetworkReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapGetRoadNetworkReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.MapGetRoadNetworkReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.MapGetRoadNetworkReply)
    MergeFrom(*source);
  }
}

void MapGetRoadNetworkReply::MergeFrom(const MapGetRoadNetworkReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.MapGetRoadNetworkReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_road_network()) {
    mutable_road_network()->::metamoto::types::RoadNetwork::MergeFrom(from.road_network());
  }
}

void MapGetRoadNetworkReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.MapGetRoadNetworkReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapGetRoadNetworkReply::CopyFrom(const MapGetRoadNetworkReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.MapGetRoadNetworkReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapGetRoadNetworkReply::IsInitialized() const {
  return true;
}

void MapGetRoadNetworkReply::Swap(MapGetRoadNetworkReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapGetRoadNetworkReply::InternalSwap(MapGetRoadNetworkReply* other) {
  using std::swap;
  swap(road_network_, other->road_network_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapGetRoadNetworkReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapToRoadPointRequest::InitAsDefaultInstance() {
  ::metamoto::services::_MapToRoadPointRequest_default_instance_._instance.get_mutable()->world_point_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
}
void MapToRoadPointRequest::clear_world_point() {
  if (GetArenaNoVirtual() == NULL && world_point_ != NULL) {
    delete world_point_;
  }
  world_point_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapToRoadPointRequest::kWorldPointFieldNumber;
const int MapToRoadPointRequest::kVerticalToleranceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapToRoadPointRequest::MapToRoadPointRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapToRoadPointRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.MapToRoadPointRequest)
}
MapToRoadPointRequest::MapToRoadPointRequest(const MapToRoadPointRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_world_point()) {
    world_point_ = new ::metamoto::types::Vector3(*from.world_point_);
  } else {
    world_point_ = NULL;
  }
  vertical_tolerance_ = from.vertical_tolerance_;
  // @@protoc_insertion_point(copy_constructor:metamoto.services.MapToRoadPointRequest)
}

void MapToRoadPointRequest::SharedCtor() {
  ::memset(&world_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertical_tolerance_) -
      reinterpret_cast<char*>(&world_point_)) + sizeof(vertical_tolerance_));
}

MapToRoadPointRequest::~MapToRoadPointRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.MapToRoadPointRequest)
  SharedDtor();
}

void MapToRoadPointRequest::SharedDtor() {
  if (this != internal_default_instance()) delete world_point_;
}

void MapToRoadPointRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapToRoadPointRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapToRoadPointRequest& MapToRoadPointRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapToRoadPointRequest.base);
  return *internal_default_instance();
}


void MapToRoadPointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.MapToRoadPointRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && world_point_ != NULL) {
    delete world_point_;
  }
  world_point_ = NULL;
  vertical_tolerance_ = 0;
  _internal_metadata_.Clear();
}

bool MapToRoadPointRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.MapToRoadPointRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.Vector3 world_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_world_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vertical_tolerance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vertical_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.MapToRoadPointRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.MapToRoadPointRequest)
  return false;
#undef DO_
}

void MapToRoadPointRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.MapToRoadPointRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Vector3 world_point = 1;
  if (this->has_world_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_world_point(), output);
  }

  // float vertical_tolerance = 2;
  if (this->vertical_tolerance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->vertical_tolerance(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.MapToRoadPointRequest)
}

::google::protobuf::uint8* MapToRoadPointRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.MapToRoadPointRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Vector3 world_point = 1;
  if (this->has_world_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_world_point(), deterministic, target);
  }

  // float vertical_tolerance = 2;
  if (this->vertical_tolerance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->vertical_tolerance(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.MapToRoadPointRequest)
  return target;
}

size_t MapToRoadPointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.MapToRoadPointRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.Vector3 world_point = 1;
  if (this->has_world_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *world_point_);
  }

  // float vertical_tolerance = 2;
  if (this->vertical_tolerance() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapToRoadPointRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.MapToRoadPointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MapToRoadPointRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapToRoadPointRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.MapToRoadPointRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.MapToRoadPointRequest)
    MergeFrom(*source);
  }
}

void MapToRoadPointRequest::MergeFrom(const MapToRoadPointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.MapToRoadPointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_world_point()) {
    mutable_world_point()->::metamoto::types::Vector3::MergeFrom(from.world_point());
  }
  if (from.vertical_tolerance() != 0) {
    set_vertical_tolerance(from.vertical_tolerance());
  }
}

void MapToRoadPointRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.MapToRoadPointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapToRoadPointRequest::CopyFrom(const MapToRoadPointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.MapToRoadPointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapToRoadPointRequest::IsInitialized() const {
  return true;
}

void MapToRoadPointRequest::Swap(MapToRoadPointRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapToRoadPointRequest::InternalSwap(MapToRoadPointRequest* other) {
  using std::swap;
  swap(world_point_, other->world_point_);
  swap(vertical_tolerance_, other->vertical_tolerance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapToRoadPointRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapToRoadPointReply::InitAsDefaultInstance() {
}
void MapToRoadPointReply::clear_road_points() {
  road_points_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapToRoadPointReply::kRoadPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapToRoadPointReply::MapToRoadPointReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapToRoadPointReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.MapToRoadPointReply)
}
MapToRoadPointReply::MapToRoadPointReply(const MapToRoadPointReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      road_points_(from.road_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.services.MapToRoadPointReply)
}

void MapToRoadPointReply::SharedCtor() {
}

MapToRoadPointReply::~MapToRoadPointReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.MapToRoadPointReply)
  SharedDtor();
}

void MapToRoadPointReply::SharedDtor() {
}

void MapToRoadPointReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapToRoadPointReply::descriptor() {
  ::protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapToRoadPointReply& MapToRoadPointReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapToRoadPointReply.base);
  return *internal_default_instance();
}


void MapToRoadPointReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.MapToRoadPointReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_points_.Clear();
  _internal_metadata_.Clear();
}

bool MapToRoadPointReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.MapToRoadPointReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metamoto.types.RoadPoint road_points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_road_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.MapToRoadPointReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.MapToRoadPointReply)
  return false;
#undef DO_
}

void MapToRoadPointReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.MapToRoadPointReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.RoadPoint road_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->road_points(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.MapToRoadPointReply)
}

::google::protobuf::uint8* MapToRoadPointReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.MapToRoadPointReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.RoadPoint road_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->road_points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.MapToRoadPointReply)
  return target;
}

size_t MapToRoadPointReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.MapToRoadPointReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.RoadPoint road_points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->road_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road_points(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapToRoadPointReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.MapToRoadPointReply)
  GOOGLE_DCHECK_NE(&from, this);
  const MapToRoadPointReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapToRoadPointReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.MapToRoadPointReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.MapToRoadPointReply)
    MergeFrom(*source);
  }
}

void MapToRoadPointReply::MergeFrom(const MapToRoadPointReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.MapToRoadPointReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_points_.MergeFrom(from.road_points_);
}

void MapToRoadPointReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.MapToRoadPointReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapToRoadPointReply::CopyFrom(const MapToRoadPointReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.MapToRoadPointReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapToRoadPointReply::IsInitialized() const {
  return true;
}

void MapToRoadPointReply::Swap(MapToRoadPointReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapToRoadPointReply::InternalSwap(MapToRoadPointReply* other) {
  using std::swap;
  CastToBase(&road_points_)->InternalSwap(CastToBase(&other->road_points_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapToRoadPointReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapToWorldPointRequest::InitAsDefaultInstance() {
  ::metamoto::services::_MapToWorldPointRequest_default_instance_._instance.get_mutable()->road_point_ = const_cast< ::metamoto::types::RoadPoint*>(
      ::metamoto::types::RoadPoint::internal_default_instance());
}
void MapToWorldPointRequest::clear_road_point() {
  if (GetArenaNoVirtual() == NULL && road_point_ != NULL) {
    delete road_point_;
  }
  road_point_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapToWorldPointRequest::kRoadPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapToWorldPointRequest::MapToWorldPointRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapToWorldPointRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.MapToWorldPointRequest)
}
MapToWorldPointRequest::MapToWorldPointRequest(const MapToWorldPointRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_road_point()) {
    road_point_ = new ::metamoto::types::RoadPoint(*from.road_point_);
  } else {
    road_point_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.services.MapToWorldPointRequest)
}

void MapToWorldPointRequest::SharedCtor() {
  road_point_ = NULL;
}

MapToWorldPointRequest::~MapToWorldPointRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.MapToWorldPointRequest)
  SharedDtor();
}

void MapToWorldPointRequest::SharedDtor() {
  if (this != internal_default_instance()) delete road_point_;
}

void MapToWorldPointRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapToWorldPointRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapToWorldPointRequest& MapToWorldPointRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapToWorldPointRequest.base);
  return *internal_default_instance();
}


void MapToWorldPointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.MapToWorldPointRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && road_point_ != NULL) {
    delete road_point_;
  }
  road_point_ = NULL;
  _internal_metadata_.Clear();
}

bool MapToWorldPointRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.MapToWorldPointRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.RoadPoint road_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_road_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.MapToWorldPointRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.MapToWorldPointRequest)
  return false;
#undef DO_
}

void MapToWorldPointRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.MapToWorldPointRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.RoadPoint road_point = 1;
  if (this->has_road_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_road_point(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.MapToWorldPointRequest)
}

::google::protobuf::uint8* MapToWorldPointRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.MapToWorldPointRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.RoadPoint road_point = 1;
  if (this->has_road_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_road_point(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.MapToWorldPointRequest)
  return target;
}

size_t MapToWorldPointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.MapToWorldPointRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.RoadPoint road_point = 1;
  if (this->has_road_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *road_point_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapToWorldPointRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.MapToWorldPointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MapToWorldPointRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapToWorldPointRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.MapToWorldPointRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.MapToWorldPointRequest)
    MergeFrom(*source);
  }
}

void MapToWorldPointRequest::MergeFrom(const MapToWorldPointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.MapToWorldPointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_road_point()) {
    mutable_road_point()->::metamoto::types::RoadPoint::MergeFrom(from.road_point());
  }
}

void MapToWorldPointRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.MapToWorldPointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapToWorldPointRequest::CopyFrom(const MapToWorldPointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.MapToWorldPointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapToWorldPointRequest::IsInitialized() const {
  return true;
}

void MapToWorldPointRequest::Swap(MapToWorldPointRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapToWorldPointRequest::InternalSwap(MapToWorldPointRequest* other) {
  using std::swap;
  swap(road_point_, other->road_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapToWorldPointRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapToWorldPointReply::InitAsDefaultInstance() {
  ::metamoto::services::_MapToWorldPointReply_default_instance_._instance.get_mutable()->world_point_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
}
void MapToWorldPointReply::clear_world_point() {
  if (GetArenaNoVirtual() == NULL && world_point_ != NULL) {
    delete world_point_;
  }
  world_point_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapToWorldPointReply::kWorldPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapToWorldPointReply::MapToWorldPointReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapToWorldPointReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.MapToWorldPointReply)
}
MapToWorldPointReply::MapToWorldPointReply(const MapToWorldPointReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_world_point()) {
    world_point_ = new ::metamoto::types::Vector3(*from.world_point_);
  } else {
    world_point_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.services.MapToWorldPointReply)
}

void MapToWorldPointReply::SharedCtor() {
  world_point_ = NULL;
}

MapToWorldPointReply::~MapToWorldPointReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.MapToWorldPointReply)
  SharedDtor();
}

void MapToWorldPointReply::SharedDtor() {
  if (this != internal_default_instance()) delete world_point_;
}

void MapToWorldPointReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapToWorldPointReply::descriptor() {
  ::protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapToWorldPointReply& MapToWorldPointReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapToWorldPointReply.base);
  return *internal_default_instance();
}


void MapToWorldPointReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.MapToWorldPointReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && world_point_ != NULL) {
    delete world_point_;
  }
  world_point_ = NULL;
  _internal_metadata_.Clear();
}

bool MapToWorldPointReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.MapToWorldPointReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.Vector3 world_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_world_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.MapToWorldPointReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.MapToWorldPointReply)
  return false;
#undef DO_
}

void MapToWorldPointReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.MapToWorldPointReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Vector3 world_point = 1;
  if (this->has_world_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_world_point(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.MapToWorldPointReply)
}

::google::protobuf::uint8* MapToWorldPointReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.MapToWorldPointReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Vector3 world_point = 1;
  if (this->has_world_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_world_point(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.MapToWorldPointReply)
  return target;
}

size_t MapToWorldPointReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.MapToWorldPointReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.Vector3 world_point = 1;
  if (this->has_world_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *world_point_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapToWorldPointReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.MapToWorldPointReply)
  GOOGLE_DCHECK_NE(&from, this);
  const MapToWorldPointReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapToWorldPointReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.MapToWorldPointReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.MapToWorldPointReply)
    MergeFrom(*source);
  }
}

void MapToWorldPointReply::MergeFrom(const MapToWorldPointReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.MapToWorldPointReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_world_point()) {
    mutable_world_point()->::metamoto::types::Vector3::MergeFrom(from.world_point());
  }
}

void MapToWorldPointReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.MapToWorldPointReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapToWorldPointReply::CopyFrom(const MapToWorldPointReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.MapToWorldPointReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapToWorldPointReply::IsInitialized() const {
  return true;
}

void MapToWorldPointReply::Swap(MapToWorldPointReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapToWorldPointReply::InternalSwap(MapToWorldPointReply* other) {
  using std::swap;
  swap(world_point_, other->world_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapToWorldPointReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapGetHeadingRequest::InitAsDefaultInstance() {
  ::metamoto::services::_MapGetHeadingRequest_default_instance_._instance.get_mutable()->road_point_ = const_cast< ::metamoto::types::RoadPoint*>(
      ::metamoto::types::RoadPoint::internal_default_instance());
}
void MapGetHeadingRequest::clear_road_point() {
  if (GetArenaNoVirtual() == NULL && road_point_ != NULL) {
    delete road_point_;
  }
  road_point_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapGetHeadingRequest::kRoadPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapGetHeadingRequest::MapGetHeadingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapGetHeadingRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.MapGetHeadingRequest)
}
MapGetHeadingRequest::MapGetHeadingRequest(const MapGetHeadingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_road_point()) {
    road_point_ = new ::metamoto::types::RoadPoint(*from.road_point_);
  } else {
    road_point_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.services.MapGetHeadingRequest)
}

void MapGetHeadingRequest::SharedCtor() {
  road_point_ = NULL;
}

MapGetHeadingRequest::~MapGetHeadingRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.MapGetHeadingRequest)
  SharedDtor();
}

void MapGetHeadingRequest::SharedDtor() {
  if (this != internal_default_instance()) delete road_point_;
}

void MapGetHeadingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapGetHeadingRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapGetHeadingRequest& MapGetHeadingRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapGetHeadingRequest.base);
  return *internal_default_instance();
}


void MapGetHeadingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.MapGetHeadingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && road_point_ != NULL) {
    delete road_point_;
  }
  road_point_ = NULL;
  _internal_metadata_.Clear();
}

bool MapGetHeadingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.MapGetHeadingRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.RoadPoint road_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_road_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.MapGetHeadingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.MapGetHeadingRequest)
  return false;
#undef DO_
}

void MapGetHeadingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.MapGetHeadingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.RoadPoint road_point = 1;
  if (this->has_road_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_road_point(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.MapGetHeadingRequest)
}

::google::protobuf::uint8* MapGetHeadingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.MapGetHeadingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.RoadPoint road_point = 1;
  if (this->has_road_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_road_point(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.MapGetHeadingRequest)
  return target;
}

size_t MapGetHeadingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.MapGetHeadingRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.RoadPoint road_point = 1;
  if (this->has_road_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *road_point_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapGetHeadingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.MapGetHeadingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MapGetHeadingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapGetHeadingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.MapGetHeadingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.MapGetHeadingRequest)
    MergeFrom(*source);
  }
}

void MapGetHeadingRequest::MergeFrom(const MapGetHeadingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.MapGetHeadingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_road_point()) {
    mutable_road_point()->::metamoto::types::RoadPoint::MergeFrom(from.road_point());
  }
}

void MapGetHeadingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.MapGetHeadingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapGetHeadingRequest::CopyFrom(const MapGetHeadingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.MapGetHeadingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapGetHeadingRequest::IsInitialized() const {
  return true;
}

void MapGetHeadingRequest::Swap(MapGetHeadingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapGetHeadingRequest::InternalSwap(MapGetHeadingRequest* other) {
  using std::swap;
  swap(road_point_, other->road_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapGetHeadingRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapGetHeadingReply::InitAsDefaultInstance() {
  ::metamoto::services::_MapGetHeadingReply_default_instance_._instance.get_mutable()->heading_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
}
void MapGetHeadingReply::clear_heading() {
  if (GetArenaNoVirtual() == NULL && heading_ != NULL) {
    delete heading_;
  }
  heading_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapGetHeadingReply::kHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapGetHeadingReply::MapGetHeadingReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapGetHeadingReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.MapGetHeadingReply)
}
MapGetHeadingReply::MapGetHeadingReply(const MapGetHeadingReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_heading()) {
    heading_ = new ::metamoto::types::Vector3(*from.heading_);
  } else {
    heading_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.services.MapGetHeadingReply)
}

void MapGetHeadingReply::SharedCtor() {
  heading_ = NULL;
}

MapGetHeadingReply::~MapGetHeadingReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.MapGetHeadingReply)
  SharedDtor();
}

void MapGetHeadingReply::SharedDtor() {
  if (this != internal_default_instance()) delete heading_;
}

void MapGetHeadingReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapGetHeadingReply::descriptor() {
  ::protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapGetHeadingReply& MapGetHeadingReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapGetHeadingReply.base);
  return *internal_default_instance();
}


void MapGetHeadingReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.MapGetHeadingReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && heading_ != NULL) {
    delete heading_;
  }
  heading_ = NULL;
  _internal_metadata_.Clear();
}

bool MapGetHeadingReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.MapGetHeadingReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.Vector3 heading = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heading()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.MapGetHeadingReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.MapGetHeadingReply)
  return false;
#undef DO_
}

void MapGetHeadingReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.MapGetHeadingReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Vector3 heading = 1;
  if (this->has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_heading(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.MapGetHeadingReply)
}

::google::protobuf::uint8* MapGetHeadingReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.MapGetHeadingReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Vector3 heading = 1;
  if (this->has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_heading(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.MapGetHeadingReply)
  return target;
}

size_t MapGetHeadingReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.MapGetHeadingReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.Vector3 heading = 1;
  if (this->has_heading()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *heading_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapGetHeadingReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.MapGetHeadingReply)
  GOOGLE_DCHECK_NE(&from, this);
  const MapGetHeadingReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapGetHeadingReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.MapGetHeadingReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.MapGetHeadingReply)
    MergeFrom(*source);
  }
}

void MapGetHeadingReply::MergeFrom(const MapGetHeadingReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.MapGetHeadingReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_heading()) {
    mutable_heading()->::metamoto::types::Vector3::MergeFrom(from.heading());
  }
}

void MapGetHeadingReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.MapGetHeadingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapGetHeadingReply::CopyFrom(const MapGetHeadingReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.MapGetHeadingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapGetHeadingReply::IsInitialized() const {
  return true;
}

void MapGetHeadingReply::Swap(MapGetHeadingReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapGetHeadingReply::InternalSwap(MapGetHeadingReply* other) {
  using std::swap;
  swap(heading_, other->heading_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapGetHeadingReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapGetPathRequest::InitAsDefaultInstance() {
  ::metamoto::services::_MapGetPathRequest_default_instance_._instance.get_mutable()->from_point_ = const_cast< ::metamoto::types::Waypoint*>(
      ::metamoto::types::Waypoint::internal_default_instance());
  ::metamoto::services::_MapGetPathRequest_default_instance_._instance.get_mutable()->to_point_ = const_cast< ::metamoto::types::Waypoint*>(
      ::metamoto::types::Waypoint::internal_default_instance());
}
void MapGetPathRequest::clear_from_point() {
  if (GetArenaNoVirtual() == NULL && from_point_ != NULL) {
    delete from_point_;
  }
  from_point_ = NULL;
}
void MapGetPathRequest::clear_to_point() {
  if (GetArenaNoVirtual() == NULL && to_point_ != NULL) {
    delete to_point_;
  }
  to_point_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapGetPathRequest::kFromPointFieldNumber;
const int MapGetPathRequest::kToPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapGetPathRequest::MapGetPathRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapGetPathRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.MapGetPathRequest)
}
MapGetPathRequest::MapGetPathRequest(const MapGetPathRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_from_point()) {
    from_point_ = new ::metamoto::types::Waypoint(*from.from_point_);
  } else {
    from_point_ = NULL;
  }
  if (from.has_to_point()) {
    to_point_ = new ::metamoto::types::Waypoint(*from.to_point_);
  } else {
    to_point_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.services.MapGetPathRequest)
}

void MapGetPathRequest::SharedCtor() {
  ::memset(&from_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_point_) -
      reinterpret_cast<char*>(&from_point_)) + sizeof(to_point_));
}

MapGetPathRequest::~MapGetPathRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.MapGetPathRequest)
  SharedDtor();
}

void MapGetPathRequest::SharedDtor() {
  if (this != internal_default_instance()) delete from_point_;
  if (this != internal_default_instance()) delete to_point_;
}

void MapGetPathRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapGetPathRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapGetPathRequest& MapGetPathRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapGetPathRequest.base);
  return *internal_default_instance();
}


void MapGetPathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.MapGetPathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && from_point_ != NULL) {
    delete from_point_;
  }
  from_point_ = NULL;
  if (GetArenaNoVirtual() == NULL && to_point_ != NULL) {
    delete to_point_;
  }
  to_point_ = NULL;
  _internal_metadata_.Clear();
}

bool MapGetPathRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.MapGetPathRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.Waypoint from_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_from_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Waypoint to_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_to_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.MapGetPathRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.MapGetPathRequest)
  return false;
#undef DO_
}

void MapGetPathRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.MapGetPathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Waypoint from_point = 1;
  if (this->has_from_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_from_point(), output);
  }

  // .metamoto.types.Waypoint to_point = 2;
  if (this->has_to_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_to_point(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.MapGetPathRequest)
}

::google::protobuf::uint8* MapGetPathRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.MapGetPathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Waypoint from_point = 1;
  if (this->has_from_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_from_point(), deterministic, target);
  }

  // .metamoto.types.Waypoint to_point = 2;
  if (this->has_to_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_to_point(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.MapGetPathRequest)
  return target;
}

size_t MapGetPathRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.MapGetPathRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.Waypoint from_point = 1;
  if (this->has_from_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *from_point_);
  }

  // .metamoto.types.Waypoint to_point = 2;
  if (this->has_to_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *to_point_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapGetPathRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.MapGetPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MapGetPathRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapGetPathRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.MapGetPathRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.MapGetPathRequest)
    MergeFrom(*source);
  }
}

void MapGetPathRequest::MergeFrom(const MapGetPathRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.MapGetPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_from_point()) {
    mutable_from_point()->::metamoto::types::Waypoint::MergeFrom(from.from_point());
  }
  if (from.has_to_point()) {
    mutable_to_point()->::metamoto::types::Waypoint::MergeFrom(from.to_point());
  }
}

void MapGetPathRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.MapGetPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapGetPathRequest::CopyFrom(const MapGetPathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.MapGetPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapGetPathRequest::IsInitialized() const {
  return true;
}

void MapGetPathRequest::Swap(MapGetPathRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapGetPathRequest::InternalSwap(MapGetPathRequest* other) {
  using std::swap;
  swap(from_point_, other->from_point_);
  swap(to_point_, other->to_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapGetPathRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapGetPathReply::InitAsDefaultInstance() {
}
void MapGetPathReply::clear_path() {
  path_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapGetPathReply::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapGetPathReply::MapGetPathReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapGetPathReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.MapGetPathReply)
}
MapGetPathReply::MapGetPathReply(const MapGetPathReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      path_(from.path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.services.MapGetPathReply)
}

void MapGetPathReply::SharedCtor() {
}

MapGetPathReply::~MapGetPathReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.MapGetPathReply)
  SharedDtor();
}

void MapGetPathReply::SharedDtor() {
}

void MapGetPathReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapGetPathReply::descriptor() {
  ::protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapGetPathReply& MapGetPathReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapGetPathReply.base);
  return *internal_default_instance();
}


void MapGetPathReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.MapGetPathReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  _internal_metadata_.Clear();
}

bool MapGetPathReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.MapGetPathReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metamoto.types.Waypoint path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.MapGetPathReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.MapGetPathReply)
  return false;
#undef DO_
}

void MapGetPathReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.MapGetPathReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.Waypoint path = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->path(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.MapGetPathReply)
}

::google::protobuf::uint8* MapGetPathReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.MapGetPathReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.Waypoint path = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->path(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.MapGetPathReply)
  return target;
}

size_t MapGetPathReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.MapGetPathReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.Waypoint path = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->path_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->path(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapGetPathReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.MapGetPathReply)
  GOOGLE_DCHECK_NE(&from, this);
  const MapGetPathReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapGetPathReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.MapGetPathReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.MapGetPathReply)
    MergeFrom(*source);
  }
}

void MapGetPathReply::MergeFrom(const MapGetPathReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.MapGetPathReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
}

void MapGetPathReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.MapGetPathReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapGetPathReply::CopyFrom(const MapGetPathReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.MapGetPathReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapGetPathReply::IsInitialized() const {
  return true;
}

void MapGetPathReply::Swap(MapGetPathReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapGetPathReply::InternalSwap(MapGetPathReply* other) {
  using std::swap;
  CastToBase(&path_)->InternalSwap(CastToBase(&other->path_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapGetPathReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace services
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::MapGetRoadNetworkRequest* Arena::CreateMaybeMessage< ::metamoto::services::MapGetRoadNetworkRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::MapGetRoadNetworkRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::MapGetRoadNetworkReply* Arena::CreateMaybeMessage< ::metamoto::services::MapGetRoadNetworkReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::MapGetRoadNetworkReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::MapToRoadPointRequest* Arena::CreateMaybeMessage< ::metamoto::services::MapToRoadPointRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::MapToRoadPointRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::MapToRoadPointReply* Arena::CreateMaybeMessage< ::metamoto::services::MapToRoadPointReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::MapToRoadPointReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::MapToWorldPointRequest* Arena::CreateMaybeMessage< ::metamoto::services::MapToWorldPointRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::MapToWorldPointRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::MapToWorldPointReply* Arena::CreateMaybeMessage< ::metamoto::services::MapToWorldPointReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::MapToWorldPointReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::MapGetHeadingRequest* Arena::CreateMaybeMessage< ::metamoto::services::MapGetHeadingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::MapGetHeadingRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::MapGetHeadingReply* Arena::CreateMaybeMessage< ::metamoto::services::MapGetHeadingReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::MapGetHeadingReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::MapGetPathRequest* Arena::CreateMaybeMessage< ::metamoto::services::MapGetPathRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::MapGetPathRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::MapGetPathReply* Arena::CreateMaybeMessage< ::metamoto::services::MapGetPathReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::MapGetPathReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
