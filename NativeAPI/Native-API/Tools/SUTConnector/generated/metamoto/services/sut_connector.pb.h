// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/services/sut_connector.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2fservices_2fsut_5fconnector_2eproto
#define PROTOBUF_INCLUDED_metamoto_2fservices_2fsut_5fconnector_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/status.pb.h"
#include "metamoto/services/controller.pb.h"
#include "metamoto/services/data_bus.pb.h"
#include "metamoto/services/map.pb.h"
#include "metamoto/services/ray_tracer.pb.h"
#include "metamoto/services/reporting.pb.h"
#include "metamoto/services/scenario_service.pb.h"
#include "metamoto/services/sensor.pb.h"
#include "metamoto/services/system.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto 

namespace protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto
namespace metamoto {
namespace services {
class SUTConnectorConnectReply;
class SUTConnectorConnectReplyDefaultTypeInternal;
extern SUTConnectorConnectReplyDefaultTypeInternal _SUTConnectorConnectReply_default_instance_;
class SUTConnectorConnectRequest;
class SUTConnectorConnectRequestDefaultTypeInternal;
extern SUTConnectorConnectRequestDefaultTypeInternal _SUTConnectorConnectRequest_default_instance_;
class SUTConnectorDisconnectReply;
class SUTConnectorDisconnectReplyDefaultTypeInternal;
extern SUTConnectorDisconnectReplyDefaultTypeInternal _SUTConnectorDisconnectReply_default_instance_;
class SUTConnectorDisconnectRequest;
class SUTConnectorDisconnectRequestDefaultTypeInternal;
extern SUTConnectorDisconnectRequestDefaultTypeInternal _SUTConnectorDisconnectRequest_default_instance_;
class SUTConnectorHeartbeatReply;
class SUTConnectorHeartbeatReplyDefaultTypeInternal;
extern SUTConnectorHeartbeatReplyDefaultTypeInternal _SUTConnectorHeartbeatReply_default_instance_;
class SUTConnectorHeartbeatRequest;
class SUTConnectorHeartbeatRequestDefaultTypeInternal;
extern SUTConnectorHeartbeatRequestDefaultTypeInternal _SUTConnectorHeartbeatRequest_default_instance_;
class SUTConnectorQueryGetConnectedSUTsReply;
class SUTConnectorQueryGetConnectedSUTsReplyDefaultTypeInternal;
extern SUTConnectorQueryGetConnectedSUTsReplyDefaultTypeInternal _SUTConnectorQueryGetConnectedSUTsReply_default_instance_;
class SUTConnectorQueryGetConnectedSUTsReply_SUT;
class SUTConnectorQueryGetConnectedSUTsReply_SUTDefaultTypeInternal;
extern SUTConnectorQueryGetConnectedSUTsReply_SUTDefaultTypeInternal _SUTConnectorQueryGetConnectedSUTsReply_SUT_default_instance_;
class SUTConnectorQueryGetConnectedSUTsRequest;
class SUTConnectorQueryGetConnectedSUTsRequestDefaultTypeInternal;
extern SUTConnectorQueryGetConnectedSUTsRequestDefaultTypeInternal _SUTConnectorQueryGetConnectedSUTsRequest_default_instance_;
class SUTConnectorReply;
class SUTConnectorReplyDefaultTypeInternal;
extern SUTConnectorReplyDefaultTypeInternal _SUTConnectorReply_default_instance_;
class SUTConnectorRequest;
class SUTConnectorRequestDefaultTypeInternal;
extern SUTConnectorRequestDefaultTypeInternal _SUTConnectorRequest_default_instance_;
}  // namespace services
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::services::SUTConnectorConnectReply* Arena::CreateMaybeMessage<::metamoto::services::SUTConnectorConnectReply>(Arena*);
template<> ::metamoto::services::SUTConnectorConnectRequest* Arena::CreateMaybeMessage<::metamoto::services::SUTConnectorConnectRequest>(Arena*);
template<> ::metamoto::services::SUTConnectorDisconnectReply* Arena::CreateMaybeMessage<::metamoto::services::SUTConnectorDisconnectReply>(Arena*);
template<> ::metamoto::services::SUTConnectorDisconnectRequest* Arena::CreateMaybeMessage<::metamoto::services::SUTConnectorDisconnectRequest>(Arena*);
template<> ::metamoto::services::SUTConnectorHeartbeatReply* Arena::CreateMaybeMessage<::metamoto::services::SUTConnectorHeartbeatReply>(Arena*);
template<> ::metamoto::services::SUTConnectorHeartbeatRequest* Arena::CreateMaybeMessage<::metamoto::services::SUTConnectorHeartbeatRequest>(Arena*);
template<> ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply* Arena::CreateMaybeMessage<::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>(Arena*);
template<> ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT* Arena::CreateMaybeMessage<::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT>(Arena*);
template<> ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest* Arena::CreateMaybeMessage<::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest>(Arena*);
template<> ::metamoto::services::SUTConnectorReply* Arena::CreateMaybeMessage<::metamoto::services::SUTConnectorReply>(Arena*);
template<> ::metamoto::services::SUTConnectorRequest* Arena::CreateMaybeMessage<::metamoto::services::SUTConnectorRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace services {

enum SUTConnectorConnectRequest_SUTType {
  SUTConnectorConnectRequest_SUTType_SUT_TYPE_UNKNOWN = 0,
  SUTConnectorConnectRequest_SUTType_SUT_TYPE_CONTROLLER = 1,
  SUTConnectorConnectRequest_SUTType_SUT_TYPE_SENSOR = 2,
  SUTConnectorConnectRequest_SUTType_SUTConnectorConnectRequest_SUTType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SUTConnectorConnectRequest_SUTType_SUTConnectorConnectRequest_SUTType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SUTConnectorConnectRequest_SUTType_IsValid(int value);
const SUTConnectorConnectRequest_SUTType SUTConnectorConnectRequest_SUTType_SUTType_MIN = SUTConnectorConnectRequest_SUTType_SUT_TYPE_UNKNOWN;
const SUTConnectorConnectRequest_SUTType SUTConnectorConnectRequest_SUTType_SUTType_MAX = SUTConnectorConnectRequest_SUTType_SUT_TYPE_SENSOR;
const int SUTConnectorConnectRequest_SUTType_SUTType_ARRAYSIZE = SUTConnectorConnectRequest_SUTType_SUTType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SUTConnectorConnectRequest_SUTType_descriptor();
inline const ::std::string& SUTConnectorConnectRequest_SUTType_Name(SUTConnectorConnectRequest_SUTType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SUTConnectorConnectRequest_SUTType_descriptor(), value);
}
inline bool SUTConnectorConnectRequest_SUTType_Parse(
    const ::std::string& name, SUTConnectorConnectRequest_SUTType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SUTConnectorConnectRequest_SUTType>(
    SUTConnectorConnectRequest_SUTType_descriptor(), name, value);
}
// ===================================================================

class SUTConnectorRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.SUTConnectorRequest) */ {
 public:
  SUTConnectorRequest();
  virtual ~SUTConnectorRequest();

  SUTConnectorRequest(const SUTConnectorRequest& from);

  inline SUTConnectorRequest& operator=(const SUTConnectorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SUTConnectorRequest(SUTConnectorRequest&& from) noexcept
    : SUTConnectorRequest() {
    *this = ::std::move(from);
  }

  inline SUTConnectorRequest& operator=(SUTConnectorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SUTConnectorRequest& default_instance();

  enum DataOneofCase {
    kStatus = 1,
    kConnect = 2,
    kDisconnect = 3,
    kControllerInitialize = 20,
    kControllerUpdate = 21,
    kControllerClose = 22,
    kControllerSetup = 23,
    kSensorInitialize = 40,
    kSensorUpdate = 41,
    kSensorClose = 42,
    kSensorSetup = 43,
    kDataBusPublish = 60,
    kDataBusSubscribe = 61,
    kDataBusWrite = 62,
    kDataBusRead = 63,
    kDataBusReadAll = 64,
    kDataBusReadLast = 65,
    kMapGetRoadNetwork = 80,
    kMapToRoadPoint = 81,
    kMapToWorldPoint = 82,
    kMapGetPath = 83,
    kMapGetHeading = 84,
    kRayTracerSetPatterns = 100,
    kRayTracerTrace = 101,
    kReportingAddTimeSeriesValue = 120,
    kReportingLog = 121,
    kReportingReportEvent = 122,
    kReportingVisualize = 123,
    kScenarioUpdate = 140,
    kScenarioGetVehicleWaypoints = 141,
    kScenarioSetVehicleWaypoints = 142,
    kScenarioSetDriverModel = 143,
    kScenarioSetup = 144,
    kSystemGetResultsSize = 160,
    DATA_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUTConnectorRequest* internal_default_instance() {
    return reinterpret_cast<const SUTConnectorRequest*>(
               &_SUTConnectorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SUTConnectorRequest* other);
  friend void swap(SUTConnectorRequest& a, SUTConnectorRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SUTConnectorRequest* New() const final {
    return CreateMaybeMessage<SUTConnectorRequest>(NULL);
  }

  SUTConnectorRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SUTConnectorRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SUTConnectorRequest& from);
  void MergeFrom(const SUTConnectorRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUTConnectorRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.rpc.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  private:
  const ::google::rpc::Status& _internal_status() const;
  public:
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);

  // .metamoto.services.SUTConnectorConnectRequest connect = 2;
  bool has_connect() const;
  void clear_connect();
  static const int kConnectFieldNumber = 2;
  private:
  const ::metamoto::services::SUTConnectorConnectRequest& _internal_connect() const;
  public:
  const ::metamoto::services::SUTConnectorConnectRequest& connect() const;
  ::metamoto::services::SUTConnectorConnectRequest* release_connect();
  ::metamoto::services::SUTConnectorConnectRequest* mutable_connect();
  void set_allocated_connect(::metamoto::services::SUTConnectorConnectRequest* connect);

  // .metamoto.services.SUTConnectorDisconnectRequest disconnect = 3;
  bool has_disconnect() const;
  void clear_disconnect();
  static const int kDisconnectFieldNumber = 3;
  private:
  const ::metamoto::services::SUTConnectorDisconnectRequest& _internal_disconnect() const;
  public:
  const ::metamoto::services::SUTConnectorDisconnectRequest& disconnect() const;
  ::metamoto::services::SUTConnectorDisconnectRequest* release_disconnect();
  ::metamoto::services::SUTConnectorDisconnectRequest* mutable_disconnect();
  void set_allocated_disconnect(::metamoto::services::SUTConnectorDisconnectRequest* disconnect);

  // .metamoto.services.ControllerInitializeReply controller_initialize = 20;
  bool has_controller_initialize() const;
  void clear_controller_initialize();
  static const int kControllerInitializeFieldNumber = 20;
  private:
  const ::metamoto::services::ControllerInitializeReply& _internal_controller_initialize() const;
  public:
  const ::metamoto::services::ControllerInitializeReply& controller_initialize() const;
  ::metamoto::services::ControllerInitializeReply* release_controller_initialize();
  ::metamoto::services::ControllerInitializeReply* mutable_controller_initialize();
  void set_allocated_controller_initialize(::metamoto::services::ControllerInitializeReply* controller_initialize);

  // .metamoto.services.ControllerUpdateReply controller_update = 21;
  bool has_controller_update() const;
  void clear_controller_update();
  static const int kControllerUpdateFieldNumber = 21;
  private:
  const ::metamoto::services::ControllerUpdateReply& _internal_controller_update() const;
  public:
  const ::metamoto::services::ControllerUpdateReply& controller_update() const;
  ::metamoto::services::ControllerUpdateReply* release_controller_update();
  ::metamoto::services::ControllerUpdateReply* mutable_controller_update();
  void set_allocated_controller_update(::metamoto::services::ControllerUpdateReply* controller_update);

  // .metamoto.services.ControllerCloseReply controller_close = 22;
  bool has_controller_close() const;
  void clear_controller_close();
  static const int kControllerCloseFieldNumber = 22;
  private:
  const ::metamoto::services::ControllerCloseReply& _internal_controller_close() const;
  public:
  const ::metamoto::services::ControllerCloseReply& controller_close() const;
  ::metamoto::services::ControllerCloseReply* release_controller_close();
  ::metamoto::services::ControllerCloseReply* mutable_controller_close();
  void set_allocated_controller_close(::metamoto::services::ControllerCloseReply* controller_close);

  // .metamoto.services.ControllerSetupReply controller_setup = 23;
  bool has_controller_setup() const;
  void clear_controller_setup();
  static const int kControllerSetupFieldNumber = 23;
  private:
  const ::metamoto::services::ControllerSetupReply& _internal_controller_setup() const;
  public:
  const ::metamoto::services::ControllerSetupReply& controller_setup() const;
  ::metamoto::services::ControllerSetupReply* release_controller_setup();
  ::metamoto::services::ControllerSetupReply* mutable_controller_setup();
  void set_allocated_controller_setup(::metamoto::services::ControllerSetupReply* controller_setup);

  // .metamoto.services.SensorInitializeReply sensor_initialize = 40;
  bool has_sensor_initialize() const;
  void clear_sensor_initialize();
  static const int kSensorInitializeFieldNumber = 40;
  private:
  const ::metamoto::services::SensorInitializeReply& _internal_sensor_initialize() const;
  public:
  const ::metamoto::services::SensorInitializeReply& sensor_initialize() const;
  ::metamoto::services::SensorInitializeReply* release_sensor_initialize();
  ::metamoto::services::SensorInitializeReply* mutable_sensor_initialize();
  void set_allocated_sensor_initialize(::metamoto::services::SensorInitializeReply* sensor_initialize);

  // .metamoto.services.SensorUpdateReply sensor_update = 41;
  bool has_sensor_update() const;
  void clear_sensor_update();
  static const int kSensorUpdateFieldNumber = 41;
  private:
  const ::metamoto::services::SensorUpdateReply& _internal_sensor_update() const;
  public:
  const ::metamoto::services::SensorUpdateReply& sensor_update() const;
  ::metamoto::services::SensorUpdateReply* release_sensor_update();
  ::metamoto::services::SensorUpdateReply* mutable_sensor_update();
  void set_allocated_sensor_update(::metamoto::services::SensorUpdateReply* sensor_update);

  // .metamoto.services.SensorCloseReply sensor_close = 42;
  bool has_sensor_close() const;
  void clear_sensor_close();
  static const int kSensorCloseFieldNumber = 42;
  private:
  const ::metamoto::services::SensorCloseReply& _internal_sensor_close() const;
  public:
  const ::metamoto::services::SensorCloseReply& sensor_close() const;
  ::metamoto::services::SensorCloseReply* release_sensor_close();
  ::metamoto::services::SensorCloseReply* mutable_sensor_close();
  void set_allocated_sensor_close(::metamoto::services::SensorCloseReply* sensor_close);

  // .metamoto.services.SensorSetupReply sensor_setup = 43;
  bool has_sensor_setup() const;
  void clear_sensor_setup();
  static const int kSensorSetupFieldNumber = 43;
  private:
  const ::metamoto::services::SensorSetupReply& _internal_sensor_setup() const;
  public:
  const ::metamoto::services::SensorSetupReply& sensor_setup() const;
  ::metamoto::services::SensorSetupReply* release_sensor_setup();
  ::metamoto::services::SensorSetupReply* mutable_sensor_setup();
  void set_allocated_sensor_setup(::metamoto::services::SensorSetupReply* sensor_setup);

  // .metamoto.services.DataBusPublishRequest data_bus_publish = 60;
  bool has_data_bus_publish() const;
  void clear_data_bus_publish();
  static const int kDataBusPublishFieldNumber = 60;
  private:
  const ::metamoto::services::DataBusPublishRequest& _internal_data_bus_publish() const;
  public:
  const ::metamoto::services::DataBusPublishRequest& data_bus_publish() const;
  ::metamoto::services::DataBusPublishRequest* release_data_bus_publish();
  ::metamoto::services::DataBusPublishRequest* mutable_data_bus_publish();
  void set_allocated_data_bus_publish(::metamoto::services::DataBusPublishRequest* data_bus_publish);

  // .metamoto.services.DataBusSubscribeRequest data_bus_subscribe = 61;
  bool has_data_bus_subscribe() const;
  void clear_data_bus_subscribe();
  static const int kDataBusSubscribeFieldNumber = 61;
  private:
  const ::metamoto::services::DataBusSubscribeRequest& _internal_data_bus_subscribe() const;
  public:
  const ::metamoto::services::DataBusSubscribeRequest& data_bus_subscribe() const;
  ::metamoto::services::DataBusSubscribeRequest* release_data_bus_subscribe();
  ::metamoto::services::DataBusSubscribeRequest* mutable_data_bus_subscribe();
  void set_allocated_data_bus_subscribe(::metamoto::services::DataBusSubscribeRequest* data_bus_subscribe);

  // .metamoto.services.DataBusWriteRequest data_bus_write = 62;
  bool has_data_bus_write() const;
  void clear_data_bus_write();
  static const int kDataBusWriteFieldNumber = 62;
  private:
  const ::metamoto::services::DataBusWriteRequest& _internal_data_bus_write() const;
  public:
  const ::metamoto::services::DataBusWriteRequest& data_bus_write() const;
  ::metamoto::services::DataBusWriteRequest* release_data_bus_write();
  ::metamoto::services::DataBusWriteRequest* mutable_data_bus_write();
  void set_allocated_data_bus_write(::metamoto::services::DataBusWriteRequest* data_bus_write);

  // .metamoto.services.DataBusReadRequest data_bus_read = 63;
  bool has_data_bus_read() const;
  void clear_data_bus_read();
  static const int kDataBusReadFieldNumber = 63;
  private:
  const ::metamoto::services::DataBusReadRequest& _internal_data_bus_read() const;
  public:
  const ::metamoto::services::DataBusReadRequest& data_bus_read() const;
  ::metamoto::services::DataBusReadRequest* release_data_bus_read();
  ::metamoto::services::DataBusReadRequest* mutable_data_bus_read();
  void set_allocated_data_bus_read(::metamoto::services::DataBusReadRequest* data_bus_read);

  // .metamoto.services.DataBusReadAllRequest data_bus_read_all = 64;
  bool has_data_bus_read_all() const;
  void clear_data_bus_read_all();
  static const int kDataBusReadAllFieldNumber = 64;
  private:
  const ::metamoto::services::DataBusReadAllRequest& _internal_data_bus_read_all() const;
  public:
  const ::metamoto::services::DataBusReadAllRequest& data_bus_read_all() const;
  ::metamoto::services::DataBusReadAllRequest* release_data_bus_read_all();
  ::metamoto::services::DataBusReadAllRequest* mutable_data_bus_read_all();
  void set_allocated_data_bus_read_all(::metamoto::services::DataBusReadAllRequest* data_bus_read_all);

  // .metamoto.services.DataBusReadLastRequest data_bus_read_last = 65;
  bool has_data_bus_read_last() const;
  void clear_data_bus_read_last();
  static const int kDataBusReadLastFieldNumber = 65;
  private:
  const ::metamoto::services::DataBusReadLastRequest& _internal_data_bus_read_last() const;
  public:
  const ::metamoto::services::DataBusReadLastRequest& data_bus_read_last() const;
  ::metamoto::services::DataBusReadLastRequest* release_data_bus_read_last();
  ::metamoto::services::DataBusReadLastRequest* mutable_data_bus_read_last();
  void set_allocated_data_bus_read_last(::metamoto::services::DataBusReadLastRequest* data_bus_read_last);

  // .metamoto.services.MapGetRoadNetworkRequest map_get_road_network = 80;
  bool has_map_get_road_network() const;
  void clear_map_get_road_network();
  static const int kMapGetRoadNetworkFieldNumber = 80;
  private:
  const ::metamoto::services::MapGetRoadNetworkRequest& _internal_map_get_road_network() const;
  public:
  const ::metamoto::services::MapGetRoadNetworkRequest& map_get_road_network() const;
  ::metamoto::services::MapGetRoadNetworkRequest* release_map_get_road_network();
  ::metamoto::services::MapGetRoadNetworkRequest* mutable_map_get_road_network();
  void set_allocated_map_get_road_network(::metamoto::services::MapGetRoadNetworkRequest* map_get_road_network);

  // .metamoto.services.MapToRoadPointRequest map_to_road_point = 81;
  bool has_map_to_road_point() const;
  void clear_map_to_road_point();
  static const int kMapToRoadPointFieldNumber = 81;
  private:
  const ::metamoto::services::MapToRoadPointRequest& _internal_map_to_road_point() const;
  public:
  const ::metamoto::services::MapToRoadPointRequest& map_to_road_point() const;
  ::metamoto::services::MapToRoadPointRequest* release_map_to_road_point();
  ::metamoto::services::MapToRoadPointRequest* mutable_map_to_road_point();
  void set_allocated_map_to_road_point(::metamoto::services::MapToRoadPointRequest* map_to_road_point);

  // .metamoto.services.MapToWorldPointRequest map_to_world_point = 82;
  bool has_map_to_world_point() const;
  void clear_map_to_world_point();
  static const int kMapToWorldPointFieldNumber = 82;
  private:
  const ::metamoto::services::MapToWorldPointRequest& _internal_map_to_world_point() const;
  public:
  const ::metamoto::services::MapToWorldPointRequest& map_to_world_point() const;
  ::metamoto::services::MapToWorldPointRequest* release_map_to_world_point();
  ::metamoto::services::MapToWorldPointRequest* mutable_map_to_world_point();
  void set_allocated_map_to_world_point(::metamoto::services::MapToWorldPointRequest* map_to_world_point);

  // .metamoto.services.MapGetPathRequest map_get_path = 83;
  bool has_map_get_path() const;
  void clear_map_get_path();
  static const int kMapGetPathFieldNumber = 83;
  private:
  const ::metamoto::services::MapGetPathRequest& _internal_map_get_path() const;
  public:
  const ::metamoto::services::MapGetPathRequest& map_get_path() const;
  ::metamoto::services::MapGetPathRequest* release_map_get_path();
  ::metamoto::services::MapGetPathRequest* mutable_map_get_path();
  void set_allocated_map_get_path(::metamoto::services::MapGetPathRequest* map_get_path);

  // .metamoto.services.MapGetHeadingRequest map_get_heading = 84;
  bool has_map_get_heading() const;
  void clear_map_get_heading();
  static const int kMapGetHeadingFieldNumber = 84;
  private:
  const ::metamoto::services::MapGetHeadingRequest& _internal_map_get_heading() const;
  public:
  const ::metamoto::services::MapGetHeadingRequest& map_get_heading() const;
  ::metamoto::services::MapGetHeadingRequest* release_map_get_heading();
  ::metamoto::services::MapGetHeadingRequest* mutable_map_get_heading();
  void set_allocated_map_get_heading(::metamoto::services::MapGetHeadingRequest* map_get_heading);

  // .metamoto.services.RayTracerSetPatternsRequest ray_tracer_set_patterns = 100;
  bool has_ray_tracer_set_patterns() const;
  void clear_ray_tracer_set_patterns();
  static const int kRayTracerSetPatternsFieldNumber = 100;
  private:
  const ::metamoto::services::RayTracerSetPatternsRequest& _internal_ray_tracer_set_patterns() const;
  public:
  const ::metamoto::services::RayTracerSetPatternsRequest& ray_tracer_set_patterns() const;
  ::metamoto::services::RayTracerSetPatternsRequest* release_ray_tracer_set_patterns();
  ::metamoto::services::RayTracerSetPatternsRequest* mutable_ray_tracer_set_patterns();
  void set_allocated_ray_tracer_set_patterns(::metamoto::services::RayTracerSetPatternsRequest* ray_tracer_set_patterns);

  // .metamoto.services.RayTracerTraceRequest ray_tracer_trace = 101;
  bool has_ray_tracer_trace() const;
  void clear_ray_tracer_trace();
  static const int kRayTracerTraceFieldNumber = 101;
  private:
  const ::metamoto::services::RayTracerTraceRequest& _internal_ray_tracer_trace() const;
  public:
  const ::metamoto::services::RayTracerTraceRequest& ray_tracer_trace() const;
  ::metamoto::services::RayTracerTraceRequest* release_ray_tracer_trace();
  ::metamoto::services::RayTracerTraceRequest* mutable_ray_tracer_trace();
  void set_allocated_ray_tracer_trace(::metamoto::services::RayTracerTraceRequest* ray_tracer_trace);

  // .metamoto.services.ReportingAddTimeSeriesValueRequest reporting_add_time_series_value = 120;
  bool has_reporting_add_time_series_value() const;
  void clear_reporting_add_time_series_value();
  static const int kReportingAddTimeSeriesValueFieldNumber = 120;
  private:
  const ::metamoto::services::ReportingAddTimeSeriesValueRequest& _internal_reporting_add_time_series_value() const;
  public:
  const ::metamoto::services::ReportingAddTimeSeriesValueRequest& reporting_add_time_series_value() const;
  ::metamoto::services::ReportingAddTimeSeriesValueRequest* release_reporting_add_time_series_value();
  ::metamoto::services::ReportingAddTimeSeriesValueRequest* mutable_reporting_add_time_series_value();
  void set_allocated_reporting_add_time_series_value(::metamoto::services::ReportingAddTimeSeriesValueRequest* reporting_add_time_series_value);

  // .metamoto.services.ReportingLogRequest reporting_log = 121;
  bool has_reporting_log() const;
  void clear_reporting_log();
  static const int kReportingLogFieldNumber = 121;
  private:
  const ::metamoto::services::ReportingLogRequest& _internal_reporting_log() const;
  public:
  const ::metamoto::services::ReportingLogRequest& reporting_log() const;
  ::metamoto::services::ReportingLogRequest* release_reporting_log();
  ::metamoto::services::ReportingLogRequest* mutable_reporting_log();
  void set_allocated_reporting_log(::metamoto::services::ReportingLogRequest* reporting_log);

  // .metamoto.services.ReportingReportEventRequest reporting_report_event = 122;
  bool has_reporting_report_event() const;
  void clear_reporting_report_event();
  static const int kReportingReportEventFieldNumber = 122;
  private:
  const ::metamoto::services::ReportingReportEventRequest& _internal_reporting_report_event() const;
  public:
  const ::metamoto::services::ReportingReportEventRequest& reporting_report_event() const;
  ::metamoto::services::ReportingReportEventRequest* release_reporting_report_event();
  ::metamoto::services::ReportingReportEventRequest* mutable_reporting_report_event();
  void set_allocated_reporting_report_event(::metamoto::services::ReportingReportEventRequest* reporting_report_event);

  // .metamoto.services.ReportingVisualizeRequest reporting_visualize = 123;
  bool has_reporting_visualize() const;
  void clear_reporting_visualize();
  static const int kReportingVisualizeFieldNumber = 123;
  private:
  const ::metamoto::services::ReportingVisualizeRequest& _internal_reporting_visualize() const;
  public:
  const ::metamoto::services::ReportingVisualizeRequest& reporting_visualize() const;
  ::metamoto::services::ReportingVisualizeRequest* release_reporting_visualize();
  ::metamoto::services::ReportingVisualizeRequest* mutable_reporting_visualize();
  void set_allocated_reporting_visualize(::metamoto::services::ReportingVisualizeRequest* reporting_visualize);

  // .metamoto.services.ScenarioUpdateRequest scenario_update = 140;
  bool has_scenario_update() const;
  void clear_scenario_update();
  static const int kScenarioUpdateFieldNumber = 140;
  private:
  const ::metamoto::services::ScenarioUpdateRequest& _internal_scenario_update() const;
  public:
  const ::metamoto::services::ScenarioUpdateRequest& scenario_update() const;
  ::metamoto::services::ScenarioUpdateRequest* release_scenario_update();
  ::metamoto::services::ScenarioUpdateRequest* mutable_scenario_update();
  void set_allocated_scenario_update(::metamoto::services::ScenarioUpdateRequest* scenario_update);

  // .metamoto.services.ScenarioGetVehicleWaypointsRequest scenario_get_vehicle_waypoints = 141;
  bool has_scenario_get_vehicle_waypoints() const;
  void clear_scenario_get_vehicle_waypoints();
  static const int kScenarioGetVehicleWaypointsFieldNumber = 141;
  private:
  const ::metamoto::services::ScenarioGetVehicleWaypointsRequest& _internal_scenario_get_vehicle_waypoints() const;
  public:
  const ::metamoto::services::ScenarioGetVehicleWaypointsRequest& scenario_get_vehicle_waypoints() const;
  ::metamoto::services::ScenarioGetVehicleWaypointsRequest* release_scenario_get_vehicle_waypoints();
  ::metamoto::services::ScenarioGetVehicleWaypointsRequest* mutable_scenario_get_vehicle_waypoints();
  void set_allocated_scenario_get_vehicle_waypoints(::metamoto::services::ScenarioGetVehicleWaypointsRequest* scenario_get_vehicle_waypoints);

  // .metamoto.services.ScenarioSetVehicleWaypointsRequest scenario_set_vehicle_waypoints = 142;
  bool has_scenario_set_vehicle_waypoints() const;
  void clear_scenario_set_vehicle_waypoints();
  static const int kScenarioSetVehicleWaypointsFieldNumber = 142;
  private:
  const ::metamoto::services::ScenarioSetVehicleWaypointsRequest& _internal_scenario_set_vehicle_waypoints() const;
  public:
  const ::metamoto::services::ScenarioSetVehicleWaypointsRequest& scenario_set_vehicle_waypoints() const;
  ::metamoto::services::ScenarioSetVehicleWaypointsRequest* release_scenario_set_vehicle_waypoints();
  ::metamoto::services::ScenarioSetVehicleWaypointsRequest* mutable_scenario_set_vehicle_waypoints();
  void set_allocated_scenario_set_vehicle_waypoints(::metamoto::services::ScenarioSetVehicleWaypointsRequest* scenario_set_vehicle_waypoints);

  // .metamoto.services.ScenarioSetDriverModelRequest scenario_set_driver_model = 143;
  bool has_scenario_set_driver_model() const;
  void clear_scenario_set_driver_model();
  static const int kScenarioSetDriverModelFieldNumber = 143;
  private:
  const ::metamoto::services::ScenarioSetDriverModelRequest& _internal_scenario_set_driver_model() const;
  public:
  const ::metamoto::services::ScenarioSetDriverModelRequest& scenario_set_driver_model() const;
  ::metamoto::services::ScenarioSetDriverModelRequest* release_scenario_set_driver_model();
  ::metamoto::services::ScenarioSetDriverModelRequest* mutable_scenario_set_driver_model();
  void set_allocated_scenario_set_driver_model(::metamoto::services::ScenarioSetDriverModelRequest* scenario_set_driver_model);

  // .metamoto.services.ScenarioSetupRequest scenario_setup = 144;
  bool has_scenario_setup() const;
  void clear_scenario_setup();
  static const int kScenarioSetupFieldNumber = 144;
  private:
  const ::metamoto::services::ScenarioSetupRequest& _internal_scenario_setup() const;
  public:
  const ::metamoto::services::ScenarioSetupRequest& scenario_setup() const;
  ::metamoto::services::ScenarioSetupRequest* release_scenario_setup();
  ::metamoto::services::ScenarioSetupRequest* mutable_scenario_setup();
  void set_allocated_scenario_setup(::metamoto::services::ScenarioSetupRequest* scenario_setup);

  // .metamoto.services.SystemGetResultsSizeRequest system_get_results_size = 160;
  bool has_system_get_results_size() const;
  void clear_system_get_results_size();
  static const int kSystemGetResultsSizeFieldNumber = 160;
  private:
  const ::metamoto::services::SystemGetResultsSizeRequest& _internal_system_get_results_size() const;
  public:
  const ::metamoto::services::SystemGetResultsSizeRequest& system_get_results_size() const;
  ::metamoto::services::SystemGetResultsSizeRequest* release_system_get_results_size();
  ::metamoto::services::SystemGetResultsSizeRequest* mutable_system_get_results_size();
  void set_allocated_system_get_results_size(::metamoto::services::SystemGetResultsSizeRequest* system_get_results_size);

  void clear_data_oneof();
  DataOneofCase data_oneof_case() const;
  // @@protoc_insertion_point(class_scope:metamoto.services.SUTConnectorRequest)
 private:
  void set_has_status();
  void set_has_connect();
  void set_has_disconnect();
  void set_has_controller_initialize();
  void set_has_controller_update();
  void set_has_controller_close();
  void set_has_controller_setup();
  void set_has_sensor_initialize();
  void set_has_sensor_update();
  void set_has_sensor_close();
  void set_has_sensor_setup();
  void set_has_data_bus_publish();
  void set_has_data_bus_subscribe();
  void set_has_data_bus_write();
  void set_has_data_bus_read();
  void set_has_data_bus_read_all();
  void set_has_data_bus_read_last();
  void set_has_map_get_road_network();
  void set_has_map_to_road_point();
  void set_has_map_to_world_point();
  void set_has_map_get_path();
  void set_has_map_get_heading();
  void set_has_ray_tracer_set_patterns();
  void set_has_ray_tracer_trace();
  void set_has_reporting_add_time_series_value();
  void set_has_reporting_log();
  void set_has_reporting_report_event();
  void set_has_reporting_visualize();
  void set_has_scenario_update();
  void set_has_scenario_get_vehicle_waypoints();
  void set_has_scenario_set_vehicle_waypoints();
  void set_has_scenario_set_driver_model();
  void set_has_scenario_setup();
  void set_has_system_get_results_size();

  inline bool has_data_oneof() const;
  inline void clear_has_data_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DataOneofUnion {
    DataOneofUnion() {}
    ::google::rpc::Status* status_;
    ::metamoto::services::SUTConnectorConnectRequest* connect_;
    ::metamoto::services::SUTConnectorDisconnectRequest* disconnect_;
    ::metamoto::services::ControllerInitializeReply* controller_initialize_;
    ::metamoto::services::ControllerUpdateReply* controller_update_;
    ::metamoto::services::ControllerCloseReply* controller_close_;
    ::metamoto::services::ControllerSetupReply* controller_setup_;
    ::metamoto::services::SensorInitializeReply* sensor_initialize_;
    ::metamoto::services::SensorUpdateReply* sensor_update_;
    ::metamoto::services::SensorCloseReply* sensor_close_;
    ::metamoto::services::SensorSetupReply* sensor_setup_;
    ::metamoto::services::DataBusPublishRequest* data_bus_publish_;
    ::metamoto::services::DataBusSubscribeRequest* data_bus_subscribe_;
    ::metamoto::services::DataBusWriteRequest* data_bus_write_;
    ::metamoto::services::DataBusReadRequest* data_bus_read_;
    ::metamoto::services::DataBusReadAllRequest* data_bus_read_all_;
    ::metamoto::services::DataBusReadLastRequest* data_bus_read_last_;
    ::metamoto::services::MapGetRoadNetworkRequest* map_get_road_network_;
    ::metamoto::services::MapToRoadPointRequest* map_to_road_point_;
    ::metamoto::services::MapToWorldPointRequest* map_to_world_point_;
    ::metamoto::services::MapGetPathRequest* map_get_path_;
    ::metamoto::services::MapGetHeadingRequest* map_get_heading_;
    ::metamoto::services::RayTracerSetPatternsRequest* ray_tracer_set_patterns_;
    ::metamoto::services::RayTracerTraceRequest* ray_tracer_trace_;
    ::metamoto::services::ReportingAddTimeSeriesValueRequest* reporting_add_time_series_value_;
    ::metamoto::services::ReportingLogRequest* reporting_log_;
    ::metamoto::services::ReportingReportEventRequest* reporting_report_event_;
    ::metamoto::services::ReportingVisualizeRequest* reporting_visualize_;
    ::metamoto::services::ScenarioUpdateRequest* scenario_update_;
    ::metamoto::services::ScenarioGetVehicleWaypointsRequest* scenario_get_vehicle_waypoints_;
    ::metamoto::services::ScenarioSetVehicleWaypointsRequest* scenario_set_vehicle_waypoints_;
    ::metamoto::services::ScenarioSetDriverModelRequest* scenario_set_driver_model_;
    ::metamoto::services::ScenarioSetupRequest* scenario_setup_;
    ::metamoto::services::SystemGetResultsSizeRequest* system_get_results_size_;
  } data_oneof_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SUTConnectorReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.SUTConnectorReply) */ {
 public:
  SUTConnectorReply();
  virtual ~SUTConnectorReply();

  SUTConnectorReply(const SUTConnectorReply& from);

  inline SUTConnectorReply& operator=(const SUTConnectorReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SUTConnectorReply(SUTConnectorReply&& from) noexcept
    : SUTConnectorReply() {
    *this = ::std::move(from);
  }

  inline SUTConnectorReply& operator=(SUTConnectorReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SUTConnectorReply& default_instance();

  enum DataOneofCase {
    kStatus = 1,
    kConnect = 2,
    kDisconnect = 3,
    kControllerInitialize = 20,
    kControllerUpdate = 21,
    kControllerClose = 22,
    kControllerSetup = 23,
    kSensorInitialize = 40,
    kSensorUpdate = 41,
    kSensorClose = 42,
    kSensorSetup = 43,
    kDataBusPublish = 60,
    kDataBusSubscribe = 61,
    kDataBusWrite = 62,
    kDataBusRead = 63,
    kDataBusReadAll = 64,
    kDataBusReadLast = 65,
    kMapGetRoadNetwork = 80,
    kMapToRoadPoint = 81,
    kMapToWorldPoint = 82,
    kMapGetPath = 83,
    kMapGetHeading = 84,
    kRayTracerSetPatterns = 100,
    kRayTracerTrace = 101,
    kReportingAddTimeSeriesValue = 120,
    kReportingLog = 121,
    kReportingReportEvent = 122,
    kReportingVisualize = 123,
    kScenarioUpdate = 140,
    kScenarioGetVehicleWaypoints = 141,
    kScenarioSetVehicleWaypoints = 142,
    kScenarioSetDriverModel = 143,
    kScenarioSetup = 144,
    kSystemGetResultsSize = 160,
    DATA_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUTConnectorReply* internal_default_instance() {
    return reinterpret_cast<const SUTConnectorReply*>(
               &_SUTConnectorReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SUTConnectorReply* other);
  friend void swap(SUTConnectorReply& a, SUTConnectorReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SUTConnectorReply* New() const final {
    return CreateMaybeMessage<SUTConnectorReply>(NULL);
  }

  SUTConnectorReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SUTConnectorReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SUTConnectorReply& from);
  void MergeFrom(const SUTConnectorReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUTConnectorReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.rpc.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  private:
  const ::google::rpc::Status& _internal_status() const;
  public:
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);

  // .metamoto.services.SUTConnectorConnectReply connect = 2;
  bool has_connect() const;
  void clear_connect();
  static const int kConnectFieldNumber = 2;
  private:
  const ::metamoto::services::SUTConnectorConnectReply& _internal_connect() const;
  public:
  const ::metamoto::services::SUTConnectorConnectReply& connect() const;
  ::metamoto::services::SUTConnectorConnectReply* release_connect();
  ::metamoto::services::SUTConnectorConnectReply* mutable_connect();
  void set_allocated_connect(::metamoto::services::SUTConnectorConnectReply* connect);

  // .metamoto.services.SUTConnectorDisconnectReply disconnect = 3;
  bool has_disconnect() const;
  void clear_disconnect();
  static const int kDisconnectFieldNumber = 3;
  private:
  const ::metamoto::services::SUTConnectorDisconnectReply& _internal_disconnect() const;
  public:
  const ::metamoto::services::SUTConnectorDisconnectReply& disconnect() const;
  ::metamoto::services::SUTConnectorDisconnectReply* release_disconnect();
  ::metamoto::services::SUTConnectorDisconnectReply* mutable_disconnect();
  void set_allocated_disconnect(::metamoto::services::SUTConnectorDisconnectReply* disconnect);

  // .metamoto.services.ControllerInitializeRequest controller_initialize = 20;
  bool has_controller_initialize() const;
  void clear_controller_initialize();
  static const int kControllerInitializeFieldNumber = 20;
  private:
  const ::metamoto::services::ControllerInitializeRequest& _internal_controller_initialize() const;
  public:
  const ::metamoto::services::ControllerInitializeRequest& controller_initialize() const;
  ::metamoto::services::ControllerInitializeRequest* release_controller_initialize();
  ::metamoto::services::ControllerInitializeRequest* mutable_controller_initialize();
  void set_allocated_controller_initialize(::metamoto::services::ControllerInitializeRequest* controller_initialize);

  // .metamoto.services.ControllerUpdateRequest controller_update = 21;
  bool has_controller_update() const;
  void clear_controller_update();
  static const int kControllerUpdateFieldNumber = 21;
  private:
  const ::metamoto::services::ControllerUpdateRequest& _internal_controller_update() const;
  public:
  const ::metamoto::services::ControllerUpdateRequest& controller_update() const;
  ::metamoto::services::ControllerUpdateRequest* release_controller_update();
  ::metamoto::services::ControllerUpdateRequest* mutable_controller_update();
  void set_allocated_controller_update(::metamoto::services::ControllerUpdateRequest* controller_update);

  // .metamoto.services.ControllerCloseRequest controller_close = 22;
  bool has_controller_close() const;
  void clear_controller_close();
  static const int kControllerCloseFieldNumber = 22;
  private:
  const ::metamoto::services::ControllerCloseRequest& _internal_controller_close() const;
  public:
  const ::metamoto::services::ControllerCloseRequest& controller_close() const;
  ::metamoto::services::ControllerCloseRequest* release_controller_close();
  ::metamoto::services::ControllerCloseRequest* mutable_controller_close();
  void set_allocated_controller_close(::metamoto::services::ControllerCloseRequest* controller_close);

  // .metamoto.services.ControllerSetupRequest controller_setup = 23;
  bool has_controller_setup() const;
  void clear_controller_setup();
  static const int kControllerSetupFieldNumber = 23;
  private:
  const ::metamoto::services::ControllerSetupRequest& _internal_controller_setup() const;
  public:
  const ::metamoto::services::ControllerSetupRequest& controller_setup() const;
  ::metamoto::services::ControllerSetupRequest* release_controller_setup();
  ::metamoto::services::ControllerSetupRequest* mutable_controller_setup();
  void set_allocated_controller_setup(::metamoto::services::ControllerSetupRequest* controller_setup);

  // .metamoto.services.SensorInitializeRequest sensor_initialize = 40;
  bool has_sensor_initialize() const;
  void clear_sensor_initialize();
  static const int kSensorInitializeFieldNumber = 40;
  private:
  const ::metamoto::services::SensorInitializeRequest& _internal_sensor_initialize() const;
  public:
  const ::metamoto::services::SensorInitializeRequest& sensor_initialize() const;
  ::metamoto::services::SensorInitializeRequest* release_sensor_initialize();
  ::metamoto::services::SensorInitializeRequest* mutable_sensor_initialize();
  void set_allocated_sensor_initialize(::metamoto::services::SensorInitializeRequest* sensor_initialize);

  // .metamoto.services.SensorUpdateRequest sensor_update = 41;
  bool has_sensor_update() const;
  void clear_sensor_update();
  static const int kSensorUpdateFieldNumber = 41;
  private:
  const ::metamoto::services::SensorUpdateRequest& _internal_sensor_update() const;
  public:
  const ::metamoto::services::SensorUpdateRequest& sensor_update() const;
  ::metamoto::services::SensorUpdateRequest* release_sensor_update();
  ::metamoto::services::SensorUpdateRequest* mutable_sensor_update();
  void set_allocated_sensor_update(::metamoto::services::SensorUpdateRequest* sensor_update);

  // .metamoto.services.SensorCloseRequest sensor_close = 42;
  bool has_sensor_close() const;
  void clear_sensor_close();
  static const int kSensorCloseFieldNumber = 42;
  private:
  const ::metamoto::services::SensorCloseRequest& _internal_sensor_close() const;
  public:
  const ::metamoto::services::SensorCloseRequest& sensor_close() const;
  ::metamoto::services::SensorCloseRequest* release_sensor_close();
  ::metamoto::services::SensorCloseRequest* mutable_sensor_close();
  void set_allocated_sensor_close(::metamoto::services::SensorCloseRequest* sensor_close);

  // .metamoto.services.SensorSetupRequest sensor_setup = 43;
  bool has_sensor_setup() const;
  void clear_sensor_setup();
  static const int kSensorSetupFieldNumber = 43;
  private:
  const ::metamoto::services::SensorSetupRequest& _internal_sensor_setup() const;
  public:
  const ::metamoto::services::SensorSetupRequest& sensor_setup() const;
  ::metamoto::services::SensorSetupRequest* release_sensor_setup();
  ::metamoto::services::SensorSetupRequest* mutable_sensor_setup();
  void set_allocated_sensor_setup(::metamoto::services::SensorSetupRequest* sensor_setup);

  // .metamoto.services.DataBusPublishReply data_bus_publish = 60;
  bool has_data_bus_publish() const;
  void clear_data_bus_publish();
  static const int kDataBusPublishFieldNumber = 60;
  private:
  const ::metamoto::services::DataBusPublishReply& _internal_data_bus_publish() const;
  public:
  const ::metamoto::services::DataBusPublishReply& data_bus_publish() const;
  ::metamoto::services::DataBusPublishReply* release_data_bus_publish();
  ::metamoto::services::DataBusPublishReply* mutable_data_bus_publish();
  void set_allocated_data_bus_publish(::metamoto::services::DataBusPublishReply* data_bus_publish);

  // .metamoto.services.DataBusSubscribeReply data_bus_subscribe = 61;
  bool has_data_bus_subscribe() const;
  void clear_data_bus_subscribe();
  static const int kDataBusSubscribeFieldNumber = 61;
  private:
  const ::metamoto::services::DataBusSubscribeReply& _internal_data_bus_subscribe() const;
  public:
  const ::metamoto::services::DataBusSubscribeReply& data_bus_subscribe() const;
  ::metamoto::services::DataBusSubscribeReply* release_data_bus_subscribe();
  ::metamoto::services::DataBusSubscribeReply* mutable_data_bus_subscribe();
  void set_allocated_data_bus_subscribe(::metamoto::services::DataBusSubscribeReply* data_bus_subscribe);

  // .metamoto.services.DataBusWriteReply data_bus_write = 62;
  bool has_data_bus_write() const;
  void clear_data_bus_write();
  static const int kDataBusWriteFieldNumber = 62;
  private:
  const ::metamoto::services::DataBusWriteReply& _internal_data_bus_write() const;
  public:
  const ::metamoto::services::DataBusWriteReply& data_bus_write() const;
  ::metamoto::services::DataBusWriteReply* release_data_bus_write();
  ::metamoto::services::DataBusWriteReply* mutable_data_bus_write();
  void set_allocated_data_bus_write(::metamoto::services::DataBusWriteReply* data_bus_write);

  // .metamoto.services.DataBusReadReply data_bus_read = 63;
  bool has_data_bus_read() const;
  void clear_data_bus_read();
  static const int kDataBusReadFieldNumber = 63;
  private:
  const ::metamoto::services::DataBusReadReply& _internal_data_bus_read() const;
  public:
  const ::metamoto::services::DataBusReadReply& data_bus_read() const;
  ::metamoto::services::DataBusReadReply* release_data_bus_read();
  ::metamoto::services::DataBusReadReply* mutable_data_bus_read();
  void set_allocated_data_bus_read(::metamoto::services::DataBusReadReply* data_bus_read);

  // .metamoto.services.DataBusReadAllReply data_bus_read_all = 64;
  bool has_data_bus_read_all() const;
  void clear_data_bus_read_all();
  static const int kDataBusReadAllFieldNumber = 64;
  private:
  const ::metamoto::services::DataBusReadAllReply& _internal_data_bus_read_all() const;
  public:
  const ::metamoto::services::DataBusReadAllReply& data_bus_read_all() const;
  ::metamoto::services::DataBusReadAllReply* release_data_bus_read_all();
  ::metamoto::services::DataBusReadAllReply* mutable_data_bus_read_all();
  void set_allocated_data_bus_read_all(::metamoto::services::DataBusReadAllReply* data_bus_read_all);

  // .metamoto.services.DataBusReadLastReply data_bus_read_last = 65;
  bool has_data_bus_read_last() const;
  void clear_data_bus_read_last();
  static const int kDataBusReadLastFieldNumber = 65;
  private:
  const ::metamoto::services::DataBusReadLastReply& _internal_data_bus_read_last() const;
  public:
  const ::metamoto::services::DataBusReadLastReply& data_bus_read_last() const;
  ::metamoto::services::DataBusReadLastReply* release_data_bus_read_last();
  ::metamoto::services::DataBusReadLastReply* mutable_data_bus_read_last();
  void set_allocated_data_bus_read_last(::metamoto::services::DataBusReadLastReply* data_bus_read_last);

  // .metamoto.services.MapGetRoadNetworkReply map_get_road_network = 80;
  bool has_map_get_road_network() const;
  void clear_map_get_road_network();
  static const int kMapGetRoadNetworkFieldNumber = 80;
  private:
  const ::metamoto::services::MapGetRoadNetworkReply& _internal_map_get_road_network() const;
  public:
  const ::metamoto::services::MapGetRoadNetworkReply& map_get_road_network() const;
  ::metamoto::services::MapGetRoadNetworkReply* release_map_get_road_network();
  ::metamoto::services::MapGetRoadNetworkReply* mutable_map_get_road_network();
  void set_allocated_map_get_road_network(::metamoto::services::MapGetRoadNetworkReply* map_get_road_network);

  // .metamoto.services.MapToRoadPointReply map_to_road_point = 81;
  bool has_map_to_road_point() const;
  void clear_map_to_road_point();
  static const int kMapToRoadPointFieldNumber = 81;
  private:
  const ::metamoto::services::MapToRoadPointReply& _internal_map_to_road_point() const;
  public:
  const ::metamoto::services::MapToRoadPointReply& map_to_road_point() const;
  ::metamoto::services::MapToRoadPointReply* release_map_to_road_point();
  ::metamoto::services::MapToRoadPointReply* mutable_map_to_road_point();
  void set_allocated_map_to_road_point(::metamoto::services::MapToRoadPointReply* map_to_road_point);

  // .metamoto.services.MapToWorldPointReply map_to_world_point = 82;
  bool has_map_to_world_point() const;
  void clear_map_to_world_point();
  static const int kMapToWorldPointFieldNumber = 82;
  private:
  const ::metamoto::services::MapToWorldPointReply& _internal_map_to_world_point() const;
  public:
  const ::metamoto::services::MapToWorldPointReply& map_to_world_point() const;
  ::metamoto::services::MapToWorldPointReply* release_map_to_world_point();
  ::metamoto::services::MapToWorldPointReply* mutable_map_to_world_point();
  void set_allocated_map_to_world_point(::metamoto::services::MapToWorldPointReply* map_to_world_point);

  // .metamoto.services.MapGetPathReply map_get_path = 83;
  bool has_map_get_path() const;
  void clear_map_get_path();
  static const int kMapGetPathFieldNumber = 83;
  private:
  const ::metamoto::services::MapGetPathReply& _internal_map_get_path() const;
  public:
  const ::metamoto::services::MapGetPathReply& map_get_path() const;
  ::metamoto::services::MapGetPathReply* release_map_get_path();
  ::metamoto::services::MapGetPathReply* mutable_map_get_path();
  void set_allocated_map_get_path(::metamoto::services::MapGetPathReply* map_get_path);

  // .metamoto.services.MapGetHeadingReply map_get_heading = 84;
  bool has_map_get_heading() const;
  void clear_map_get_heading();
  static const int kMapGetHeadingFieldNumber = 84;
  private:
  const ::metamoto::services::MapGetHeadingReply& _internal_map_get_heading() const;
  public:
  const ::metamoto::services::MapGetHeadingReply& map_get_heading() const;
  ::metamoto::services::MapGetHeadingReply* release_map_get_heading();
  ::metamoto::services::MapGetHeadingReply* mutable_map_get_heading();
  void set_allocated_map_get_heading(::metamoto::services::MapGetHeadingReply* map_get_heading);

  // .metamoto.services.RayTracerSetPatternsReply ray_tracer_set_patterns = 100;
  bool has_ray_tracer_set_patterns() const;
  void clear_ray_tracer_set_patterns();
  static const int kRayTracerSetPatternsFieldNumber = 100;
  private:
  const ::metamoto::services::RayTracerSetPatternsReply& _internal_ray_tracer_set_patterns() const;
  public:
  const ::metamoto::services::RayTracerSetPatternsReply& ray_tracer_set_patterns() const;
  ::metamoto::services::RayTracerSetPatternsReply* release_ray_tracer_set_patterns();
  ::metamoto::services::RayTracerSetPatternsReply* mutable_ray_tracer_set_patterns();
  void set_allocated_ray_tracer_set_patterns(::metamoto::services::RayTracerSetPatternsReply* ray_tracer_set_patterns);

  // .metamoto.services.RayTracerTraceReply ray_tracer_trace = 101;
  bool has_ray_tracer_trace() const;
  void clear_ray_tracer_trace();
  static const int kRayTracerTraceFieldNumber = 101;
  private:
  const ::metamoto::services::RayTracerTraceReply& _internal_ray_tracer_trace() const;
  public:
  const ::metamoto::services::RayTracerTraceReply& ray_tracer_trace() const;
  ::metamoto::services::RayTracerTraceReply* release_ray_tracer_trace();
  ::metamoto::services::RayTracerTraceReply* mutable_ray_tracer_trace();
  void set_allocated_ray_tracer_trace(::metamoto::services::RayTracerTraceReply* ray_tracer_trace);

  // .metamoto.services.ReportingAddTimeSeriesValueReply reporting_add_time_series_value = 120;
  bool has_reporting_add_time_series_value() const;
  void clear_reporting_add_time_series_value();
  static const int kReportingAddTimeSeriesValueFieldNumber = 120;
  private:
  const ::metamoto::services::ReportingAddTimeSeriesValueReply& _internal_reporting_add_time_series_value() const;
  public:
  const ::metamoto::services::ReportingAddTimeSeriesValueReply& reporting_add_time_series_value() const;
  ::metamoto::services::ReportingAddTimeSeriesValueReply* release_reporting_add_time_series_value();
  ::metamoto::services::ReportingAddTimeSeriesValueReply* mutable_reporting_add_time_series_value();
  void set_allocated_reporting_add_time_series_value(::metamoto::services::ReportingAddTimeSeriesValueReply* reporting_add_time_series_value);

  // .metamoto.services.ReportingLogReply reporting_log = 121;
  bool has_reporting_log() const;
  void clear_reporting_log();
  static const int kReportingLogFieldNumber = 121;
  private:
  const ::metamoto::services::ReportingLogReply& _internal_reporting_log() const;
  public:
  const ::metamoto::services::ReportingLogReply& reporting_log() const;
  ::metamoto::services::ReportingLogReply* release_reporting_log();
  ::metamoto::services::ReportingLogReply* mutable_reporting_log();
  void set_allocated_reporting_log(::metamoto::services::ReportingLogReply* reporting_log);

  // .metamoto.services.ReportingReportEventReply reporting_report_event = 122;
  bool has_reporting_report_event() const;
  void clear_reporting_report_event();
  static const int kReportingReportEventFieldNumber = 122;
  private:
  const ::metamoto::services::ReportingReportEventReply& _internal_reporting_report_event() const;
  public:
  const ::metamoto::services::ReportingReportEventReply& reporting_report_event() const;
  ::metamoto::services::ReportingReportEventReply* release_reporting_report_event();
  ::metamoto::services::ReportingReportEventReply* mutable_reporting_report_event();
  void set_allocated_reporting_report_event(::metamoto::services::ReportingReportEventReply* reporting_report_event);

  // .metamoto.services.ReportingVisualizeReply reporting_visualize = 123;
  bool has_reporting_visualize() const;
  void clear_reporting_visualize();
  static const int kReportingVisualizeFieldNumber = 123;
  private:
  const ::metamoto::services::ReportingVisualizeReply& _internal_reporting_visualize() const;
  public:
  const ::metamoto::services::ReportingVisualizeReply& reporting_visualize() const;
  ::metamoto::services::ReportingVisualizeReply* release_reporting_visualize();
  ::metamoto::services::ReportingVisualizeReply* mutable_reporting_visualize();
  void set_allocated_reporting_visualize(::metamoto::services::ReportingVisualizeReply* reporting_visualize);

  // .metamoto.services.ScenarioUpdateReply scenario_update = 140;
  bool has_scenario_update() const;
  void clear_scenario_update();
  static const int kScenarioUpdateFieldNumber = 140;
  private:
  const ::metamoto::services::ScenarioUpdateReply& _internal_scenario_update() const;
  public:
  const ::metamoto::services::ScenarioUpdateReply& scenario_update() const;
  ::metamoto::services::ScenarioUpdateReply* release_scenario_update();
  ::metamoto::services::ScenarioUpdateReply* mutable_scenario_update();
  void set_allocated_scenario_update(::metamoto::services::ScenarioUpdateReply* scenario_update);

  // .metamoto.services.ScenarioGetVehicleWaypointsReply scenario_get_vehicle_waypoints = 141;
  bool has_scenario_get_vehicle_waypoints() const;
  void clear_scenario_get_vehicle_waypoints();
  static const int kScenarioGetVehicleWaypointsFieldNumber = 141;
  private:
  const ::metamoto::services::ScenarioGetVehicleWaypointsReply& _internal_scenario_get_vehicle_waypoints() const;
  public:
  const ::metamoto::services::ScenarioGetVehicleWaypointsReply& scenario_get_vehicle_waypoints() const;
  ::metamoto::services::ScenarioGetVehicleWaypointsReply* release_scenario_get_vehicle_waypoints();
  ::metamoto::services::ScenarioGetVehicleWaypointsReply* mutable_scenario_get_vehicle_waypoints();
  void set_allocated_scenario_get_vehicle_waypoints(::metamoto::services::ScenarioGetVehicleWaypointsReply* scenario_get_vehicle_waypoints);

  // .metamoto.services.ScenarioSetVehicleWaypointsReply scenario_set_vehicle_waypoints = 142;
  bool has_scenario_set_vehicle_waypoints() const;
  void clear_scenario_set_vehicle_waypoints();
  static const int kScenarioSetVehicleWaypointsFieldNumber = 142;
  private:
  const ::metamoto::services::ScenarioSetVehicleWaypointsReply& _internal_scenario_set_vehicle_waypoints() const;
  public:
  const ::metamoto::services::ScenarioSetVehicleWaypointsReply& scenario_set_vehicle_waypoints() const;
  ::metamoto::services::ScenarioSetVehicleWaypointsReply* release_scenario_set_vehicle_waypoints();
  ::metamoto::services::ScenarioSetVehicleWaypointsReply* mutable_scenario_set_vehicle_waypoints();
  void set_allocated_scenario_set_vehicle_waypoints(::metamoto::services::ScenarioSetVehicleWaypointsReply* scenario_set_vehicle_waypoints);

  // .metamoto.services.ScenarioSetDriverModelReply scenario_set_driver_model = 143;
  bool has_scenario_set_driver_model() const;
  void clear_scenario_set_driver_model();
  static const int kScenarioSetDriverModelFieldNumber = 143;
  private:
  const ::metamoto::services::ScenarioSetDriverModelReply& _internal_scenario_set_driver_model() const;
  public:
  const ::metamoto::services::ScenarioSetDriverModelReply& scenario_set_driver_model() const;
  ::metamoto::services::ScenarioSetDriverModelReply* release_scenario_set_driver_model();
  ::metamoto::services::ScenarioSetDriverModelReply* mutable_scenario_set_driver_model();
  void set_allocated_scenario_set_driver_model(::metamoto::services::ScenarioSetDriverModelReply* scenario_set_driver_model);

  // .metamoto.services.ScenarioSetupReply scenario_setup = 144;
  bool has_scenario_setup() const;
  void clear_scenario_setup();
  static const int kScenarioSetupFieldNumber = 144;
  private:
  const ::metamoto::services::ScenarioSetupReply& _internal_scenario_setup() const;
  public:
  const ::metamoto::services::ScenarioSetupReply& scenario_setup() const;
  ::metamoto::services::ScenarioSetupReply* release_scenario_setup();
  ::metamoto::services::ScenarioSetupReply* mutable_scenario_setup();
  void set_allocated_scenario_setup(::metamoto::services::ScenarioSetupReply* scenario_setup);

  // .metamoto.services.SystemGetResultsSizeReply system_get_results_size = 160;
  bool has_system_get_results_size() const;
  void clear_system_get_results_size();
  static const int kSystemGetResultsSizeFieldNumber = 160;
  private:
  const ::metamoto::services::SystemGetResultsSizeReply& _internal_system_get_results_size() const;
  public:
  const ::metamoto::services::SystemGetResultsSizeReply& system_get_results_size() const;
  ::metamoto::services::SystemGetResultsSizeReply* release_system_get_results_size();
  ::metamoto::services::SystemGetResultsSizeReply* mutable_system_get_results_size();
  void set_allocated_system_get_results_size(::metamoto::services::SystemGetResultsSizeReply* system_get_results_size);

  void clear_data_oneof();
  DataOneofCase data_oneof_case() const;
  // @@protoc_insertion_point(class_scope:metamoto.services.SUTConnectorReply)
 private:
  void set_has_status();
  void set_has_connect();
  void set_has_disconnect();
  void set_has_controller_initialize();
  void set_has_controller_update();
  void set_has_controller_close();
  void set_has_controller_setup();
  void set_has_sensor_initialize();
  void set_has_sensor_update();
  void set_has_sensor_close();
  void set_has_sensor_setup();
  void set_has_data_bus_publish();
  void set_has_data_bus_subscribe();
  void set_has_data_bus_write();
  void set_has_data_bus_read();
  void set_has_data_bus_read_all();
  void set_has_data_bus_read_last();
  void set_has_map_get_road_network();
  void set_has_map_to_road_point();
  void set_has_map_to_world_point();
  void set_has_map_get_path();
  void set_has_map_get_heading();
  void set_has_ray_tracer_set_patterns();
  void set_has_ray_tracer_trace();
  void set_has_reporting_add_time_series_value();
  void set_has_reporting_log();
  void set_has_reporting_report_event();
  void set_has_reporting_visualize();
  void set_has_scenario_update();
  void set_has_scenario_get_vehicle_waypoints();
  void set_has_scenario_set_vehicle_waypoints();
  void set_has_scenario_set_driver_model();
  void set_has_scenario_setup();
  void set_has_system_get_results_size();

  inline bool has_data_oneof() const;
  inline void clear_has_data_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DataOneofUnion {
    DataOneofUnion() {}
    ::google::rpc::Status* status_;
    ::metamoto::services::SUTConnectorConnectReply* connect_;
    ::metamoto::services::SUTConnectorDisconnectReply* disconnect_;
    ::metamoto::services::ControllerInitializeRequest* controller_initialize_;
    ::metamoto::services::ControllerUpdateRequest* controller_update_;
    ::metamoto::services::ControllerCloseRequest* controller_close_;
    ::metamoto::services::ControllerSetupRequest* controller_setup_;
    ::metamoto::services::SensorInitializeRequest* sensor_initialize_;
    ::metamoto::services::SensorUpdateRequest* sensor_update_;
    ::metamoto::services::SensorCloseRequest* sensor_close_;
    ::metamoto::services::SensorSetupRequest* sensor_setup_;
    ::metamoto::services::DataBusPublishReply* data_bus_publish_;
    ::metamoto::services::DataBusSubscribeReply* data_bus_subscribe_;
    ::metamoto::services::DataBusWriteReply* data_bus_write_;
    ::metamoto::services::DataBusReadReply* data_bus_read_;
    ::metamoto::services::DataBusReadAllReply* data_bus_read_all_;
    ::metamoto::services::DataBusReadLastReply* data_bus_read_last_;
    ::metamoto::services::MapGetRoadNetworkReply* map_get_road_network_;
    ::metamoto::services::MapToRoadPointReply* map_to_road_point_;
    ::metamoto::services::MapToWorldPointReply* map_to_world_point_;
    ::metamoto::services::MapGetPathReply* map_get_path_;
    ::metamoto::services::MapGetHeadingReply* map_get_heading_;
    ::metamoto::services::RayTracerSetPatternsReply* ray_tracer_set_patterns_;
    ::metamoto::services::RayTracerTraceReply* ray_tracer_trace_;
    ::metamoto::services::ReportingAddTimeSeriesValueReply* reporting_add_time_series_value_;
    ::metamoto::services::ReportingLogReply* reporting_log_;
    ::metamoto::services::ReportingReportEventReply* reporting_report_event_;
    ::metamoto::services::ReportingVisualizeReply* reporting_visualize_;
    ::metamoto::services::ScenarioUpdateReply* scenario_update_;
    ::metamoto::services::ScenarioGetVehicleWaypointsReply* scenario_get_vehicle_waypoints_;
    ::metamoto::services::ScenarioSetVehicleWaypointsReply* scenario_set_vehicle_waypoints_;
    ::metamoto::services::ScenarioSetDriverModelReply* scenario_set_driver_model_;
    ::metamoto::services::ScenarioSetupReply* scenario_setup_;
    ::metamoto::services::SystemGetResultsSizeReply* system_get_results_size_;
  } data_oneof_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SUTConnectorConnectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.SUTConnectorConnectRequest) */ {
 public:
  SUTConnectorConnectRequest();
  virtual ~SUTConnectorConnectRequest();

  SUTConnectorConnectRequest(const SUTConnectorConnectRequest& from);

  inline SUTConnectorConnectRequest& operator=(const SUTConnectorConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SUTConnectorConnectRequest(SUTConnectorConnectRequest&& from) noexcept
    : SUTConnectorConnectRequest() {
    *this = ::std::move(from);
  }

  inline SUTConnectorConnectRequest& operator=(SUTConnectorConnectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SUTConnectorConnectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUTConnectorConnectRequest* internal_default_instance() {
    return reinterpret_cast<const SUTConnectorConnectRequest*>(
               &_SUTConnectorConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SUTConnectorConnectRequest* other);
  friend void swap(SUTConnectorConnectRequest& a, SUTConnectorConnectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SUTConnectorConnectRequest* New() const final {
    return CreateMaybeMessage<SUTConnectorConnectRequest>(NULL);
  }

  SUTConnectorConnectRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SUTConnectorConnectRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SUTConnectorConnectRequest& from);
  void MergeFrom(const SUTConnectorConnectRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUTConnectorConnectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SUTConnectorConnectRequest_SUTType SUTType;
  static const SUTType SUT_TYPE_UNKNOWN =
    SUTConnectorConnectRequest_SUTType_SUT_TYPE_UNKNOWN;
  static const SUTType SUT_TYPE_CONTROLLER =
    SUTConnectorConnectRequest_SUTType_SUT_TYPE_CONTROLLER;
  static const SUTType SUT_TYPE_SENSOR =
    SUTConnectorConnectRequest_SUTType_SUT_TYPE_SENSOR;
  static inline bool SUTType_IsValid(int value) {
    return SUTConnectorConnectRequest_SUTType_IsValid(value);
  }
  static const SUTType SUTType_MIN =
    SUTConnectorConnectRequest_SUTType_SUTType_MIN;
  static const SUTType SUTType_MAX =
    SUTConnectorConnectRequest_SUTType_SUTType_MAX;
  static const int SUTType_ARRAYSIZE =
    SUTConnectorConnectRequest_SUTType_SUTType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SUTType_descriptor() {
    return SUTConnectorConnectRequest_SUTType_descriptor();
  }
  static inline const ::std::string& SUTType_Name(SUTType value) {
    return SUTConnectorConnectRequest_SUTType_Name(value);
  }
  static inline bool SUTType_Parse(const ::std::string& name,
      SUTType* value) {
    return SUTConnectorConnectRequest_SUTType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .metamoto.services.SUTConnectorConnectRequest.SUTType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::metamoto::services::SUTConnectorConnectRequest_SUTType type() const;
  void set_type(::metamoto::services::SUTConnectorConnectRequest_SUTType value);

  // @@protoc_insertion_point(class_scope:metamoto.services.SUTConnectorConnectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SUTConnectorDisconnectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.SUTConnectorDisconnectRequest) */ {
 public:
  SUTConnectorDisconnectRequest();
  virtual ~SUTConnectorDisconnectRequest();

  SUTConnectorDisconnectRequest(const SUTConnectorDisconnectRequest& from);

  inline SUTConnectorDisconnectRequest& operator=(const SUTConnectorDisconnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SUTConnectorDisconnectRequest(SUTConnectorDisconnectRequest&& from) noexcept
    : SUTConnectorDisconnectRequest() {
    *this = ::std::move(from);
  }

  inline SUTConnectorDisconnectRequest& operator=(SUTConnectorDisconnectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SUTConnectorDisconnectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUTConnectorDisconnectRequest* internal_default_instance() {
    return reinterpret_cast<const SUTConnectorDisconnectRequest*>(
               &_SUTConnectorDisconnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SUTConnectorDisconnectRequest* other);
  friend void swap(SUTConnectorDisconnectRequest& a, SUTConnectorDisconnectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SUTConnectorDisconnectRequest* New() const final {
    return CreateMaybeMessage<SUTConnectorDisconnectRequest>(NULL);
  }

  SUTConnectorDisconnectRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SUTConnectorDisconnectRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SUTConnectorDisconnectRequest& from);
  void MergeFrom(const SUTConnectorDisconnectRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUTConnectorDisconnectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:metamoto.services.SUTConnectorDisconnectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SUTConnectorConnectReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.SUTConnectorConnectReply) */ {
 public:
  SUTConnectorConnectReply();
  virtual ~SUTConnectorConnectReply();

  SUTConnectorConnectReply(const SUTConnectorConnectReply& from);

  inline SUTConnectorConnectReply& operator=(const SUTConnectorConnectReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SUTConnectorConnectReply(SUTConnectorConnectReply&& from) noexcept
    : SUTConnectorConnectReply() {
    *this = ::std::move(from);
  }

  inline SUTConnectorConnectReply& operator=(SUTConnectorConnectReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SUTConnectorConnectReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUTConnectorConnectReply* internal_default_instance() {
    return reinterpret_cast<const SUTConnectorConnectReply*>(
               &_SUTConnectorConnectReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SUTConnectorConnectReply* other);
  friend void swap(SUTConnectorConnectReply& a, SUTConnectorConnectReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SUTConnectorConnectReply* New() const final {
    return CreateMaybeMessage<SUTConnectorConnectReply>(NULL);
  }

  SUTConnectorConnectReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SUTConnectorConnectReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SUTConnectorConnectReply& from);
  void MergeFrom(const SUTConnectorConnectReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUTConnectorConnectReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:metamoto.services.SUTConnectorConnectReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SUTConnectorDisconnectReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.SUTConnectorDisconnectReply) */ {
 public:
  SUTConnectorDisconnectReply();
  virtual ~SUTConnectorDisconnectReply();

  SUTConnectorDisconnectReply(const SUTConnectorDisconnectReply& from);

  inline SUTConnectorDisconnectReply& operator=(const SUTConnectorDisconnectReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SUTConnectorDisconnectReply(SUTConnectorDisconnectReply&& from) noexcept
    : SUTConnectorDisconnectReply() {
    *this = ::std::move(from);
  }

  inline SUTConnectorDisconnectReply& operator=(SUTConnectorDisconnectReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SUTConnectorDisconnectReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUTConnectorDisconnectReply* internal_default_instance() {
    return reinterpret_cast<const SUTConnectorDisconnectReply*>(
               &_SUTConnectorDisconnectReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SUTConnectorDisconnectReply* other);
  friend void swap(SUTConnectorDisconnectReply& a, SUTConnectorDisconnectReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SUTConnectorDisconnectReply* New() const final {
    return CreateMaybeMessage<SUTConnectorDisconnectReply>(NULL);
  }

  SUTConnectorDisconnectReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SUTConnectorDisconnectReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SUTConnectorDisconnectReply& from);
  void MergeFrom(const SUTConnectorDisconnectReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUTConnectorDisconnectReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:metamoto.services.SUTConnectorDisconnectReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SUTConnectorHeartbeatRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.SUTConnectorHeartbeatRequest) */ {
 public:
  SUTConnectorHeartbeatRequest();
  virtual ~SUTConnectorHeartbeatRequest();

  SUTConnectorHeartbeatRequest(const SUTConnectorHeartbeatRequest& from);

  inline SUTConnectorHeartbeatRequest& operator=(const SUTConnectorHeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SUTConnectorHeartbeatRequest(SUTConnectorHeartbeatRequest&& from) noexcept
    : SUTConnectorHeartbeatRequest() {
    *this = ::std::move(from);
  }

  inline SUTConnectorHeartbeatRequest& operator=(SUTConnectorHeartbeatRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SUTConnectorHeartbeatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUTConnectorHeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const SUTConnectorHeartbeatRequest*>(
               &_SUTConnectorHeartbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SUTConnectorHeartbeatRequest* other);
  friend void swap(SUTConnectorHeartbeatRequest& a, SUTConnectorHeartbeatRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SUTConnectorHeartbeatRequest* New() const final {
    return CreateMaybeMessage<SUTConnectorHeartbeatRequest>(NULL);
  }

  SUTConnectorHeartbeatRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SUTConnectorHeartbeatRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SUTConnectorHeartbeatRequest& from);
  void MergeFrom(const SUTConnectorHeartbeatRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUTConnectorHeartbeatRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:metamoto.services.SUTConnectorHeartbeatRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SUTConnectorHeartbeatReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.SUTConnectorHeartbeatReply) */ {
 public:
  SUTConnectorHeartbeatReply();
  virtual ~SUTConnectorHeartbeatReply();

  SUTConnectorHeartbeatReply(const SUTConnectorHeartbeatReply& from);

  inline SUTConnectorHeartbeatReply& operator=(const SUTConnectorHeartbeatReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SUTConnectorHeartbeatReply(SUTConnectorHeartbeatReply&& from) noexcept
    : SUTConnectorHeartbeatReply() {
    *this = ::std::move(from);
  }

  inline SUTConnectorHeartbeatReply& operator=(SUTConnectorHeartbeatReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SUTConnectorHeartbeatReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUTConnectorHeartbeatReply* internal_default_instance() {
    return reinterpret_cast<const SUTConnectorHeartbeatReply*>(
               &_SUTConnectorHeartbeatReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(SUTConnectorHeartbeatReply* other);
  friend void swap(SUTConnectorHeartbeatReply& a, SUTConnectorHeartbeatReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SUTConnectorHeartbeatReply* New() const final {
    return CreateMaybeMessage<SUTConnectorHeartbeatReply>(NULL);
  }

  SUTConnectorHeartbeatReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SUTConnectorHeartbeatReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SUTConnectorHeartbeatReply& from);
  void MergeFrom(const SUTConnectorHeartbeatReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUTConnectorHeartbeatReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:metamoto.services.SUTConnectorHeartbeatReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SUTConnectorQueryGetConnectedSUTsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest) */ {
 public:
  SUTConnectorQueryGetConnectedSUTsRequest();
  virtual ~SUTConnectorQueryGetConnectedSUTsRequest();

  SUTConnectorQueryGetConnectedSUTsRequest(const SUTConnectorQueryGetConnectedSUTsRequest& from);

  inline SUTConnectorQueryGetConnectedSUTsRequest& operator=(const SUTConnectorQueryGetConnectedSUTsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SUTConnectorQueryGetConnectedSUTsRequest(SUTConnectorQueryGetConnectedSUTsRequest&& from) noexcept
    : SUTConnectorQueryGetConnectedSUTsRequest() {
    *this = ::std::move(from);
  }

  inline SUTConnectorQueryGetConnectedSUTsRequest& operator=(SUTConnectorQueryGetConnectedSUTsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SUTConnectorQueryGetConnectedSUTsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUTConnectorQueryGetConnectedSUTsRequest* internal_default_instance() {
    return reinterpret_cast<const SUTConnectorQueryGetConnectedSUTsRequest*>(
               &_SUTConnectorQueryGetConnectedSUTsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SUTConnectorQueryGetConnectedSUTsRequest* other);
  friend void swap(SUTConnectorQueryGetConnectedSUTsRequest& a, SUTConnectorQueryGetConnectedSUTsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SUTConnectorQueryGetConnectedSUTsRequest* New() const final {
    return CreateMaybeMessage<SUTConnectorQueryGetConnectedSUTsRequest>(NULL);
  }

  SUTConnectorQueryGetConnectedSUTsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SUTConnectorQueryGetConnectedSUTsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SUTConnectorQueryGetConnectedSUTsRequest& from);
  void MergeFrom(const SUTConnectorQueryGetConnectedSUTsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUTConnectorQueryGetConnectedSUTsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SUTConnectorQueryGetConnectedSUTsReply_SUT : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT) */ {
 public:
  SUTConnectorQueryGetConnectedSUTsReply_SUT();
  virtual ~SUTConnectorQueryGetConnectedSUTsReply_SUT();

  SUTConnectorQueryGetConnectedSUTsReply_SUT(const SUTConnectorQueryGetConnectedSUTsReply_SUT& from);

  inline SUTConnectorQueryGetConnectedSUTsReply_SUT& operator=(const SUTConnectorQueryGetConnectedSUTsReply_SUT& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SUTConnectorQueryGetConnectedSUTsReply_SUT(SUTConnectorQueryGetConnectedSUTsReply_SUT&& from) noexcept
    : SUTConnectorQueryGetConnectedSUTsReply_SUT() {
    *this = ::std::move(from);
  }

  inline SUTConnectorQueryGetConnectedSUTsReply_SUT& operator=(SUTConnectorQueryGetConnectedSUTsReply_SUT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SUTConnectorQueryGetConnectedSUTsReply_SUT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUTConnectorQueryGetConnectedSUTsReply_SUT* internal_default_instance() {
    return reinterpret_cast<const SUTConnectorQueryGetConnectedSUTsReply_SUT*>(
               &_SUTConnectorQueryGetConnectedSUTsReply_SUT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SUTConnectorQueryGetConnectedSUTsReply_SUT* other);
  friend void swap(SUTConnectorQueryGetConnectedSUTsReply_SUT& a, SUTConnectorQueryGetConnectedSUTsReply_SUT& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SUTConnectorQueryGetConnectedSUTsReply_SUT* New() const final {
    return CreateMaybeMessage<SUTConnectorQueryGetConnectedSUTsReply_SUT>(NULL);
  }

  SUTConnectorQueryGetConnectedSUTsReply_SUT* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SUTConnectorQueryGetConnectedSUTsReply_SUT>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SUTConnectorQueryGetConnectedSUTsReply_SUT& from);
  void MergeFrom(const SUTConnectorQueryGetConnectedSUTsReply_SUT& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUTConnectorQueryGetConnectedSUTsReply_SUT* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::uint32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SUTConnectorQueryGetConnectedSUTsReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply) */ {
 public:
  SUTConnectorQueryGetConnectedSUTsReply();
  virtual ~SUTConnectorQueryGetConnectedSUTsReply();

  SUTConnectorQueryGetConnectedSUTsReply(const SUTConnectorQueryGetConnectedSUTsReply& from);

  inline SUTConnectorQueryGetConnectedSUTsReply& operator=(const SUTConnectorQueryGetConnectedSUTsReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SUTConnectorQueryGetConnectedSUTsReply(SUTConnectorQueryGetConnectedSUTsReply&& from) noexcept
    : SUTConnectorQueryGetConnectedSUTsReply() {
    *this = ::std::move(from);
  }

  inline SUTConnectorQueryGetConnectedSUTsReply& operator=(SUTConnectorQueryGetConnectedSUTsReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SUTConnectorQueryGetConnectedSUTsReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUTConnectorQueryGetConnectedSUTsReply* internal_default_instance() {
    return reinterpret_cast<const SUTConnectorQueryGetConnectedSUTsReply*>(
               &_SUTConnectorQueryGetConnectedSUTsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SUTConnectorQueryGetConnectedSUTsReply* other);
  friend void swap(SUTConnectorQueryGetConnectedSUTsReply& a, SUTConnectorQueryGetConnectedSUTsReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SUTConnectorQueryGetConnectedSUTsReply* New() const final {
    return CreateMaybeMessage<SUTConnectorQueryGetConnectedSUTsReply>(NULL);
  }

  SUTConnectorQueryGetConnectedSUTsReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SUTConnectorQueryGetConnectedSUTsReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SUTConnectorQueryGetConnectedSUTsReply& from);
  void MergeFrom(const SUTConnectorQueryGetConnectedSUTsReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUTConnectorQueryGetConnectedSUTsReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SUTConnectorQueryGetConnectedSUTsReply_SUT SUT;

  // accessors -------------------------------------------------------

  // repeated .metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT suts = 1;
  int suts_size() const;
  void clear_suts();
  static const int kSutsFieldNumber = 1;
  ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT* mutable_suts(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT >*
      mutable_suts();
  const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT& suts(int index) const;
  ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT* add_suts();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT >&
      suts() const;

  // @@protoc_insertion_point(class_scope:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT > suts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SUTConnectorRequest

// .google.rpc.Status status = 1;
inline bool SUTConnectorRequest::has_status() const {
  return data_oneof_case() == kStatus;
}
inline void SUTConnectorRequest::set_has_status() {
  _oneof_case_[0] = kStatus;
}
inline const ::google::rpc::Status& SUTConnectorRequest::_internal_status() const {
  return *data_oneof_.status_;
}
inline ::google::rpc::Status* SUTConnectorRequest::release_status() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.status)
  if (has_status()) {
    clear_has_data_oneof();
      ::google::rpc::Status* temp = data_oneof_.status_;
    data_oneof_.status_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::rpc::Status& SUTConnectorRequest::status() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.status)
  return has_status()
      ? *data_oneof_.status_
      : *reinterpret_cast< ::google::rpc::Status*>(&::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* SUTConnectorRequest::mutable_status() {
  if (!has_status()) {
    clear_data_oneof();
    set_has_status();
    data_oneof_.status_ = CreateMaybeMessage< ::google::rpc::Status >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.status)
  return data_oneof_.status_;
}

// .metamoto.services.SUTConnectorConnectRequest connect = 2;
inline bool SUTConnectorRequest::has_connect() const {
  return data_oneof_case() == kConnect;
}
inline void SUTConnectorRequest::set_has_connect() {
  _oneof_case_[0] = kConnect;
}
inline void SUTConnectorRequest::clear_connect() {
  if (has_connect()) {
    delete data_oneof_.connect_;
    clear_has_data_oneof();
  }
}
inline const ::metamoto::services::SUTConnectorConnectRequest& SUTConnectorRequest::_internal_connect() const {
  return *data_oneof_.connect_;
}
inline ::metamoto::services::SUTConnectorConnectRequest* SUTConnectorRequest::release_connect() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.connect)
  if (has_connect()) {
    clear_has_data_oneof();
      ::metamoto::services::SUTConnectorConnectRequest* temp = data_oneof_.connect_;
    data_oneof_.connect_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::SUTConnectorConnectRequest& SUTConnectorRequest::connect() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.connect)
  return has_connect()
      ? *data_oneof_.connect_
      : *reinterpret_cast< ::metamoto::services::SUTConnectorConnectRequest*>(&::metamoto::services::_SUTConnectorConnectRequest_default_instance_);
}
inline ::metamoto::services::SUTConnectorConnectRequest* SUTConnectorRequest::mutable_connect() {
  if (!has_connect()) {
    clear_data_oneof();
    set_has_connect();
    data_oneof_.connect_ = CreateMaybeMessage< ::metamoto::services::SUTConnectorConnectRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.connect)
  return data_oneof_.connect_;
}

// .metamoto.services.SUTConnectorDisconnectRequest disconnect = 3;
inline bool SUTConnectorRequest::has_disconnect() const {
  return data_oneof_case() == kDisconnect;
}
inline void SUTConnectorRequest::set_has_disconnect() {
  _oneof_case_[0] = kDisconnect;
}
inline void SUTConnectorRequest::clear_disconnect() {
  if (has_disconnect()) {
    delete data_oneof_.disconnect_;
    clear_has_data_oneof();
  }
}
inline const ::metamoto::services::SUTConnectorDisconnectRequest& SUTConnectorRequest::_internal_disconnect() const {
  return *data_oneof_.disconnect_;
}
inline ::metamoto::services::SUTConnectorDisconnectRequest* SUTConnectorRequest::release_disconnect() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.disconnect)
  if (has_disconnect()) {
    clear_has_data_oneof();
      ::metamoto::services::SUTConnectorDisconnectRequest* temp = data_oneof_.disconnect_;
    data_oneof_.disconnect_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::SUTConnectorDisconnectRequest& SUTConnectorRequest::disconnect() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.disconnect)
  return has_disconnect()
      ? *data_oneof_.disconnect_
      : *reinterpret_cast< ::metamoto::services::SUTConnectorDisconnectRequest*>(&::metamoto::services::_SUTConnectorDisconnectRequest_default_instance_);
}
inline ::metamoto::services::SUTConnectorDisconnectRequest* SUTConnectorRequest::mutable_disconnect() {
  if (!has_disconnect()) {
    clear_data_oneof();
    set_has_disconnect();
    data_oneof_.disconnect_ = CreateMaybeMessage< ::metamoto::services::SUTConnectorDisconnectRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.disconnect)
  return data_oneof_.disconnect_;
}

// .metamoto.services.ControllerInitializeReply controller_initialize = 20;
inline bool SUTConnectorRequest::has_controller_initialize() const {
  return data_oneof_case() == kControllerInitialize;
}
inline void SUTConnectorRequest::set_has_controller_initialize() {
  _oneof_case_[0] = kControllerInitialize;
}
inline const ::metamoto::services::ControllerInitializeReply& SUTConnectorRequest::_internal_controller_initialize() const {
  return *data_oneof_.controller_initialize_;
}
inline ::metamoto::services::ControllerInitializeReply* SUTConnectorRequest::release_controller_initialize() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.controller_initialize)
  if (has_controller_initialize()) {
    clear_has_data_oneof();
      ::metamoto::services::ControllerInitializeReply* temp = data_oneof_.controller_initialize_;
    data_oneof_.controller_initialize_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ControllerInitializeReply& SUTConnectorRequest::controller_initialize() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.controller_initialize)
  return has_controller_initialize()
      ? *data_oneof_.controller_initialize_
      : *reinterpret_cast< ::metamoto::services::ControllerInitializeReply*>(&::metamoto::services::_ControllerInitializeReply_default_instance_);
}
inline ::metamoto::services::ControllerInitializeReply* SUTConnectorRequest::mutable_controller_initialize() {
  if (!has_controller_initialize()) {
    clear_data_oneof();
    set_has_controller_initialize();
    data_oneof_.controller_initialize_ = CreateMaybeMessage< ::metamoto::services::ControllerInitializeReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.controller_initialize)
  return data_oneof_.controller_initialize_;
}

// .metamoto.services.ControllerUpdateReply controller_update = 21;
inline bool SUTConnectorRequest::has_controller_update() const {
  return data_oneof_case() == kControllerUpdate;
}
inline void SUTConnectorRequest::set_has_controller_update() {
  _oneof_case_[0] = kControllerUpdate;
}
inline const ::metamoto::services::ControllerUpdateReply& SUTConnectorRequest::_internal_controller_update() const {
  return *data_oneof_.controller_update_;
}
inline ::metamoto::services::ControllerUpdateReply* SUTConnectorRequest::release_controller_update() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.controller_update)
  if (has_controller_update()) {
    clear_has_data_oneof();
      ::metamoto::services::ControllerUpdateReply* temp = data_oneof_.controller_update_;
    data_oneof_.controller_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ControllerUpdateReply& SUTConnectorRequest::controller_update() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.controller_update)
  return has_controller_update()
      ? *data_oneof_.controller_update_
      : *reinterpret_cast< ::metamoto::services::ControllerUpdateReply*>(&::metamoto::services::_ControllerUpdateReply_default_instance_);
}
inline ::metamoto::services::ControllerUpdateReply* SUTConnectorRequest::mutable_controller_update() {
  if (!has_controller_update()) {
    clear_data_oneof();
    set_has_controller_update();
    data_oneof_.controller_update_ = CreateMaybeMessage< ::metamoto::services::ControllerUpdateReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.controller_update)
  return data_oneof_.controller_update_;
}

// .metamoto.services.ControllerCloseReply controller_close = 22;
inline bool SUTConnectorRequest::has_controller_close() const {
  return data_oneof_case() == kControllerClose;
}
inline void SUTConnectorRequest::set_has_controller_close() {
  _oneof_case_[0] = kControllerClose;
}
inline const ::metamoto::services::ControllerCloseReply& SUTConnectorRequest::_internal_controller_close() const {
  return *data_oneof_.controller_close_;
}
inline ::metamoto::services::ControllerCloseReply* SUTConnectorRequest::release_controller_close() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.controller_close)
  if (has_controller_close()) {
    clear_has_data_oneof();
      ::metamoto::services::ControllerCloseReply* temp = data_oneof_.controller_close_;
    data_oneof_.controller_close_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ControllerCloseReply& SUTConnectorRequest::controller_close() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.controller_close)
  return has_controller_close()
      ? *data_oneof_.controller_close_
      : *reinterpret_cast< ::metamoto::services::ControllerCloseReply*>(&::metamoto::services::_ControllerCloseReply_default_instance_);
}
inline ::metamoto::services::ControllerCloseReply* SUTConnectorRequest::mutable_controller_close() {
  if (!has_controller_close()) {
    clear_data_oneof();
    set_has_controller_close();
    data_oneof_.controller_close_ = CreateMaybeMessage< ::metamoto::services::ControllerCloseReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.controller_close)
  return data_oneof_.controller_close_;
}

// .metamoto.services.ControllerSetupReply controller_setup = 23;
inline bool SUTConnectorRequest::has_controller_setup() const {
  return data_oneof_case() == kControllerSetup;
}
inline void SUTConnectorRequest::set_has_controller_setup() {
  _oneof_case_[0] = kControllerSetup;
}
inline const ::metamoto::services::ControllerSetupReply& SUTConnectorRequest::_internal_controller_setup() const {
  return *data_oneof_.controller_setup_;
}
inline ::metamoto::services::ControllerSetupReply* SUTConnectorRequest::release_controller_setup() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.controller_setup)
  if (has_controller_setup()) {
    clear_has_data_oneof();
      ::metamoto::services::ControllerSetupReply* temp = data_oneof_.controller_setup_;
    data_oneof_.controller_setup_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ControllerSetupReply& SUTConnectorRequest::controller_setup() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.controller_setup)
  return has_controller_setup()
      ? *data_oneof_.controller_setup_
      : *reinterpret_cast< ::metamoto::services::ControllerSetupReply*>(&::metamoto::services::_ControllerSetupReply_default_instance_);
}
inline ::metamoto::services::ControllerSetupReply* SUTConnectorRequest::mutable_controller_setup() {
  if (!has_controller_setup()) {
    clear_data_oneof();
    set_has_controller_setup();
    data_oneof_.controller_setup_ = CreateMaybeMessage< ::metamoto::services::ControllerSetupReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.controller_setup)
  return data_oneof_.controller_setup_;
}

// .metamoto.services.SensorInitializeReply sensor_initialize = 40;
inline bool SUTConnectorRequest::has_sensor_initialize() const {
  return data_oneof_case() == kSensorInitialize;
}
inline void SUTConnectorRequest::set_has_sensor_initialize() {
  _oneof_case_[0] = kSensorInitialize;
}
inline const ::metamoto::services::SensorInitializeReply& SUTConnectorRequest::_internal_sensor_initialize() const {
  return *data_oneof_.sensor_initialize_;
}
inline ::metamoto::services::SensorInitializeReply* SUTConnectorRequest::release_sensor_initialize() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.sensor_initialize)
  if (has_sensor_initialize()) {
    clear_has_data_oneof();
      ::metamoto::services::SensorInitializeReply* temp = data_oneof_.sensor_initialize_;
    data_oneof_.sensor_initialize_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::SensorInitializeReply& SUTConnectorRequest::sensor_initialize() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.sensor_initialize)
  return has_sensor_initialize()
      ? *data_oneof_.sensor_initialize_
      : *reinterpret_cast< ::metamoto::services::SensorInitializeReply*>(&::metamoto::services::_SensorInitializeReply_default_instance_);
}
inline ::metamoto::services::SensorInitializeReply* SUTConnectorRequest::mutable_sensor_initialize() {
  if (!has_sensor_initialize()) {
    clear_data_oneof();
    set_has_sensor_initialize();
    data_oneof_.sensor_initialize_ = CreateMaybeMessage< ::metamoto::services::SensorInitializeReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.sensor_initialize)
  return data_oneof_.sensor_initialize_;
}

// .metamoto.services.SensorUpdateReply sensor_update = 41;
inline bool SUTConnectorRequest::has_sensor_update() const {
  return data_oneof_case() == kSensorUpdate;
}
inline void SUTConnectorRequest::set_has_sensor_update() {
  _oneof_case_[0] = kSensorUpdate;
}
inline const ::metamoto::services::SensorUpdateReply& SUTConnectorRequest::_internal_sensor_update() const {
  return *data_oneof_.sensor_update_;
}
inline ::metamoto::services::SensorUpdateReply* SUTConnectorRequest::release_sensor_update() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.sensor_update)
  if (has_sensor_update()) {
    clear_has_data_oneof();
      ::metamoto::services::SensorUpdateReply* temp = data_oneof_.sensor_update_;
    data_oneof_.sensor_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::SensorUpdateReply& SUTConnectorRequest::sensor_update() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.sensor_update)
  return has_sensor_update()
      ? *data_oneof_.sensor_update_
      : *reinterpret_cast< ::metamoto::services::SensorUpdateReply*>(&::metamoto::services::_SensorUpdateReply_default_instance_);
}
inline ::metamoto::services::SensorUpdateReply* SUTConnectorRequest::mutable_sensor_update() {
  if (!has_sensor_update()) {
    clear_data_oneof();
    set_has_sensor_update();
    data_oneof_.sensor_update_ = CreateMaybeMessage< ::metamoto::services::SensorUpdateReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.sensor_update)
  return data_oneof_.sensor_update_;
}

// .metamoto.services.SensorCloseReply sensor_close = 42;
inline bool SUTConnectorRequest::has_sensor_close() const {
  return data_oneof_case() == kSensorClose;
}
inline void SUTConnectorRequest::set_has_sensor_close() {
  _oneof_case_[0] = kSensorClose;
}
inline const ::metamoto::services::SensorCloseReply& SUTConnectorRequest::_internal_sensor_close() const {
  return *data_oneof_.sensor_close_;
}
inline ::metamoto::services::SensorCloseReply* SUTConnectorRequest::release_sensor_close() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.sensor_close)
  if (has_sensor_close()) {
    clear_has_data_oneof();
      ::metamoto::services::SensorCloseReply* temp = data_oneof_.sensor_close_;
    data_oneof_.sensor_close_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::SensorCloseReply& SUTConnectorRequest::sensor_close() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.sensor_close)
  return has_sensor_close()
      ? *data_oneof_.sensor_close_
      : *reinterpret_cast< ::metamoto::services::SensorCloseReply*>(&::metamoto::services::_SensorCloseReply_default_instance_);
}
inline ::metamoto::services::SensorCloseReply* SUTConnectorRequest::mutable_sensor_close() {
  if (!has_sensor_close()) {
    clear_data_oneof();
    set_has_sensor_close();
    data_oneof_.sensor_close_ = CreateMaybeMessage< ::metamoto::services::SensorCloseReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.sensor_close)
  return data_oneof_.sensor_close_;
}

// .metamoto.services.SensorSetupReply sensor_setup = 43;
inline bool SUTConnectorRequest::has_sensor_setup() const {
  return data_oneof_case() == kSensorSetup;
}
inline void SUTConnectorRequest::set_has_sensor_setup() {
  _oneof_case_[0] = kSensorSetup;
}
inline const ::metamoto::services::SensorSetupReply& SUTConnectorRequest::_internal_sensor_setup() const {
  return *data_oneof_.sensor_setup_;
}
inline ::metamoto::services::SensorSetupReply* SUTConnectorRequest::release_sensor_setup() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.sensor_setup)
  if (has_sensor_setup()) {
    clear_has_data_oneof();
      ::metamoto::services::SensorSetupReply* temp = data_oneof_.sensor_setup_;
    data_oneof_.sensor_setup_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::SensorSetupReply& SUTConnectorRequest::sensor_setup() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.sensor_setup)
  return has_sensor_setup()
      ? *data_oneof_.sensor_setup_
      : *reinterpret_cast< ::metamoto::services::SensorSetupReply*>(&::metamoto::services::_SensorSetupReply_default_instance_);
}
inline ::metamoto::services::SensorSetupReply* SUTConnectorRequest::mutable_sensor_setup() {
  if (!has_sensor_setup()) {
    clear_data_oneof();
    set_has_sensor_setup();
    data_oneof_.sensor_setup_ = CreateMaybeMessage< ::metamoto::services::SensorSetupReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.sensor_setup)
  return data_oneof_.sensor_setup_;
}

// .metamoto.services.DataBusPublishRequest data_bus_publish = 60;
inline bool SUTConnectorRequest::has_data_bus_publish() const {
  return data_oneof_case() == kDataBusPublish;
}
inline void SUTConnectorRequest::set_has_data_bus_publish() {
  _oneof_case_[0] = kDataBusPublish;
}
inline const ::metamoto::services::DataBusPublishRequest& SUTConnectorRequest::_internal_data_bus_publish() const {
  return *data_oneof_.data_bus_publish_;
}
inline ::metamoto::services::DataBusPublishRequest* SUTConnectorRequest::release_data_bus_publish() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.data_bus_publish)
  if (has_data_bus_publish()) {
    clear_has_data_oneof();
      ::metamoto::services::DataBusPublishRequest* temp = data_oneof_.data_bus_publish_;
    data_oneof_.data_bus_publish_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::DataBusPublishRequest& SUTConnectorRequest::data_bus_publish() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.data_bus_publish)
  return has_data_bus_publish()
      ? *data_oneof_.data_bus_publish_
      : *reinterpret_cast< ::metamoto::services::DataBusPublishRequest*>(&::metamoto::services::_DataBusPublishRequest_default_instance_);
}
inline ::metamoto::services::DataBusPublishRequest* SUTConnectorRequest::mutable_data_bus_publish() {
  if (!has_data_bus_publish()) {
    clear_data_oneof();
    set_has_data_bus_publish();
    data_oneof_.data_bus_publish_ = CreateMaybeMessage< ::metamoto::services::DataBusPublishRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.data_bus_publish)
  return data_oneof_.data_bus_publish_;
}

// .metamoto.services.DataBusSubscribeRequest data_bus_subscribe = 61;
inline bool SUTConnectorRequest::has_data_bus_subscribe() const {
  return data_oneof_case() == kDataBusSubscribe;
}
inline void SUTConnectorRequest::set_has_data_bus_subscribe() {
  _oneof_case_[0] = kDataBusSubscribe;
}
inline const ::metamoto::services::DataBusSubscribeRequest& SUTConnectorRequest::_internal_data_bus_subscribe() const {
  return *data_oneof_.data_bus_subscribe_;
}
inline ::metamoto::services::DataBusSubscribeRequest* SUTConnectorRequest::release_data_bus_subscribe() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.data_bus_subscribe)
  if (has_data_bus_subscribe()) {
    clear_has_data_oneof();
      ::metamoto::services::DataBusSubscribeRequest* temp = data_oneof_.data_bus_subscribe_;
    data_oneof_.data_bus_subscribe_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::DataBusSubscribeRequest& SUTConnectorRequest::data_bus_subscribe() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.data_bus_subscribe)
  return has_data_bus_subscribe()
      ? *data_oneof_.data_bus_subscribe_
      : *reinterpret_cast< ::metamoto::services::DataBusSubscribeRequest*>(&::metamoto::services::_DataBusSubscribeRequest_default_instance_);
}
inline ::metamoto::services::DataBusSubscribeRequest* SUTConnectorRequest::mutable_data_bus_subscribe() {
  if (!has_data_bus_subscribe()) {
    clear_data_oneof();
    set_has_data_bus_subscribe();
    data_oneof_.data_bus_subscribe_ = CreateMaybeMessage< ::metamoto::services::DataBusSubscribeRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.data_bus_subscribe)
  return data_oneof_.data_bus_subscribe_;
}

// .metamoto.services.DataBusWriteRequest data_bus_write = 62;
inline bool SUTConnectorRequest::has_data_bus_write() const {
  return data_oneof_case() == kDataBusWrite;
}
inline void SUTConnectorRequest::set_has_data_bus_write() {
  _oneof_case_[0] = kDataBusWrite;
}
inline const ::metamoto::services::DataBusWriteRequest& SUTConnectorRequest::_internal_data_bus_write() const {
  return *data_oneof_.data_bus_write_;
}
inline ::metamoto::services::DataBusWriteRequest* SUTConnectorRequest::release_data_bus_write() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.data_bus_write)
  if (has_data_bus_write()) {
    clear_has_data_oneof();
      ::metamoto::services::DataBusWriteRequest* temp = data_oneof_.data_bus_write_;
    data_oneof_.data_bus_write_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::DataBusWriteRequest& SUTConnectorRequest::data_bus_write() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.data_bus_write)
  return has_data_bus_write()
      ? *data_oneof_.data_bus_write_
      : *reinterpret_cast< ::metamoto::services::DataBusWriteRequest*>(&::metamoto::services::_DataBusWriteRequest_default_instance_);
}
inline ::metamoto::services::DataBusWriteRequest* SUTConnectorRequest::mutable_data_bus_write() {
  if (!has_data_bus_write()) {
    clear_data_oneof();
    set_has_data_bus_write();
    data_oneof_.data_bus_write_ = CreateMaybeMessage< ::metamoto::services::DataBusWriteRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.data_bus_write)
  return data_oneof_.data_bus_write_;
}

// .metamoto.services.DataBusReadRequest data_bus_read = 63;
inline bool SUTConnectorRequest::has_data_bus_read() const {
  return data_oneof_case() == kDataBusRead;
}
inline void SUTConnectorRequest::set_has_data_bus_read() {
  _oneof_case_[0] = kDataBusRead;
}
inline const ::metamoto::services::DataBusReadRequest& SUTConnectorRequest::_internal_data_bus_read() const {
  return *data_oneof_.data_bus_read_;
}
inline ::metamoto::services::DataBusReadRequest* SUTConnectorRequest::release_data_bus_read() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.data_bus_read)
  if (has_data_bus_read()) {
    clear_has_data_oneof();
      ::metamoto::services::DataBusReadRequest* temp = data_oneof_.data_bus_read_;
    data_oneof_.data_bus_read_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::DataBusReadRequest& SUTConnectorRequest::data_bus_read() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.data_bus_read)
  return has_data_bus_read()
      ? *data_oneof_.data_bus_read_
      : *reinterpret_cast< ::metamoto::services::DataBusReadRequest*>(&::metamoto::services::_DataBusReadRequest_default_instance_);
}
inline ::metamoto::services::DataBusReadRequest* SUTConnectorRequest::mutable_data_bus_read() {
  if (!has_data_bus_read()) {
    clear_data_oneof();
    set_has_data_bus_read();
    data_oneof_.data_bus_read_ = CreateMaybeMessage< ::metamoto::services::DataBusReadRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.data_bus_read)
  return data_oneof_.data_bus_read_;
}

// .metamoto.services.DataBusReadAllRequest data_bus_read_all = 64;
inline bool SUTConnectorRequest::has_data_bus_read_all() const {
  return data_oneof_case() == kDataBusReadAll;
}
inline void SUTConnectorRequest::set_has_data_bus_read_all() {
  _oneof_case_[0] = kDataBusReadAll;
}
inline const ::metamoto::services::DataBusReadAllRequest& SUTConnectorRequest::_internal_data_bus_read_all() const {
  return *data_oneof_.data_bus_read_all_;
}
inline ::metamoto::services::DataBusReadAllRequest* SUTConnectorRequest::release_data_bus_read_all() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.data_bus_read_all)
  if (has_data_bus_read_all()) {
    clear_has_data_oneof();
      ::metamoto::services::DataBusReadAllRequest* temp = data_oneof_.data_bus_read_all_;
    data_oneof_.data_bus_read_all_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::DataBusReadAllRequest& SUTConnectorRequest::data_bus_read_all() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.data_bus_read_all)
  return has_data_bus_read_all()
      ? *data_oneof_.data_bus_read_all_
      : *reinterpret_cast< ::metamoto::services::DataBusReadAllRequest*>(&::metamoto::services::_DataBusReadAllRequest_default_instance_);
}
inline ::metamoto::services::DataBusReadAllRequest* SUTConnectorRequest::mutable_data_bus_read_all() {
  if (!has_data_bus_read_all()) {
    clear_data_oneof();
    set_has_data_bus_read_all();
    data_oneof_.data_bus_read_all_ = CreateMaybeMessage< ::metamoto::services::DataBusReadAllRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.data_bus_read_all)
  return data_oneof_.data_bus_read_all_;
}

// .metamoto.services.DataBusReadLastRequest data_bus_read_last = 65;
inline bool SUTConnectorRequest::has_data_bus_read_last() const {
  return data_oneof_case() == kDataBusReadLast;
}
inline void SUTConnectorRequest::set_has_data_bus_read_last() {
  _oneof_case_[0] = kDataBusReadLast;
}
inline const ::metamoto::services::DataBusReadLastRequest& SUTConnectorRequest::_internal_data_bus_read_last() const {
  return *data_oneof_.data_bus_read_last_;
}
inline ::metamoto::services::DataBusReadLastRequest* SUTConnectorRequest::release_data_bus_read_last() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.data_bus_read_last)
  if (has_data_bus_read_last()) {
    clear_has_data_oneof();
      ::metamoto::services::DataBusReadLastRequest* temp = data_oneof_.data_bus_read_last_;
    data_oneof_.data_bus_read_last_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::DataBusReadLastRequest& SUTConnectorRequest::data_bus_read_last() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.data_bus_read_last)
  return has_data_bus_read_last()
      ? *data_oneof_.data_bus_read_last_
      : *reinterpret_cast< ::metamoto::services::DataBusReadLastRequest*>(&::metamoto::services::_DataBusReadLastRequest_default_instance_);
}
inline ::metamoto::services::DataBusReadLastRequest* SUTConnectorRequest::mutable_data_bus_read_last() {
  if (!has_data_bus_read_last()) {
    clear_data_oneof();
    set_has_data_bus_read_last();
    data_oneof_.data_bus_read_last_ = CreateMaybeMessage< ::metamoto::services::DataBusReadLastRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.data_bus_read_last)
  return data_oneof_.data_bus_read_last_;
}

// .metamoto.services.MapGetRoadNetworkRequest map_get_road_network = 80;
inline bool SUTConnectorRequest::has_map_get_road_network() const {
  return data_oneof_case() == kMapGetRoadNetwork;
}
inline void SUTConnectorRequest::set_has_map_get_road_network() {
  _oneof_case_[0] = kMapGetRoadNetwork;
}
inline const ::metamoto::services::MapGetRoadNetworkRequest& SUTConnectorRequest::_internal_map_get_road_network() const {
  return *data_oneof_.map_get_road_network_;
}
inline ::metamoto::services::MapGetRoadNetworkRequest* SUTConnectorRequest::release_map_get_road_network() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.map_get_road_network)
  if (has_map_get_road_network()) {
    clear_has_data_oneof();
      ::metamoto::services::MapGetRoadNetworkRequest* temp = data_oneof_.map_get_road_network_;
    data_oneof_.map_get_road_network_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::MapGetRoadNetworkRequest& SUTConnectorRequest::map_get_road_network() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.map_get_road_network)
  return has_map_get_road_network()
      ? *data_oneof_.map_get_road_network_
      : *reinterpret_cast< ::metamoto::services::MapGetRoadNetworkRequest*>(&::metamoto::services::_MapGetRoadNetworkRequest_default_instance_);
}
inline ::metamoto::services::MapGetRoadNetworkRequest* SUTConnectorRequest::mutable_map_get_road_network() {
  if (!has_map_get_road_network()) {
    clear_data_oneof();
    set_has_map_get_road_network();
    data_oneof_.map_get_road_network_ = CreateMaybeMessage< ::metamoto::services::MapGetRoadNetworkRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.map_get_road_network)
  return data_oneof_.map_get_road_network_;
}

// .metamoto.services.MapToRoadPointRequest map_to_road_point = 81;
inline bool SUTConnectorRequest::has_map_to_road_point() const {
  return data_oneof_case() == kMapToRoadPoint;
}
inline void SUTConnectorRequest::set_has_map_to_road_point() {
  _oneof_case_[0] = kMapToRoadPoint;
}
inline const ::metamoto::services::MapToRoadPointRequest& SUTConnectorRequest::_internal_map_to_road_point() const {
  return *data_oneof_.map_to_road_point_;
}
inline ::metamoto::services::MapToRoadPointRequest* SUTConnectorRequest::release_map_to_road_point() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.map_to_road_point)
  if (has_map_to_road_point()) {
    clear_has_data_oneof();
      ::metamoto::services::MapToRoadPointRequest* temp = data_oneof_.map_to_road_point_;
    data_oneof_.map_to_road_point_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::MapToRoadPointRequest& SUTConnectorRequest::map_to_road_point() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.map_to_road_point)
  return has_map_to_road_point()
      ? *data_oneof_.map_to_road_point_
      : *reinterpret_cast< ::metamoto::services::MapToRoadPointRequest*>(&::metamoto::services::_MapToRoadPointRequest_default_instance_);
}
inline ::metamoto::services::MapToRoadPointRequest* SUTConnectorRequest::mutable_map_to_road_point() {
  if (!has_map_to_road_point()) {
    clear_data_oneof();
    set_has_map_to_road_point();
    data_oneof_.map_to_road_point_ = CreateMaybeMessage< ::metamoto::services::MapToRoadPointRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.map_to_road_point)
  return data_oneof_.map_to_road_point_;
}

// .metamoto.services.MapToWorldPointRequest map_to_world_point = 82;
inline bool SUTConnectorRequest::has_map_to_world_point() const {
  return data_oneof_case() == kMapToWorldPoint;
}
inline void SUTConnectorRequest::set_has_map_to_world_point() {
  _oneof_case_[0] = kMapToWorldPoint;
}
inline const ::metamoto::services::MapToWorldPointRequest& SUTConnectorRequest::_internal_map_to_world_point() const {
  return *data_oneof_.map_to_world_point_;
}
inline ::metamoto::services::MapToWorldPointRequest* SUTConnectorRequest::release_map_to_world_point() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.map_to_world_point)
  if (has_map_to_world_point()) {
    clear_has_data_oneof();
      ::metamoto::services::MapToWorldPointRequest* temp = data_oneof_.map_to_world_point_;
    data_oneof_.map_to_world_point_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::MapToWorldPointRequest& SUTConnectorRequest::map_to_world_point() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.map_to_world_point)
  return has_map_to_world_point()
      ? *data_oneof_.map_to_world_point_
      : *reinterpret_cast< ::metamoto::services::MapToWorldPointRequest*>(&::metamoto::services::_MapToWorldPointRequest_default_instance_);
}
inline ::metamoto::services::MapToWorldPointRequest* SUTConnectorRequest::mutable_map_to_world_point() {
  if (!has_map_to_world_point()) {
    clear_data_oneof();
    set_has_map_to_world_point();
    data_oneof_.map_to_world_point_ = CreateMaybeMessage< ::metamoto::services::MapToWorldPointRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.map_to_world_point)
  return data_oneof_.map_to_world_point_;
}

// .metamoto.services.MapGetPathRequest map_get_path = 83;
inline bool SUTConnectorRequest::has_map_get_path() const {
  return data_oneof_case() == kMapGetPath;
}
inline void SUTConnectorRequest::set_has_map_get_path() {
  _oneof_case_[0] = kMapGetPath;
}
inline const ::metamoto::services::MapGetPathRequest& SUTConnectorRequest::_internal_map_get_path() const {
  return *data_oneof_.map_get_path_;
}
inline ::metamoto::services::MapGetPathRequest* SUTConnectorRequest::release_map_get_path() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.map_get_path)
  if (has_map_get_path()) {
    clear_has_data_oneof();
      ::metamoto::services::MapGetPathRequest* temp = data_oneof_.map_get_path_;
    data_oneof_.map_get_path_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::MapGetPathRequest& SUTConnectorRequest::map_get_path() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.map_get_path)
  return has_map_get_path()
      ? *data_oneof_.map_get_path_
      : *reinterpret_cast< ::metamoto::services::MapGetPathRequest*>(&::metamoto::services::_MapGetPathRequest_default_instance_);
}
inline ::metamoto::services::MapGetPathRequest* SUTConnectorRequest::mutable_map_get_path() {
  if (!has_map_get_path()) {
    clear_data_oneof();
    set_has_map_get_path();
    data_oneof_.map_get_path_ = CreateMaybeMessage< ::metamoto::services::MapGetPathRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.map_get_path)
  return data_oneof_.map_get_path_;
}

// .metamoto.services.MapGetHeadingRequest map_get_heading = 84;
inline bool SUTConnectorRequest::has_map_get_heading() const {
  return data_oneof_case() == kMapGetHeading;
}
inline void SUTConnectorRequest::set_has_map_get_heading() {
  _oneof_case_[0] = kMapGetHeading;
}
inline const ::metamoto::services::MapGetHeadingRequest& SUTConnectorRequest::_internal_map_get_heading() const {
  return *data_oneof_.map_get_heading_;
}
inline ::metamoto::services::MapGetHeadingRequest* SUTConnectorRequest::release_map_get_heading() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.map_get_heading)
  if (has_map_get_heading()) {
    clear_has_data_oneof();
      ::metamoto::services::MapGetHeadingRequest* temp = data_oneof_.map_get_heading_;
    data_oneof_.map_get_heading_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::MapGetHeadingRequest& SUTConnectorRequest::map_get_heading() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.map_get_heading)
  return has_map_get_heading()
      ? *data_oneof_.map_get_heading_
      : *reinterpret_cast< ::metamoto::services::MapGetHeadingRequest*>(&::metamoto::services::_MapGetHeadingRequest_default_instance_);
}
inline ::metamoto::services::MapGetHeadingRequest* SUTConnectorRequest::mutable_map_get_heading() {
  if (!has_map_get_heading()) {
    clear_data_oneof();
    set_has_map_get_heading();
    data_oneof_.map_get_heading_ = CreateMaybeMessage< ::metamoto::services::MapGetHeadingRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.map_get_heading)
  return data_oneof_.map_get_heading_;
}

// .metamoto.services.RayTracerSetPatternsRequest ray_tracer_set_patterns = 100;
inline bool SUTConnectorRequest::has_ray_tracer_set_patterns() const {
  return data_oneof_case() == kRayTracerSetPatterns;
}
inline void SUTConnectorRequest::set_has_ray_tracer_set_patterns() {
  _oneof_case_[0] = kRayTracerSetPatterns;
}
inline const ::metamoto::services::RayTracerSetPatternsRequest& SUTConnectorRequest::_internal_ray_tracer_set_patterns() const {
  return *data_oneof_.ray_tracer_set_patterns_;
}
inline ::metamoto::services::RayTracerSetPatternsRequest* SUTConnectorRequest::release_ray_tracer_set_patterns() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.ray_tracer_set_patterns)
  if (has_ray_tracer_set_patterns()) {
    clear_has_data_oneof();
      ::metamoto::services::RayTracerSetPatternsRequest* temp = data_oneof_.ray_tracer_set_patterns_;
    data_oneof_.ray_tracer_set_patterns_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::RayTracerSetPatternsRequest& SUTConnectorRequest::ray_tracer_set_patterns() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.ray_tracer_set_patterns)
  return has_ray_tracer_set_patterns()
      ? *data_oneof_.ray_tracer_set_patterns_
      : *reinterpret_cast< ::metamoto::services::RayTracerSetPatternsRequest*>(&::metamoto::services::_RayTracerSetPatternsRequest_default_instance_);
}
inline ::metamoto::services::RayTracerSetPatternsRequest* SUTConnectorRequest::mutable_ray_tracer_set_patterns() {
  if (!has_ray_tracer_set_patterns()) {
    clear_data_oneof();
    set_has_ray_tracer_set_patterns();
    data_oneof_.ray_tracer_set_patterns_ = CreateMaybeMessage< ::metamoto::services::RayTracerSetPatternsRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.ray_tracer_set_patterns)
  return data_oneof_.ray_tracer_set_patterns_;
}

// .metamoto.services.RayTracerTraceRequest ray_tracer_trace = 101;
inline bool SUTConnectorRequest::has_ray_tracer_trace() const {
  return data_oneof_case() == kRayTracerTrace;
}
inline void SUTConnectorRequest::set_has_ray_tracer_trace() {
  _oneof_case_[0] = kRayTracerTrace;
}
inline const ::metamoto::services::RayTracerTraceRequest& SUTConnectorRequest::_internal_ray_tracer_trace() const {
  return *data_oneof_.ray_tracer_trace_;
}
inline ::metamoto::services::RayTracerTraceRequest* SUTConnectorRequest::release_ray_tracer_trace() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.ray_tracer_trace)
  if (has_ray_tracer_trace()) {
    clear_has_data_oneof();
      ::metamoto::services::RayTracerTraceRequest* temp = data_oneof_.ray_tracer_trace_;
    data_oneof_.ray_tracer_trace_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::RayTracerTraceRequest& SUTConnectorRequest::ray_tracer_trace() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.ray_tracer_trace)
  return has_ray_tracer_trace()
      ? *data_oneof_.ray_tracer_trace_
      : *reinterpret_cast< ::metamoto::services::RayTracerTraceRequest*>(&::metamoto::services::_RayTracerTraceRequest_default_instance_);
}
inline ::metamoto::services::RayTracerTraceRequest* SUTConnectorRequest::mutable_ray_tracer_trace() {
  if (!has_ray_tracer_trace()) {
    clear_data_oneof();
    set_has_ray_tracer_trace();
    data_oneof_.ray_tracer_trace_ = CreateMaybeMessage< ::metamoto::services::RayTracerTraceRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.ray_tracer_trace)
  return data_oneof_.ray_tracer_trace_;
}

// .metamoto.services.ReportingAddTimeSeriesValueRequest reporting_add_time_series_value = 120;
inline bool SUTConnectorRequest::has_reporting_add_time_series_value() const {
  return data_oneof_case() == kReportingAddTimeSeriesValue;
}
inline void SUTConnectorRequest::set_has_reporting_add_time_series_value() {
  _oneof_case_[0] = kReportingAddTimeSeriesValue;
}
inline const ::metamoto::services::ReportingAddTimeSeriesValueRequest& SUTConnectorRequest::_internal_reporting_add_time_series_value() const {
  return *data_oneof_.reporting_add_time_series_value_;
}
inline ::metamoto::services::ReportingAddTimeSeriesValueRequest* SUTConnectorRequest::release_reporting_add_time_series_value() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.reporting_add_time_series_value)
  if (has_reporting_add_time_series_value()) {
    clear_has_data_oneof();
      ::metamoto::services::ReportingAddTimeSeriesValueRequest* temp = data_oneof_.reporting_add_time_series_value_;
    data_oneof_.reporting_add_time_series_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ReportingAddTimeSeriesValueRequest& SUTConnectorRequest::reporting_add_time_series_value() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.reporting_add_time_series_value)
  return has_reporting_add_time_series_value()
      ? *data_oneof_.reporting_add_time_series_value_
      : *reinterpret_cast< ::metamoto::services::ReportingAddTimeSeriesValueRequest*>(&::metamoto::services::_ReportingAddTimeSeriesValueRequest_default_instance_);
}
inline ::metamoto::services::ReportingAddTimeSeriesValueRequest* SUTConnectorRequest::mutable_reporting_add_time_series_value() {
  if (!has_reporting_add_time_series_value()) {
    clear_data_oneof();
    set_has_reporting_add_time_series_value();
    data_oneof_.reporting_add_time_series_value_ = CreateMaybeMessage< ::metamoto::services::ReportingAddTimeSeriesValueRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.reporting_add_time_series_value)
  return data_oneof_.reporting_add_time_series_value_;
}

// .metamoto.services.ReportingLogRequest reporting_log = 121;
inline bool SUTConnectorRequest::has_reporting_log() const {
  return data_oneof_case() == kReportingLog;
}
inline void SUTConnectorRequest::set_has_reporting_log() {
  _oneof_case_[0] = kReportingLog;
}
inline const ::metamoto::services::ReportingLogRequest& SUTConnectorRequest::_internal_reporting_log() const {
  return *data_oneof_.reporting_log_;
}
inline ::metamoto::services::ReportingLogRequest* SUTConnectorRequest::release_reporting_log() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.reporting_log)
  if (has_reporting_log()) {
    clear_has_data_oneof();
      ::metamoto::services::ReportingLogRequest* temp = data_oneof_.reporting_log_;
    data_oneof_.reporting_log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ReportingLogRequest& SUTConnectorRequest::reporting_log() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.reporting_log)
  return has_reporting_log()
      ? *data_oneof_.reporting_log_
      : *reinterpret_cast< ::metamoto::services::ReportingLogRequest*>(&::metamoto::services::_ReportingLogRequest_default_instance_);
}
inline ::metamoto::services::ReportingLogRequest* SUTConnectorRequest::mutable_reporting_log() {
  if (!has_reporting_log()) {
    clear_data_oneof();
    set_has_reporting_log();
    data_oneof_.reporting_log_ = CreateMaybeMessage< ::metamoto::services::ReportingLogRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.reporting_log)
  return data_oneof_.reporting_log_;
}

// .metamoto.services.ReportingReportEventRequest reporting_report_event = 122;
inline bool SUTConnectorRequest::has_reporting_report_event() const {
  return data_oneof_case() == kReportingReportEvent;
}
inline void SUTConnectorRequest::set_has_reporting_report_event() {
  _oneof_case_[0] = kReportingReportEvent;
}
inline const ::metamoto::services::ReportingReportEventRequest& SUTConnectorRequest::_internal_reporting_report_event() const {
  return *data_oneof_.reporting_report_event_;
}
inline ::metamoto::services::ReportingReportEventRequest* SUTConnectorRequest::release_reporting_report_event() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.reporting_report_event)
  if (has_reporting_report_event()) {
    clear_has_data_oneof();
      ::metamoto::services::ReportingReportEventRequest* temp = data_oneof_.reporting_report_event_;
    data_oneof_.reporting_report_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ReportingReportEventRequest& SUTConnectorRequest::reporting_report_event() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.reporting_report_event)
  return has_reporting_report_event()
      ? *data_oneof_.reporting_report_event_
      : *reinterpret_cast< ::metamoto::services::ReportingReportEventRequest*>(&::metamoto::services::_ReportingReportEventRequest_default_instance_);
}
inline ::metamoto::services::ReportingReportEventRequest* SUTConnectorRequest::mutable_reporting_report_event() {
  if (!has_reporting_report_event()) {
    clear_data_oneof();
    set_has_reporting_report_event();
    data_oneof_.reporting_report_event_ = CreateMaybeMessage< ::metamoto::services::ReportingReportEventRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.reporting_report_event)
  return data_oneof_.reporting_report_event_;
}

// .metamoto.services.ReportingVisualizeRequest reporting_visualize = 123;
inline bool SUTConnectorRequest::has_reporting_visualize() const {
  return data_oneof_case() == kReportingVisualize;
}
inline void SUTConnectorRequest::set_has_reporting_visualize() {
  _oneof_case_[0] = kReportingVisualize;
}
inline const ::metamoto::services::ReportingVisualizeRequest& SUTConnectorRequest::_internal_reporting_visualize() const {
  return *data_oneof_.reporting_visualize_;
}
inline ::metamoto::services::ReportingVisualizeRequest* SUTConnectorRequest::release_reporting_visualize() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.reporting_visualize)
  if (has_reporting_visualize()) {
    clear_has_data_oneof();
      ::metamoto::services::ReportingVisualizeRequest* temp = data_oneof_.reporting_visualize_;
    data_oneof_.reporting_visualize_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ReportingVisualizeRequest& SUTConnectorRequest::reporting_visualize() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.reporting_visualize)
  return has_reporting_visualize()
      ? *data_oneof_.reporting_visualize_
      : *reinterpret_cast< ::metamoto::services::ReportingVisualizeRequest*>(&::metamoto::services::_ReportingVisualizeRequest_default_instance_);
}
inline ::metamoto::services::ReportingVisualizeRequest* SUTConnectorRequest::mutable_reporting_visualize() {
  if (!has_reporting_visualize()) {
    clear_data_oneof();
    set_has_reporting_visualize();
    data_oneof_.reporting_visualize_ = CreateMaybeMessage< ::metamoto::services::ReportingVisualizeRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.reporting_visualize)
  return data_oneof_.reporting_visualize_;
}

// .metamoto.services.ScenarioUpdateRequest scenario_update = 140;
inline bool SUTConnectorRequest::has_scenario_update() const {
  return data_oneof_case() == kScenarioUpdate;
}
inline void SUTConnectorRequest::set_has_scenario_update() {
  _oneof_case_[0] = kScenarioUpdate;
}
inline const ::metamoto::services::ScenarioUpdateRequest& SUTConnectorRequest::_internal_scenario_update() const {
  return *data_oneof_.scenario_update_;
}
inline ::metamoto::services::ScenarioUpdateRequest* SUTConnectorRequest::release_scenario_update() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.scenario_update)
  if (has_scenario_update()) {
    clear_has_data_oneof();
      ::metamoto::services::ScenarioUpdateRequest* temp = data_oneof_.scenario_update_;
    data_oneof_.scenario_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ScenarioUpdateRequest& SUTConnectorRequest::scenario_update() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.scenario_update)
  return has_scenario_update()
      ? *data_oneof_.scenario_update_
      : *reinterpret_cast< ::metamoto::services::ScenarioUpdateRequest*>(&::metamoto::services::_ScenarioUpdateRequest_default_instance_);
}
inline ::metamoto::services::ScenarioUpdateRequest* SUTConnectorRequest::mutable_scenario_update() {
  if (!has_scenario_update()) {
    clear_data_oneof();
    set_has_scenario_update();
    data_oneof_.scenario_update_ = CreateMaybeMessage< ::metamoto::services::ScenarioUpdateRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.scenario_update)
  return data_oneof_.scenario_update_;
}

// .metamoto.services.ScenarioGetVehicleWaypointsRequest scenario_get_vehicle_waypoints = 141;
inline bool SUTConnectorRequest::has_scenario_get_vehicle_waypoints() const {
  return data_oneof_case() == kScenarioGetVehicleWaypoints;
}
inline void SUTConnectorRequest::set_has_scenario_get_vehicle_waypoints() {
  _oneof_case_[0] = kScenarioGetVehicleWaypoints;
}
inline const ::metamoto::services::ScenarioGetVehicleWaypointsRequest& SUTConnectorRequest::_internal_scenario_get_vehicle_waypoints() const {
  return *data_oneof_.scenario_get_vehicle_waypoints_;
}
inline ::metamoto::services::ScenarioGetVehicleWaypointsRequest* SUTConnectorRequest::release_scenario_get_vehicle_waypoints() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.scenario_get_vehicle_waypoints)
  if (has_scenario_get_vehicle_waypoints()) {
    clear_has_data_oneof();
      ::metamoto::services::ScenarioGetVehicleWaypointsRequest* temp = data_oneof_.scenario_get_vehicle_waypoints_;
    data_oneof_.scenario_get_vehicle_waypoints_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ScenarioGetVehicleWaypointsRequest& SUTConnectorRequest::scenario_get_vehicle_waypoints() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.scenario_get_vehicle_waypoints)
  return has_scenario_get_vehicle_waypoints()
      ? *data_oneof_.scenario_get_vehicle_waypoints_
      : *reinterpret_cast< ::metamoto::services::ScenarioGetVehicleWaypointsRequest*>(&::metamoto::services::_ScenarioGetVehicleWaypointsRequest_default_instance_);
}
inline ::metamoto::services::ScenarioGetVehicleWaypointsRequest* SUTConnectorRequest::mutable_scenario_get_vehicle_waypoints() {
  if (!has_scenario_get_vehicle_waypoints()) {
    clear_data_oneof();
    set_has_scenario_get_vehicle_waypoints();
    data_oneof_.scenario_get_vehicle_waypoints_ = CreateMaybeMessage< ::metamoto::services::ScenarioGetVehicleWaypointsRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.scenario_get_vehicle_waypoints)
  return data_oneof_.scenario_get_vehicle_waypoints_;
}

// .metamoto.services.ScenarioSetVehicleWaypointsRequest scenario_set_vehicle_waypoints = 142;
inline bool SUTConnectorRequest::has_scenario_set_vehicle_waypoints() const {
  return data_oneof_case() == kScenarioSetVehicleWaypoints;
}
inline void SUTConnectorRequest::set_has_scenario_set_vehicle_waypoints() {
  _oneof_case_[0] = kScenarioSetVehicleWaypoints;
}
inline const ::metamoto::services::ScenarioSetVehicleWaypointsRequest& SUTConnectorRequest::_internal_scenario_set_vehicle_waypoints() const {
  return *data_oneof_.scenario_set_vehicle_waypoints_;
}
inline ::metamoto::services::ScenarioSetVehicleWaypointsRequest* SUTConnectorRequest::release_scenario_set_vehicle_waypoints() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.scenario_set_vehicle_waypoints)
  if (has_scenario_set_vehicle_waypoints()) {
    clear_has_data_oneof();
      ::metamoto::services::ScenarioSetVehicleWaypointsRequest* temp = data_oneof_.scenario_set_vehicle_waypoints_;
    data_oneof_.scenario_set_vehicle_waypoints_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ScenarioSetVehicleWaypointsRequest& SUTConnectorRequest::scenario_set_vehicle_waypoints() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.scenario_set_vehicle_waypoints)
  return has_scenario_set_vehicle_waypoints()
      ? *data_oneof_.scenario_set_vehicle_waypoints_
      : *reinterpret_cast< ::metamoto::services::ScenarioSetVehicleWaypointsRequest*>(&::metamoto::services::_ScenarioSetVehicleWaypointsRequest_default_instance_);
}
inline ::metamoto::services::ScenarioSetVehicleWaypointsRequest* SUTConnectorRequest::mutable_scenario_set_vehicle_waypoints() {
  if (!has_scenario_set_vehicle_waypoints()) {
    clear_data_oneof();
    set_has_scenario_set_vehicle_waypoints();
    data_oneof_.scenario_set_vehicle_waypoints_ = CreateMaybeMessage< ::metamoto::services::ScenarioSetVehicleWaypointsRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.scenario_set_vehicle_waypoints)
  return data_oneof_.scenario_set_vehicle_waypoints_;
}

// .metamoto.services.ScenarioSetDriverModelRequest scenario_set_driver_model = 143;
inline bool SUTConnectorRequest::has_scenario_set_driver_model() const {
  return data_oneof_case() == kScenarioSetDriverModel;
}
inline void SUTConnectorRequest::set_has_scenario_set_driver_model() {
  _oneof_case_[0] = kScenarioSetDriverModel;
}
inline const ::metamoto::services::ScenarioSetDriverModelRequest& SUTConnectorRequest::_internal_scenario_set_driver_model() const {
  return *data_oneof_.scenario_set_driver_model_;
}
inline ::metamoto::services::ScenarioSetDriverModelRequest* SUTConnectorRequest::release_scenario_set_driver_model() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.scenario_set_driver_model)
  if (has_scenario_set_driver_model()) {
    clear_has_data_oneof();
      ::metamoto::services::ScenarioSetDriverModelRequest* temp = data_oneof_.scenario_set_driver_model_;
    data_oneof_.scenario_set_driver_model_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ScenarioSetDriverModelRequest& SUTConnectorRequest::scenario_set_driver_model() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.scenario_set_driver_model)
  return has_scenario_set_driver_model()
      ? *data_oneof_.scenario_set_driver_model_
      : *reinterpret_cast< ::metamoto::services::ScenarioSetDriverModelRequest*>(&::metamoto::services::_ScenarioSetDriverModelRequest_default_instance_);
}
inline ::metamoto::services::ScenarioSetDriverModelRequest* SUTConnectorRequest::mutable_scenario_set_driver_model() {
  if (!has_scenario_set_driver_model()) {
    clear_data_oneof();
    set_has_scenario_set_driver_model();
    data_oneof_.scenario_set_driver_model_ = CreateMaybeMessage< ::metamoto::services::ScenarioSetDriverModelRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.scenario_set_driver_model)
  return data_oneof_.scenario_set_driver_model_;
}

// .metamoto.services.ScenarioSetupRequest scenario_setup = 144;
inline bool SUTConnectorRequest::has_scenario_setup() const {
  return data_oneof_case() == kScenarioSetup;
}
inline void SUTConnectorRequest::set_has_scenario_setup() {
  _oneof_case_[0] = kScenarioSetup;
}
inline const ::metamoto::services::ScenarioSetupRequest& SUTConnectorRequest::_internal_scenario_setup() const {
  return *data_oneof_.scenario_setup_;
}
inline ::metamoto::services::ScenarioSetupRequest* SUTConnectorRequest::release_scenario_setup() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.scenario_setup)
  if (has_scenario_setup()) {
    clear_has_data_oneof();
      ::metamoto::services::ScenarioSetupRequest* temp = data_oneof_.scenario_setup_;
    data_oneof_.scenario_setup_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ScenarioSetupRequest& SUTConnectorRequest::scenario_setup() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.scenario_setup)
  return has_scenario_setup()
      ? *data_oneof_.scenario_setup_
      : *reinterpret_cast< ::metamoto::services::ScenarioSetupRequest*>(&::metamoto::services::_ScenarioSetupRequest_default_instance_);
}
inline ::metamoto::services::ScenarioSetupRequest* SUTConnectorRequest::mutable_scenario_setup() {
  if (!has_scenario_setup()) {
    clear_data_oneof();
    set_has_scenario_setup();
    data_oneof_.scenario_setup_ = CreateMaybeMessage< ::metamoto::services::ScenarioSetupRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.scenario_setup)
  return data_oneof_.scenario_setup_;
}

// .metamoto.services.SystemGetResultsSizeRequest system_get_results_size = 160;
inline bool SUTConnectorRequest::has_system_get_results_size() const {
  return data_oneof_case() == kSystemGetResultsSize;
}
inline void SUTConnectorRequest::set_has_system_get_results_size() {
  _oneof_case_[0] = kSystemGetResultsSize;
}
inline const ::metamoto::services::SystemGetResultsSizeRequest& SUTConnectorRequest::_internal_system_get_results_size() const {
  return *data_oneof_.system_get_results_size_;
}
inline ::metamoto::services::SystemGetResultsSizeRequest* SUTConnectorRequest::release_system_get_results_size() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorRequest.system_get_results_size)
  if (has_system_get_results_size()) {
    clear_has_data_oneof();
      ::metamoto::services::SystemGetResultsSizeRequest* temp = data_oneof_.system_get_results_size_;
    data_oneof_.system_get_results_size_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::SystemGetResultsSizeRequest& SUTConnectorRequest::system_get_results_size() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorRequest.system_get_results_size)
  return has_system_get_results_size()
      ? *data_oneof_.system_get_results_size_
      : *reinterpret_cast< ::metamoto::services::SystemGetResultsSizeRequest*>(&::metamoto::services::_SystemGetResultsSizeRequest_default_instance_);
}
inline ::metamoto::services::SystemGetResultsSizeRequest* SUTConnectorRequest::mutable_system_get_results_size() {
  if (!has_system_get_results_size()) {
    clear_data_oneof();
    set_has_system_get_results_size();
    data_oneof_.system_get_results_size_ = CreateMaybeMessage< ::metamoto::services::SystemGetResultsSizeRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorRequest.system_get_results_size)
  return data_oneof_.system_get_results_size_;
}

inline bool SUTConnectorRequest::has_data_oneof() const {
  return data_oneof_case() != DATA_ONEOF_NOT_SET;
}
inline void SUTConnectorRequest::clear_has_data_oneof() {
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}
inline SUTConnectorRequest::DataOneofCase SUTConnectorRequest::data_oneof_case() const {
  return SUTConnectorRequest::DataOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SUTConnectorReply

// .google.rpc.Status status = 1;
inline bool SUTConnectorReply::has_status() const {
  return data_oneof_case() == kStatus;
}
inline void SUTConnectorReply::set_has_status() {
  _oneof_case_[0] = kStatus;
}
inline const ::google::rpc::Status& SUTConnectorReply::_internal_status() const {
  return *data_oneof_.status_;
}
inline ::google::rpc::Status* SUTConnectorReply::release_status() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.status)
  if (has_status()) {
    clear_has_data_oneof();
      ::google::rpc::Status* temp = data_oneof_.status_;
    data_oneof_.status_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::rpc::Status& SUTConnectorReply::status() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.status)
  return has_status()
      ? *data_oneof_.status_
      : *reinterpret_cast< ::google::rpc::Status*>(&::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* SUTConnectorReply::mutable_status() {
  if (!has_status()) {
    clear_data_oneof();
    set_has_status();
    data_oneof_.status_ = CreateMaybeMessage< ::google::rpc::Status >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.status)
  return data_oneof_.status_;
}

// .metamoto.services.SUTConnectorConnectReply connect = 2;
inline bool SUTConnectorReply::has_connect() const {
  return data_oneof_case() == kConnect;
}
inline void SUTConnectorReply::set_has_connect() {
  _oneof_case_[0] = kConnect;
}
inline void SUTConnectorReply::clear_connect() {
  if (has_connect()) {
    delete data_oneof_.connect_;
    clear_has_data_oneof();
  }
}
inline const ::metamoto::services::SUTConnectorConnectReply& SUTConnectorReply::_internal_connect() const {
  return *data_oneof_.connect_;
}
inline ::metamoto::services::SUTConnectorConnectReply* SUTConnectorReply::release_connect() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.connect)
  if (has_connect()) {
    clear_has_data_oneof();
      ::metamoto::services::SUTConnectorConnectReply* temp = data_oneof_.connect_;
    data_oneof_.connect_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::SUTConnectorConnectReply& SUTConnectorReply::connect() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.connect)
  return has_connect()
      ? *data_oneof_.connect_
      : *reinterpret_cast< ::metamoto::services::SUTConnectorConnectReply*>(&::metamoto::services::_SUTConnectorConnectReply_default_instance_);
}
inline ::metamoto::services::SUTConnectorConnectReply* SUTConnectorReply::mutable_connect() {
  if (!has_connect()) {
    clear_data_oneof();
    set_has_connect();
    data_oneof_.connect_ = CreateMaybeMessage< ::metamoto::services::SUTConnectorConnectReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.connect)
  return data_oneof_.connect_;
}

// .metamoto.services.SUTConnectorDisconnectReply disconnect = 3;
inline bool SUTConnectorReply::has_disconnect() const {
  return data_oneof_case() == kDisconnect;
}
inline void SUTConnectorReply::set_has_disconnect() {
  _oneof_case_[0] = kDisconnect;
}
inline void SUTConnectorReply::clear_disconnect() {
  if (has_disconnect()) {
    delete data_oneof_.disconnect_;
    clear_has_data_oneof();
  }
}
inline const ::metamoto::services::SUTConnectorDisconnectReply& SUTConnectorReply::_internal_disconnect() const {
  return *data_oneof_.disconnect_;
}
inline ::metamoto::services::SUTConnectorDisconnectReply* SUTConnectorReply::release_disconnect() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.disconnect)
  if (has_disconnect()) {
    clear_has_data_oneof();
      ::metamoto::services::SUTConnectorDisconnectReply* temp = data_oneof_.disconnect_;
    data_oneof_.disconnect_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::SUTConnectorDisconnectReply& SUTConnectorReply::disconnect() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.disconnect)
  return has_disconnect()
      ? *data_oneof_.disconnect_
      : *reinterpret_cast< ::metamoto::services::SUTConnectorDisconnectReply*>(&::metamoto::services::_SUTConnectorDisconnectReply_default_instance_);
}
inline ::metamoto::services::SUTConnectorDisconnectReply* SUTConnectorReply::mutable_disconnect() {
  if (!has_disconnect()) {
    clear_data_oneof();
    set_has_disconnect();
    data_oneof_.disconnect_ = CreateMaybeMessage< ::metamoto::services::SUTConnectorDisconnectReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.disconnect)
  return data_oneof_.disconnect_;
}

// .metamoto.services.ControllerInitializeRequest controller_initialize = 20;
inline bool SUTConnectorReply::has_controller_initialize() const {
  return data_oneof_case() == kControllerInitialize;
}
inline void SUTConnectorReply::set_has_controller_initialize() {
  _oneof_case_[0] = kControllerInitialize;
}
inline const ::metamoto::services::ControllerInitializeRequest& SUTConnectorReply::_internal_controller_initialize() const {
  return *data_oneof_.controller_initialize_;
}
inline ::metamoto::services::ControllerInitializeRequest* SUTConnectorReply::release_controller_initialize() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.controller_initialize)
  if (has_controller_initialize()) {
    clear_has_data_oneof();
      ::metamoto::services::ControllerInitializeRequest* temp = data_oneof_.controller_initialize_;
    data_oneof_.controller_initialize_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ControllerInitializeRequest& SUTConnectorReply::controller_initialize() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.controller_initialize)
  return has_controller_initialize()
      ? *data_oneof_.controller_initialize_
      : *reinterpret_cast< ::metamoto::services::ControllerInitializeRequest*>(&::metamoto::services::_ControllerInitializeRequest_default_instance_);
}
inline ::metamoto::services::ControllerInitializeRequest* SUTConnectorReply::mutable_controller_initialize() {
  if (!has_controller_initialize()) {
    clear_data_oneof();
    set_has_controller_initialize();
    data_oneof_.controller_initialize_ = CreateMaybeMessage< ::metamoto::services::ControllerInitializeRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.controller_initialize)
  return data_oneof_.controller_initialize_;
}

// .metamoto.services.ControllerUpdateRequest controller_update = 21;
inline bool SUTConnectorReply::has_controller_update() const {
  return data_oneof_case() == kControllerUpdate;
}
inline void SUTConnectorReply::set_has_controller_update() {
  _oneof_case_[0] = kControllerUpdate;
}
inline const ::metamoto::services::ControllerUpdateRequest& SUTConnectorReply::_internal_controller_update() const {
  return *data_oneof_.controller_update_;
}
inline ::metamoto::services::ControllerUpdateRequest* SUTConnectorReply::release_controller_update() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.controller_update)
  if (has_controller_update()) {
    clear_has_data_oneof();
      ::metamoto::services::ControllerUpdateRequest* temp = data_oneof_.controller_update_;
    data_oneof_.controller_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ControllerUpdateRequest& SUTConnectorReply::controller_update() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.controller_update)
  return has_controller_update()
      ? *data_oneof_.controller_update_
      : *reinterpret_cast< ::metamoto::services::ControllerUpdateRequest*>(&::metamoto::services::_ControllerUpdateRequest_default_instance_);
}
inline ::metamoto::services::ControllerUpdateRequest* SUTConnectorReply::mutable_controller_update() {
  if (!has_controller_update()) {
    clear_data_oneof();
    set_has_controller_update();
    data_oneof_.controller_update_ = CreateMaybeMessage< ::metamoto::services::ControllerUpdateRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.controller_update)
  return data_oneof_.controller_update_;
}

// .metamoto.services.ControllerCloseRequest controller_close = 22;
inline bool SUTConnectorReply::has_controller_close() const {
  return data_oneof_case() == kControllerClose;
}
inline void SUTConnectorReply::set_has_controller_close() {
  _oneof_case_[0] = kControllerClose;
}
inline const ::metamoto::services::ControllerCloseRequest& SUTConnectorReply::_internal_controller_close() const {
  return *data_oneof_.controller_close_;
}
inline ::metamoto::services::ControllerCloseRequest* SUTConnectorReply::release_controller_close() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.controller_close)
  if (has_controller_close()) {
    clear_has_data_oneof();
      ::metamoto::services::ControllerCloseRequest* temp = data_oneof_.controller_close_;
    data_oneof_.controller_close_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ControllerCloseRequest& SUTConnectorReply::controller_close() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.controller_close)
  return has_controller_close()
      ? *data_oneof_.controller_close_
      : *reinterpret_cast< ::metamoto::services::ControllerCloseRequest*>(&::metamoto::services::_ControllerCloseRequest_default_instance_);
}
inline ::metamoto::services::ControllerCloseRequest* SUTConnectorReply::mutable_controller_close() {
  if (!has_controller_close()) {
    clear_data_oneof();
    set_has_controller_close();
    data_oneof_.controller_close_ = CreateMaybeMessage< ::metamoto::services::ControllerCloseRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.controller_close)
  return data_oneof_.controller_close_;
}

// .metamoto.services.ControllerSetupRequest controller_setup = 23;
inline bool SUTConnectorReply::has_controller_setup() const {
  return data_oneof_case() == kControllerSetup;
}
inline void SUTConnectorReply::set_has_controller_setup() {
  _oneof_case_[0] = kControllerSetup;
}
inline const ::metamoto::services::ControllerSetupRequest& SUTConnectorReply::_internal_controller_setup() const {
  return *data_oneof_.controller_setup_;
}
inline ::metamoto::services::ControllerSetupRequest* SUTConnectorReply::release_controller_setup() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.controller_setup)
  if (has_controller_setup()) {
    clear_has_data_oneof();
      ::metamoto::services::ControllerSetupRequest* temp = data_oneof_.controller_setup_;
    data_oneof_.controller_setup_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ControllerSetupRequest& SUTConnectorReply::controller_setup() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.controller_setup)
  return has_controller_setup()
      ? *data_oneof_.controller_setup_
      : *reinterpret_cast< ::metamoto::services::ControllerSetupRequest*>(&::metamoto::services::_ControllerSetupRequest_default_instance_);
}
inline ::metamoto::services::ControllerSetupRequest* SUTConnectorReply::mutable_controller_setup() {
  if (!has_controller_setup()) {
    clear_data_oneof();
    set_has_controller_setup();
    data_oneof_.controller_setup_ = CreateMaybeMessage< ::metamoto::services::ControllerSetupRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.controller_setup)
  return data_oneof_.controller_setup_;
}

// .metamoto.services.SensorInitializeRequest sensor_initialize = 40;
inline bool SUTConnectorReply::has_sensor_initialize() const {
  return data_oneof_case() == kSensorInitialize;
}
inline void SUTConnectorReply::set_has_sensor_initialize() {
  _oneof_case_[0] = kSensorInitialize;
}
inline const ::metamoto::services::SensorInitializeRequest& SUTConnectorReply::_internal_sensor_initialize() const {
  return *data_oneof_.sensor_initialize_;
}
inline ::metamoto::services::SensorInitializeRequest* SUTConnectorReply::release_sensor_initialize() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.sensor_initialize)
  if (has_sensor_initialize()) {
    clear_has_data_oneof();
      ::metamoto::services::SensorInitializeRequest* temp = data_oneof_.sensor_initialize_;
    data_oneof_.sensor_initialize_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::SensorInitializeRequest& SUTConnectorReply::sensor_initialize() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.sensor_initialize)
  return has_sensor_initialize()
      ? *data_oneof_.sensor_initialize_
      : *reinterpret_cast< ::metamoto::services::SensorInitializeRequest*>(&::metamoto::services::_SensorInitializeRequest_default_instance_);
}
inline ::metamoto::services::SensorInitializeRequest* SUTConnectorReply::mutable_sensor_initialize() {
  if (!has_sensor_initialize()) {
    clear_data_oneof();
    set_has_sensor_initialize();
    data_oneof_.sensor_initialize_ = CreateMaybeMessage< ::metamoto::services::SensorInitializeRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.sensor_initialize)
  return data_oneof_.sensor_initialize_;
}

// .metamoto.services.SensorUpdateRequest sensor_update = 41;
inline bool SUTConnectorReply::has_sensor_update() const {
  return data_oneof_case() == kSensorUpdate;
}
inline void SUTConnectorReply::set_has_sensor_update() {
  _oneof_case_[0] = kSensorUpdate;
}
inline const ::metamoto::services::SensorUpdateRequest& SUTConnectorReply::_internal_sensor_update() const {
  return *data_oneof_.sensor_update_;
}
inline ::metamoto::services::SensorUpdateRequest* SUTConnectorReply::release_sensor_update() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.sensor_update)
  if (has_sensor_update()) {
    clear_has_data_oneof();
      ::metamoto::services::SensorUpdateRequest* temp = data_oneof_.sensor_update_;
    data_oneof_.sensor_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::SensorUpdateRequest& SUTConnectorReply::sensor_update() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.sensor_update)
  return has_sensor_update()
      ? *data_oneof_.sensor_update_
      : *reinterpret_cast< ::metamoto::services::SensorUpdateRequest*>(&::metamoto::services::_SensorUpdateRequest_default_instance_);
}
inline ::metamoto::services::SensorUpdateRequest* SUTConnectorReply::mutable_sensor_update() {
  if (!has_sensor_update()) {
    clear_data_oneof();
    set_has_sensor_update();
    data_oneof_.sensor_update_ = CreateMaybeMessage< ::metamoto::services::SensorUpdateRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.sensor_update)
  return data_oneof_.sensor_update_;
}

// .metamoto.services.SensorCloseRequest sensor_close = 42;
inline bool SUTConnectorReply::has_sensor_close() const {
  return data_oneof_case() == kSensorClose;
}
inline void SUTConnectorReply::set_has_sensor_close() {
  _oneof_case_[0] = kSensorClose;
}
inline const ::metamoto::services::SensorCloseRequest& SUTConnectorReply::_internal_sensor_close() const {
  return *data_oneof_.sensor_close_;
}
inline ::metamoto::services::SensorCloseRequest* SUTConnectorReply::release_sensor_close() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.sensor_close)
  if (has_sensor_close()) {
    clear_has_data_oneof();
      ::metamoto::services::SensorCloseRequest* temp = data_oneof_.sensor_close_;
    data_oneof_.sensor_close_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::SensorCloseRequest& SUTConnectorReply::sensor_close() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.sensor_close)
  return has_sensor_close()
      ? *data_oneof_.sensor_close_
      : *reinterpret_cast< ::metamoto::services::SensorCloseRequest*>(&::metamoto::services::_SensorCloseRequest_default_instance_);
}
inline ::metamoto::services::SensorCloseRequest* SUTConnectorReply::mutable_sensor_close() {
  if (!has_sensor_close()) {
    clear_data_oneof();
    set_has_sensor_close();
    data_oneof_.sensor_close_ = CreateMaybeMessage< ::metamoto::services::SensorCloseRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.sensor_close)
  return data_oneof_.sensor_close_;
}

// .metamoto.services.SensorSetupRequest sensor_setup = 43;
inline bool SUTConnectorReply::has_sensor_setup() const {
  return data_oneof_case() == kSensorSetup;
}
inline void SUTConnectorReply::set_has_sensor_setup() {
  _oneof_case_[0] = kSensorSetup;
}
inline const ::metamoto::services::SensorSetupRequest& SUTConnectorReply::_internal_sensor_setup() const {
  return *data_oneof_.sensor_setup_;
}
inline ::metamoto::services::SensorSetupRequest* SUTConnectorReply::release_sensor_setup() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.sensor_setup)
  if (has_sensor_setup()) {
    clear_has_data_oneof();
      ::metamoto::services::SensorSetupRequest* temp = data_oneof_.sensor_setup_;
    data_oneof_.sensor_setup_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::SensorSetupRequest& SUTConnectorReply::sensor_setup() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.sensor_setup)
  return has_sensor_setup()
      ? *data_oneof_.sensor_setup_
      : *reinterpret_cast< ::metamoto::services::SensorSetupRequest*>(&::metamoto::services::_SensorSetupRequest_default_instance_);
}
inline ::metamoto::services::SensorSetupRequest* SUTConnectorReply::mutable_sensor_setup() {
  if (!has_sensor_setup()) {
    clear_data_oneof();
    set_has_sensor_setup();
    data_oneof_.sensor_setup_ = CreateMaybeMessage< ::metamoto::services::SensorSetupRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.sensor_setup)
  return data_oneof_.sensor_setup_;
}

// .metamoto.services.DataBusPublishReply data_bus_publish = 60;
inline bool SUTConnectorReply::has_data_bus_publish() const {
  return data_oneof_case() == kDataBusPublish;
}
inline void SUTConnectorReply::set_has_data_bus_publish() {
  _oneof_case_[0] = kDataBusPublish;
}
inline const ::metamoto::services::DataBusPublishReply& SUTConnectorReply::_internal_data_bus_publish() const {
  return *data_oneof_.data_bus_publish_;
}
inline ::metamoto::services::DataBusPublishReply* SUTConnectorReply::release_data_bus_publish() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.data_bus_publish)
  if (has_data_bus_publish()) {
    clear_has_data_oneof();
      ::metamoto::services::DataBusPublishReply* temp = data_oneof_.data_bus_publish_;
    data_oneof_.data_bus_publish_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::DataBusPublishReply& SUTConnectorReply::data_bus_publish() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.data_bus_publish)
  return has_data_bus_publish()
      ? *data_oneof_.data_bus_publish_
      : *reinterpret_cast< ::metamoto::services::DataBusPublishReply*>(&::metamoto::services::_DataBusPublishReply_default_instance_);
}
inline ::metamoto::services::DataBusPublishReply* SUTConnectorReply::mutable_data_bus_publish() {
  if (!has_data_bus_publish()) {
    clear_data_oneof();
    set_has_data_bus_publish();
    data_oneof_.data_bus_publish_ = CreateMaybeMessage< ::metamoto::services::DataBusPublishReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.data_bus_publish)
  return data_oneof_.data_bus_publish_;
}

// .metamoto.services.DataBusSubscribeReply data_bus_subscribe = 61;
inline bool SUTConnectorReply::has_data_bus_subscribe() const {
  return data_oneof_case() == kDataBusSubscribe;
}
inline void SUTConnectorReply::set_has_data_bus_subscribe() {
  _oneof_case_[0] = kDataBusSubscribe;
}
inline const ::metamoto::services::DataBusSubscribeReply& SUTConnectorReply::_internal_data_bus_subscribe() const {
  return *data_oneof_.data_bus_subscribe_;
}
inline ::metamoto::services::DataBusSubscribeReply* SUTConnectorReply::release_data_bus_subscribe() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.data_bus_subscribe)
  if (has_data_bus_subscribe()) {
    clear_has_data_oneof();
      ::metamoto::services::DataBusSubscribeReply* temp = data_oneof_.data_bus_subscribe_;
    data_oneof_.data_bus_subscribe_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::DataBusSubscribeReply& SUTConnectorReply::data_bus_subscribe() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.data_bus_subscribe)
  return has_data_bus_subscribe()
      ? *data_oneof_.data_bus_subscribe_
      : *reinterpret_cast< ::metamoto::services::DataBusSubscribeReply*>(&::metamoto::services::_DataBusSubscribeReply_default_instance_);
}
inline ::metamoto::services::DataBusSubscribeReply* SUTConnectorReply::mutable_data_bus_subscribe() {
  if (!has_data_bus_subscribe()) {
    clear_data_oneof();
    set_has_data_bus_subscribe();
    data_oneof_.data_bus_subscribe_ = CreateMaybeMessage< ::metamoto::services::DataBusSubscribeReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.data_bus_subscribe)
  return data_oneof_.data_bus_subscribe_;
}

// .metamoto.services.DataBusWriteReply data_bus_write = 62;
inline bool SUTConnectorReply::has_data_bus_write() const {
  return data_oneof_case() == kDataBusWrite;
}
inline void SUTConnectorReply::set_has_data_bus_write() {
  _oneof_case_[0] = kDataBusWrite;
}
inline const ::metamoto::services::DataBusWriteReply& SUTConnectorReply::_internal_data_bus_write() const {
  return *data_oneof_.data_bus_write_;
}
inline ::metamoto::services::DataBusWriteReply* SUTConnectorReply::release_data_bus_write() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.data_bus_write)
  if (has_data_bus_write()) {
    clear_has_data_oneof();
      ::metamoto::services::DataBusWriteReply* temp = data_oneof_.data_bus_write_;
    data_oneof_.data_bus_write_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::DataBusWriteReply& SUTConnectorReply::data_bus_write() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.data_bus_write)
  return has_data_bus_write()
      ? *data_oneof_.data_bus_write_
      : *reinterpret_cast< ::metamoto::services::DataBusWriteReply*>(&::metamoto::services::_DataBusWriteReply_default_instance_);
}
inline ::metamoto::services::DataBusWriteReply* SUTConnectorReply::mutable_data_bus_write() {
  if (!has_data_bus_write()) {
    clear_data_oneof();
    set_has_data_bus_write();
    data_oneof_.data_bus_write_ = CreateMaybeMessage< ::metamoto::services::DataBusWriteReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.data_bus_write)
  return data_oneof_.data_bus_write_;
}

// .metamoto.services.DataBusReadReply data_bus_read = 63;
inline bool SUTConnectorReply::has_data_bus_read() const {
  return data_oneof_case() == kDataBusRead;
}
inline void SUTConnectorReply::set_has_data_bus_read() {
  _oneof_case_[0] = kDataBusRead;
}
inline const ::metamoto::services::DataBusReadReply& SUTConnectorReply::_internal_data_bus_read() const {
  return *data_oneof_.data_bus_read_;
}
inline ::metamoto::services::DataBusReadReply* SUTConnectorReply::release_data_bus_read() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.data_bus_read)
  if (has_data_bus_read()) {
    clear_has_data_oneof();
      ::metamoto::services::DataBusReadReply* temp = data_oneof_.data_bus_read_;
    data_oneof_.data_bus_read_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::DataBusReadReply& SUTConnectorReply::data_bus_read() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.data_bus_read)
  return has_data_bus_read()
      ? *data_oneof_.data_bus_read_
      : *reinterpret_cast< ::metamoto::services::DataBusReadReply*>(&::metamoto::services::_DataBusReadReply_default_instance_);
}
inline ::metamoto::services::DataBusReadReply* SUTConnectorReply::mutable_data_bus_read() {
  if (!has_data_bus_read()) {
    clear_data_oneof();
    set_has_data_bus_read();
    data_oneof_.data_bus_read_ = CreateMaybeMessage< ::metamoto::services::DataBusReadReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.data_bus_read)
  return data_oneof_.data_bus_read_;
}

// .metamoto.services.DataBusReadAllReply data_bus_read_all = 64;
inline bool SUTConnectorReply::has_data_bus_read_all() const {
  return data_oneof_case() == kDataBusReadAll;
}
inline void SUTConnectorReply::set_has_data_bus_read_all() {
  _oneof_case_[0] = kDataBusReadAll;
}
inline const ::metamoto::services::DataBusReadAllReply& SUTConnectorReply::_internal_data_bus_read_all() const {
  return *data_oneof_.data_bus_read_all_;
}
inline ::metamoto::services::DataBusReadAllReply* SUTConnectorReply::release_data_bus_read_all() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.data_bus_read_all)
  if (has_data_bus_read_all()) {
    clear_has_data_oneof();
      ::metamoto::services::DataBusReadAllReply* temp = data_oneof_.data_bus_read_all_;
    data_oneof_.data_bus_read_all_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::DataBusReadAllReply& SUTConnectorReply::data_bus_read_all() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.data_bus_read_all)
  return has_data_bus_read_all()
      ? *data_oneof_.data_bus_read_all_
      : *reinterpret_cast< ::metamoto::services::DataBusReadAllReply*>(&::metamoto::services::_DataBusReadAllReply_default_instance_);
}
inline ::metamoto::services::DataBusReadAllReply* SUTConnectorReply::mutable_data_bus_read_all() {
  if (!has_data_bus_read_all()) {
    clear_data_oneof();
    set_has_data_bus_read_all();
    data_oneof_.data_bus_read_all_ = CreateMaybeMessage< ::metamoto::services::DataBusReadAllReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.data_bus_read_all)
  return data_oneof_.data_bus_read_all_;
}

// .metamoto.services.DataBusReadLastReply data_bus_read_last = 65;
inline bool SUTConnectorReply::has_data_bus_read_last() const {
  return data_oneof_case() == kDataBusReadLast;
}
inline void SUTConnectorReply::set_has_data_bus_read_last() {
  _oneof_case_[0] = kDataBusReadLast;
}
inline const ::metamoto::services::DataBusReadLastReply& SUTConnectorReply::_internal_data_bus_read_last() const {
  return *data_oneof_.data_bus_read_last_;
}
inline ::metamoto::services::DataBusReadLastReply* SUTConnectorReply::release_data_bus_read_last() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.data_bus_read_last)
  if (has_data_bus_read_last()) {
    clear_has_data_oneof();
      ::metamoto::services::DataBusReadLastReply* temp = data_oneof_.data_bus_read_last_;
    data_oneof_.data_bus_read_last_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::DataBusReadLastReply& SUTConnectorReply::data_bus_read_last() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.data_bus_read_last)
  return has_data_bus_read_last()
      ? *data_oneof_.data_bus_read_last_
      : *reinterpret_cast< ::metamoto::services::DataBusReadLastReply*>(&::metamoto::services::_DataBusReadLastReply_default_instance_);
}
inline ::metamoto::services::DataBusReadLastReply* SUTConnectorReply::mutable_data_bus_read_last() {
  if (!has_data_bus_read_last()) {
    clear_data_oneof();
    set_has_data_bus_read_last();
    data_oneof_.data_bus_read_last_ = CreateMaybeMessage< ::metamoto::services::DataBusReadLastReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.data_bus_read_last)
  return data_oneof_.data_bus_read_last_;
}

// .metamoto.services.MapGetRoadNetworkReply map_get_road_network = 80;
inline bool SUTConnectorReply::has_map_get_road_network() const {
  return data_oneof_case() == kMapGetRoadNetwork;
}
inline void SUTConnectorReply::set_has_map_get_road_network() {
  _oneof_case_[0] = kMapGetRoadNetwork;
}
inline const ::metamoto::services::MapGetRoadNetworkReply& SUTConnectorReply::_internal_map_get_road_network() const {
  return *data_oneof_.map_get_road_network_;
}
inline ::metamoto::services::MapGetRoadNetworkReply* SUTConnectorReply::release_map_get_road_network() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.map_get_road_network)
  if (has_map_get_road_network()) {
    clear_has_data_oneof();
      ::metamoto::services::MapGetRoadNetworkReply* temp = data_oneof_.map_get_road_network_;
    data_oneof_.map_get_road_network_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::MapGetRoadNetworkReply& SUTConnectorReply::map_get_road_network() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.map_get_road_network)
  return has_map_get_road_network()
      ? *data_oneof_.map_get_road_network_
      : *reinterpret_cast< ::metamoto::services::MapGetRoadNetworkReply*>(&::metamoto::services::_MapGetRoadNetworkReply_default_instance_);
}
inline ::metamoto::services::MapGetRoadNetworkReply* SUTConnectorReply::mutable_map_get_road_network() {
  if (!has_map_get_road_network()) {
    clear_data_oneof();
    set_has_map_get_road_network();
    data_oneof_.map_get_road_network_ = CreateMaybeMessage< ::metamoto::services::MapGetRoadNetworkReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.map_get_road_network)
  return data_oneof_.map_get_road_network_;
}

// .metamoto.services.MapToRoadPointReply map_to_road_point = 81;
inline bool SUTConnectorReply::has_map_to_road_point() const {
  return data_oneof_case() == kMapToRoadPoint;
}
inline void SUTConnectorReply::set_has_map_to_road_point() {
  _oneof_case_[0] = kMapToRoadPoint;
}
inline const ::metamoto::services::MapToRoadPointReply& SUTConnectorReply::_internal_map_to_road_point() const {
  return *data_oneof_.map_to_road_point_;
}
inline ::metamoto::services::MapToRoadPointReply* SUTConnectorReply::release_map_to_road_point() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.map_to_road_point)
  if (has_map_to_road_point()) {
    clear_has_data_oneof();
      ::metamoto::services::MapToRoadPointReply* temp = data_oneof_.map_to_road_point_;
    data_oneof_.map_to_road_point_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::MapToRoadPointReply& SUTConnectorReply::map_to_road_point() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.map_to_road_point)
  return has_map_to_road_point()
      ? *data_oneof_.map_to_road_point_
      : *reinterpret_cast< ::metamoto::services::MapToRoadPointReply*>(&::metamoto::services::_MapToRoadPointReply_default_instance_);
}
inline ::metamoto::services::MapToRoadPointReply* SUTConnectorReply::mutable_map_to_road_point() {
  if (!has_map_to_road_point()) {
    clear_data_oneof();
    set_has_map_to_road_point();
    data_oneof_.map_to_road_point_ = CreateMaybeMessage< ::metamoto::services::MapToRoadPointReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.map_to_road_point)
  return data_oneof_.map_to_road_point_;
}

// .metamoto.services.MapToWorldPointReply map_to_world_point = 82;
inline bool SUTConnectorReply::has_map_to_world_point() const {
  return data_oneof_case() == kMapToWorldPoint;
}
inline void SUTConnectorReply::set_has_map_to_world_point() {
  _oneof_case_[0] = kMapToWorldPoint;
}
inline const ::metamoto::services::MapToWorldPointReply& SUTConnectorReply::_internal_map_to_world_point() const {
  return *data_oneof_.map_to_world_point_;
}
inline ::metamoto::services::MapToWorldPointReply* SUTConnectorReply::release_map_to_world_point() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.map_to_world_point)
  if (has_map_to_world_point()) {
    clear_has_data_oneof();
      ::metamoto::services::MapToWorldPointReply* temp = data_oneof_.map_to_world_point_;
    data_oneof_.map_to_world_point_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::MapToWorldPointReply& SUTConnectorReply::map_to_world_point() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.map_to_world_point)
  return has_map_to_world_point()
      ? *data_oneof_.map_to_world_point_
      : *reinterpret_cast< ::metamoto::services::MapToWorldPointReply*>(&::metamoto::services::_MapToWorldPointReply_default_instance_);
}
inline ::metamoto::services::MapToWorldPointReply* SUTConnectorReply::mutable_map_to_world_point() {
  if (!has_map_to_world_point()) {
    clear_data_oneof();
    set_has_map_to_world_point();
    data_oneof_.map_to_world_point_ = CreateMaybeMessage< ::metamoto::services::MapToWorldPointReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.map_to_world_point)
  return data_oneof_.map_to_world_point_;
}

// .metamoto.services.MapGetPathReply map_get_path = 83;
inline bool SUTConnectorReply::has_map_get_path() const {
  return data_oneof_case() == kMapGetPath;
}
inline void SUTConnectorReply::set_has_map_get_path() {
  _oneof_case_[0] = kMapGetPath;
}
inline const ::metamoto::services::MapGetPathReply& SUTConnectorReply::_internal_map_get_path() const {
  return *data_oneof_.map_get_path_;
}
inline ::metamoto::services::MapGetPathReply* SUTConnectorReply::release_map_get_path() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.map_get_path)
  if (has_map_get_path()) {
    clear_has_data_oneof();
      ::metamoto::services::MapGetPathReply* temp = data_oneof_.map_get_path_;
    data_oneof_.map_get_path_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::MapGetPathReply& SUTConnectorReply::map_get_path() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.map_get_path)
  return has_map_get_path()
      ? *data_oneof_.map_get_path_
      : *reinterpret_cast< ::metamoto::services::MapGetPathReply*>(&::metamoto::services::_MapGetPathReply_default_instance_);
}
inline ::metamoto::services::MapGetPathReply* SUTConnectorReply::mutable_map_get_path() {
  if (!has_map_get_path()) {
    clear_data_oneof();
    set_has_map_get_path();
    data_oneof_.map_get_path_ = CreateMaybeMessage< ::metamoto::services::MapGetPathReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.map_get_path)
  return data_oneof_.map_get_path_;
}

// .metamoto.services.MapGetHeadingReply map_get_heading = 84;
inline bool SUTConnectorReply::has_map_get_heading() const {
  return data_oneof_case() == kMapGetHeading;
}
inline void SUTConnectorReply::set_has_map_get_heading() {
  _oneof_case_[0] = kMapGetHeading;
}
inline const ::metamoto::services::MapGetHeadingReply& SUTConnectorReply::_internal_map_get_heading() const {
  return *data_oneof_.map_get_heading_;
}
inline ::metamoto::services::MapGetHeadingReply* SUTConnectorReply::release_map_get_heading() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.map_get_heading)
  if (has_map_get_heading()) {
    clear_has_data_oneof();
      ::metamoto::services::MapGetHeadingReply* temp = data_oneof_.map_get_heading_;
    data_oneof_.map_get_heading_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::MapGetHeadingReply& SUTConnectorReply::map_get_heading() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.map_get_heading)
  return has_map_get_heading()
      ? *data_oneof_.map_get_heading_
      : *reinterpret_cast< ::metamoto::services::MapGetHeadingReply*>(&::metamoto::services::_MapGetHeadingReply_default_instance_);
}
inline ::metamoto::services::MapGetHeadingReply* SUTConnectorReply::mutable_map_get_heading() {
  if (!has_map_get_heading()) {
    clear_data_oneof();
    set_has_map_get_heading();
    data_oneof_.map_get_heading_ = CreateMaybeMessage< ::metamoto::services::MapGetHeadingReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.map_get_heading)
  return data_oneof_.map_get_heading_;
}

// .metamoto.services.RayTracerSetPatternsReply ray_tracer_set_patterns = 100;
inline bool SUTConnectorReply::has_ray_tracer_set_patterns() const {
  return data_oneof_case() == kRayTracerSetPatterns;
}
inline void SUTConnectorReply::set_has_ray_tracer_set_patterns() {
  _oneof_case_[0] = kRayTracerSetPatterns;
}
inline const ::metamoto::services::RayTracerSetPatternsReply& SUTConnectorReply::_internal_ray_tracer_set_patterns() const {
  return *data_oneof_.ray_tracer_set_patterns_;
}
inline ::metamoto::services::RayTracerSetPatternsReply* SUTConnectorReply::release_ray_tracer_set_patterns() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.ray_tracer_set_patterns)
  if (has_ray_tracer_set_patterns()) {
    clear_has_data_oneof();
      ::metamoto::services::RayTracerSetPatternsReply* temp = data_oneof_.ray_tracer_set_patterns_;
    data_oneof_.ray_tracer_set_patterns_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::RayTracerSetPatternsReply& SUTConnectorReply::ray_tracer_set_patterns() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.ray_tracer_set_patterns)
  return has_ray_tracer_set_patterns()
      ? *data_oneof_.ray_tracer_set_patterns_
      : *reinterpret_cast< ::metamoto::services::RayTracerSetPatternsReply*>(&::metamoto::services::_RayTracerSetPatternsReply_default_instance_);
}
inline ::metamoto::services::RayTracerSetPatternsReply* SUTConnectorReply::mutable_ray_tracer_set_patterns() {
  if (!has_ray_tracer_set_patterns()) {
    clear_data_oneof();
    set_has_ray_tracer_set_patterns();
    data_oneof_.ray_tracer_set_patterns_ = CreateMaybeMessage< ::metamoto::services::RayTracerSetPatternsReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.ray_tracer_set_patterns)
  return data_oneof_.ray_tracer_set_patterns_;
}

// .metamoto.services.RayTracerTraceReply ray_tracer_trace = 101;
inline bool SUTConnectorReply::has_ray_tracer_trace() const {
  return data_oneof_case() == kRayTracerTrace;
}
inline void SUTConnectorReply::set_has_ray_tracer_trace() {
  _oneof_case_[0] = kRayTracerTrace;
}
inline const ::metamoto::services::RayTracerTraceReply& SUTConnectorReply::_internal_ray_tracer_trace() const {
  return *data_oneof_.ray_tracer_trace_;
}
inline ::metamoto::services::RayTracerTraceReply* SUTConnectorReply::release_ray_tracer_trace() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.ray_tracer_trace)
  if (has_ray_tracer_trace()) {
    clear_has_data_oneof();
      ::metamoto::services::RayTracerTraceReply* temp = data_oneof_.ray_tracer_trace_;
    data_oneof_.ray_tracer_trace_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::RayTracerTraceReply& SUTConnectorReply::ray_tracer_trace() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.ray_tracer_trace)
  return has_ray_tracer_trace()
      ? *data_oneof_.ray_tracer_trace_
      : *reinterpret_cast< ::metamoto::services::RayTracerTraceReply*>(&::metamoto::services::_RayTracerTraceReply_default_instance_);
}
inline ::metamoto::services::RayTracerTraceReply* SUTConnectorReply::mutable_ray_tracer_trace() {
  if (!has_ray_tracer_trace()) {
    clear_data_oneof();
    set_has_ray_tracer_trace();
    data_oneof_.ray_tracer_trace_ = CreateMaybeMessage< ::metamoto::services::RayTracerTraceReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.ray_tracer_trace)
  return data_oneof_.ray_tracer_trace_;
}

// .metamoto.services.ReportingAddTimeSeriesValueReply reporting_add_time_series_value = 120;
inline bool SUTConnectorReply::has_reporting_add_time_series_value() const {
  return data_oneof_case() == kReportingAddTimeSeriesValue;
}
inline void SUTConnectorReply::set_has_reporting_add_time_series_value() {
  _oneof_case_[0] = kReportingAddTimeSeriesValue;
}
inline const ::metamoto::services::ReportingAddTimeSeriesValueReply& SUTConnectorReply::_internal_reporting_add_time_series_value() const {
  return *data_oneof_.reporting_add_time_series_value_;
}
inline ::metamoto::services::ReportingAddTimeSeriesValueReply* SUTConnectorReply::release_reporting_add_time_series_value() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.reporting_add_time_series_value)
  if (has_reporting_add_time_series_value()) {
    clear_has_data_oneof();
      ::metamoto::services::ReportingAddTimeSeriesValueReply* temp = data_oneof_.reporting_add_time_series_value_;
    data_oneof_.reporting_add_time_series_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ReportingAddTimeSeriesValueReply& SUTConnectorReply::reporting_add_time_series_value() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.reporting_add_time_series_value)
  return has_reporting_add_time_series_value()
      ? *data_oneof_.reporting_add_time_series_value_
      : *reinterpret_cast< ::metamoto::services::ReportingAddTimeSeriesValueReply*>(&::metamoto::services::_ReportingAddTimeSeriesValueReply_default_instance_);
}
inline ::metamoto::services::ReportingAddTimeSeriesValueReply* SUTConnectorReply::mutable_reporting_add_time_series_value() {
  if (!has_reporting_add_time_series_value()) {
    clear_data_oneof();
    set_has_reporting_add_time_series_value();
    data_oneof_.reporting_add_time_series_value_ = CreateMaybeMessage< ::metamoto::services::ReportingAddTimeSeriesValueReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.reporting_add_time_series_value)
  return data_oneof_.reporting_add_time_series_value_;
}

// .metamoto.services.ReportingLogReply reporting_log = 121;
inline bool SUTConnectorReply::has_reporting_log() const {
  return data_oneof_case() == kReportingLog;
}
inline void SUTConnectorReply::set_has_reporting_log() {
  _oneof_case_[0] = kReportingLog;
}
inline const ::metamoto::services::ReportingLogReply& SUTConnectorReply::_internal_reporting_log() const {
  return *data_oneof_.reporting_log_;
}
inline ::metamoto::services::ReportingLogReply* SUTConnectorReply::release_reporting_log() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.reporting_log)
  if (has_reporting_log()) {
    clear_has_data_oneof();
      ::metamoto::services::ReportingLogReply* temp = data_oneof_.reporting_log_;
    data_oneof_.reporting_log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ReportingLogReply& SUTConnectorReply::reporting_log() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.reporting_log)
  return has_reporting_log()
      ? *data_oneof_.reporting_log_
      : *reinterpret_cast< ::metamoto::services::ReportingLogReply*>(&::metamoto::services::_ReportingLogReply_default_instance_);
}
inline ::metamoto::services::ReportingLogReply* SUTConnectorReply::mutable_reporting_log() {
  if (!has_reporting_log()) {
    clear_data_oneof();
    set_has_reporting_log();
    data_oneof_.reporting_log_ = CreateMaybeMessage< ::metamoto::services::ReportingLogReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.reporting_log)
  return data_oneof_.reporting_log_;
}

// .metamoto.services.ReportingReportEventReply reporting_report_event = 122;
inline bool SUTConnectorReply::has_reporting_report_event() const {
  return data_oneof_case() == kReportingReportEvent;
}
inline void SUTConnectorReply::set_has_reporting_report_event() {
  _oneof_case_[0] = kReportingReportEvent;
}
inline const ::metamoto::services::ReportingReportEventReply& SUTConnectorReply::_internal_reporting_report_event() const {
  return *data_oneof_.reporting_report_event_;
}
inline ::metamoto::services::ReportingReportEventReply* SUTConnectorReply::release_reporting_report_event() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.reporting_report_event)
  if (has_reporting_report_event()) {
    clear_has_data_oneof();
      ::metamoto::services::ReportingReportEventReply* temp = data_oneof_.reporting_report_event_;
    data_oneof_.reporting_report_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ReportingReportEventReply& SUTConnectorReply::reporting_report_event() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.reporting_report_event)
  return has_reporting_report_event()
      ? *data_oneof_.reporting_report_event_
      : *reinterpret_cast< ::metamoto::services::ReportingReportEventReply*>(&::metamoto::services::_ReportingReportEventReply_default_instance_);
}
inline ::metamoto::services::ReportingReportEventReply* SUTConnectorReply::mutable_reporting_report_event() {
  if (!has_reporting_report_event()) {
    clear_data_oneof();
    set_has_reporting_report_event();
    data_oneof_.reporting_report_event_ = CreateMaybeMessage< ::metamoto::services::ReportingReportEventReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.reporting_report_event)
  return data_oneof_.reporting_report_event_;
}

// .metamoto.services.ReportingVisualizeReply reporting_visualize = 123;
inline bool SUTConnectorReply::has_reporting_visualize() const {
  return data_oneof_case() == kReportingVisualize;
}
inline void SUTConnectorReply::set_has_reporting_visualize() {
  _oneof_case_[0] = kReportingVisualize;
}
inline const ::metamoto::services::ReportingVisualizeReply& SUTConnectorReply::_internal_reporting_visualize() const {
  return *data_oneof_.reporting_visualize_;
}
inline ::metamoto::services::ReportingVisualizeReply* SUTConnectorReply::release_reporting_visualize() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.reporting_visualize)
  if (has_reporting_visualize()) {
    clear_has_data_oneof();
      ::metamoto::services::ReportingVisualizeReply* temp = data_oneof_.reporting_visualize_;
    data_oneof_.reporting_visualize_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ReportingVisualizeReply& SUTConnectorReply::reporting_visualize() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.reporting_visualize)
  return has_reporting_visualize()
      ? *data_oneof_.reporting_visualize_
      : *reinterpret_cast< ::metamoto::services::ReportingVisualizeReply*>(&::metamoto::services::_ReportingVisualizeReply_default_instance_);
}
inline ::metamoto::services::ReportingVisualizeReply* SUTConnectorReply::mutable_reporting_visualize() {
  if (!has_reporting_visualize()) {
    clear_data_oneof();
    set_has_reporting_visualize();
    data_oneof_.reporting_visualize_ = CreateMaybeMessage< ::metamoto::services::ReportingVisualizeReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.reporting_visualize)
  return data_oneof_.reporting_visualize_;
}

// .metamoto.services.ScenarioUpdateReply scenario_update = 140;
inline bool SUTConnectorReply::has_scenario_update() const {
  return data_oneof_case() == kScenarioUpdate;
}
inline void SUTConnectorReply::set_has_scenario_update() {
  _oneof_case_[0] = kScenarioUpdate;
}
inline const ::metamoto::services::ScenarioUpdateReply& SUTConnectorReply::_internal_scenario_update() const {
  return *data_oneof_.scenario_update_;
}
inline ::metamoto::services::ScenarioUpdateReply* SUTConnectorReply::release_scenario_update() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.scenario_update)
  if (has_scenario_update()) {
    clear_has_data_oneof();
      ::metamoto::services::ScenarioUpdateReply* temp = data_oneof_.scenario_update_;
    data_oneof_.scenario_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ScenarioUpdateReply& SUTConnectorReply::scenario_update() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.scenario_update)
  return has_scenario_update()
      ? *data_oneof_.scenario_update_
      : *reinterpret_cast< ::metamoto::services::ScenarioUpdateReply*>(&::metamoto::services::_ScenarioUpdateReply_default_instance_);
}
inline ::metamoto::services::ScenarioUpdateReply* SUTConnectorReply::mutable_scenario_update() {
  if (!has_scenario_update()) {
    clear_data_oneof();
    set_has_scenario_update();
    data_oneof_.scenario_update_ = CreateMaybeMessage< ::metamoto::services::ScenarioUpdateReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.scenario_update)
  return data_oneof_.scenario_update_;
}

// .metamoto.services.ScenarioGetVehicleWaypointsReply scenario_get_vehicle_waypoints = 141;
inline bool SUTConnectorReply::has_scenario_get_vehicle_waypoints() const {
  return data_oneof_case() == kScenarioGetVehicleWaypoints;
}
inline void SUTConnectorReply::set_has_scenario_get_vehicle_waypoints() {
  _oneof_case_[0] = kScenarioGetVehicleWaypoints;
}
inline const ::metamoto::services::ScenarioGetVehicleWaypointsReply& SUTConnectorReply::_internal_scenario_get_vehicle_waypoints() const {
  return *data_oneof_.scenario_get_vehicle_waypoints_;
}
inline ::metamoto::services::ScenarioGetVehicleWaypointsReply* SUTConnectorReply::release_scenario_get_vehicle_waypoints() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.scenario_get_vehicle_waypoints)
  if (has_scenario_get_vehicle_waypoints()) {
    clear_has_data_oneof();
      ::metamoto::services::ScenarioGetVehicleWaypointsReply* temp = data_oneof_.scenario_get_vehicle_waypoints_;
    data_oneof_.scenario_get_vehicle_waypoints_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ScenarioGetVehicleWaypointsReply& SUTConnectorReply::scenario_get_vehicle_waypoints() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.scenario_get_vehicle_waypoints)
  return has_scenario_get_vehicle_waypoints()
      ? *data_oneof_.scenario_get_vehicle_waypoints_
      : *reinterpret_cast< ::metamoto::services::ScenarioGetVehicleWaypointsReply*>(&::metamoto::services::_ScenarioGetVehicleWaypointsReply_default_instance_);
}
inline ::metamoto::services::ScenarioGetVehicleWaypointsReply* SUTConnectorReply::mutable_scenario_get_vehicle_waypoints() {
  if (!has_scenario_get_vehicle_waypoints()) {
    clear_data_oneof();
    set_has_scenario_get_vehicle_waypoints();
    data_oneof_.scenario_get_vehicle_waypoints_ = CreateMaybeMessage< ::metamoto::services::ScenarioGetVehicleWaypointsReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.scenario_get_vehicle_waypoints)
  return data_oneof_.scenario_get_vehicle_waypoints_;
}

// .metamoto.services.ScenarioSetVehicleWaypointsReply scenario_set_vehicle_waypoints = 142;
inline bool SUTConnectorReply::has_scenario_set_vehicle_waypoints() const {
  return data_oneof_case() == kScenarioSetVehicleWaypoints;
}
inline void SUTConnectorReply::set_has_scenario_set_vehicle_waypoints() {
  _oneof_case_[0] = kScenarioSetVehicleWaypoints;
}
inline const ::metamoto::services::ScenarioSetVehicleWaypointsReply& SUTConnectorReply::_internal_scenario_set_vehicle_waypoints() const {
  return *data_oneof_.scenario_set_vehicle_waypoints_;
}
inline ::metamoto::services::ScenarioSetVehicleWaypointsReply* SUTConnectorReply::release_scenario_set_vehicle_waypoints() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.scenario_set_vehicle_waypoints)
  if (has_scenario_set_vehicle_waypoints()) {
    clear_has_data_oneof();
      ::metamoto::services::ScenarioSetVehicleWaypointsReply* temp = data_oneof_.scenario_set_vehicle_waypoints_;
    data_oneof_.scenario_set_vehicle_waypoints_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ScenarioSetVehicleWaypointsReply& SUTConnectorReply::scenario_set_vehicle_waypoints() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.scenario_set_vehicle_waypoints)
  return has_scenario_set_vehicle_waypoints()
      ? *data_oneof_.scenario_set_vehicle_waypoints_
      : *reinterpret_cast< ::metamoto::services::ScenarioSetVehicleWaypointsReply*>(&::metamoto::services::_ScenarioSetVehicleWaypointsReply_default_instance_);
}
inline ::metamoto::services::ScenarioSetVehicleWaypointsReply* SUTConnectorReply::mutable_scenario_set_vehicle_waypoints() {
  if (!has_scenario_set_vehicle_waypoints()) {
    clear_data_oneof();
    set_has_scenario_set_vehicle_waypoints();
    data_oneof_.scenario_set_vehicle_waypoints_ = CreateMaybeMessage< ::metamoto::services::ScenarioSetVehicleWaypointsReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.scenario_set_vehicle_waypoints)
  return data_oneof_.scenario_set_vehicle_waypoints_;
}

// .metamoto.services.ScenarioSetDriverModelReply scenario_set_driver_model = 143;
inline bool SUTConnectorReply::has_scenario_set_driver_model() const {
  return data_oneof_case() == kScenarioSetDriverModel;
}
inline void SUTConnectorReply::set_has_scenario_set_driver_model() {
  _oneof_case_[0] = kScenarioSetDriverModel;
}
inline const ::metamoto::services::ScenarioSetDriverModelReply& SUTConnectorReply::_internal_scenario_set_driver_model() const {
  return *data_oneof_.scenario_set_driver_model_;
}
inline ::metamoto::services::ScenarioSetDriverModelReply* SUTConnectorReply::release_scenario_set_driver_model() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.scenario_set_driver_model)
  if (has_scenario_set_driver_model()) {
    clear_has_data_oneof();
      ::metamoto::services::ScenarioSetDriverModelReply* temp = data_oneof_.scenario_set_driver_model_;
    data_oneof_.scenario_set_driver_model_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ScenarioSetDriverModelReply& SUTConnectorReply::scenario_set_driver_model() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.scenario_set_driver_model)
  return has_scenario_set_driver_model()
      ? *data_oneof_.scenario_set_driver_model_
      : *reinterpret_cast< ::metamoto::services::ScenarioSetDriverModelReply*>(&::metamoto::services::_ScenarioSetDriverModelReply_default_instance_);
}
inline ::metamoto::services::ScenarioSetDriverModelReply* SUTConnectorReply::mutable_scenario_set_driver_model() {
  if (!has_scenario_set_driver_model()) {
    clear_data_oneof();
    set_has_scenario_set_driver_model();
    data_oneof_.scenario_set_driver_model_ = CreateMaybeMessage< ::metamoto::services::ScenarioSetDriverModelReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.scenario_set_driver_model)
  return data_oneof_.scenario_set_driver_model_;
}

// .metamoto.services.ScenarioSetupReply scenario_setup = 144;
inline bool SUTConnectorReply::has_scenario_setup() const {
  return data_oneof_case() == kScenarioSetup;
}
inline void SUTConnectorReply::set_has_scenario_setup() {
  _oneof_case_[0] = kScenarioSetup;
}
inline const ::metamoto::services::ScenarioSetupReply& SUTConnectorReply::_internal_scenario_setup() const {
  return *data_oneof_.scenario_setup_;
}
inline ::metamoto::services::ScenarioSetupReply* SUTConnectorReply::release_scenario_setup() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.scenario_setup)
  if (has_scenario_setup()) {
    clear_has_data_oneof();
      ::metamoto::services::ScenarioSetupReply* temp = data_oneof_.scenario_setup_;
    data_oneof_.scenario_setup_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::ScenarioSetupReply& SUTConnectorReply::scenario_setup() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.scenario_setup)
  return has_scenario_setup()
      ? *data_oneof_.scenario_setup_
      : *reinterpret_cast< ::metamoto::services::ScenarioSetupReply*>(&::metamoto::services::_ScenarioSetupReply_default_instance_);
}
inline ::metamoto::services::ScenarioSetupReply* SUTConnectorReply::mutable_scenario_setup() {
  if (!has_scenario_setup()) {
    clear_data_oneof();
    set_has_scenario_setup();
    data_oneof_.scenario_setup_ = CreateMaybeMessage< ::metamoto::services::ScenarioSetupReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.scenario_setup)
  return data_oneof_.scenario_setup_;
}

// .metamoto.services.SystemGetResultsSizeReply system_get_results_size = 160;
inline bool SUTConnectorReply::has_system_get_results_size() const {
  return data_oneof_case() == kSystemGetResultsSize;
}
inline void SUTConnectorReply::set_has_system_get_results_size() {
  _oneof_case_[0] = kSystemGetResultsSize;
}
inline const ::metamoto::services::SystemGetResultsSizeReply& SUTConnectorReply::_internal_system_get_results_size() const {
  return *data_oneof_.system_get_results_size_;
}
inline ::metamoto::services::SystemGetResultsSizeReply* SUTConnectorReply::release_system_get_results_size() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorReply.system_get_results_size)
  if (has_system_get_results_size()) {
    clear_has_data_oneof();
      ::metamoto::services::SystemGetResultsSizeReply* temp = data_oneof_.system_get_results_size_;
    data_oneof_.system_get_results_size_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::services::SystemGetResultsSizeReply& SUTConnectorReply::system_get_results_size() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorReply.system_get_results_size)
  return has_system_get_results_size()
      ? *data_oneof_.system_get_results_size_
      : *reinterpret_cast< ::metamoto::services::SystemGetResultsSizeReply*>(&::metamoto::services::_SystemGetResultsSizeReply_default_instance_);
}
inline ::metamoto::services::SystemGetResultsSizeReply* SUTConnectorReply::mutable_system_get_results_size() {
  if (!has_system_get_results_size()) {
    clear_data_oneof();
    set_has_system_get_results_size();
    data_oneof_.system_get_results_size_ = CreateMaybeMessage< ::metamoto::services::SystemGetResultsSizeReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorReply.system_get_results_size)
  return data_oneof_.system_get_results_size_;
}

inline bool SUTConnectorReply::has_data_oneof() const {
  return data_oneof_case() != DATA_ONEOF_NOT_SET;
}
inline void SUTConnectorReply::clear_has_data_oneof() {
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}
inline SUTConnectorReply::DataOneofCase SUTConnectorReply::data_oneof_case() const {
  return SUTConnectorReply::DataOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SUTConnectorConnectRequest

// string id = 1;
inline void SUTConnectorConnectRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUTConnectorConnectRequest::id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorConnectRequest.id)
  return id_.GetNoArena();
}
inline void SUTConnectorConnectRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.SUTConnectorConnectRequest.id)
}
#if LANG_CXX11
inline void SUTConnectorConnectRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.SUTConnectorConnectRequest.id)
}
#endif
inline void SUTConnectorConnectRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.SUTConnectorConnectRequest.id)
}
inline void SUTConnectorConnectRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.SUTConnectorConnectRequest.id)
}
inline ::std::string* SUTConnectorConnectRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorConnectRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUTConnectorConnectRequest::release_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorConnectRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUTConnectorConnectRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorConnectRequest.id)
}

// .metamoto.services.SUTConnectorConnectRequest.SUTType type = 2;
inline void SUTConnectorConnectRequest::clear_type() {
  type_ = 0;
}
inline ::metamoto::services::SUTConnectorConnectRequest_SUTType SUTConnectorConnectRequest::type() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorConnectRequest.type)
  return static_cast< ::metamoto::services::SUTConnectorConnectRequest_SUTType >(type_);
}
inline void SUTConnectorConnectRequest::set_type(::metamoto::services::SUTConnectorConnectRequest_SUTType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.SUTConnectorConnectRequest.type)
}

// -------------------------------------------------------------------

// SUTConnectorDisconnectRequest

// -------------------------------------------------------------------

// SUTConnectorConnectReply

// -------------------------------------------------------------------

// SUTConnectorDisconnectReply

// -------------------------------------------------------------------

// SUTConnectorHeartbeatRequest

// string id = 1;
inline void SUTConnectorHeartbeatRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUTConnectorHeartbeatRequest::id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorHeartbeatRequest.id)
  return id_.GetNoArena();
}
inline void SUTConnectorHeartbeatRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.SUTConnectorHeartbeatRequest.id)
}
#if LANG_CXX11
inline void SUTConnectorHeartbeatRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.SUTConnectorHeartbeatRequest.id)
}
#endif
inline void SUTConnectorHeartbeatRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.SUTConnectorHeartbeatRequest.id)
}
inline void SUTConnectorHeartbeatRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.SUTConnectorHeartbeatRequest.id)
}
inline ::std::string* SUTConnectorHeartbeatRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorHeartbeatRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUTConnectorHeartbeatRequest::release_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorHeartbeatRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUTConnectorHeartbeatRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorHeartbeatRequest.id)
}

// -------------------------------------------------------------------

// SUTConnectorHeartbeatReply

// -------------------------------------------------------------------

// SUTConnectorQueryGetConnectedSUTsRequest

// -------------------------------------------------------------------

// SUTConnectorQueryGetConnectedSUTsReply_SUT

// string id = 1;
inline void SUTConnectorQueryGetConnectedSUTsReply_SUT::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUTConnectorQueryGetConnectedSUTsReply_SUT::id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT.id)
  return id_.GetNoArena();
}
inline void SUTConnectorQueryGetConnectedSUTsReply_SUT::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT.id)
}
#if LANG_CXX11
inline void SUTConnectorQueryGetConnectedSUTsReply_SUT::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT.id)
}
#endif
inline void SUTConnectorQueryGetConnectedSUTsReply_SUT::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT.id)
}
inline void SUTConnectorQueryGetConnectedSUTsReply_SUT::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT.id)
}
inline ::std::string* SUTConnectorQueryGetConnectedSUTsReply_SUT::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUTConnectorQueryGetConnectedSUTsReply_SUT::release_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUTConnectorQueryGetConnectedSUTsReply_SUT::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT.id)
}

// uint32 port = 2;
inline void SUTConnectorQueryGetConnectedSUTsReply_SUT::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 SUTConnectorQueryGetConnectedSUTsReply_SUT::port() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT.port)
  return port_;
}
inline void SUTConnectorQueryGetConnectedSUTsReply_SUT::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT.port)
}

// -------------------------------------------------------------------

// SUTConnectorQueryGetConnectedSUTsReply

// repeated .metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT suts = 1;
inline int SUTConnectorQueryGetConnectedSUTsReply::suts_size() const {
  return suts_.size();
}
inline void SUTConnectorQueryGetConnectedSUTsReply::clear_suts() {
  suts_.Clear();
}
inline ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT* SUTConnectorQueryGetConnectedSUTsReply::mutable_suts(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.suts)
  return suts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT >*
SUTConnectorQueryGetConnectedSUTsReply::mutable_suts() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.suts)
  return &suts_;
}
inline const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT& SUTConnectorQueryGetConnectedSUTsReply::suts(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.suts)
  return suts_.Get(index);
}
inline ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT* SUTConnectorQueryGetConnectedSUTsReply::add_suts() {
  // @@protoc_insertion_point(field_add:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.suts)
  return suts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT >&
SUTConnectorQueryGetConnectedSUTsReply::suts() const {
  // @@protoc_insertion_point(field_list:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.suts)
  return suts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace services
}  // namespace metamoto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::metamoto::services::SUTConnectorConnectRequest_SUTType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metamoto::services::SUTConnectorConnectRequest_SUTType>() {
  return ::metamoto::services::SUTConnectorConnectRequest_SUTType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2fservices_2fsut_5fconnector_2eproto
