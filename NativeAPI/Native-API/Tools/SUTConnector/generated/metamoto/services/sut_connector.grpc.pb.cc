// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metamoto/services/sut_connector.proto

#include "metamoto/services/sut_connector.pb.h"
#include "metamoto/services/sut_connector.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace metamoto {
namespace services {

static const char* SUTConnector_method_names[] = {
  "/metamoto.services.SUTConnector/Connect",
  "/metamoto.services.SUTConnector/Heartbeat",
};

std::unique_ptr< SUTConnector::Stub> SUTConnector::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SUTConnector::Stub> stub(new SUTConnector::Stub(channel));
  return stub;
}

SUTConnector::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Connect_(SUTConnector_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Heartbeat_(SUTConnector_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>* SUTConnector::Stub::ConnectRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>::Create(channel_.get(), rpcmethod_Connect_, context);
}

void SUTConnector::Stub::experimental_async::Connect(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::metamoto::services::SUTConnectorRequest,::metamoto::services::SUTConnectorReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::metamoto::services::SUTConnectorRequest,::metamoto::services::SUTConnectorReply>::Create(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>* SUTConnector::Stub::AsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>::Create(channel_.get(), cq, rpcmethod_Connect_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>* SUTConnector::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>::Create(channel_.get(), cq, rpcmethod_Connect_, context, false, nullptr);
}

::grpc::Status SUTConnector::Stub::Heartbeat(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest& request, ::metamoto::services::SUTConnectorHeartbeatReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Heartbeat_, context, request, response);
}

void SUTConnector::Stub::experimental_async::Heartbeat(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest* request, ::metamoto::services::SUTConnectorHeartbeatReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::SUTConnectorHeartbeatReply>* SUTConnector::Stub::AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::SUTConnectorHeartbeatReply>::Create(channel_.get(), cq, rpcmethod_Heartbeat_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::SUTConnectorHeartbeatReply>* SUTConnector::Stub::PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::SUTConnectorHeartbeatReply>::Create(channel_.get(), cq, rpcmethod_Heartbeat_, context, request, false);
}

SUTConnector::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SUTConnector_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SUTConnector::Service, ::metamoto::services::SUTConnectorRequest, ::metamoto::services::SUTConnectorReply>(
          std::mem_fn(&SUTConnector::Service::Connect), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SUTConnector_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SUTConnector::Service, ::metamoto::services::SUTConnectorHeartbeatRequest, ::metamoto::services::SUTConnectorHeartbeatReply>(
          std::mem_fn(&SUTConnector::Service::Heartbeat), this)));
}

SUTConnector::Service::~Service() {
}

::grpc::Status SUTConnector::Service::Connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::metamoto::services::SUTConnectorReply, ::metamoto::services::SUTConnectorRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SUTConnector::Service::Heartbeat(::grpc::ServerContext* context, const ::metamoto::services::SUTConnectorHeartbeatRequest* request, ::metamoto::services::SUTConnectorHeartbeatReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SUTConnectorQuery_method_names[] = {
  "/metamoto.services.SUTConnectorQuery/GetConnectedSUTs",
};

std::unique_ptr< SUTConnectorQuery::Stub> SUTConnectorQuery::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SUTConnectorQuery::Stub> stub(new SUTConnectorQuery::Stub(channel));
  return stub;
}

SUTConnectorQuery::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetConnectedSUTs_(SUTConnectorQuery_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SUTConnectorQuery::Stub::GetConnectedSUTs(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest& request, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetConnectedSUTs_, context, request, response);
}

void SUTConnectorQuery::Stub::experimental_async::GetConnectedSUTs(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest* request, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetConnectedSUTs_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>* SUTConnectorQuery::Stub::AsyncGetConnectedSUTsRaw(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>::Create(channel_.get(), cq, rpcmethod_GetConnectedSUTs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>* SUTConnectorQuery::Stub::PrepareAsyncGetConnectedSUTsRaw(::grpc::ClientContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>::Create(channel_.get(), cq, rpcmethod_GetConnectedSUTs_, context, request, false);
}

SUTConnectorQuery::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SUTConnectorQuery_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SUTConnectorQuery::Service, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply>(
          std::mem_fn(&SUTConnectorQuery::Service::GetConnectedSUTs), this)));
}

SUTConnectorQuery::Service::~Service() {
}

::grpc::Status SUTConnectorQuery::Service::GetConnectedSUTs(::grpc::ServerContext* context, const ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest* request, ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace metamoto
}  // namespace services

