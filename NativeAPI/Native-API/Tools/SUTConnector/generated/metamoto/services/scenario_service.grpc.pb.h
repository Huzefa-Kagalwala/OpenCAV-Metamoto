// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metamoto/services/scenario_service.proto
// Original file comments:
// Copyright (c) 2018-2020 Metamoto, Inc. All Rights Reserved.
//
#ifndef GRPC_metamoto_2fservices_2fscenario_5fservice_2eproto__INCLUDED
#define GRPC_metamoto_2fservices_2fscenario_5fservice_2eproto__INCLUDED

#include "metamoto/services/scenario_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace metamoto {
namespace services {

class Scenario final {
 public:
  static constexpr char const* service_full_name() {
    return "metamoto.services.Scenario";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Intended to be called from Controller or Sensor Setup in order to overwrite scenario fields prior to initialization.
    virtual ::grpc::Status Setup(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetupRequest& request, ::metamoto::services::ScenarioSetupReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioSetupReply>> AsyncSetup(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioSetupReply>>(AsyncSetupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioSetupReply>> PrepareAsyncSetup(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioSetupReply>>(PrepareAsyncSetupRaw(context, request, cq));
    }
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::metamoto::services::ScenarioUpdateRequest& request, ::metamoto::services::ScenarioUpdateReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioUpdateReply>> AsyncUpdate(::grpc::ClientContext* context, const ::metamoto::services::ScenarioUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioUpdateReply>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioUpdateReply>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::metamoto::services::ScenarioUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioUpdateReply>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status GetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest& request, ::metamoto::services::ScenarioGetVehicleWaypointsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioGetVehicleWaypointsReply>> AsyncGetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioGetVehicleWaypointsReply>>(AsyncGetVehicleWaypointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioGetVehicleWaypointsReply>> PrepareAsyncGetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioGetVehicleWaypointsReply>>(PrepareAsyncGetVehicleWaypointsRaw(context, request, cq));
    }
    virtual ::grpc::Status SetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest& request, ::metamoto::services::ScenarioSetVehicleWaypointsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioSetVehicleWaypointsReply>> AsyncSetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioSetVehicleWaypointsReply>>(AsyncSetVehicleWaypointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioSetVehicleWaypointsReply>> PrepareAsyncSetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioSetVehicleWaypointsReply>>(PrepareAsyncSetVehicleWaypointsRaw(context, request, cq));
    }
    virtual ::grpc::Status SetDriverModel(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest& request, ::metamoto::services::ScenarioSetDriverModelReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioSetDriverModelReply>> AsyncSetDriverModel(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioSetDriverModelReply>>(AsyncSetDriverModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioSetDriverModelReply>> PrepareAsyncSetDriverModel(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioSetDriverModelReply>>(PrepareAsyncSetDriverModelRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Intended to be called from Controller or Sensor Setup in order to overwrite scenario fields prior to initialization.
      virtual void Setup(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetupRequest* request, ::metamoto::services::ScenarioSetupReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::metamoto::services::ScenarioUpdateRequest* request, ::metamoto::services::ScenarioUpdateReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioGetVehicleWaypointsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioSetVehicleWaypointsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDriverModel(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest* request, ::metamoto::services::ScenarioSetDriverModelReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioSetupReply>* AsyncSetupRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioSetupReply>* PrepareAsyncSetupRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioUpdateReply>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioUpdateReply>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioGetVehicleWaypointsReply>* AsyncGetVehicleWaypointsRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioGetVehicleWaypointsReply>* PrepareAsyncGetVehicleWaypointsRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioSetVehicleWaypointsReply>* AsyncSetVehicleWaypointsRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioSetVehicleWaypointsReply>* PrepareAsyncSetVehicleWaypointsRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioSetDriverModelReply>* AsyncSetDriverModelRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::ScenarioSetDriverModelReply>* PrepareAsyncSetDriverModelRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Setup(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetupRequest& request, ::metamoto::services::ScenarioSetupReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetupReply>> AsyncSetup(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetupReply>>(AsyncSetupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetupReply>> PrepareAsyncSetup(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetupReply>>(PrepareAsyncSetupRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::metamoto::services::ScenarioUpdateRequest& request, ::metamoto::services::ScenarioUpdateReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioUpdateReply>> AsyncUpdate(::grpc::ClientContext* context, const ::metamoto::services::ScenarioUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioUpdateReply>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioUpdateReply>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::metamoto::services::ScenarioUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioUpdateReply>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status GetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest& request, ::metamoto::services::ScenarioGetVehicleWaypointsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioGetVehicleWaypointsReply>> AsyncGetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioGetVehicleWaypointsReply>>(AsyncGetVehicleWaypointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioGetVehicleWaypointsReply>> PrepareAsyncGetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioGetVehicleWaypointsReply>>(PrepareAsyncGetVehicleWaypointsRaw(context, request, cq));
    }
    ::grpc::Status SetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest& request, ::metamoto::services::ScenarioSetVehicleWaypointsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetVehicleWaypointsReply>> AsyncSetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetVehicleWaypointsReply>>(AsyncSetVehicleWaypointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetVehicleWaypointsReply>> PrepareAsyncSetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetVehicleWaypointsReply>>(PrepareAsyncSetVehicleWaypointsRaw(context, request, cq));
    }
    ::grpc::Status SetDriverModel(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest& request, ::metamoto::services::ScenarioSetDriverModelReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetDriverModelReply>> AsyncSetDriverModel(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetDriverModelReply>>(AsyncSetDriverModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetDriverModelReply>> PrepareAsyncSetDriverModel(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetDriverModelReply>>(PrepareAsyncSetDriverModelRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Setup(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetupRequest* request, ::metamoto::services::ScenarioSetupReply* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::metamoto::services::ScenarioUpdateRequest* request, ::metamoto::services::ScenarioUpdateReply* response, std::function<void(::grpc::Status)>) override;
      void GetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioGetVehicleWaypointsReply* response, std::function<void(::grpc::Status)>) override;
      void SetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioSetVehicleWaypointsReply* response, std::function<void(::grpc::Status)>) override;
      void SetDriverModel(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest* request, ::metamoto::services::ScenarioSetDriverModelReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetupReply>* AsyncSetupRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetupReply>* PrepareAsyncSetupRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioUpdateReply>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioUpdateReply>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioGetVehicleWaypointsReply>* AsyncGetVehicleWaypointsRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioGetVehicleWaypointsReply>* PrepareAsyncGetVehicleWaypointsRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetVehicleWaypointsReply>* AsyncSetVehicleWaypointsRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetVehicleWaypointsReply>* PrepareAsyncSetVehicleWaypointsRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetDriverModelReply>* AsyncSetDriverModelRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetDriverModelReply>* PrepareAsyncSetDriverModelRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Setup_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVehicleWaypoints_;
    const ::grpc::internal::RpcMethod rpcmethod_SetVehicleWaypoints_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDriverModel_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Intended to be called from Controller or Sensor Setup in order to overwrite scenario fields prior to initialization.
    virtual ::grpc::Status Setup(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetupRequest* request, ::metamoto::services::ScenarioSetupReply* response);
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::metamoto::services::ScenarioUpdateRequest* request, ::metamoto::services::ScenarioUpdateReply* response);
    virtual ::grpc::Status GetVehicleWaypoints(::grpc::ServerContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioGetVehicleWaypointsReply* response);
    virtual ::grpc::Status SetVehicleWaypoints(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioSetVehicleWaypointsReply* response);
    virtual ::grpc::Status SetDriverModel(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest* request, ::metamoto::services::ScenarioSetDriverModelReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Setup() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Setup(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetupRequest* request, ::metamoto::services::ScenarioSetupReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetup(::grpc::ServerContext* context, ::metamoto::services::ScenarioSetupRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::ScenarioSetupReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::metamoto::services::ScenarioUpdateRequest* request, ::metamoto::services::ScenarioUpdateReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::metamoto::services::ScenarioUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::ScenarioUpdateReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVehicleWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetVehicleWaypoints() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetVehicleWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVehicleWaypoints(::grpc::ServerContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioGetVehicleWaypointsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVehicleWaypoints(::grpc::ServerContext* context, ::metamoto::services::ScenarioGetVehicleWaypointsRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::ScenarioGetVehicleWaypointsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetVehicleWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetVehicleWaypoints() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetVehicleWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVehicleWaypoints(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioSetVehicleWaypointsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetVehicleWaypoints(::grpc::ServerContext* context, ::metamoto::services::ScenarioSetVehicleWaypointsRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::ScenarioSetVehicleWaypointsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDriverModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetDriverModel() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetDriverModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDriverModel(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest* request, ::metamoto::services::ScenarioSetDriverModelReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDriverModel(::grpc::ServerContext* context, ::metamoto::services::ScenarioSetDriverModelRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::ScenarioSetDriverModelReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Setup<WithAsyncMethod_Update<WithAsyncMethod_GetVehicleWaypoints<WithAsyncMethod_SetVehicleWaypoints<WithAsyncMethod_SetDriverModel<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Setup() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::ScenarioSetupRequest, ::metamoto::services::ScenarioSetupReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::ScenarioSetupRequest* request,
                 ::metamoto::services::ScenarioSetupReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Setup(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Setup(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetupRequest* request, ::metamoto::services::ScenarioSetupReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Setup(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetupRequest* request, ::metamoto::services::ScenarioSetupReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Update() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::ScenarioUpdateRequest, ::metamoto::services::ScenarioUpdateReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::ScenarioUpdateRequest* request,
                 ::metamoto::services::ScenarioUpdateReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Update(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::metamoto::services::ScenarioUpdateRequest* request, ::metamoto::services::ScenarioUpdateReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Update(::grpc::ServerContext* context, const ::metamoto::services::ScenarioUpdateRequest* request, ::metamoto::services::ScenarioUpdateReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetVehicleWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetVehicleWaypoints() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::ScenarioGetVehicleWaypointsRequest, ::metamoto::services::ScenarioGetVehicleWaypointsReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::ScenarioGetVehicleWaypointsRequest* request,
                 ::metamoto::services::ScenarioGetVehicleWaypointsReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetVehicleWaypoints(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetVehicleWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVehicleWaypoints(::grpc::ServerContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioGetVehicleWaypointsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetVehicleWaypoints(::grpc::ServerContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioGetVehicleWaypointsReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetVehicleWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetVehicleWaypoints() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::ScenarioSetVehicleWaypointsRequest, ::metamoto::services::ScenarioSetVehicleWaypointsReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::ScenarioSetVehicleWaypointsRequest* request,
                 ::metamoto::services::ScenarioSetVehicleWaypointsReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetVehicleWaypoints(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SetVehicleWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVehicleWaypoints(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioSetVehicleWaypointsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetVehicleWaypoints(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioSetVehicleWaypointsReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetDriverModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetDriverModel() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::ScenarioSetDriverModelRequest, ::metamoto::services::ScenarioSetDriverModelReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::ScenarioSetDriverModelRequest* request,
                 ::metamoto::services::ScenarioSetDriverModelReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetDriverModel(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SetDriverModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDriverModel(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest* request, ::metamoto::services::ScenarioSetDriverModelReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetDriverModel(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest* request, ::metamoto::services::ScenarioSetDriverModelReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Setup<ExperimentalWithCallbackMethod_Update<ExperimentalWithCallbackMethod_GetVehicleWaypoints<ExperimentalWithCallbackMethod_SetVehicleWaypoints<ExperimentalWithCallbackMethod_SetDriverModel<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Setup() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Setup(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetupRequest* request, ::metamoto::services::ScenarioSetupReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::metamoto::services::ScenarioUpdateRequest* request, ::metamoto::services::ScenarioUpdateReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVehicleWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetVehicleWaypoints() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetVehicleWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVehicleWaypoints(::grpc::ServerContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioGetVehicleWaypointsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetVehicleWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetVehicleWaypoints() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetVehicleWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVehicleWaypoints(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioSetVehicleWaypointsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDriverModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetDriverModel() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetDriverModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDriverModel(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest* request, ::metamoto::services::ScenarioSetDriverModelReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Setup() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Setup(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetupRequest* request, ::metamoto::services::ScenarioSetupReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::metamoto::services::ScenarioUpdateRequest* request, ::metamoto::services::ScenarioUpdateReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVehicleWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetVehicleWaypoints() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetVehicleWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVehicleWaypoints(::grpc::ServerContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioGetVehicleWaypointsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVehicleWaypoints(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetVehicleWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetVehicleWaypoints() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SetVehicleWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVehicleWaypoints(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioSetVehicleWaypointsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetVehicleWaypoints(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDriverModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetDriverModel() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetDriverModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDriverModel(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest* request, ::metamoto::services::ScenarioSetDriverModelReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDriverModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Setup() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Setup(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Setup(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetupRequest* request, ::metamoto::services::ScenarioSetupReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Setup(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Update() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Update(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::metamoto::services::ScenarioUpdateRequest* request, ::metamoto::services::ScenarioUpdateReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Update(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetVehicleWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetVehicleWaypoints() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetVehicleWaypoints(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetVehicleWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVehicleWaypoints(::grpc::ServerContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioGetVehicleWaypointsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetVehicleWaypoints(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetVehicleWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetVehicleWaypoints() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetVehicleWaypoints(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetVehicleWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVehicleWaypoints(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioSetVehicleWaypointsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetVehicleWaypoints(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetDriverModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetDriverModel() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetDriverModel(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetDriverModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDriverModel(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest* request, ::metamoto::services::ScenarioSetDriverModelReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetDriverModel(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Setup() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::ScenarioSetupRequest, ::metamoto::services::ScenarioSetupReply>(std::bind(&WithStreamedUnaryMethod_Setup<BaseClass>::StreamedSetup, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Setup(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetupRequest* request, ::metamoto::services::ScenarioSetupReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::ScenarioSetupRequest,::metamoto::services::ScenarioSetupReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::ScenarioUpdateRequest, ::metamoto::services::ScenarioUpdateReply>(std::bind(&WithStreamedUnaryMethod_Update<BaseClass>::StreamedUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::metamoto::services::ScenarioUpdateRequest* request, ::metamoto::services::ScenarioUpdateReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::ScenarioUpdateRequest,::metamoto::services::ScenarioUpdateReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVehicleWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetVehicleWaypoints() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::ScenarioGetVehicleWaypointsRequest, ::metamoto::services::ScenarioGetVehicleWaypointsReply>(std::bind(&WithStreamedUnaryMethod_GetVehicleWaypoints<BaseClass>::StreamedGetVehicleWaypoints, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetVehicleWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVehicleWaypoints(::grpc::ServerContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioGetVehicleWaypointsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVehicleWaypoints(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::ScenarioGetVehicleWaypointsRequest,::metamoto::services::ScenarioGetVehicleWaypointsReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetVehicleWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetVehicleWaypoints() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::ScenarioSetVehicleWaypointsRequest, ::metamoto::services::ScenarioSetVehicleWaypointsReply>(std::bind(&WithStreamedUnaryMethod_SetVehicleWaypoints<BaseClass>::StreamedSetVehicleWaypoints, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetVehicleWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetVehicleWaypoints(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioSetVehicleWaypointsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetVehicleWaypoints(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::ScenarioSetVehicleWaypointsRequest,::metamoto::services::ScenarioSetVehicleWaypointsReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDriverModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetDriverModel() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::ScenarioSetDriverModelRequest, ::metamoto::services::ScenarioSetDriverModelReply>(std::bind(&WithStreamedUnaryMethod_SetDriverModel<BaseClass>::StreamedSetDriverModel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetDriverModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDriverModel(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest* request, ::metamoto::services::ScenarioSetDriverModelReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDriverModel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::ScenarioSetDriverModelRequest,::metamoto::services::ScenarioSetDriverModelReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Setup<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_GetVehicleWaypoints<WithStreamedUnaryMethod_SetVehicleWaypoints<WithStreamedUnaryMethod_SetDriverModel<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Setup<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_GetVehicleWaypoints<WithStreamedUnaryMethod_SetVehicleWaypoints<WithStreamedUnaryMethod_SetDriverModel<Service > > > > > StreamedService;
};

}  // namespace services
}  // namespace metamoto


#endif  // GRPC_metamoto_2fservices_2fscenario_5fservice_2eproto__INCLUDED
