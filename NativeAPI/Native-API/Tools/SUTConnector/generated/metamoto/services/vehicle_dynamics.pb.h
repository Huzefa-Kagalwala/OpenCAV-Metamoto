// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/services/vehicle_dynamics.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2fservices_2fvehicle_5fdynamics_2eproto
#define PROTOBUF_INCLUDED_metamoto_2fservices_2fvehicle_5fdynamics_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "metamoto/types/result_metadata.pb.h"
#include "metamoto/types/terrain.pb.h"
#include "metamoto/types/rigid_body.pb.h"
#include "metamoto/messages/vehicle_controls.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fvehicle_5fdynamics_2eproto 

namespace protobuf_metamoto_2fservices_2fvehicle_5fdynamics_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2fservices_2fvehicle_5fdynamics_2eproto
namespace metamoto {
namespace services {
class VehicleDynamicsCloseReply;
class VehicleDynamicsCloseReplyDefaultTypeInternal;
extern VehicleDynamicsCloseReplyDefaultTypeInternal _VehicleDynamicsCloseReply_default_instance_;
class VehicleDynamicsCloseRequest;
class VehicleDynamicsCloseRequestDefaultTypeInternal;
extern VehicleDynamicsCloseRequestDefaultTypeInternal _VehicleDynamicsCloseRequest_default_instance_;
class VehicleDynamicsInitializeReply;
class VehicleDynamicsInitializeReplyDefaultTypeInternal;
extern VehicleDynamicsInitializeReplyDefaultTypeInternal _VehicleDynamicsInitializeReply_default_instance_;
class VehicleDynamicsInitializeRequest;
class VehicleDynamicsInitializeRequestDefaultTypeInternal;
extern VehicleDynamicsInitializeRequestDefaultTypeInternal _VehicleDynamicsInitializeRequest_default_instance_;
class VehicleDynamicsUpdateReply;
class VehicleDynamicsUpdateReplyDefaultTypeInternal;
extern VehicleDynamicsUpdateReplyDefaultTypeInternal _VehicleDynamicsUpdateReply_default_instance_;
class VehicleDynamicsUpdateRequest;
class VehicleDynamicsUpdateRequestDefaultTypeInternal;
extern VehicleDynamicsUpdateRequestDefaultTypeInternal _VehicleDynamicsUpdateRequest_default_instance_;
}  // namespace services
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::services::VehicleDynamicsCloseReply* Arena::CreateMaybeMessage<::metamoto::services::VehicleDynamicsCloseReply>(Arena*);
template<> ::metamoto::services::VehicleDynamicsCloseRequest* Arena::CreateMaybeMessage<::metamoto::services::VehicleDynamicsCloseRequest>(Arena*);
template<> ::metamoto::services::VehicleDynamicsInitializeReply* Arena::CreateMaybeMessage<::metamoto::services::VehicleDynamicsInitializeReply>(Arena*);
template<> ::metamoto::services::VehicleDynamicsInitializeRequest* Arena::CreateMaybeMessage<::metamoto::services::VehicleDynamicsInitializeRequest>(Arena*);
template<> ::metamoto::services::VehicleDynamicsUpdateReply* Arena::CreateMaybeMessage<::metamoto::services::VehicleDynamicsUpdateReply>(Arena*);
template<> ::metamoto::services::VehicleDynamicsUpdateRequest* Arena::CreateMaybeMessage<::metamoto::services::VehicleDynamicsUpdateRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace services {

// ===================================================================

class VehicleDynamicsInitializeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.VehicleDynamicsInitializeRequest) */ {
 public:
  VehicleDynamicsInitializeRequest();
  virtual ~VehicleDynamicsInitializeRequest();

  VehicleDynamicsInitializeRequest(const VehicleDynamicsInitializeRequest& from);

  inline VehicleDynamicsInitializeRequest& operator=(const VehicleDynamicsInitializeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleDynamicsInitializeRequest(VehicleDynamicsInitializeRequest&& from) noexcept
    : VehicleDynamicsInitializeRequest() {
    *this = ::std::move(from);
  }

  inline VehicleDynamicsInitializeRequest& operator=(VehicleDynamicsInitializeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleDynamicsInitializeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleDynamicsInitializeRequest* internal_default_instance() {
    return reinterpret_cast<const VehicleDynamicsInitializeRequest*>(
               &_VehicleDynamicsInitializeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VehicleDynamicsInitializeRequest* other);
  friend void swap(VehicleDynamicsInitializeRequest& a, VehicleDynamicsInitializeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleDynamicsInitializeRequest* New() const final {
    return CreateMaybeMessage<VehicleDynamicsInitializeRequest>(NULL);
  }

  VehicleDynamicsInitializeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleDynamicsInitializeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleDynamicsInitializeRequest& from);
  void MergeFrom(const VehicleDynamicsInitializeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleDynamicsInitializeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.RigidBody rigid_bodies = 3;
  int rigid_bodies_size() const;
  void clear_rigid_bodies();
  static const int kRigidBodiesFieldNumber = 3;
  ::metamoto::types::RigidBody* mutable_rigid_bodies(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::RigidBody >*
      mutable_rigid_bodies();
  const ::metamoto::types::RigidBody& rigid_bodies(int index) const;
  ::metamoto::types::RigidBody* add_rigid_bodies();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::RigidBody >&
      rigid_bodies() const;

  // repeated .metamoto.types.TireContact tire_contacts = 4;
  int tire_contacts_size() const;
  void clear_tire_contacts();
  static const int kTireContactsFieldNumber = 4;
  ::metamoto::types::TireContact* mutable_tire_contacts(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TireContact >*
      mutable_tire_contacts();
  const ::metamoto::types::TireContact& tire_contacts(int index) const;
  ::metamoto::types::TireContact* add_tire_contacts();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TireContact >&
      tire_contacts() const;

  // repeated float front_hitch_offsets = 6;
  int front_hitch_offsets_size() const;
  void clear_front_hitch_offsets();
  static const int kFrontHitchOffsetsFieldNumber = 6;
  float front_hitch_offsets(int index) const;
  void set_front_hitch_offsets(int index, float value);
  void add_front_hitch_offsets(float value);
  const ::google::protobuf::RepeatedField< float >&
      front_hitch_offsets() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_front_hitch_offsets();

  // repeated float rear_hitch_offsets = 7;
  int rear_hitch_offsets_size() const;
  void clear_rear_hitch_offsets();
  static const int kRearHitchOffsetsFieldNumber = 7;
  float rear_hitch_offsets(int index) const;
  void set_rear_hitch_offsets(int index, float value);
  void add_rear_hitch_offsets(float value);
  const ::google::protobuf::RepeatedField< float >&
      rear_hitch_offsets() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_rear_hitch_offsets();

  // string results_directory = 2;
  void clear_results_directory();
  static const int kResultsDirectoryFieldNumber = 2;
  const ::std::string& results_directory() const;
  void set_results_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_results_directory(::std::string&& value);
  #endif
  void set_results_directory(const char* value);
  void set_results_directory(const char* value, size_t size);
  ::std::string* mutable_results_directory();
  ::std::string* release_results_directory();
  void set_allocated_results_directory(::std::string* results_directory);

  // .google.protobuf.Struct parameters = 1;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 1;
  private:
  const ::google::protobuf::Struct& _internal_parameters() const;
  public:
  const ::google::protobuf::Struct& parameters() const;
  ::google::protobuf::Struct* release_parameters();
  ::google::protobuf::Struct* mutable_parameters();
  void set_allocated_parameters(::google::protobuf::Struct* parameters);

  // .metamoto.types.Terrain terrain = 5;
  bool has_terrain() const;
  void clear_terrain();
  static const int kTerrainFieldNumber = 5;
  private:
  const ::metamoto::types::Terrain& _internal_terrain() const;
  public:
  const ::metamoto::types::Terrain& terrain() const;
  ::metamoto::types::Terrain* release_terrain();
  ::metamoto::types::Terrain* mutable_terrain();
  void set_allocated_terrain(::metamoto::types::Terrain* terrain);

  // @@protoc_insertion_point(class_scope:metamoto.services.VehicleDynamicsInitializeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::RigidBody > rigid_bodies_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TireContact > tire_contacts_;
  ::google::protobuf::RepeatedField< float > front_hitch_offsets_;
  mutable int _front_hitch_offsets_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > rear_hitch_offsets_;
  mutable int _rear_hitch_offsets_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr results_directory_;
  ::google::protobuf::Struct* parameters_;
  ::metamoto::types::Terrain* terrain_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fvehicle_5fdynamics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleDynamicsInitializeReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.VehicleDynamicsInitializeReply) */ {
 public:
  VehicleDynamicsInitializeReply();
  virtual ~VehicleDynamicsInitializeReply();

  VehicleDynamicsInitializeReply(const VehicleDynamicsInitializeReply& from);

  inline VehicleDynamicsInitializeReply& operator=(const VehicleDynamicsInitializeReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleDynamicsInitializeReply(VehicleDynamicsInitializeReply&& from) noexcept
    : VehicleDynamicsInitializeReply() {
    *this = ::std::move(from);
  }

  inline VehicleDynamicsInitializeReply& operator=(VehicleDynamicsInitializeReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleDynamicsInitializeReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleDynamicsInitializeReply* internal_default_instance() {
    return reinterpret_cast<const VehicleDynamicsInitializeReply*>(
               &_VehicleDynamicsInitializeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(VehicleDynamicsInitializeReply* other);
  friend void swap(VehicleDynamicsInitializeReply& a, VehicleDynamicsInitializeReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleDynamicsInitializeReply* New() const final {
    return CreateMaybeMessage<VehicleDynamicsInitializeReply>(NULL);
  }

  VehicleDynamicsInitializeReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleDynamicsInitializeReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleDynamicsInitializeReply& from);
  void MergeFrom(const VehicleDynamicsInitializeReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleDynamicsInitializeReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // .google.protobuf.FloatValue max_steer_angle = 5;
  bool has_max_steer_angle() const;
  void clear_max_steer_angle();
  static const int kMaxSteerAngleFieldNumber = 5;
  private:
  const ::google::protobuf::FloatValue& _internal_max_steer_angle() const;
  public:
  const ::google::protobuf::FloatValue& max_steer_angle() const;
  ::google::protobuf::FloatValue* release_max_steer_angle();
  ::google::protobuf::FloatValue* mutable_max_steer_angle();
  void set_allocated_max_steer_angle(::google::protobuf::FloatValue* max_steer_angle);

  // double update_rate = 3;
  void clear_update_rate();
  static const int kUpdateRateFieldNumber = 3;
  double update_rate() const;
  void set_update_rate(double value);

  // uint32 update_timeout = 4;
  void clear_update_timeout();
  static const int kUpdateTimeoutFieldNumber = 4;
  ::google::protobuf::uint32 update_timeout() const;
  void set_update_timeout(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:metamoto.services.VehicleDynamicsInitializeReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::FloatValue* max_steer_angle_;
  double update_rate_;
  ::google::protobuf::uint32 update_timeout_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fvehicle_5fdynamics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleDynamicsUpdateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.VehicleDynamicsUpdateRequest) */ {
 public:
  VehicleDynamicsUpdateRequest();
  virtual ~VehicleDynamicsUpdateRequest();

  VehicleDynamicsUpdateRequest(const VehicleDynamicsUpdateRequest& from);

  inline VehicleDynamicsUpdateRequest& operator=(const VehicleDynamicsUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleDynamicsUpdateRequest(VehicleDynamicsUpdateRequest&& from) noexcept
    : VehicleDynamicsUpdateRequest() {
    *this = ::std::move(from);
  }

  inline VehicleDynamicsUpdateRequest& operator=(VehicleDynamicsUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleDynamicsUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleDynamicsUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const VehicleDynamicsUpdateRequest*>(
               &_VehicleDynamicsUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(VehicleDynamicsUpdateRequest* other);
  friend void swap(VehicleDynamicsUpdateRequest& a, VehicleDynamicsUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleDynamicsUpdateRequest* New() const final {
    return CreateMaybeMessage<VehicleDynamicsUpdateRequest>(NULL);
  }

  VehicleDynamicsUpdateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleDynamicsUpdateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleDynamicsUpdateRequest& from);
  void MergeFrom(const VehicleDynamicsUpdateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleDynamicsUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.TireContact tire_contacts = 5;
  int tire_contacts_size() const;
  void clear_tire_contacts();
  static const int kTireContactsFieldNumber = 5;
  ::metamoto::types::TireContact* mutable_tire_contacts(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TireContact >*
      mutable_tire_contacts();
  const ::metamoto::types::TireContact& tire_contacts(int index) const;
  ::metamoto::types::TireContact* add_tire_contacts();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TireContact >&
      tire_contacts() const;

  // .metamoto.messages.VehicleControls vehicle_controls = 4;
  bool has_vehicle_controls() const;
  void clear_vehicle_controls();
  static const int kVehicleControlsFieldNumber = 4;
  private:
  const ::metamoto::messages::VehicleControls& _internal_vehicle_controls() const;
  public:
  const ::metamoto::messages::VehicleControls& vehicle_controls() const;
  ::metamoto::messages::VehicleControls* release_vehicle_controls();
  ::metamoto::messages::VehicleControls* mutable_vehicle_controls();
  void set_allocated_vehicle_controls(::metamoto::messages::VehicleControls* vehicle_controls);

  // double time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // double last_step_time = 2;
  void clear_last_step_time();
  static const int kLastStepTimeFieldNumber = 2;
  double last_step_time() const;
  void set_last_step_time(double value);

  // double next_step_time = 3;
  void clear_next_step_time();
  static const int kNextStepTimeFieldNumber = 3;
  double next_step_time() const;
  void set_next_step_time(double value);

  // @@protoc_insertion_point(class_scope:metamoto.services.VehicleDynamicsUpdateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TireContact > tire_contacts_;
  ::metamoto::messages::VehicleControls* vehicle_controls_;
  double time_;
  double last_step_time_;
  double next_step_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fvehicle_5fdynamics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleDynamicsUpdateReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.VehicleDynamicsUpdateReply) */ {
 public:
  VehicleDynamicsUpdateReply();
  virtual ~VehicleDynamicsUpdateReply();

  VehicleDynamicsUpdateReply(const VehicleDynamicsUpdateReply& from);

  inline VehicleDynamicsUpdateReply& operator=(const VehicleDynamicsUpdateReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleDynamicsUpdateReply(VehicleDynamicsUpdateReply&& from) noexcept
    : VehicleDynamicsUpdateReply() {
    *this = ::std::move(from);
  }

  inline VehicleDynamicsUpdateReply& operator=(VehicleDynamicsUpdateReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleDynamicsUpdateReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleDynamicsUpdateReply* internal_default_instance() {
    return reinterpret_cast<const VehicleDynamicsUpdateReply*>(
               &_VehicleDynamicsUpdateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(VehicleDynamicsUpdateReply* other);
  friend void swap(VehicleDynamicsUpdateReply& a, VehicleDynamicsUpdateReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleDynamicsUpdateReply* New() const final {
    return CreateMaybeMessage<VehicleDynamicsUpdateReply>(NULL);
  }

  VehicleDynamicsUpdateReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleDynamicsUpdateReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleDynamicsUpdateReply& from);
  void MergeFrom(const VehicleDynamicsUpdateReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleDynamicsUpdateReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.RigidBody rigid_bodies = 2;
  int rigid_bodies_size() const;
  void clear_rigid_bodies();
  static const int kRigidBodiesFieldNumber = 2;
  ::metamoto::types::RigidBody* mutable_rigid_bodies(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::RigidBody >*
      mutable_rigid_bodies();
  const ::metamoto::types::RigidBody& rigid_bodies(int index) const;
  ::metamoto::types::RigidBody* add_rigid_bodies();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::RigidBody >&
      rigid_bodies() const;

  // double next_update_time = 1;
  void clear_next_update_time();
  static const int kNextUpdateTimeFieldNumber = 1;
  double next_update_time() const;
  void set_next_update_time(double value);

  // @@protoc_insertion_point(class_scope:metamoto.services.VehicleDynamicsUpdateReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::RigidBody > rigid_bodies_;
  double next_update_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fvehicle_5fdynamics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleDynamicsCloseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.VehicleDynamicsCloseRequest) */ {
 public:
  VehicleDynamicsCloseRequest();
  virtual ~VehicleDynamicsCloseRequest();

  VehicleDynamicsCloseRequest(const VehicleDynamicsCloseRequest& from);

  inline VehicleDynamicsCloseRequest& operator=(const VehicleDynamicsCloseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleDynamicsCloseRequest(VehicleDynamicsCloseRequest&& from) noexcept
    : VehicleDynamicsCloseRequest() {
    *this = ::std::move(from);
  }

  inline VehicleDynamicsCloseRequest& operator=(VehicleDynamicsCloseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleDynamicsCloseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleDynamicsCloseRequest* internal_default_instance() {
    return reinterpret_cast<const VehicleDynamicsCloseRequest*>(
               &_VehicleDynamicsCloseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(VehicleDynamicsCloseRequest* other);
  friend void swap(VehicleDynamicsCloseRequest& a, VehicleDynamicsCloseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleDynamicsCloseRequest* New() const final {
    return CreateMaybeMessage<VehicleDynamicsCloseRequest>(NULL);
  }

  VehicleDynamicsCloseRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleDynamicsCloseRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleDynamicsCloseRequest& from);
  void MergeFrom(const VehicleDynamicsCloseRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleDynamicsCloseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:metamoto.services.VehicleDynamicsCloseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fvehicle_5fdynamics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleDynamicsCloseReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.VehicleDynamicsCloseReply) */ {
 public:
  VehicleDynamicsCloseReply();
  virtual ~VehicleDynamicsCloseReply();

  VehicleDynamicsCloseReply(const VehicleDynamicsCloseReply& from);

  inline VehicleDynamicsCloseReply& operator=(const VehicleDynamicsCloseReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleDynamicsCloseReply(VehicleDynamicsCloseReply&& from) noexcept
    : VehicleDynamicsCloseReply() {
    *this = ::std::move(from);
  }

  inline VehicleDynamicsCloseReply& operator=(VehicleDynamicsCloseReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleDynamicsCloseReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleDynamicsCloseReply* internal_default_instance() {
    return reinterpret_cast<const VehicleDynamicsCloseReply*>(
               &_VehicleDynamicsCloseReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(VehicleDynamicsCloseReply* other);
  friend void swap(VehicleDynamicsCloseReply& a, VehicleDynamicsCloseReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleDynamicsCloseReply* New() const final {
    return CreateMaybeMessage<VehicleDynamicsCloseReply>(NULL);
  }

  VehicleDynamicsCloseReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleDynamicsCloseReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleDynamicsCloseReply& from);
  void MergeFrom(const VehicleDynamicsCloseReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleDynamicsCloseReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.ResultMetadata results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::metamoto::types::ResultMetadata* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata >*
      mutable_results();
  const ::metamoto::types::ResultMetadata& results(int index) const;
  ::metamoto::types::ResultMetadata* add_results();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata >&
      results() const;

  // @@protoc_insertion_point(class_scope:metamoto.services.VehicleDynamicsCloseReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata > results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fvehicle_5fdynamics_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleDynamicsInitializeRequest

// .google.protobuf.Struct parameters = 1;
inline bool VehicleDynamicsInitializeRequest::has_parameters() const {
  return this != internal_default_instance() && parameters_ != NULL;
}
inline const ::google::protobuf::Struct& VehicleDynamicsInitializeRequest::_internal_parameters() const {
  return *parameters_;
}
inline const ::google::protobuf::Struct& VehicleDynamicsInitializeRequest::parameters() const {
  const ::google::protobuf::Struct* p = parameters_;
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsInitializeRequest.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* VehicleDynamicsInitializeRequest::release_parameters() {
  // @@protoc_insertion_point(field_release:metamoto.services.VehicleDynamicsInitializeRequest.parameters)
  
  ::google::protobuf::Struct* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* VehicleDynamicsInitializeRequest::mutable_parameters() {
  
  if (parameters_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.VehicleDynamicsInitializeRequest.parameters)
  return parameters_;
}
inline void VehicleDynamicsInitializeRequest::set_allocated_parameters(::google::protobuf::Struct* parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parameters_);
  }
  if (parameters) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(parameters)->GetArena();
    if (message_arena != submessage_arena) {
      parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.VehicleDynamicsInitializeRequest.parameters)
}

// string results_directory = 2;
inline void VehicleDynamicsInitializeRequest::clear_results_directory() {
  results_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleDynamicsInitializeRequest::results_directory() const {
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsInitializeRequest.results_directory)
  return results_directory_.GetNoArena();
}
inline void VehicleDynamicsInitializeRequest::set_results_directory(const ::std::string& value) {
  
  results_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.VehicleDynamicsInitializeRequest.results_directory)
}
#if LANG_CXX11
inline void VehicleDynamicsInitializeRequest::set_results_directory(::std::string&& value) {
  
  results_directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.VehicleDynamicsInitializeRequest.results_directory)
}
#endif
inline void VehicleDynamicsInitializeRequest::set_results_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  results_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.VehicleDynamicsInitializeRequest.results_directory)
}
inline void VehicleDynamicsInitializeRequest::set_results_directory(const char* value, size_t size) {
  
  results_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.VehicleDynamicsInitializeRequest.results_directory)
}
inline ::std::string* VehicleDynamicsInitializeRequest::mutable_results_directory() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.VehicleDynamicsInitializeRequest.results_directory)
  return results_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleDynamicsInitializeRequest::release_results_directory() {
  // @@protoc_insertion_point(field_release:metamoto.services.VehicleDynamicsInitializeRequest.results_directory)
  
  return results_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleDynamicsInitializeRequest::set_allocated_results_directory(::std::string* results_directory) {
  if (results_directory != NULL) {
    
  } else {
    
  }
  results_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), results_directory);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.VehicleDynamicsInitializeRequest.results_directory)
}

// repeated .metamoto.types.RigidBody rigid_bodies = 3;
inline int VehicleDynamicsInitializeRequest::rigid_bodies_size() const {
  return rigid_bodies_.size();
}
inline ::metamoto::types::RigidBody* VehicleDynamicsInitializeRequest::mutable_rigid_bodies(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.VehicleDynamicsInitializeRequest.rigid_bodies)
  return rigid_bodies_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::RigidBody >*
VehicleDynamicsInitializeRequest::mutable_rigid_bodies() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.VehicleDynamicsInitializeRequest.rigid_bodies)
  return &rigid_bodies_;
}
inline const ::metamoto::types::RigidBody& VehicleDynamicsInitializeRequest::rigid_bodies(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsInitializeRequest.rigid_bodies)
  return rigid_bodies_.Get(index);
}
inline ::metamoto::types::RigidBody* VehicleDynamicsInitializeRequest::add_rigid_bodies() {
  // @@protoc_insertion_point(field_add:metamoto.services.VehicleDynamicsInitializeRequest.rigid_bodies)
  return rigid_bodies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::RigidBody >&
VehicleDynamicsInitializeRequest::rigid_bodies() const {
  // @@protoc_insertion_point(field_list:metamoto.services.VehicleDynamicsInitializeRequest.rigid_bodies)
  return rigid_bodies_;
}

// repeated .metamoto.types.TireContact tire_contacts = 4;
inline int VehicleDynamicsInitializeRequest::tire_contacts_size() const {
  return tire_contacts_.size();
}
inline ::metamoto::types::TireContact* VehicleDynamicsInitializeRequest::mutable_tire_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.VehicleDynamicsInitializeRequest.tire_contacts)
  return tire_contacts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::TireContact >*
VehicleDynamicsInitializeRequest::mutable_tire_contacts() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.VehicleDynamicsInitializeRequest.tire_contacts)
  return &tire_contacts_;
}
inline const ::metamoto::types::TireContact& VehicleDynamicsInitializeRequest::tire_contacts(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsInitializeRequest.tire_contacts)
  return tire_contacts_.Get(index);
}
inline ::metamoto::types::TireContact* VehicleDynamicsInitializeRequest::add_tire_contacts() {
  // @@protoc_insertion_point(field_add:metamoto.services.VehicleDynamicsInitializeRequest.tire_contacts)
  return tire_contacts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TireContact >&
VehicleDynamicsInitializeRequest::tire_contacts() const {
  // @@protoc_insertion_point(field_list:metamoto.services.VehicleDynamicsInitializeRequest.tire_contacts)
  return tire_contacts_;
}

// .metamoto.types.Terrain terrain = 5;
inline bool VehicleDynamicsInitializeRequest::has_terrain() const {
  return this != internal_default_instance() && terrain_ != NULL;
}
inline const ::metamoto::types::Terrain& VehicleDynamicsInitializeRequest::_internal_terrain() const {
  return *terrain_;
}
inline const ::metamoto::types::Terrain& VehicleDynamicsInitializeRequest::terrain() const {
  const ::metamoto::types::Terrain* p = terrain_;
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsInitializeRequest.terrain)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Terrain*>(
      &::metamoto::types::_Terrain_default_instance_);
}
inline ::metamoto::types::Terrain* VehicleDynamicsInitializeRequest::release_terrain() {
  // @@protoc_insertion_point(field_release:metamoto.services.VehicleDynamicsInitializeRequest.terrain)
  
  ::metamoto::types::Terrain* temp = terrain_;
  terrain_ = NULL;
  return temp;
}
inline ::metamoto::types::Terrain* VehicleDynamicsInitializeRequest::mutable_terrain() {
  
  if (terrain_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Terrain>(GetArenaNoVirtual());
    terrain_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.VehicleDynamicsInitializeRequest.terrain)
  return terrain_;
}
inline void VehicleDynamicsInitializeRequest::set_allocated_terrain(::metamoto::types::Terrain* terrain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(terrain_);
  }
  if (terrain) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      terrain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, terrain, submessage_arena);
    }
    
  } else {
    
  }
  terrain_ = terrain;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.VehicleDynamicsInitializeRequest.terrain)
}

// repeated float front_hitch_offsets = 6;
inline int VehicleDynamicsInitializeRequest::front_hitch_offsets_size() const {
  return front_hitch_offsets_.size();
}
inline void VehicleDynamicsInitializeRequest::clear_front_hitch_offsets() {
  front_hitch_offsets_.Clear();
}
inline float VehicleDynamicsInitializeRequest::front_hitch_offsets(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsInitializeRequest.front_hitch_offsets)
  return front_hitch_offsets_.Get(index);
}
inline void VehicleDynamicsInitializeRequest::set_front_hitch_offsets(int index, float value) {
  front_hitch_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.services.VehicleDynamicsInitializeRequest.front_hitch_offsets)
}
inline void VehicleDynamicsInitializeRequest::add_front_hitch_offsets(float value) {
  front_hitch_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.services.VehicleDynamicsInitializeRequest.front_hitch_offsets)
}
inline const ::google::protobuf::RepeatedField< float >&
VehicleDynamicsInitializeRequest::front_hitch_offsets() const {
  // @@protoc_insertion_point(field_list:metamoto.services.VehicleDynamicsInitializeRequest.front_hitch_offsets)
  return front_hitch_offsets_;
}
inline ::google::protobuf::RepeatedField< float >*
VehicleDynamicsInitializeRequest::mutable_front_hitch_offsets() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.VehicleDynamicsInitializeRequest.front_hitch_offsets)
  return &front_hitch_offsets_;
}

// repeated float rear_hitch_offsets = 7;
inline int VehicleDynamicsInitializeRequest::rear_hitch_offsets_size() const {
  return rear_hitch_offsets_.size();
}
inline void VehicleDynamicsInitializeRequest::clear_rear_hitch_offsets() {
  rear_hitch_offsets_.Clear();
}
inline float VehicleDynamicsInitializeRequest::rear_hitch_offsets(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsInitializeRequest.rear_hitch_offsets)
  return rear_hitch_offsets_.Get(index);
}
inline void VehicleDynamicsInitializeRequest::set_rear_hitch_offsets(int index, float value) {
  rear_hitch_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.services.VehicleDynamicsInitializeRequest.rear_hitch_offsets)
}
inline void VehicleDynamicsInitializeRequest::add_rear_hitch_offsets(float value) {
  rear_hitch_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.services.VehicleDynamicsInitializeRequest.rear_hitch_offsets)
}
inline const ::google::protobuf::RepeatedField< float >&
VehicleDynamicsInitializeRequest::rear_hitch_offsets() const {
  // @@protoc_insertion_point(field_list:metamoto.services.VehicleDynamicsInitializeRequest.rear_hitch_offsets)
  return rear_hitch_offsets_;
}
inline ::google::protobuf::RepeatedField< float >*
VehicleDynamicsInitializeRequest::mutable_rear_hitch_offsets() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.VehicleDynamicsInitializeRequest.rear_hitch_offsets)
  return &rear_hitch_offsets_;
}

// -------------------------------------------------------------------

// VehicleDynamicsInitializeReply

// string name = 1;
inline void VehicleDynamicsInitializeReply::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleDynamicsInitializeReply::name() const {
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsInitializeReply.name)
  return name_.GetNoArena();
}
inline void VehicleDynamicsInitializeReply::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.VehicleDynamicsInitializeReply.name)
}
#if LANG_CXX11
inline void VehicleDynamicsInitializeReply::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.VehicleDynamicsInitializeReply.name)
}
#endif
inline void VehicleDynamicsInitializeReply::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.VehicleDynamicsInitializeReply.name)
}
inline void VehicleDynamicsInitializeReply::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.VehicleDynamicsInitializeReply.name)
}
inline ::std::string* VehicleDynamicsInitializeReply::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.VehicleDynamicsInitializeReply.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleDynamicsInitializeReply::release_name() {
  // @@protoc_insertion_point(field_release:metamoto.services.VehicleDynamicsInitializeReply.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleDynamicsInitializeReply::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.VehicleDynamicsInitializeReply.name)
}

// string version = 2;
inline void VehicleDynamicsInitializeReply::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleDynamicsInitializeReply::version() const {
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsInitializeReply.version)
  return version_.GetNoArena();
}
inline void VehicleDynamicsInitializeReply::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.VehicleDynamicsInitializeReply.version)
}
#if LANG_CXX11
inline void VehicleDynamicsInitializeReply::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.VehicleDynamicsInitializeReply.version)
}
#endif
inline void VehicleDynamicsInitializeReply::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.VehicleDynamicsInitializeReply.version)
}
inline void VehicleDynamicsInitializeReply::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.VehicleDynamicsInitializeReply.version)
}
inline ::std::string* VehicleDynamicsInitializeReply::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.VehicleDynamicsInitializeReply.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleDynamicsInitializeReply::release_version() {
  // @@protoc_insertion_point(field_release:metamoto.services.VehicleDynamicsInitializeReply.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleDynamicsInitializeReply::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.VehicleDynamicsInitializeReply.version)
}

// double update_rate = 3;
inline void VehicleDynamicsInitializeReply::clear_update_rate() {
  update_rate_ = 0;
}
inline double VehicleDynamicsInitializeReply::update_rate() const {
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsInitializeReply.update_rate)
  return update_rate_;
}
inline void VehicleDynamicsInitializeReply::set_update_rate(double value) {
  
  update_rate_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.VehicleDynamicsInitializeReply.update_rate)
}

// uint32 update_timeout = 4;
inline void VehicleDynamicsInitializeReply::clear_update_timeout() {
  update_timeout_ = 0u;
}
inline ::google::protobuf::uint32 VehicleDynamicsInitializeReply::update_timeout() const {
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsInitializeReply.update_timeout)
  return update_timeout_;
}
inline void VehicleDynamicsInitializeReply::set_update_timeout(::google::protobuf::uint32 value) {
  
  update_timeout_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.VehicleDynamicsInitializeReply.update_timeout)
}

// .google.protobuf.FloatValue max_steer_angle = 5;
inline bool VehicleDynamicsInitializeReply::has_max_steer_angle() const {
  return this != internal_default_instance() && max_steer_angle_ != NULL;
}
inline const ::google::protobuf::FloatValue& VehicleDynamicsInitializeReply::_internal_max_steer_angle() const {
  return *max_steer_angle_;
}
inline const ::google::protobuf::FloatValue& VehicleDynamicsInitializeReply::max_steer_angle() const {
  const ::google::protobuf::FloatValue* p = max_steer_angle_;
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsInitializeReply.max_steer_angle)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FloatValue*>(
      &::google::protobuf::_FloatValue_default_instance_);
}
inline ::google::protobuf::FloatValue* VehicleDynamicsInitializeReply::release_max_steer_angle() {
  // @@protoc_insertion_point(field_release:metamoto.services.VehicleDynamicsInitializeReply.max_steer_angle)
  
  ::google::protobuf::FloatValue* temp = max_steer_angle_;
  max_steer_angle_ = NULL;
  return temp;
}
inline ::google::protobuf::FloatValue* VehicleDynamicsInitializeReply::mutable_max_steer_angle() {
  
  if (max_steer_angle_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FloatValue>(GetArenaNoVirtual());
    max_steer_angle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.VehicleDynamicsInitializeReply.max_steer_angle)
  return max_steer_angle_;
}
inline void VehicleDynamicsInitializeReply::set_allocated_max_steer_angle(::google::protobuf::FloatValue* max_steer_angle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_steer_angle_);
  }
  if (max_steer_angle) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(max_steer_angle)->GetArena();
    if (message_arena != submessage_arena) {
      max_steer_angle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_steer_angle, submessage_arena);
    }
    
  } else {
    
  }
  max_steer_angle_ = max_steer_angle;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.VehicleDynamicsInitializeReply.max_steer_angle)
}

// -------------------------------------------------------------------

// VehicleDynamicsUpdateRequest

// double time = 1;
inline void VehicleDynamicsUpdateRequest::clear_time() {
  time_ = 0;
}
inline double VehicleDynamicsUpdateRequest::time() const {
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsUpdateRequest.time)
  return time_;
}
inline void VehicleDynamicsUpdateRequest::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.VehicleDynamicsUpdateRequest.time)
}

// double last_step_time = 2;
inline void VehicleDynamicsUpdateRequest::clear_last_step_time() {
  last_step_time_ = 0;
}
inline double VehicleDynamicsUpdateRequest::last_step_time() const {
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsUpdateRequest.last_step_time)
  return last_step_time_;
}
inline void VehicleDynamicsUpdateRequest::set_last_step_time(double value) {
  
  last_step_time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.VehicleDynamicsUpdateRequest.last_step_time)
}

// double next_step_time = 3;
inline void VehicleDynamicsUpdateRequest::clear_next_step_time() {
  next_step_time_ = 0;
}
inline double VehicleDynamicsUpdateRequest::next_step_time() const {
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsUpdateRequest.next_step_time)
  return next_step_time_;
}
inline void VehicleDynamicsUpdateRequest::set_next_step_time(double value) {
  
  next_step_time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.VehicleDynamicsUpdateRequest.next_step_time)
}

// .metamoto.messages.VehicleControls vehicle_controls = 4;
inline bool VehicleDynamicsUpdateRequest::has_vehicle_controls() const {
  return this != internal_default_instance() && vehicle_controls_ != NULL;
}
inline const ::metamoto::messages::VehicleControls& VehicleDynamicsUpdateRequest::_internal_vehicle_controls() const {
  return *vehicle_controls_;
}
inline const ::metamoto::messages::VehicleControls& VehicleDynamicsUpdateRequest::vehicle_controls() const {
  const ::metamoto::messages::VehicleControls* p = vehicle_controls_;
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsUpdateRequest.vehicle_controls)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::messages::VehicleControls*>(
      &::metamoto::messages::_VehicleControls_default_instance_);
}
inline ::metamoto::messages::VehicleControls* VehicleDynamicsUpdateRequest::release_vehicle_controls() {
  // @@protoc_insertion_point(field_release:metamoto.services.VehicleDynamicsUpdateRequest.vehicle_controls)
  
  ::metamoto::messages::VehicleControls* temp = vehicle_controls_;
  vehicle_controls_ = NULL;
  return temp;
}
inline ::metamoto::messages::VehicleControls* VehicleDynamicsUpdateRequest::mutable_vehicle_controls() {
  
  if (vehicle_controls_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::messages::VehicleControls>(GetArenaNoVirtual());
    vehicle_controls_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.VehicleDynamicsUpdateRequest.vehicle_controls)
  return vehicle_controls_;
}
inline void VehicleDynamicsUpdateRequest::set_allocated_vehicle_controls(::metamoto::messages::VehicleControls* vehicle_controls) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vehicle_controls_);
  }
  if (vehicle_controls) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vehicle_controls = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vehicle_controls, submessage_arena);
    }
    
  } else {
    
  }
  vehicle_controls_ = vehicle_controls;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.VehicleDynamicsUpdateRequest.vehicle_controls)
}

// repeated .metamoto.types.TireContact tire_contacts = 5;
inline int VehicleDynamicsUpdateRequest::tire_contacts_size() const {
  return tire_contacts_.size();
}
inline ::metamoto::types::TireContact* VehicleDynamicsUpdateRequest::mutable_tire_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.VehicleDynamicsUpdateRequest.tire_contacts)
  return tire_contacts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::TireContact >*
VehicleDynamicsUpdateRequest::mutable_tire_contacts() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.VehicleDynamicsUpdateRequest.tire_contacts)
  return &tire_contacts_;
}
inline const ::metamoto::types::TireContact& VehicleDynamicsUpdateRequest::tire_contacts(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsUpdateRequest.tire_contacts)
  return tire_contacts_.Get(index);
}
inline ::metamoto::types::TireContact* VehicleDynamicsUpdateRequest::add_tire_contacts() {
  // @@protoc_insertion_point(field_add:metamoto.services.VehicleDynamicsUpdateRequest.tire_contacts)
  return tire_contacts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TireContact >&
VehicleDynamicsUpdateRequest::tire_contacts() const {
  // @@protoc_insertion_point(field_list:metamoto.services.VehicleDynamicsUpdateRequest.tire_contacts)
  return tire_contacts_;
}

// -------------------------------------------------------------------

// VehicleDynamicsUpdateReply

// double next_update_time = 1;
inline void VehicleDynamicsUpdateReply::clear_next_update_time() {
  next_update_time_ = 0;
}
inline double VehicleDynamicsUpdateReply::next_update_time() const {
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsUpdateReply.next_update_time)
  return next_update_time_;
}
inline void VehicleDynamicsUpdateReply::set_next_update_time(double value) {
  
  next_update_time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.VehicleDynamicsUpdateReply.next_update_time)
}

// repeated .metamoto.types.RigidBody rigid_bodies = 2;
inline int VehicleDynamicsUpdateReply::rigid_bodies_size() const {
  return rigid_bodies_.size();
}
inline ::metamoto::types::RigidBody* VehicleDynamicsUpdateReply::mutable_rigid_bodies(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.VehicleDynamicsUpdateReply.rigid_bodies)
  return rigid_bodies_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::RigidBody >*
VehicleDynamicsUpdateReply::mutable_rigid_bodies() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.VehicleDynamicsUpdateReply.rigid_bodies)
  return &rigid_bodies_;
}
inline const ::metamoto::types::RigidBody& VehicleDynamicsUpdateReply::rigid_bodies(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsUpdateReply.rigid_bodies)
  return rigid_bodies_.Get(index);
}
inline ::metamoto::types::RigidBody* VehicleDynamicsUpdateReply::add_rigid_bodies() {
  // @@protoc_insertion_point(field_add:metamoto.services.VehicleDynamicsUpdateReply.rigid_bodies)
  return rigid_bodies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::RigidBody >&
VehicleDynamicsUpdateReply::rigid_bodies() const {
  // @@protoc_insertion_point(field_list:metamoto.services.VehicleDynamicsUpdateReply.rigid_bodies)
  return rigid_bodies_;
}

// -------------------------------------------------------------------

// VehicleDynamicsCloseRequest

// -------------------------------------------------------------------

// VehicleDynamicsCloseReply

// repeated .metamoto.types.ResultMetadata results = 1;
inline int VehicleDynamicsCloseReply::results_size() const {
  return results_.size();
}
inline ::metamoto::types::ResultMetadata* VehicleDynamicsCloseReply::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.VehicleDynamicsCloseReply.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata >*
VehicleDynamicsCloseReply::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.VehicleDynamicsCloseReply.results)
  return &results_;
}
inline const ::metamoto::types::ResultMetadata& VehicleDynamicsCloseReply::results(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.VehicleDynamicsCloseReply.results)
  return results_.Get(index);
}
inline ::metamoto::types::ResultMetadata* VehicleDynamicsCloseReply::add_results() {
  // @@protoc_insertion_point(field_add:metamoto.services.VehicleDynamicsCloseReply.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata >&
VehicleDynamicsCloseReply::results() const {
  // @@protoc_insertion_point(field_list:metamoto.services.VehicleDynamicsCloseReply.results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace services
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2fservices_2fvehicle_5fdynamics_2eproto
