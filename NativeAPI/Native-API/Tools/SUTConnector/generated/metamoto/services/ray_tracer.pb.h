// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/services/ray_tracer.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2fservices_2fray_5ftracer_2eproto
#define PROTOBUF_INCLUDED_metamoto_2fservices_2fray_5ftracer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/enumerations.pb.h"
#include "metamoto/types/vector3.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fray_5ftracer_2eproto 

namespace protobuf_metamoto_2fservices_2fray_5ftracer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2fservices_2fray_5ftracer_2eproto
namespace metamoto {
namespace services {
class Ray;
class RayDefaultTypeInternal;
extern RayDefaultTypeInternal _Ray_default_instance_;
class RayHit;
class RayHitDefaultTypeInternal;
extern RayHitDefaultTypeInternal _RayHit_default_instance_;
class RayTracerRadiationPattern;
class RayTracerRadiationPatternDefaultTypeInternal;
extern RayTracerRadiationPatternDefaultTypeInternal _RayTracerRadiationPattern_default_instance_;
class RayTracerSetPatternsReply;
class RayTracerSetPatternsReplyDefaultTypeInternal;
extern RayTracerSetPatternsReplyDefaultTypeInternal _RayTracerSetPatternsReply_default_instance_;
class RayTracerSetPatternsRequest;
class RayTracerSetPatternsRequestDefaultTypeInternal;
extern RayTracerSetPatternsRequestDefaultTypeInternal _RayTracerSetPatternsRequest_default_instance_;
class RayTracerTraceReply;
class RayTracerTraceReplyDefaultTypeInternal;
extern RayTracerTraceReplyDefaultTypeInternal _RayTracerTraceReply_default_instance_;
class RayTracerTraceRequest;
class RayTracerTraceRequestDefaultTypeInternal;
extern RayTracerTraceRequestDefaultTypeInternal _RayTracerTraceRequest_default_instance_;
class RayTracerTraceRequest_OutputFields;
class RayTracerTraceRequest_OutputFieldsDefaultTypeInternal;
extern RayTracerTraceRequest_OutputFieldsDefaultTypeInternal _RayTracerTraceRequest_OutputFields_default_instance_;
}  // namespace services
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::services::Ray* Arena::CreateMaybeMessage<::metamoto::services::Ray>(Arena*);
template<> ::metamoto::services::RayHit* Arena::CreateMaybeMessage<::metamoto::services::RayHit>(Arena*);
template<> ::metamoto::services::RayTracerRadiationPattern* Arena::CreateMaybeMessage<::metamoto::services::RayTracerRadiationPattern>(Arena*);
template<> ::metamoto::services::RayTracerSetPatternsReply* Arena::CreateMaybeMessage<::metamoto::services::RayTracerSetPatternsReply>(Arena*);
template<> ::metamoto::services::RayTracerSetPatternsRequest* Arena::CreateMaybeMessage<::metamoto::services::RayTracerSetPatternsRequest>(Arena*);
template<> ::metamoto::services::RayTracerTraceReply* Arena::CreateMaybeMessage<::metamoto::services::RayTracerTraceReply>(Arena*);
template<> ::metamoto::services::RayTracerTraceRequest* Arena::CreateMaybeMessage<::metamoto::services::RayTracerTraceRequest>(Arena*);
template<> ::metamoto::services::RayTracerTraceRequest_OutputFields* Arena::CreateMaybeMessage<::metamoto::services::RayTracerTraceRequest_OutputFields>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace services {

// ===================================================================

class RayTracerRadiationPattern : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.RayTracerRadiationPattern) */ {
 public:
  RayTracerRadiationPattern();
  virtual ~RayTracerRadiationPattern();

  RayTracerRadiationPattern(const RayTracerRadiationPattern& from);

  inline RayTracerRadiationPattern& operator=(const RayTracerRadiationPattern& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RayTracerRadiationPattern(RayTracerRadiationPattern&& from) noexcept
    : RayTracerRadiationPattern() {
    *this = ::std::move(from);
  }

  inline RayTracerRadiationPattern& operator=(RayTracerRadiationPattern&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RayTracerRadiationPattern& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RayTracerRadiationPattern* internal_default_instance() {
    return reinterpret_cast<const RayTracerRadiationPattern*>(
               &_RayTracerRadiationPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RayTracerRadiationPattern* other);
  friend void swap(RayTracerRadiationPattern& a, RayTracerRadiationPattern& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RayTracerRadiationPattern* New() const final {
    return CreateMaybeMessage<RayTracerRadiationPattern>(NULL);
  }

  RayTracerRadiationPattern* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RayTracerRadiationPattern>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RayTracerRadiationPattern& from);
  void MergeFrom(const RayTracerRadiationPattern& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RayTracerRadiationPattern* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float intensity = 1;
  int intensity_size() const;
  void clear_intensity();
  static const int kIntensityFieldNumber = 1;
  float intensity(int index) const;
  void set_intensity(int index, float value);
  void add_intensity(float value);
  const ::google::protobuf::RepeatedField< float >&
      intensity() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_intensity();

  // repeated .metamoto.types.Vector3 direction = 2;
  int direction_size() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 2;
  ::metamoto::types::Vector3* mutable_direction(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vector3 >*
      mutable_direction();
  const ::metamoto::types::Vector3& direction(int index) const;
  ::metamoto::types::Vector3* add_direction();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vector3 >&
      direction() const;

  // @@protoc_insertion_point(class_scope:metamoto.services.RayTracerRadiationPattern)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > intensity_;
  mutable int _intensity_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vector3 > direction_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RayTracerSetPatternsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.RayTracerSetPatternsRequest) */ {
 public:
  RayTracerSetPatternsRequest();
  virtual ~RayTracerSetPatternsRequest();

  RayTracerSetPatternsRequest(const RayTracerSetPatternsRequest& from);

  inline RayTracerSetPatternsRequest& operator=(const RayTracerSetPatternsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RayTracerSetPatternsRequest(RayTracerSetPatternsRequest&& from) noexcept
    : RayTracerSetPatternsRequest() {
    *this = ::std::move(from);
  }

  inline RayTracerSetPatternsRequest& operator=(RayTracerSetPatternsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RayTracerSetPatternsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RayTracerSetPatternsRequest* internal_default_instance() {
    return reinterpret_cast<const RayTracerSetPatternsRequest*>(
               &_RayTracerSetPatternsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RayTracerSetPatternsRequest* other);
  friend void swap(RayTracerSetPatternsRequest& a, RayTracerSetPatternsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RayTracerSetPatternsRequest* New() const final {
    return CreateMaybeMessage<RayTracerSetPatternsRequest>(NULL);
  }

  RayTracerSetPatternsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RayTracerSetPatternsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RayTracerSetPatternsRequest& from);
  void MergeFrom(const RayTracerSetPatternsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RayTracerSetPatternsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.services.RayTracerRadiationPattern pattern = 1;
  int pattern_size() const;
  void clear_pattern();
  static const int kPatternFieldNumber = 1;
  ::metamoto::services::RayTracerRadiationPattern* mutable_pattern(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::services::RayTracerRadiationPattern >*
      mutable_pattern();
  const ::metamoto::services::RayTracerRadiationPattern& pattern(int index) const;
  ::metamoto::services::RayTracerRadiationPattern* add_pattern();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::services::RayTracerRadiationPattern >&
      pattern() const;

  // @@protoc_insertion_point(class_scope:metamoto.services.RayTracerSetPatternsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::services::RayTracerRadiationPattern > pattern_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RayTracerSetPatternsReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.RayTracerSetPatternsReply) */ {
 public:
  RayTracerSetPatternsReply();
  virtual ~RayTracerSetPatternsReply();

  RayTracerSetPatternsReply(const RayTracerSetPatternsReply& from);

  inline RayTracerSetPatternsReply& operator=(const RayTracerSetPatternsReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RayTracerSetPatternsReply(RayTracerSetPatternsReply&& from) noexcept
    : RayTracerSetPatternsReply() {
    *this = ::std::move(from);
  }

  inline RayTracerSetPatternsReply& operator=(RayTracerSetPatternsReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RayTracerSetPatternsReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RayTracerSetPatternsReply* internal_default_instance() {
    return reinterpret_cast<const RayTracerSetPatternsReply*>(
               &_RayTracerSetPatternsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RayTracerSetPatternsReply* other);
  friend void swap(RayTracerSetPatternsReply& a, RayTracerSetPatternsReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RayTracerSetPatternsReply* New() const final {
    return CreateMaybeMessage<RayTracerSetPatternsReply>(NULL);
  }

  RayTracerSetPatternsReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RayTracerSetPatternsReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RayTracerSetPatternsReply& from);
  void MergeFrom(const RayTracerSetPatternsReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RayTracerSetPatternsReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:metamoto.services.RayTracerSetPatternsReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RayTracerTraceRequest_OutputFields : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.RayTracerTraceRequest.OutputFields) */ {
 public:
  RayTracerTraceRequest_OutputFields();
  virtual ~RayTracerTraceRequest_OutputFields();

  RayTracerTraceRequest_OutputFields(const RayTracerTraceRequest_OutputFields& from);

  inline RayTracerTraceRequest_OutputFields& operator=(const RayTracerTraceRequest_OutputFields& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RayTracerTraceRequest_OutputFields(RayTracerTraceRequest_OutputFields&& from) noexcept
    : RayTracerTraceRequest_OutputFields() {
    *this = ::std::move(from);
  }

  inline RayTracerTraceRequest_OutputFields& operator=(RayTracerTraceRequest_OutputFields&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RayTracerTraceRequest_OutputFields& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RayTracerTraceRequest_OutputFields* internal_default_instance() {
    return reinterpret_cast<const RayTracerTraceRequest_OutputFields*>(
               &_RayTracerTraceRequest_OutputFields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RayTracerTraceRequest_OutputFields* other);
  friend void swap(RayTracerTraceRequest_OutputFields& a, RayTracerTraceRequest_OutputFields& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RayTracerTraceRequest_OutputFields* New() const final {
    return CreateMaybeMessage<RayTracerTraceRequest_OutputFields>(NULL);
  }

  RayTracerTraceRequest_OutputFields* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RayTracerTraceRequest_OutputFields>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RayTracerTraceRequest_OutputFields& from);
  void MergeFrom(const RayTracerTraceRequest_OutputFields& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RayTracerTraceRequest_OutputFields* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  bool object_id() const;
  void set_object_id(bool value);

  // bool object_type = 2;
  void clear_object_type();
  static const int kObjectTypeFieldNumber = 2;
  bool object_type() const;
  void set_object_type(bool value);

  // bool material = 3;
  void clear_material();
  static const int kMaterialFieldNumber = 3;
  bool material() const;
  void set_material(bool value);

  // bool angle = 4;
  void clear_angle();
  static const int kAngleFieldNumber = 4;
  bool angle() const;
  void set_angle(bool value);

  // @@protoc_insertion_point(class_scope:metamoto.services.RayTracerTraceRequest.OutputFields)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool object_id_;
  bool object_type_;
  bool material_;
  bool angle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RayTracerTraceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.RayTracerTraceRequest) */ {
 public:
  RayTracerTraceRequest();
  virtual ~RayTracerTraceRequest();

  RayTracerTraceRequest(const RayTracerTraceRequest& from);

  inline RayTracerTraceRequest& operator=(const RayTracerTraceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RayTracerTraceRequest(RayTracerTraceRequest&& from) noexcept
    : RayTracerTraceRequest() {
    *this = ::std::move(from);
  }

  inline RayTracerTraceRequest& operator=(RayTracerTraceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RayTracerTraceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RayTracerTraceRequest* internal_default_instance() {
    return reinterpret_cast<const RayTracerTraceRequest*>(
               &_RayTracerTraceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RayTracerTraceRequest* other);
  friend void swap(RayTracerTraceRequest& a, RayTracerTraceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RayTracerTraceRequest* New() const final {
    return CreateMaybeMessage<RayTracerTraceRequest>(NULL);
  }

  RayTracerTraceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RayTracerTraceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RayTracerTraceRequest& from);
  void MergeFrom(const RayTracerTraceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RayTracerTraceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RayTracerTraceRequest_OutputFields OutputFields;

  // accessors -------------------------------------------------------

  // repeated .metamoto.services.Ray rays = 1;
  int rays_size() const;
  void clear_rays();
  static const int kRaysFieldNumber = 1;
  ::metamoto::services::Ray* mutable_rays(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::services::Ray >*
      mutable_rays();
  const ::metamoto::services::Ray& rays(int index) const;
  ::metamoto::services::Ray* add_rays();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::services::Ray >&
      rays() const;

  // string radiation_pattern_id = 13;
  void clear_radiation_pattern_id();
  static const int kRadiationPatternIdFieldNumber = 13;
  const ::std::string& radiation_pattern_id() const;
  void set_radiation_pattern_id(const ::std::string& value);
  #if LANG_CXX11
  void set_radiation_pattern_id(::std::string&& value);
  #endif
  void set_radiation_pattern_id(const char* value);
  void set_radiation_pattern_id(const char* value, size_t size);
  ::std::string* mutable_radiation_pattern_id();
  ::std::string* release_radiation_pattern_id();
  void set_allocated_radiation_pattern_id(::std::string* radiation_pattern_id);

  // .metamoto.services.RayTracerTraceRequest.OutputFields output_fields = 17;
  bool has_output_fields() const;
  void clear_output_fields();
  static const int kOutputFieldsFieldNumber = 17;
  private:
  const ::metamoto::services::RayTracerTraceRequest_OutputFields& _internal_output_fields() const;
  public:
  const ::metamoto::services::RayTracerTraceRequest_OutputFields& output_fields() const;
  ::metamoto::services::RayTracerTraceRequest_OutputFields* release_output_fields();
  ::metamoto::services::RayTracerTraceRequest_OutputFields* mutable_output_fields();
  void set_allocated_output_fields(::metamoto::services::RayTracerTraceRequest_OutputFields* output_fields);

  // double maximum_distance = 2;
  void clear_maximum_distance();
  static const int kMaximumDistanceFieldNumber = 2;
  double maximum_distance() const;
  void set_maximum_distance(double value);

  // double minimum_distance = 3;
  void clear_minimum_distance();
  static const int kMinimumDistanceFieldNumber = 3;
  double minimum_distance() const;
  void set_minimum_distance(double value);

  // double wavelength = 5;
  void clear_wavelength();
  static const int kWavelengthFieldNumber = 5;
  double wavelength() const;
  void set_wavelength(double value);

  // double beam_intensity = 6;
  void clear_beam_intensity();
  static const int kBeamIntensityFieldNumber = 6;
  double beam_intensity() const;
  void set_beam_intensity(double value);

  // uint32 number_of_returns = 4;
  void clear_number_of_returns();
  static const int kNumberOfReturnsFieldNumber = 4;
  ::google::protobuf::uint32 number_of_returns() const;
  void set_number_of_returns(::google::protobuf::uint32 value);

  // uint32 number_of_rays = 9;
  void clear_number_of_rays();
  static const int kNumberOfRaysFieldNumber = 9;
  ::google::protobuf::uint32 number_of_rays() const;
  void set_number_of_rays(::google::protobuf::uint32 value);

  // double beam_waist = 10;
  void clear_beam_waist();
  static const int kBeamWaistFieldNumber = 10;
  double beam_waist() const;
  void set_beam_waist(double value);

  // double beam_divergence_angle = 11;
  void clear_beam_divergence_angle();
  static const int kBeamDivergenceAngleFieldNumber = 11;
  double beam_divergence_angle() const;
  void set_beam_divergence_angle(double value);

  // bool use_beam_widening = 7;
  void clear_use_beam_widening();
  static const int kUseBeamWideningFieldNumber = 7;
  bool use_beam_widening() const;
  void set_use_beam_widening(bool value);

  // bool gaussian_beam_profile = 8;
  void clear_gaussian_beam_profile();
  static const int kGaussianBeamProfileFieldNumber = 8;
  bool gaussian_beam_profile() const;
  void set_gaussian_beam_profile(bool value);

  // bool use_radiation_pattern = 12;
  void clear_use_radiation_pattern();
  static const int kUseRadiationPatternFieldNumber = 12;
  bool use_radiation_pattern() const;
  void set_use_radiation_pattern(bool value);

  // bool return_raw_data = 14;
  void clear_return_raw_data();
  static const int kReturnRawDataFieldNumber = 14;
  bool return_raw_data() const;
  void set_return_raw_data(bool value);

  // float transparent_permeability = 15;
  void clear_transparent_permeability();
  static const int kTransparentPermeabilityFieldNumber = 15;
  float transparent_permeability() const;
  void set_transparent_permeability(float value);

  // float transparent_cutoff_angle = 16;
  void clear_transparent_cutoff_angle();
  static const int kTransparentCutoffAngleFieldNumber = 16;
  float transparent_cutoff_angle() const;
  void set_transparent_cutoff_angle(float value);

  // float range_error_stdev = 18;
  void clear_range_error_stdev();
  static const int kRangeErrorStdevFieldNumber = 18;
  float range_error_stdev() const;
  void set_range_error_stdev(float value);

  // @@protoc_insertion_point(class_scope:metamoto.services.RayTracerTraceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::services::Ray > rays_;
  ::google::protobuf::internal::ArenaStringPtr radiation_pattern_id_;
  ::metamoto::services::RayTracerTraceRequest_OutputFields* output_fields_;
  double maximum_distance_;
  double minimum_distance_;
  double wavelength_;
  double beam_intensity_;
  ::google::protobuf::uint32 number_of_returns_;
  ::google::protobuf::uint32 number_of_rays_;
  double beam_waist_;
  double beam_divergence_angle_;
  bool use_beam_widening_;
  bool gaussian_beam_profile_;
  bool use_radiation_pattern_;
  bool return_raw_data_;
  float transparent_permeability_;
  float transparent_cutoff_angle_;
  float range_error_stdev_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RayTracerTraceReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.RayTracerTraceReply) */ {
 public:
  RayTracerTraceReply();
  virtual ~RayTracerTraceReply();

  RayTracerTraceReply(const RayTracerTraceReply& from);

  inline RayTracerTraceReply& operator=(const RayTracerTraceReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RayTracerTraceReply(RayTracerTraceReply&& from) noexcept
    : RayTracerTraceReply() {
    *this = ::std::move(from);
  }

  inline RayTracerTraceReply& operator=(RayTracerTraceReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RayTracerTraceReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RayTracerTraceReply* internal_default_instance() {
    return reinterpret_cast<const RayTracerTraceReply*>(
               &_RayTracerTraceReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RayTracerTraceReply* other);
  friend void swap(RayTracerTraceReply& a, RayTracerTraceReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RayTracerTraceReply* New() const final {
    return CreateMaybeMessage<RayTracerTraceReply>(NULL);
  }

  RayTracerTraceReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RayTracerTraceReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RayTracerTraceReply& from);
  void MergeFrom(const RayTracerTraceReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RayTracerTraceReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.services.RayHit hits = 1;
  int hits_size() const;
  void clear_hits();
  static const int kHitsFieldNumber = 1;
  ::metamoto::services::RayHit* mutable_hits(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::services::RayHit >*
      mutable_hits();
  const ::metamoto::services::RayHit& hits(int index) const;
  ::metamoto::services::RayHit* add_hits();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::services::RayHit >&
      hits() const;

  // @@protoc_insertion_point(class_scope:metamoto.services.RayTracerTraceReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::services::RayHit > hits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.Ray) */ {
 public:
  Ray();
  virtual ~Ray();

  Ray(const Ray& from);

  inline Ray& operator=(const Ray& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ray(Ray&& from) noexcept
    : Ray() {
    *this = ::std::move(from);
  }

  inline Ray& operator=(Ray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ray* internal_default_instance() {
    return reinterpret_cast<const Ray*>(
               &_Ray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Ray* other);
  friend void swap(Ray& a, Ray& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ray* New() const final {
    return CreateMaybeMessage<Ray>(NULL);
  }

  Ray* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ray>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ray& from);
  void MergeFrom(const Ray& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.types.Vector3 origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  private:
  const ::metamoto::types::Vector3& _internal_origin() const;
  public:
  const ::metamoto::types::Vector3& origin() const;
  ::metamoto::types::Vector3* release_origin();
  ::metamoto::types::Vector3* mutable_origin();
  void set_allocated_origin(::metamoto::types::Vector3* origin);

  // .metamoto.types.Vector3 direction = 2;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 2;
  private:
  const ::metamoto::types::Vector3& _internal_direction() const;
  public:
  const ::metamoto::types::Vector3& direction() const;
  ::metamoto::types::Vector3* release_direction();
  ::metamoto::types::Vector3* mutable_direction();
  void set_allocated_direction(::metamoto::types::Vector3* direction);

  // uint32 radiation_pattern_index = 3;
  void clear_radiation_pattern_index();
  static const int kRadiationPatternIndexFieldNumber = 3;
  ::google::protobuf::uint32 radiation_pattern_index() const;
  void set_radiation_pattern_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:metamoto.services.Ray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::types::Vector3* origin_;
  ::metamoto::types::Vector3* direction_;
  ::google::protobuf::uint32 radiation_pattern_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RayHit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.RayHit) */ {
 public:
  RayHit();
  virtual ~RayHit();

  RayHit(const RayHit& from);

  inline RayHit& operator=(const RayHit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RayHit(RayHit&& from) noexcept
    : RayHit() {
    *this = ::std::move(from);
  }

  inline RayHit& operator=(RayHit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RayHit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RayHit* internal_default_instance() {
    return reinterpret_cast<const RayHit*>(
               &_RayHit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(RayHit* other);
  friend void swap(RayHit& a, RayHit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RayHit* New() const final {
    return CreateMaybeMessage<RayHit>(NULL);
  }

  RayHit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RayHit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RayHit& from);
  void MergeFrom(const RayHit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RayHit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.types.Vector3 position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  private:
  const ::metamoto::types::Vector3& _internal_position() const;
  public:
  const ::metamoto::types::Vector3& position() const;
  ::metamoto::types::Vector3* release_position();
  ::metamoto::types::Vector3* mutable_position();
  void set_allocated_position(::metamoto::types::Vector3* position);

  // uint32 ray_index = 1;
  void clear_ray_index();
  static const int kRayIndexFieldNumber = 1;
  ::google::protobuf::uint32 ray_index() const;
  void set_ray_index(::google::protobuf::uint32 value);

  // float intensity = 3;
  void clear_intensity();
  static const int kIntensityFieldNumber = 3;
  float intensity() const;
  void set_intensity(float value);

  // .metamoto.types.ObjectType object_type = 4;
  void clear_object_type();
  static const int kObjectTypeFieldNumber = 4;
  ::metamoto::types::ObjectType object_type() const;
  void set_object_type(::metamoto::types::ObjectType value);

  // uint32 object_id = 5;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 5;
  ::google::protobuf::uint32 object_id() const;
  void set_object_id(::google::protobuf::uint32 value);

  // .metamoto.types.MaterialType material = 6;
  void clear_material();
  static const int kMaterialFieldNumber = 6;
  ::metamoto::types::MaterialType material() const;
  void set_material(::metamoto::types::MaterialType value);

  // float color = 7;
  void clear_color();
  static const int kColorFieldNumber = 7;
  float color() const;
  void set_color(float value);

  // float cos_incidence_angle = 8;
  void clear_cos_incidence_angle();
  static const int kCosIncidenceAngleFieldNumber = 8;
  float cos_incidence_angle() const;
  void set_cos_incidence_angle(float value);

  // @@protoc_insertion_point(class_scope:metamoto.services.RayHit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::types::Vector3* position_;
  ::google::protobuf::uint32 ray_index_;
  float intensity_;
  int object_type_;
  ::google::protobuf::uint32 object_id_;
  int material_;
  float color_;
  float cos_incidence_angle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RayTracerRadiationPattern

// repeated float intensity = 1;
inline int RayTracerRadiationPattern::intensity_size() const {
  return intensity_.size();
}
inline void RayTracerRadiationPattern::clear_intensity() {
  intensity_.Clear();
}
inline float RayTracerRadiationPattern::intensity(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerRadiationPattern.intensity)
  return intensity_.Get(index);
}
inline void RayTracerRadiationPattern::set_intensity(int index, float value) {
  intensity_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerRadiationPattern.intensity)
}
inline void RayTracerRadiationPattern::add_intensity(float value) {
  intensity_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.services.RayTracerRadiationPattern.intensity)
}
inline const ::google::protobuf::RepeatedField< float >&
RayTracerRadiationPattern::intensity() const {
  // @@protoc_insertion_point(field_list:metamoto.services.RayTracerRadiationPattern.intensity)
  return intensity_;
}
inline ::google::protobuf::RepeatedField< float >*
RayTracerRadiationPattern::mutable_intensity() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.RayTracerRadiationPattern.intensity)
  return &intensity_;
}

// repeated .metamoto.types.Vector3 direction = 2;
inline int RayTracerRadiationPattern::direction_size() const {
  return direction_.size();
}
inline ::metamoto::types::Vector3* RayTracerRadiationPattern::mutable_direction(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.RayTracerRadiationPattern.direction)
  return direction_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vector3 >*
RayTracerRadiationPattern::mutable_direction() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.RayTracerRadiationPattern.direction)
  return &direction_;
}
inline const ::metamoto::types::Vector3& RayTracerRadiationPattern::direction(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerRadiationPattern.direction)
  return direction_.Get(index);
}
inline ::metamoto::types::Vector3* RayTracerRadiationPattern::add_direction() {
  // @@protoc_insertion_point(field_add:metamoto.services.RayTracerRadiationPattern.direction)
  return direction_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vector3 >&
RayTracerRadiationPattern::direction() const {
  // @@protoc_insertion_point(field_list:metamoto.services.RayTracerRadiationPattern.direction)
  return direction_;
}

// -------------------------------------------------------------------

// RayTracerSetPatternsRequest

// repeated .metamoto.services.RayTracerRadiationPattern pattern = 1;
inline int RayTracerSetPatternsRequest::pattern_size() const {
  return pattern_.size();
}
inline void RayTracerSetPatternsRequest::clear_pattern() {
  pattern_.Clear();
}
inline ::metamoto::services::RayTracerRadiationPattern* RayTracerSetPatternsRequest::mutable_pattern(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.RayTracerSetPatternsRequest.pattern)
  return pattern_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::services::RayTracerRadiationPattern >*
RayTracerSetPatternsRequest::mutable_pattern() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.RayTracerSetPatternsRequest.pattern)
  return &pattern_;
}
inline const ::metamoto::services::RayTracerRadiationPattern& RayTracerSetPatternsRequest::pattern(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerSetPatternsRequest.pattern)
  return pattern_.Get(index);
}
inline ::metamoto::services::RayTracerRadiationPattern* RayTracerSetPatternsRequest::add_pattern() {
  // @@protoc_insertion_point(field_add:metamoto.services.RayTracerSetPatternsRequest.pattern)
  return pattern_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::services::RayTracerRadiationPattern >&
RayTracerSetPatternsRequest::pattern() const {
  // @@protoc_insertion_point(field_list:metamoto.services.RayTracerSetPatternsRequest.pattern)
  return pattern_;
}

// -------------------------------------------------------------------

// RayTracerSetPatternsReply

// string id = 1;
inline void RayTracerSetPatternsReply::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RayTracerSetPatternsReply::id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerSetPatternsReply.id)
  return id_.GetNoArena();
}
inline void RayTracerSetPatternsReply::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerSetPatternsReply.id)
}
#if LANG_CXX11
inline void RayTracerSetPatternsReply::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.RayTracerSetPatternsReply.id)
}
#endif
inline void RayTracerSetPatternsReply::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.RayTracerSetPatternsReply.id)
}
inline void RayTracerSetPatternsReply::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.RayTracerSetPatternsReply.id)
}
inline ::std::string* RayTracerSetPatternsReply::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.RayTracerSetPatternsReply.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RayTracerSetPatternsReply::release_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.RayTracerSetPatternsReply.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RayTracerSetPatternsReply::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.RayTracerSetPatternsReply.id)
}

// -------------------------------------------------------------------

// RayTracerTraceRequest_OutputFields

// bool object_id = 1;
inline void RayTracerTraceRequest_OutputFields::clear_object_id() {
  object_id_ = false;
}
inline bool RayTracerTraceRequest_OutputFields::object_id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.OutputFields.object_id)
  return object_id_;
}
inline void RayTracerTraceRequest_OutputFields::set_object_id(bool value) {
  
  object_id_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.OutputFields.object_id)
}

// bool object_type = 2;
inline void RayTracerTraceRequest_OutputFields::clear_object_type() {
  object_type_ = false;
}
inline bool RayTracerTraceRequest_OutputFields::object_type() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.OutputFields.object_type)
  return object_type_;
}
inline void RayTracerTraceRequest_OutputFields::set_object_type(bool value) {
  
  object_type_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.OutputFields.object_type)
}

// bool material = 3;
inline void RayTracerTraceRequest_OutputFields::clear_material() {
  material_ = false;
}
inline bool RayTracerTraceRequest_OutputFields::material() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.OutputFields.material)
  return material_;
}
inline void RayTracerTraceRequest_OutputFields::set_material(bool value) {
  
  material_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.OutputFields.material)
}

// bool angle = 4;
inline void RayTracerTraceRequest_OutputFields::clear_angle() {
  angle_ = false;
}
inline bool RayTracerTraceRequest_OutputFields::angle() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.OutputFields.angle)
  return angle_;
}
inline void RayTracerTraceRequest_OutputFields::set_angle(bool value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.OutputFields.angle)
}

// -------------------------------------------------------------------

// RayTracerTraceRequest

// repeated .metamoto.services.Ray rays = 1;
inline int RayTracerTraceRequest::rays_size() const {
  return rays_.size();
}
inline void RayTracerTraceRequest::clear_rays() {
  rays_.Clear();
}
inline ::metamoto::services::Ray* RayTracerTraceRequest::mutable_rays(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.RayTracerTraceRequest.rays)
  return rays_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::services::Ray >*
RayTracerTraceRequest::mutable_rays() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.RayTracerTraceRequest.rays)
  return &rays_;
}
inline const ::metamoto::services::Ray& RayTracerTraceRequest::rays(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.rays)
  return rays_.Get(index);
}
inline ::metamoto::services::Ray* RayTracerTraceRequest::add_rays() {
  // @@protoc_insertion_point(field_add:metamoto.services.RayTracerTraceRequest.rays)
  return rays_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::services::Ray >&
RayTracerTraceRequest::rays() const {
  // @@protoc_insertion_point(field_list:metamoto.services.RayTracerTraceRequest.rays)
  return rays_;
}

// double maximum_distance = 2;
inline void RayTracerTraceRequest::clear_maximum_distance() {
  maximum_distance_ = 0;
}
inline double RayTracerTraceRequest::maximum_distance() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.maximum_distance)
  return maximum_distance_;
}
inline void RayTracerTraceRequest::set_maximum_distance(double value) {
  
  maximum_distance_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.maximum_distance)
}

// double minimum_distance = 3;
inline void RayTracerTraceRequest::clear_minimum_distance() {
  minimum_distance_ = 0;
}
inline double RayTracerTraceRequest::minimum_distance() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.minimum_distance)
  return minimum_distance_;
}
inline void RayTracerTraceRequest::set_minimum_distance(double value) {
  
  minimum_distance_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.minimum_distance)
}

// uint32 number_of_returns = 4;
inline void RayTracerTraceRequest::clear_number_of_returns() {
  number_of_returns_ = 0u;
}
inline ::google::protobuf::uint32 RayTracerTraceRequest::number_of_returns() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.number_of_returns)
  return number_of_returns_;
}
inline void RayTracerTraceRequest::set_number_of_returns(::google::protobuf::uint32 value) {
  
  number_of_returns_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.number_of_returns)
}

// double wavelength = 5;
inline void RayTracerTraceRequest::clear_wavelength() {
  wavelength_ = 0;
}
inline double RayTracerTraceRequest::wavelength() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.wavelength)
  return wavelength_;
}
inline void RayTracerTraceRequest::set_wavelength(double value) {
  
  wavelength_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.wavelength)
}

// double beam_intensity = 6;
inline void RayTracerTraceRequest::clear_beam_intensity() {
  beam_intensity_ = 0;
}
inline double RayTracerTraceRequest::beam_intensity() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.beam_intensity)
  return beam_intensity_;
}
inline void RayTracerTraceRequest::set_beam_intensity(double value) {
  
  beam_intensity_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.beam_intensity)
}

// bool use_beam_widening = 7;
inline void RayTracerTraceRequest::clear_use_beam_widening() {
  use_beam_widening_ = false;
}
inline bool RayTracerTraceRequest::use_beam_widening() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.use_beam_widening)
  return use_beam_widening_;
}
inline void RayTracerTraceRequest::set_use_beam_widening(bool value) {
  
  use_beam_widening_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.use_beam_widening)
}

// bool gaussian_beam_profile = 8;
inline void RayTracerTraceRequest::clear_gaussian_beam_profile() {
  gaussian_beam_profile_ = false;
}
inline bool RayTracerTraceRequest::gaussian_beam_profile() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.gaussian_beam_profile)
  return gaussian_beam_profile_;
}
inline void RayTracerTraceRequest::set_gaussian_beam_profile(bool value) {
  
  gaussian_beam_profile_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.gaussian_beam_profile)
}

// uint32 number_of_rays = 9;
inline void RayTracerTraceRequest::clear_number_of_rays() {
  number_of_rays_ = 0u;
}
inline ::google::protobuf::uint32 RayTracerTraceRequest::number_of_rays() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.number_of_rays)
  return number_of_rays_;
}
inline void RayTracerTraceRequest::set_number_of_rays(::google::protobuf::uint32 value) {
  
  number_of_rays_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.number_of_rays)
}

// double beam_waist = 10;
inline void RayTracerTraceRequest::clear_beam_waist() {
  beam_waist_ = 0;
}
inline double RayTracerTraceRequest::beam_waist() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.beam_waist)
  return beam_waist_;
}
inline void RayTracerTraceRequest::set_beam_waist(double value) {
  
  beam_waist_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.beam_waist)
}

// double beam_divergence_angle = 11;
inline void RayTracerTraceRequest::clear_beam_divergence_angle() {
  beam_divergence_angle_ = 0;
}
inline double RayTracerTraceRequest::beam_divergence_angle() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.beam_divergence_angle)
  return beam_divergence_angle_;
}
inline void RayTracerTraceRequest::set_beam_divergence_angle(double value) {
  
  beam_divergence_angle_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.beam_divergence_angle)
}

// bool use_radiation_pattern = 12;
inline void RayTracerTraceRequest::clear_use_radiation_pattern() {
  use_radiation_pattern_ = false;
}
inline bool RayTracerTraceRequest::use_radiation_pattern() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.use_radiation_pattern)
  return use_radiation_pattern_;
}
inline void RayTracerTraceRequest::set_use_radiation_pattern(bool value) {
  
  use_radiation_pattern_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.use_radiation_pattern)
}

// string radiation_pattern_id = 13;
inline void RayTracerTraceRequest::clear_radiation_pattern_id() {
  radiation_pattern_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RayTracerTraceRequest::radiation_pattern_id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.radiation_pattern_id)
  return radiation_pattern_id_.GetNoArena();
}
inline void RayTracerTraceRequest::set_radiation_pattern_id(const ::std::string& value) {
  
  radiation_pattern_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.radiation_pattern_id)
}
#if LANG_CXX11
inline void RayTracerTraceRequest::set_radiation_pattern_id(::std::string&& value) {
  
  radiation_pattern_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.RayTracerTraceRequest.radiation_pattern_id)
}
#endif
inline void RayTracerTraceRequest::set_radiation_pattern_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  radiation_pattern_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.RayTracerTraceRequest.radiation_pattern_id)
}
inline void RayTracerTraceRequest::set_radiation_pattern_id(const char* value, size_t size) {
  
  radiation_pattern_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.RayTracerTraceRequest.radiation_pattern_id)
}
inline ::std::string* RayTracerTraceRequest::mutable_radiation_pattern_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.RayTracerTraceRequest.radiation_pattern_id)
  return radiation_pattern_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RayTracerTraceRequest::release_radiation_pattern_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.RayTracerTraceRequest.radiation_pattern_id)
  
  return radiation_pattern_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RayTracerTraceRequest::set_allocated_radiation_pattern_id(::std::string* radiation_pattern_id) {
  if (radiation_pattern_id != NULL) {
    
  } else {
    
  }
  radiation_pattern_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radiation_pattern_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.RayTracerTraceRequest.radiation_pattern_id)
}

// bool return_raw_data = 14;
inline void RayTracerTraceRequest::clear_return_raw_data() {
  return_raw_data_ = false;
}
inline bool RayTracerTraceRequest::return_raw_data() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.return_raw_data)
  return return_raw_data_;
}
inline void RayTracerTraceRequest::set_return_raw_data(bool value) {
  
  return_raw_data_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.return_raw_data)
}

// float transparent_permeability = 15;
inline void RayTracerTraceRequest::clear_transparent_permeability() {
  transparent_permeability_ = 0;
}
inline float RayTracerTraceRequest::transparent_permeability() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.transparent_permeability)
  return transparent_permeability_;
}
inline void RayTracerTraceRequest::set_transparent_permeability(float value) {
  
  transparent_permeability_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.transparent_permeability)
}

// float transparent_cutoff_angle = 16;
inline void RayTracerTraceRequest::clear_transparent_cutoff_angle() {
  transparent_cutoff_angle_ = 0;
}
inline float RayTracerTraceRequest::transparent_cutoff_angle() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.transparent_cutoff_angle)
  return transparent_cutoff_angle_;
}
inline void RayTracerTraceRequest::set_transparent_cutoff_angle(float value) {
  
  transparent_cutoff_angle_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.transparent_cutoff_angle)
}

// .metamoto.services.RayTracerTraceRequest.OutputFields output_fields = 17;
inline bool RayTracerTraceRequest::has_output_fields() const {
  return this != internal_default_instance() && output_fields_ != NULL;
}
inline void RayTracerTraceRequest::clear_output_fields() {
  if (GetArenaNoVirtual() == NULL && output_fields_ != NULL) {
    delete output_fields_;
  }
  output_fields_ = NULL;
}
inline const ::metamoto::services::RayTracerTraceRequest_OutputFields& RayTracerTraceRequest::_internal_output_fields() const {
  return *output_fields_;
}
inline const ::metamoto::services::RayTracerTraceRequest_OutputFields& RayTracerTraceRequest::output_fields() const {
  const ::metamoto::services::RayTracerTraceRequest_OutputFields* p = output_fields_;
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.output_fields)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::services::RayTracerTraceRequest_OutputFields*>(
      &::metamoto::services::_RayTracerTraceRequest_OutputFields_default_instance_);
}
inline ::metamoto::services::RayTracerTraceRequest_OutputFields* RayTracerTraceRequest::release_output_fields() {
  // @@protoc_insertion_point(field_release:metamoto.services.RayTracerTraceRequest.output_fields)
  
  ::metamoto::services::RayTracerTraceRequest_OutputFields* temp = output_fields_;
  output_fields_ = NULL;
  return temp;
}
inline ::metamoto::services::RayTracerTraceRequest_OutputFields* RayTracerTraceRequest::mutable_output_fields() {
  
  if (output_fields_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::services::RayTracerTraceRequest_OutputFields>(GetArenaNoVirtual());
    output_fields_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.RayTracerTraceRequest.output_fields)
  return output_fields_;
}
inline void RayTracerTraceRequest::set_allocated_output_fields(::metamoto::services::RayTracerTraceRequest_OutputFields* output_fields) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete output_fields_;
  }
  if (output_fields) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      output_fields = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_fields, submessage_arena);
    }
    
  } else {
    
  }
  output_fields_ = output_fields;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.RayTracerTraceRequest.output_fields)
}

// float range_error_stdev = 18;
inline void RayTracerTraceRequest::clear_range_error_stdev() {
  range_error_stdev_ = 0;
}
inline float RayTracerTraceRequest::range_error_stdev() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceRequest.range_error_stdev)
  return range_error_stdev_;
}
inline void RayTracerTraceRequest::set_range_error_stdev(float value) {
  
  range_error_stdev_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayTracerTraceRequest.range_error_stdev)
}

// -------------------------------------------------------------------

// RayTracerTraceReply

// repeated .metamoto.services.RayHit hits = 1;
inline int RayTracerTraceReply::hits_size() const {
  return hits_.size();
}
inline void RayTracerTraceReply::clear_hits() {
  hits_.Clear();
}
inline ::metamoto::services::RayHit* RayTracerTraceReply::mutable_hits(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.RayTracerTraceReply.hits)
  return hits_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::services::RayHit >*
RayTracerTraceReply::mutable_hits() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.RayTracerTraceReply.hits)
  return &hits_;
}
inline const ::metamoto::services::RayHit& RayTracerTraceReply::hits(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayTracerTraceReply.hits)
  return hits_.Get(index);
}
inline ::metamoto::services::RayHit* RayTracerTraceReply::add_hits() {
  // @@protoc_insertion_point(field_add:metamoto.services.RayTracerTraceReply.hits)
  return hits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::services::RayHit >&
RayTracerTraceReply::hits() const {
  // @@protoc_insertion_point(field_list:metamoto.services.RayTracerTraceReply.hits)
  return hits_;
}

// -------------------------------------------------------------------

// Ray

// .metamoto.types.Vector3 origin = 1;
inline bool Ray::has_origin() const {
  return this != internal_default_instance() && origin_ != NULL;
}
inline const ::metamoto::types::Vector3& Ray::_internal_origin() const {
  return *origin_;
}
inline const ::metamoto::types::Vector3& Ray::origin() const {
  const ::metamoto::types::Vector3* p = origin_;
  // @@protoc_insertion_point(field_get:metamoto.services.Ray.origin)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* Ray::release_origin() {
  // @@protoc_insertion_point(field_release:metamoto.services.Ray.origin)
  
  ::metamoto::types::Vector3* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* Ray::mutable_origin() {
  
  if (origin_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    origin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.Ray.origin)
  return origin_;
}
inline void Ray::set_allocated_origin(::metamoto::types::Vector3* origin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(origin_);
  }
  if (origin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      origin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    
  } else {
    
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.Ray.origin)
}

// .metamoto.types.Vector3 direction = 2;
inline bool Ray::has_direction() const {
  return this != internal_default_instance() && direction_ != NULL;
}
inline const ::metamoto::types::Vector3& Ray::_internal_direction() const {
  return *direction_;
}
inline const ::metamoto::types::Vector3& Ray::direction() const {
  const ::metamoto::types::Vector3* p = direction_;
  // @@protoc_insertion_point(field_get:metamoto.services.Ray.direction)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* Ray::release_direction() {
  // @@protoc_insertion_point(field_release:metamoto.services.Ray.direction)
  
  ::metamoto::types::Vector3* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* Ray::mutable_direction() {
  
  if (direction_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    direction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.Ray.direction)
  return direction_;
}
inline void Ray::set_allocated_direction(::metamoto::types::Vector3* direction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(direction_);
  }
  if (direction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      direction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.Ray.direction)
}

// uint32 radiation_pattern_index = 3;
inline void Ray::clear_radiation_pattern_index() {
  radiation_pattern_index_ = 0u;
}
inline ::google::protobuf::uint32 Ray::radiation_pattern_index() const {
  // @@protoc_insertion_point(field_get:metamoto.services.Ray.radiation_pattern_index)
  return radiation_pattern_index_;
}
inline void Ray::set_radiation_pattern_index(::google::protobuf::uint32 value) {
  
  radiation_pattern_index_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.Ray.radiation_pattern_index)
}

// -------------------------------------------------------------------

// RayHit

// uint32 ray_index = 1;
inline void RayHit::clear_ray_index() {
  ray_index_ = 0u;
}
inline ::google::protobuf::uint32 RayHit::ray_index() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayHit.ray_index)
  return ray_index_;
}
inline void RayHit::set_ray_index(::google::protobuf::uint32 value) {
  
  ray_index_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayHit.ray_index)
}

// .metamoto.types.Vector3 position = 2;
inline bool RayHit::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::metamoto::types::Vector3& RayHit::_internal_position() const {
  return *position_;
}
inline const ::metamoto::types::Vector3& RayHit::position() const {
  const ::metamoto::types::Vector3* p = position_;
  // @@protoc_insertion_point(field_get:metamoto.services.RayHit.position)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* RayHit::release_position() {
  // @@protoc_insertion_point(field_release:metamoto.services.RayHit.position)
  
  ::metamoto::types::Vector3* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* RayHit::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.RayHit.position)
  return position_;
}
inline void RayHit::set_allocated_position(::metamoto::types::Vector3* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.RayHit.position)
}

// float intensity = 3;
inline void RayHit::clear_intensity() {
  intensity_ = 0;
}
inline float RayHit::intensity() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayHit.intensity)
  return intensity_;
}
inline void RayHit::set_intensity(float value) {
  
  intensity_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayHit.intensity)
}

// .metamoto.types.ObjectType object_type = 4;
inline void RayHit::clear_object_type() {
  object_type_ = 0;
}
inline ::metamoto::types::ObjectType RayHit::object_type() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayHit.object_type)
  return static_cast< ::metamoto::types::ObjectType >(object_type_);
}
inline void RayHit::set_object_type(::metamoto::types::ObjectType value) {
  
  object_type_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayHit.object_type)
}

// uint32 object_id = 5;
inline void RayHit::clear_object_id() {
  object_id_ = 0u;
}
inline ::google::protobuf::uint32 RayHit::object_id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayHit.object_id)
  return object_id_;
}
inline void RayHit::set_object_id(::google::protobuf::uint32 value) {
  
  object_id_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayHit.object_id)
}

// .metamoto.types.MaterialType material = 6;
inline void RayHit::clear_material() {
  material_ = 0;
}
inline ::metamoto::types::MaterialType RayHit::material() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayHit.material)
  return static_cast< ::metamoto::types::MaterialType >(material_);
}
inline void RayHit::set_material(::metamoto::types::MaterialType value) {
  
  material_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayHit.material)
}

// float color = 7;
inline void RayHit::clear_color() {
  color_ = 0;
}
inline float RayHit::color() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayHit.color)
  return color_;
}
inline void RayHit::set_color(float value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayHit.color)
}

// float cos_incidence_angle = 8;
inline void RayHit::clear_cos_incidence_angle() {
  cos_incidence_angle_ = 0;
}
inline float RayHit::cos_incidence_angle() const {
  // @@protoc_insertion_point(field_get:metamoto.services.RayHit.cos_incidence_angle)
  return cos_incidence_angle_;
}
inline void RayHit::set_cos_incidence_angle(float value) {
  
  cos_incidence_angle_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.RayHit.cos_incidence_angle)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace services
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2fservices_2fray_5ftracer_2eproto
