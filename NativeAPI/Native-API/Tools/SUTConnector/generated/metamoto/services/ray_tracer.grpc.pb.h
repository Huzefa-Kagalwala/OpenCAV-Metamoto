// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metamoto/services/ray_tracer.proto
// Original file comments:
// Copyright (c) 2018-2020 Metamoto, Inc. All Rights Reserved.
//
#ifndef GRPC_metamoto_2fservices_2fray_5ftracer_2eproto__INCLUDED
#define GRPC_metamoto_2fservices_2fray_5ftracer_2eproto__INCLUDED

#include "metamoto/services/ray_tracer.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace metamoto {
namespace services {

// The ray tracer service provides the ability to fire rays/beams into the simulation scene
// from a System Under Test, often used in the development of sensor models. A Beam is a collection
// of rays. The properties of the collection is either defined through beam widening parameters
// or through setting radiation patterns described below. Beams have the same data type as rays.
//
// The Trace command takes a list of rays/beams and returns a list of hits in the scene. Each hit
// includes the hit position, intensity, material information, and ground truth information.
//
// The ray tracer supports simulating beam radiation patterns where each beam provided to the Trace
// command is expanded into multiple rays. Two different options for beam radiation simulation are
// available. The first is beam widening. Beam widening generates multiple rays for each beam to
// simulate the widening of the beam over distance and is defined by specifying a beam waist, the divergence
// angle and number of rays. The second option is to specify custom radiation patterns. The SetPatterns
// request is used at initialization to establish one or more patterns to be used in the simulation.
// Each pattern includes a list of intensities and directions. Patterns are used by specifying the pattern 
// index (the index into the list provided to SetPatterns) for each ray provided to Trace.
class RayTracer final {
 public:
  static constexpr char const* service_full_name() {
    return "metamoto.services.RayTracer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SetPatterns(::grpc::ClientContext* context, const ::metamoto::services::RayTracerSetPatternsRequest& request, ::metamoto::services::RayTracerSetPatternsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::RayTracerSetPatternsReply>> AsyncSetPatterns(::grpc::ClientContext* context, const ::metamoto::services::RayTracerSetPatternsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::RayTracerSetPatternsReply>>(AsyncSetPatternsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::RayTracerSetPatternsReply>> PrepareAsyncSetPatterns(::grpc::ClientContext* context, const ::metamoto::services::RayTracerSetPatternsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::RayTracerSetPatternsReply>>(PrepareAsyncSetPatternsRaw(context, request, cq));
    }
    virtual ::grpc::Status Trace(::grpc::ClientContext* context, const ::metamoto::services::RayTracerTraceRequest& request, ::metamoto::services::RayTracerTraceReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::RayTracerTraceReply>> AsyncTrace(::grpc::ClientContext* context, const ::metamoto::services::RayTracerTraceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::RayTracerTraceReply>>(AsyncTraceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::RayTracerTraceReply>> PrepareAsyncTrace(::grpc::ClientContext* context, const ::metamoto::services::RayTracerTraceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::RayTracerTraceReply>>(PrepareAsyncTraceRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void SetPatterns(::grpc::ClientContext* context, const ::metamoto::services::RayTracerSetPatternsRequest* request, ::metamoto::services::RayTracerSetPatternsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Trace(::grpc::ClientContext* context, const ::metamoto::services::RayTracerTraceRequest* request, ::metamoto::services::RayTracerTraceReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::RayTracerSetPatternsReply>* AsyncSetPatternsRaw(::grpc::ClientContext* context, const ::metamoto::services::RayTracerSetPatternsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::RayTracerSetPatternsReply>* PrepareAsyncSetPatternsRaw(::grpc::ClientContext* context, const ::metamoto::services::RayTracerSetPatternsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::RayTracerTraceReply>* AsyncTraceRaw(::grpc::ClientContext* context, const ::metamoto::services::RayTracerTraceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::RayTracerTraceReply>* PrepareAsyncTraceRaw(::grpc::ClientContext* context, const ::metamoto::services::RayTracerTraceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SetPatterns(::grpc::ClientContext* context, const ::metamoto::services::RayTracerSetPatternsRequest& request, ::metamoto::services::RayTracerSetPatternsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::RayTracerSetPatternsReply>> AsyncSetPatterns(::grpc::ClientContext* context, const ::metamoto::services::RayTracerSetPatternsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::RayTracerSetPatternsReply>>(AsyncSetPatternsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::RayTracerSetPatternsReply>> PrepareAsyncSetPatterns(::grpc::ClientContext* context, const ::metamoto::services::RayTracerSetPatternsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::RayTracerSetPatternsReply>>(PrepareAsyncSetPatternsRaw(context, request, cq));
    }
    ::grpc::Status Trace(::grpc::ClientContext* context, const ::metamoto::services::RayTracerTraceRequest& request, ::metamoto::services::RayTracerTraceReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::RayTracerTraceReply>> AsyncTrace(::grpc::ClientContext* context, const ::metamoto::services::RayTracerTraceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::RayTracerTraceReply>>(AsyncTraceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::RayTracerTraceReply>> PrepareAsyncTrace(::grpc::ClientContext* context, const ::metamoto::services::RayTracerTraceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::RayTracerTraceReply>>(PrepareAsyncTraceRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SetPatterns(::grpc::ClientContext* context, const ::metamoto::services::RayTracerSetPatternsRequest* request, ::metamoto::services::RayTracerSetPatternsReply* response, std::function<void(::grpc::Status)>) override;
      void Trace(::grpc::ClientContext* context, const ::metamoto::services::RayTracerTraceRequest* request, ::metamoto::services::RayTracerTraceReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::RayTracerSetPatternsReply>* AsyncSetPatternsRaw(::grpc::ClientContext* context, const ::metamoto::services::RayTracerSetPatternsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::RayTracerSetPatternsReply>* PrepareAsyncSetPatternsRaw(::grpc::ClientContext* context, const ::metamoto::services::RayTracerSetPatternsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::RayTracerTraceReply>* AsyncTraceRaw(::grpc::ClientContext* context, const ::metamoto::services::RayTracerTraceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::RayTracerTraceReply>* PrepareAsyncTraceRaw(::grpc::ClientContext* context, const ::metamoto::services::RayTracerTraceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetPatterns_;
    const ::grpc::internal::RpcMethod rpcmethod_Trace_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SetPatterns(::grpc::ServerContext* context, const ::metamoto::services::RayTracerSetPatternsRequest* request, ::metamoto::services::RayTracerSetPatternsReply* response);
    virtual ::grpc::Status Trace(::grpc::ServerContext* context, const ::metamoto::services::RayTracerTraceRequest* request, ::metamoto::services::RayTracerTraceReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPatterns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetPatterns() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetPatterns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPatterns(::grpc::ServerContext* context, const ::metamoto::services::RayTracerSetPatternsRequest* request, ::metamoto::services::RayTracerSetPatternsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPatterns(::grpc::ServerContext* context, ::metamoto::services::RayTracerSetPatternsRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::RayTracerSetPatternsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Trace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Trace() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Trace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Trace(::grpc::ServerContext* context, const ::metamoto::services::RayTracerTraceRequest* request, ::metamoto::services::RayTracerTraceReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTrace(::grpc::ServerContext* context, ::metamoto::services::RayTracerTraceRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::RayTracerTraceReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetPatterns<WithAsyncMethod_Trace<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetPatterns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetPatterns() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::RayTracerSetPatternsRequest, ::metamoto::services::RayTracerSetPatternsReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::RayTracerSetPatternsRequest* request,
                 ::metamoto::services::RayTracerSetPatternsReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetPatterns(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SetPatterns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPatterns(::grpc::ServerContext* context, const ::metamoto::services::RayTracerSetPatternsRequest* request, ::metamoto::services::RayTracerSetPatternsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetPatterns(::grpc::ServerContext* context, const ::metamoto::services::RayTracerSetPatternsRequest* request, ::metamoto::services::RayTracerSetPatternsReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Trace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Trace() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::RayTracerTraceRequest, ::metamoto::services::RayTracerTraceReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::RayTracerTraceRequest* request,
                 ::metamoto::services::RayTracerTraceReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Trace(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Trace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Trace(::grpc::ServerContext* context, const ::metamoto::services::RayTracerTraceRequest* request, ::metamoto::services::RayTracerTraceReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Trace(::grpc::ServerContext* context, const ::metamoto::services::RayTracerTraceRequest* request, ::metamoto::services::RayTracerTraceReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_SetPatterns<ExperimentalWithCallbackMethod_Trace<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetPatterns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetPatterns() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetPatterns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPatterns(::grpc::ServerContext* context, const ::metamoto::services::RayTracerSetPatternsRequest* request, ::metamoto::services::RayTracerSetPatternsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Trace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Trace() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Trace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Trace(::grpc::ServerContext* context, const ::metamoto::services::RayTracerTraceRequest* request, ::metamoto::services::RayTracerTraceReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPatterns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetPatterns() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetPatterns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPatterns(::grpc::ServerContext* context, const ::metamoto::services::RayTracerSetPatternsRequest* request, ::metamoto::services::RayTracerSetPatternsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPatterns(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Trace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Trace() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Trace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Trace(::grpc::ServerContext* context, const ::metamoto::services::RayTracerTraceRequest* request, ::metamoto::services::RayTracerTraceReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTrace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetPatterns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetPatterns() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetPatterns(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetPatterns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPatterns(::grpc::ServerContext* context, const ::metamoto::services::RayTracerSetPatternsRequest* request, ::metamoto::services::RayTracerSetPatternsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetPatterns(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Trace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Trace() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Trace(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Trace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Trace(::grpc::ServerContext* context, const ::metamoto::services::RayTracerTraceRequest* request, ::metamoto::services::RayTracerTraceReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Trace(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPatterns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetPatterns() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::RayTracerSetPatternsRequest, ::metamoto::services::RayTracerSetPatternsReply>(std::bind(&WithStreamedUnaryMethod_SetPatterns<BaseClass>::StreamedSetPatterns, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetPatterns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPatterns(::grpc::ServerContext* context, const ::metamoto::services::RayTracerSetPatternsRequest* request, ::metamoto::services::RayTracerSetPatternsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPatterns(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::RayTracerSetPatternsRequest,::metamoto::services::RayTracerSetPatternsReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Trace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Trace() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::RayTracerTraceRequest, ::metamoto::services::RayTracerTraceReply>(std::bind(&WithStreamedUnaryMethod_Trace<BaseClass>::StreamedTrace, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Trace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Trace(::grpc::ServerContext* context, const ::metamoto::services::RayTracerTraceRequest* request, ::metamoto::services::RayTracerTraceReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTrace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::RayTracerTraceRequest,::metamoto::services::RayTracerTraceReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetPatterns<WithStreamedUnaryMethod_Trace<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetPatterns<WithStreamedUnaryMethod_Trace<Service > > StreamedService;
};

}  // namespace services
}  // namespace metamoto


#endif  // GRPC_metamoto_2fservices_2fray_5ftracer_2eproto__INCLUDED
