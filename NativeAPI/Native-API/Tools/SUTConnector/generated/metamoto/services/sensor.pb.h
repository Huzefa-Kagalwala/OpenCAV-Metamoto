// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/services/sensor.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2fservices_2fsensor_2eproto
#define PROTOBUF_INCLUDED_metamoto_2fservices_2fsensor_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
#include "metamoto/types/pose.pb.h"
#include "metamoto/types/result_metadata.pb.h"
#include "metamoto/types/scenario.pb.h"
#include "metamoto/types/service_description.pb.h"
#include "metamoto/types/test_case.pb.h"
#include "metamoto/types/vehicle_info.pb.h"
#include "metamoto/types/waypoint.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fsensor_2eproto 

namespace protobuf_metamoto_2fservices_2fsensor_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2fservices_2fsensor_2eproto
namespace metamoto {
namespace services {
class SensorCloseReply;
class SensorCloseReplyDefaultTypeInternal;
extern SensorCloseReplyDefaultTypeInternal _SensorCloseReply_default_instance_;
class SensorCloseRequest;
class SensorCloseRequestDefaultTypeInternal;
extern SensorCloseRequestDefaultTypeInternal _SensorCloseRequest_default_instance_;
class SensorInitializeReply;
class SensorInitializeReplyDefaultTypeInternal;
extern SensorInitializeReplyDefaultTypeInternal _SensorInitializeReply_default_instance_;
class SensorInitializeRequest;
class SensorInitializeRequestDefaultTypeInternal;
extern SensorInitializeRequestDefaultTypeInternal _SensorInitializeRequest_default_instance_;
class SensorSetupReply;
class SensorSetupReplyDefaultTypeInternal;
extern SensorSetupReplyDefaultTypeInternal _SensorSetupReply_default_instance_;
class SensorSetupRequest;
class SensorSetupRequestDefaultTypeInternal;
extern SensorSetupRequestDefaultTypeInternal _SensorSetupRequest_default_instance_;
class SensorUpdateReply;
class SensorUpdateReplyDefaultTypeInternal;
extern SensorUpdateReplyDefaultTypeInternal _SensorUpdateReply_default_instance_;
class SensorUpdateRequest;
class SensorUpdateRequestDefaultTypeInternal;
extern SensorUpdateRequestDefaultTypeInternal _SensorUpdateRequest_default_instance_;
}  // namespace services
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::services::SensorCloseReply* Arena::CreateMaybeMessage<::metamoto::services::SensorCloseReply>(Arena*);
template<> ::metamoto::services::SensorCloseRequest* Arena::CreateMaybeMessage<::metamoto::services::SensorCloseRequest>(Arena*);
template<> ::metamoto::services::SensorInitializeReply* Arena::CreateMaybeMessage<::metamoto::services::SensorInitializeReply>(Arena*);
template<> ::metamoto::services::SensorInitializeRequest* Arena::CreateMaybeMessage<::metamoto::services::SensorInitializeRequest>(Arena*);
template<> ::metamoto::services::SensorSetupReply* Arena::CreateMaybeMessage<::metamoto::services::SensorSetupReply>(Arena*);
template<> ::metamoto::services::SensorSetupRequest* Arena::CreateMaybeMessage<::metamoto::services::SensorSetupRequest>(Arena*);
template<> ::metamoto::services::SensorUpdateReply* Arena::CreateMaybeMessage<::metamoto::services::SensorUpdateReply>(Arena*);
template<> ::metamoto::services::SensorUpdateRequest* Arena::CreateMaybeMessage<::metamoto::services::SensorUpdateRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace services {

// ===================================================================

class SensorSetupRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.SensorSetupRequest) */ {
 public:
  SensorSetupRequest();
  virtual ~SensorSetupRequest();

  SensorSetupRequest(const SensorSetupRequest& from);

  inline SensorSetupRequest& operator=(const SensorSetupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorSetupRequest(SensorSetupRequest&& from) noexcept
    : SensorSetupRequest() {
    *this = ::std::move(from);
  }

  inline SensorSetupRequest& operator=(SensorSetupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorSetupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorSetupRequest* internal_default_instance() {
    return reinterpret_cast<const SensorSetupRequest*>(
               &_SensorSetupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SensorSetupRequest* other);
  friend void swap(SensorSetupRequest& a, SensorSetupRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorSetupRequest* New() const final {
    return CreateMaybeMessage<SensorSetupRequest>(NULL);
  }

  SensorSetupRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorSetupRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorSetupRequest& from);
  void MergeFrom(const SensorSetupRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorSetupRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.ServiceDescription services = 2;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 2;
  ::metamoto::types::ServiceDescription* mutable_services(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription >*
      mutable_services();
  const ::metamoto::types::ServiceDescription& services(int index) const;
  ::metamoto::types::ServiceDescription* add_services();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription >&
      services() const;

  // .google.protobuf.Struct parameters = 1;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 1;
  private:
  const ::google::protobuf::Struct& _internal_parameters() const;
  public:
  const ::google::protobuf::Struct& parameters() const;
  ::google::protobuf::Struct* release_parameters();
  ::google::protobuf::Struct* mutable_parameters();
  void set_allocated_parameters(::google::protobuf::Struct* parameters);

  // .metamoto.types.TestCase test_case = 3;
  bool has_test_case() const;
  void clear_test_case();
  static const int kTestCaseFieldNumber = 3;
  private:
  const ::metamoto::types::TestCase& _internal_test_case() const;
  public:
  const ::metamoto::types::TestCase& test_case() const;
  ::metamoto::types::TestCase* release_test_case();
  ::metamoto::types::TestCase* mutable_test_case();
  void set_allocated_test_case(::metamoto::types::TestCase* test_case);

  // @@protoc_insertion_point(class_scope:metamoto.services.SensorSetupRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription > services_;
  ::google::protobuf::Struct* parameters_;
  ::metamoto::types::TestCase* test_case_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fsensor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SensorSetupReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.SensorSetupReply) */ {
 public:
  SensorSetupReply();
  virtual ~SensorSetupReply();

  SensorSetupReply(const SensorSetupReply& from);

  inline SensorSetupReply& operator=(const SensorSetupReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorSetupReply(SensorSetupReply&& from) noexcept
    : SensorSetupReply() {
    *this = ::std::move(from);
  }

  inline SensorSetupReply& operator=(SensorSetupReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorSetupReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorSetupReply* internal_default_instance() {
    return reinterpret_cast<const SensorSetupReply*>(
               &_SensorSetupReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SensorSetupReply* other);
  friend void swap(SensorSetupReply& a, SensorSetupReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorSetupReply* New() const final {
    return CreateMaybeMessage<SensorSetupReply>(NULL);
  }

  SensorSetupReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorSetupReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorSetupReply& from);
  void MergeFrom(const SensorSetupReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorSetupReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:metamoto.services.SensorSetupReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fsensor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SensorInitializeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.SensorInitializeRequest) */ {
 public:
  SensorInitializeRequest();
  virtual ~SensorInitializeRequest();

  SensorInitializeRequest(const SensorInitializeRequest& from);

  inline SensorInitializeRequest& operator=(const SensorInitializeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorInitializeRequest(SensorInitializeRequest&& from) noexcept
    : SensorInitializeRequest() {
    *this = ::std::move(from);
  }

  inline SensorInitializeRequest& operator=(SensorInitializeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorInitializeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorInitializeRequest* internal_default_instance() {
    return reinterpret_cast<const SensorInitializeRequest*>(
               &_SensorInitializeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SensorInitializeRequest* other);
  friend void swap(SensorInitializeRequest& a, SensorInitializeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorInitializeRequest* New() const final {
    return CreateMaybeMessage<SensorInitializeRequest>(NULL);
  }

  SensorInitializeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorInitializeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorInitializeRequest& from);
  void MergeFrom(const SensorInitializeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorInitializeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string publish_topics = 2;
  int publish_topics_size() const;
  void clear_publish_topics();
  static const int kPublishTopicsFieldNumber = 2;
  const ::std::string& publish_topics(int index) const;
  ::std::string* mutable_publish_topics(int index);
  void set_publish_topics(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_publish_topics(int index, ::std::string&& value);
  #endif
  void set_publish_topics(int index, const char* value);
  void set_publish_topics(int index, const char* value, size_t size);
  ::std::string* add_publish_topics();
  void add_publish_topics(const ::std::string& value);
  #if LANG_CXX11
  void add_publish_topics(::std::string&& value);
  #endif
  void add_publish_topics(const char* value);
  void add_publish_topics(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& publish_topics() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_publish_topics();

  // repeated .metamoto.types.ServiceDescription services = 4;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 4;
  ::metamoto::types::ServiceDescription* mutable_services(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription >*
      mutable_services();
  const ::metamoto::types::ServiceDescription& services(int index) const;
  ::metamoto::types::ServiceDescription* add_services();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription >&
      services() const;

  // repeated .metamoto.types.Waypoint ego_vehicle_path = 6;
  int ego_vehicle_path_size() const;
  void clear_ego_vehicle_path();
  static const int kEgoVehiclePathFieldNumber = 6;
  ::metamoto::types::Waypoint* mutable_ego_vehicle_path(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Waypoint >*
      mutable_ego_vehicle_path();
  const ::metamoto::types::Waypoint& ego_vehicle_path(int index) const;
  ::metamoto::types::Waypoint* add_ego_vehicle_path();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Waypoint >&
      ego_vehicle_path() const;

  // string results_directory = 3;
  void clear_results_directory();
  static const int kResultsDirectoryFieldNumber = 3;
  const ::std::string& results_directory() const;
  void set_results_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_results_directory(::std::string&& value);
  #endif
  void set_results_directory(const char* value);
  void set_results_directory(const char* value, size_t size);
  ::std::string* mutable_results_directory();
  ::std::string* release_results_directory();
  void set_allocated_results_directory(::std::string* results_directory);

  // string ego_vehicle_id = 8;
  void clear_ego_vehicle_id();
  static const int kEgoVehicleIdFieldNumber = 8;
  const ::std::string& ego_vehicle_id() const;
  void set_ego_vehicle_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ego_vehicle_id(::std::string&& value);
  #endif
  void set_ego_vehicle_id(const char* value);
  void set_ego_vehicle_id(const char* value, size_t size);
  ::std::string* mutable_ego_vehicle_id();
  ::std::string* release_ego_vehicle_id();
  void set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id);

  // .google.protobuf.Struct parameters = 1;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 1;
  private:
  const ::google::protobuf::Struct& _internal_parameters() const;
  public:
  const ::google::protobuf::Struct& parameters() const;
  ::google::protobuf::Struct* release_parameters();
  ::google::protobuf::Struct* mutable_parameters();
  void set_allocated_parameters(::google::protobuf::Struct* parameters);

  // .metamoto.types.Pose pose = 5;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 5;
  private:
  const ::metamoto::types::Pose& _internal_pose() const;
  public:
  const ::metamoto::types::Pose& pose() const;
  ::metamoto::types::Pose* release_pose();
  ::metamoto::types::Pose* mutable_pose();
  void set_allocated_pose(::metamoto::types::Pose* pose);

  // .metamoto.types.VehicleInfo ego_vehicle_info = 7;
  bool has_ego_vehicle_info() const;
  void clear_ego_vehicle_info();
  static const int kEgoVehicleInfoFieldNumber = 7;
  private:
  const ::metamoto::types::VehicleInfo& _internal_ego_vehicle_info() const;
  public:
  const ::metamoto::types::VehicleInfo& ego_vehicle_info() const;
  ::metamoto::types::VehicleInfo* release_ego_vehicle_info();
  ::metamoto::types::VehicleInfo* mutable_ego_vehicle_info();
  void set_allocated_ego_vehicle_info(::metamoto::types::VehicleInfo* ego_vehicle_info);

  // .metamoto.types.TestCase test_case = 9;
  bool has_test_case() const;
  void clear_test_case();
  static const int kTestCaseFieldNumber = 9;
  private:
  const ::metamoto::types::TestCase& _internal_test_case() const;
  public:
  const ::metamoto::types::TestCase& test_case() const;
  ::metamoto::types::TestCase* release_test_case();
  ::metamoto::types::TestCase* mutable_test_case();
  void set_allocated_test_case(::metamoto::types::TestCase* test_case);

  // @@protoc_insertion_point(class_scope:metamoto.services.SensorInitializeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> publish_topics_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription > services_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Waypoint > ego_vehicle_path_;
  ::google::protobuf::internal::ArenaStringPtr results_directory_;
  ::google::protobuf::internal::ArenaStringPtr ego_vehicle_id_;
  ::google::protobuf::Struct* parameters_;
  ::metamoto::types::Pose* pose_;
  ::metamoto::types::VehicleInfo* ego_vehicle_info_;
  ::metamoto::types::TestCase* test_case_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fsensor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SensorInitializeReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.SensorInitializeReply) */ {
 public:
  SensorInitializeReply();
  virtual ~SensorInitializeReply();

  SensorInitializeReply(const SensorInitializeReply& from);

  inline SensorInitializeReply& operator=(const SensorInitializeReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorInitializeReply(SensorInitializeReply&& from) noexcept
    : SensorInitializeReply() {
    *this = ::std::move(from);
  }

  inline SensorInitializeReply& operator=(SensorInitializeReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorInitializeReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorInitializeReply* internal_default_instance() {
    return reinterpret_cast<const SensorInitializeReply*>(
               &_SensorInitializeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SensorInitializeReply* other);
  friend void swap(SensorInitializeReply& a, SensorInitializeReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorInitializeReply* New() const final {
    return CreateMaybeMessage<SensorInitializeReply>(NULL);
  }

  SensorInitializeReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorInitializeReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorInitializeReply& from);
  void MergeFrom(const SensorInitializeReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorInitializeReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // double update_rate = 3;
  void clear_update_rate();
  static const int kUpdateRateFieldNumber = 3;
  double update_rate() const;
  void set_update_rate(double value);

  // bool requires_ray_tracing = 4;
  void clear_requires_ray_tracing();
  static const int kRequiresRayTracingFieldNumber = 4;
  bool requires_ray_tracing() const;
  void set_requires_ray_tracing(bool value);

  // uint32 update_timeout = 5;
  void clear_update_timeout();
  static const int kUpdateTimeoutFieldNumber = 5;
  ::google::protobuf::uint32 update_timeout() const;
  void set_update_timeout(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:metamoto.services.SensorInitializeReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  double update_rate_;
  bool requires_ray_tracing_;
  ::google::protobuf::uint32 update_timeout_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fsensor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SensorUpdateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.SensorUpdateRequest) */ {
 public:
  SensorUpdateRequest();
  virtual ~SensorUpdateRequest();

  SensorUpdateRequest(const SensorUpdateRequest& from);

  inline SensorUpdateRequest& operator=(const SensorUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorUpdateRequest(SensorUpdateRequest&& from) noexcept
    : SensorUpdateRequest() {
    *this = ::std::move(from);
  }

  inline SensorUpdateRequest& operator=(SensorUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const SensorUpdateRequest*>(
               &_SensorUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SensorUpdateRequest* other);
  friend void swap(SensorUpdateRequest& a, SensorUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorUpdateRequest* New() const final {
    return CreateMaybeMessage<SensorUpdateRequest>(NULL);
  }

  SensorUpdateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorUpdateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorUpdateRequest& from);
  void MergeFrom(const SensorUpdateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.types.Event event = 4;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 4;
  private:
  const ::metamoto::types::Event& _internal_event() const;
  public:
  const ::metamoto::types::Event& event() const;
  ::metamoto::types::Event* release_event();
  ::metamoto::types::Event* mutable_event();
  void set_allocated_event(::metamoto::types::Event* event);

  // double time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // double last_step_time = 2;
  void clear_last_step_time();
  static const int kLastStepTimeFieldNumber = 2;
  double last_step_time() const;
  void set_last_step_time(double value);

  // double next_step_time = 3;
  void clear_next_step_time();
  static const int kNextStepTimeFieldNumber = 3;
  double next_step_time() const;
  void set_next_step_time(double value);

  // @@protoc_insertion_point(class_scope:metamoto.services.SensorUpdateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::types::Event* event_;
  double time_;
  double last_step_time_;
  double next_step_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fsensor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SensorUpdateReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.SensorUpdateReply) */ {
 public:
  SensorUpdateReply();
  virtual ~SensorUpdateReply();

  SensorUpdateReply(const SensorUpdateReply& from);

  inline SensorUpdateReply& operator=(const SensorUpdateReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorUpdateReply(SensorUpdateReply&& from) noexcept
    : SensorUpdateReply() {
    *this = ::std::move(from);
  }

  inline SensorUpdateReply& operator=(SensorUpdateReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorUpdateReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorUpdateReply* internal_default_instance() {
    return reinterpret_cast<const SensorUpdateReply*>(
               &_SensorUpdateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SensorUpdateReply* other);
  friend void swap(SensorUpdateReply& a, SensorUpdateReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorUpdateReply* New() const final {
    return CreateMaybeMessage<SensorUpdateReply>(NULL);
  }

  SensorUpdateReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorUpdateReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorUpdateReply& from);
  void MergeFrom(const SensorUpdateReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorUpdateReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double next_update_time = 1;
  void clear_next_update_time();
  static const int kNextUpdateTimeFieldNumber = 1;
  double next_update_time() const;
  void set_next_update_time(double value);

  // @@protoc_insertion_point(class_scope:metamoto.services.SensorUpdateReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double next_update_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fsensor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SensorCloseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.SensorCloseRequest) */ {
 public:
  SensorCloseRequest();
  virtual ~SensorCloseRequest();

  SensorCloseRequest(const SensorCloseRequest& from);

  inline SensorCloseRequest& operator=(const SensorCloseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorCloseRequest(SensorCloseRequest&& from) noexcept
    : SensorCloseRequest() {
    *this = ::std::move(from);
  }

  inline SensorCloseRequest& operator=(SensorCloseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorCloseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorCloseRequest* internal_default_instance() {
    return reinterpret_cast<const SensorCloseRequest*>(
               &_SensorCloseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SensorCloseRequest* other);
  friend void swap(SensorCloseRequest& a, SensorCloseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorCloseRequest* New() const final {
    return CreateMaybeMessage<SensorCloseRequest>(NULL);
  }

  SensorCloseRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorCloseRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorCloseRequest& from);
  void MergeFrom(const SensorCloseRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorCloseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:metamoto.services.SensorCloseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fsensor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SensorCloseReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.services.SensorCloseReply) */ {
 public:
  SensorCloseReply();
  virtual ~SensorCloseReply();

  SensorCloseReply(const SensorCloseReply& from);

  inline SensorCloseReply& operator=(const SensorCloseReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorCloseReply(SensorCloseReply&& from) noexcept
    : SensorCloseReply() {
    *this = ::std::move(from);
  }

  inline SensorCloseReply& operator=(SensorCloseReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorCloseReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorCloseReply* internal_default_instance() {
    return reinterpret_cast<const SensorCloseReply*>(
               &_SensorCloseReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(SensorCloseReply* other);
  friend void swap(SensorCloseReply& a, SensorCloseReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorCloseReply* New() const final {
    return CreateMaybeMessage<SensorCloseReply>(NULL);
  }

  SensorCloseReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorCloseReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorCloseReply& from);
  void MergeFrom(const SensorCloseReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorCloseReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.ResultMetadata results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::metamoto::types::ResultMetadata* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata >*
      mutable_results();
  const ::metamoto::types::ResultMetadata& results(int index) const;
  ::metamoto::types::ResultMetadata* add_results();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata >&
      results() const;

  // @@protoc_insertion_point(class_scope:metamoto.services.SensorCloseReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata > results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2fservices_2fsensor_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorSetupRequest

// .google.protobuf.Struct parameters = 1;
inline bool SensorSetupRequest::has_parameters() const {
  return this != internal_default_instance() && parameters_ != NULL;
}
inline const ::google::protobuf::Struct& SensorSetupRequest::_internal_parameters() const {
  return *parameters_;
}
inline const ::google::protobuf::Struct& SensorSetupRequest::parameters() const {
  const ::google::protobuf::Struct* p = parameters_;
  // @@protoc_insertion_point(field_get:metamoto.services.SensorSetupRequest.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* SensorSetupRequest::release_parameters() {
  // @@protoc_insertion_point(field_release:metamoto.services.SensorSetupRequest.parameters)
  
  ::google::protobuf::Struct* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* SensorSetupRequest::mutable_parameters() {
  
  if (parameters_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SensorSetupRequest.parameters)
  return parameters_;
}
inline void SensorSetupRequest::set_allocated_parameters(::google::protobuf::Struct* parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parameters_);
  }
  if (parameters) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(parameters)->GetArena();
    if (message_arena != submessage_arena) {
      parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SensorSetupRequest.parameters)
}

// repeated .metamoto.types.ServiceDescription services = 2;
inline int SensorSetupRequest::services_size() const {
  return services_.size();
}
inline ::metamoto::types::ServiceDescription* SensorSetupRequest::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.SensorSetupRequest.services)
  return services_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription >*
SensorSetupRequest::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.SensorSetupRequest.services)
  return &services_;
}
inline const ::metamoto::types::ServiceDescription& SensorSetupRequest::services(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.SensorSetupRequest.services)
  return services_.Get(index);
}
inline ::metamoto::types::ServiceDescription* SensorSetupRequest::add_services() {
  // @@protoc_insertion_point(field_add:metamoto.services.SensorSetupRequest.services)
  return services_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription >&
SensorSetupRequest::services() const {
  // @@protoc_insertion_point(field_list:metamoto.services.SensorSetupRequest.services)
  return services_;
}

// .metamoto.types.TestCase test_case = 3;
inline bool SensorSetupRequest::has_test_case() const {
  return this != internal_default_instance() && test_case_ != NULL;
}
inline const ::metamoto::types::TestCase& SensorSetupRequest::_internal_test_case() const {
  return *test_case_;
}
inline const ::metamoto::types::TestCase& SensorSetupRequest::test_case() const {
  const ::metamoto::types::TestCase* p = test_case_;
  // @@protoc_insertion_point(field_get:metamoto.services.SensorSetupRequest.test_case)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::TestCase*>(
      &::metamoto::types::_TestCase_default_instance_);
}
inline ::metamoto::types::TestCase* SensorSetupRequest::release_test_case() {
  // @@protoc_insertion_point(field_release:metamoto.services.SensorSetupRequest.test_case)
  
  ::metamoto::types::TestCase* temp = test_case_;
  test_case_ = NULL;
  return temp;
}
inline ::metamoto::types::TestCase* SensorSetupRequest::mutable_test_case() {
  
  if (test_case_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::TestCase>(GetArenaNoVirtual());
    test_case_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SensorSetupRequest.test_case)
  return test_case_;
}
inline void SensorSetupRequest::set_allocated_test_case(::metamoto::types::TestCase* test_case) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(test_case_);
  }
  if (test_case) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      test_case = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, test_case, submessage_arena);
    }
    
  } else {
    
  }
  test_case_ = test_case;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SensorSetupRequest.test_case)
}

// -------------------------------------------------------------------

// SensorSetupReply

// -------------------------------------------------------------------

// SensorInitializeRequest

// .google.protobuf.Struct parameters = 1;
inline bool SensorInitializeRequest::has_parameters() const {
  return this != internal_default_instance() && parameters_ != NULL;
}
inline const ::google::protobuf::Struct& SensorInitializeRequest::_internal_parameters() const {
  return *parameters_;
}
inline const ::google::protobuf::Struct& SensorInitializeRequest::parameters() const {
  const ::google::protobuf::Struct* p = parameters_;
  // @@protoc_insertion_point(field_get:metamoto.services.SensorInitializeRequest.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* SensorInitializeRequest::release_parameters() {
  // @@protoc_insertion_point(field_release:metamoto.services.SensorInitializeRequest.parameters)
  
  ::google::protobuf::Struct* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* SensorInitializeRequest::mutable_parameters() {
  
  if (parameters_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SensorInitializeRequest.parameters)
  return parameters_;
}
inline void SensorInitializeRequest::set_allocated_parameters(::google::protobuf::Struct* parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parameters_);
  }
  if (parameters) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(parameters)->GetArena();
    if (message_arena != submessage_arena) {
      parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SensorInitializeRequest.parameters)
}

// repeated string publish_topics = 2;
inline int SensorInitializeRequest::publish_topics_size() const {
  return publish_topics_.size();
}
inline void SensorInitializeRequest::clear_publish_topics() {
  publish_topics_.Clear();
}
inline const ::std::string& SensorInitializeRequest::publish_topics(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.SensorInitializeRequest.publish_topics)
  return publish_topics_.Get(index);
}
inline ::std::string* SensorInitializeRequest::mutable_publish_topics(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.SensorInitializeRequest.publish_topics)
  return publish_topics_.Mutable(index);
}
inline void SensorInitializeRequest::set_publish_topics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:metamoto.services.SensorInitializeRequest.publish_topics)
  publish_topics_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SensorInitializeRequest::set_publish_topics(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:metamoto.services.SensorInitializeRequest.publish_topics)
  publish_topics_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SensorInitializeRequest::set_publish_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  publish_topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:metamoto.services.SensorInitializeRequest.publish_topics)
}
inline void SensorInitializeRequest::set_publish_topics(int index, const char* value, size_t size) {
  publish_topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.SensorInitializeRequest.publish_topics)
}
inline ::std::string* SensorInitializeRequest::add_publish_topics() {
  // @@protoc_insertion_point(field_add_mutable:metamoto.services.SensorInitializeRequest.publish_topics)
  return publish_topics_.Add();
}
inline void SensorInitializeRequest::add_publish_topics(const ::std::string& value) {
  publish_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:metamoto.services.SensorInitializeRequest.publish_topics)
}
#if LANG_CXX11
inline void SensorInitializeRequest::add_publish_topics(::std::string&& value) {
  publish_topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:metamoto.services.SensorInitializeRequest.publish_topics)
}
#endif
inline void SensorInitializeRequest::add_publish_topics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  publish_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:metamoto.services.SensorInitializeRequest.publish_topics)
}
inline void SensorInitializeRequest::add_publish_topics(const char* value, size_t size) {
  publish_topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:metamoto.services.SensorInitializeRequest.publish_topics)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SensorInitializeRequest::publish_topics() const {
  // @@protoc_insertion_point(field_list:metamoto.services.SensorInitializeRequest.publish_topics)
  return publish_topics_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SensorInitializeRequest::mutable_publish_topics() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.SensorInitializeRequest.publish_topics)
  return &publish_topics_;
}

// string results_directory = 3;
inline void SensorInitializeRequest::clear_results_directory() {
  results_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorInitializeRequest::results_directory() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SensorInitializeRequest.results_directory)
  return results_directory_.GetNoArena();
}
inline void SensorInitializeRequest::set_results_directory(const ::std::string& value) {
  
  results_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.SensorInitializeRequest.results_directory)
}
#if LANG_CXX11
inline void SensorInitializeRequest::set_results_directory(::std::string&& value) {
  
  results_directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.SensorInitializeRequest.results_directory)
}
#endif
inline void SensorInitializeRequest::set_results_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  results_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.SensorInitializeRequest.results_directory)
}
inline void SensorInitializeRequest::set_results_directory(const char* value, size_t size) {
  
  results_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.SensorInitializeRequest.results_directory)
}
inline ::std::string* SensorInitializeRequest::mutable_results_directory() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.SensorInitializeRequest.results_directory)
  return results_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorInitializeRequest::release_results_directory() {
  // @@protoc_insertion_point(field_release:metamoto.services.SensorInitializeRequest.results_directory)
  
  return results_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorInitializeRequest::set_allocated_results_directory(::std::string* results_directory) {
  if (results_directory != NULL) {
    
  } else {
    
  }
  results_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), results_directory);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SensorInitializeRequest.results_directory)
}

// repeated .metamoto.types.ServiceDescription services = 4;
inline int SensorInitializeRequest::services_size() const {
  return services_.size();
}
inline ::metamoto::types::ServiceDescription* SensorInitializeRequest::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.SensorInitializeRequest.services)
  return services_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription >*
SensorInitializeRequest::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.SensorInitializeRequest.services)
  return &services_;
}
inline const ::metamoto::types::ServiceDescription& SensorInitializeRequest::services(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.SensorInitializeRequest.services)
  return services_.Get(index);
}
inline ::metamoto::types::ServiceDescription* SensorInitializeRequest::add_services() {
  // @@protoc_insertion_point(field_add:metamoto.services.SensorInitializeRequest.services)
  return services_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::ServiceDescription >&
SensorInitializeRequest::services() const {
  // @@protoc_insertion_point(field_list:metamoto.services.SensorInitializeRequest.services)
  return services_;
}

// .metamoto.types.Pose pose = 5;
inline bool SensorInitializeRequest::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::metamoto::types::Pose& SensorInitializeRequest::_internal_pose() const {
  return *pose_;
}
inline const ::metamoto::types::Pose& SensorInitializeRequest::pose() const {
  const ::metamoto::types::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:metamoto.services.SensorInitializeRequest.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Pose*>(
      &::metamoto::types::_Pose_default_instance_);
}
inline ::metamoto::types::Pose* SensorInitializeRequest::release_pose() {
  // @@protoc_insertion_point(field_release:metamoto.services.SensorInitializeRequest.pose)
  
  ::metamoto::types::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::metamoto::types::Pose* SensorInitializeRequest::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SensorInitializeRequest.pose)
  return pose_;
}
inline void SensorInitializeRequest::set_allocated_pose(::metamoto::types::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SensorInitializeRequest.pose)
}

// repeated .metamoto.types.Waypoint ego_vehicle_path = 6;
inline int SensorInitializeRequest::ego_vehicle_path_size() const {
  return ego_vehicle_path_.size();
}
inline ::metamoto::types::Waypoint* SensorInitializeRequest::mutable_ego_vehicle_path(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.SensorInitializeRequest.ego_vehicle_path)
  return ego_vehicle_path_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::Waypoint >*
SensorInitializeRequest::mutable_ego_vehicle_path() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.SensorInitializeRequest.ego_vehicle_path)
  return &ego_vehicle_path_;
}
inline const ::metamoto::types::Waypoint& SensorInitializeRequest::ego_vehicle_path(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.SensorInitializeRequest.ego_vehicle_path)
  return ego_vehicle_path_.Get(index);
}
inline ::metamoto::types::Waypoint* SensorInitializeRequest::add_ego_vehicle_path() {
  // @@protoc_insertion_point(field_add:metamoto.services.SensorInitializeRequest.ego_vehicle_path)
  return ego_vehicle_path_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Waypoint >&
SensorInitializeRequest::ego_vehicle_path() const {
  // @@protoc_insertion_point(field_list:metamoto.services.SensorInitializeRequest.ego_vehicle_path)
  return ego_vehicle_path_;
}

// .metamoto.types.VehicleInfo ego_vehicle_info = 7;
inline bool SensorInitializeRequest::has_ego_vehicle_info() const {
  return this != internal_default_instance() && ego_vehicle_info_ != NULL;
}
inline const ::metamoto::types::VehicleInfo& SensorInitializeRequest::_internal_ego_vehicle_info() const {
  return *ego_vehicle_info_;
}
inline const ::metamoto::types::VehicleInfo& SensorInitializeRequest::ego_vehicle_info() const {
  const ::metamoto::types::VehicleInfo* p = ego_vehicle_info_;
  // @@protoc_insertion_point(field_get:metamoto.services.SensorInitializeRequest.ego_vehicle_info)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::VehicleInfo*>(
      &::metamoto::types::_VehicleInfo_default_instance_);
}
inline ::metamoto::types::VehicleInfo* SensorInitializeRequest::release_ego_vehicle_info() {
  // @@protoc_insertion_point(field_release:metamoto.services.SensorInitializeRequest.ego_vehicle_info)
  
  ::metamoto::types::VehicleInfo* temp = ego_vehicle_info_;
  ego_vehicle_info_ = NULL;
  return temp;
}
inline ::metamoto::types::VehicleInfo* SensorInitializeRequest::mutable_ego_vehicle_info() {
  
  if (ego_vehicle_info_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::VehicleInfo>(GetArenaNoVirtual());
    ego_vehicle_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SensorInitializeRequest.ego_vehicle_info)
  return ego_vehicle_info_;
}
inline void SensorInitializeRequest::set_allocated_ego_vehicle_info(::metamoto::types::VehicleInfo* ego_vehicle_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ego_vehicle_info_);
  }
  if (ego_vehicle_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ego_vehicle_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ego_vehicle_info, submessage_arena);
    }
    
  } else {
    
  }
  ego_vehicle_info_ = ego_vehicle_info;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SensorInitializeRequest.ego_vehicle_info)
}

// string ego_vehicle_id = 8;
inline void SensorInitializeRequest::clear_ego_vehicle_id() {
  ego_vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorInitializeRequest::ego_vehicle_id() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SensorInitializeRequest.ego_vehicle_id)
  return ego_vehicle_id_.GetNoArena();
}
inline void SensorInitializeRequest::set_ego_vehicle_id(const ::std::string& value) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.SensorInitializeRequest.ego_vehicle_id)
}
#if LANG_CXX11
inline void SensorInitializeRequest::set_ego_vehicle_id(::std::string&& value) {
  
  ego_vehicle_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.SensorInitializeRequest.ego_vehicle_id)
}
#endif
inline void SensorInitializeRequest::set_ego_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.SensorInitializeRequest.ego_vehicle_id)
}
inline void SensorInitializeRequest::set_ego_vehicle_id(const char* value, size_t size) {
  
  ego_vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.SensorInitializeRequest.ego_vehicle_id)
}
inline ::std::string* SensorInitializeRequest::mutable_ego_vehicle_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.SensorInitializeRequest.ego_vehicle_id)
  return ego_vehicle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorInitializeRequest::release_ego_vehicle_id() {
  // @@protoc_insertion_point(field_release:metamoto.services.SensorInitializeRequest.ego_vehicle_id)
  
  return ego_vehicle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorInitializeRequest::set_allocated_ego_vehicle_id(::std::string* ego_vehicle_id) {
  if (ego_vehicle_id != NULL) {
    
  } else {
    
  }
  ego_vehicle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ego_vehicle_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SensorInitializeRequest.ego_vehicle_id)
}

// .metamoto.types.TestCase test_case = 9;
inline bool SensorInitializeRequest::has_test_case() const {
  return this != internal_default_instance() && test_case_ != NULL;
}
inline const ::metamoto::types::TestCase& SensorInitializeRequest::_internal_test_case() const {
  return *test_case_;
}
inline const ::metamoto::types::TestCase& SensorInitializeRequest::test_case() const {
  const ::metamoto::types::TestCase* p = test_case_;
  // @@protoc_insertion_point(field_get:metamoto.services.SensorInitializeRequest.test_case)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::TestCase*>(
      &::metamoto::types::_TestCase_default_instance_);
}
inline ::metamoto::types::TestCase* SensorInitializeRequest::release_test_case() {
  // @@protoc_insertion_point(field_release:metamoto.services.SensorInitializeRequest.test_case)
  
  ::metamoto::types::TestCase* temp = test_case_;
  test_case_ = NULL;
  return temp;
}
inline ::metamoto::types::TestCase* SensorInitializeRequest::mutable_test_case() {
  
  if (test_case_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::TestCase>(GetArenaNoVirtual());
    test_case_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SensorInitializeRequest.test_case)
  return test_case_;
}
inline void SensorInitializeRequest::set_allocated_test_case(::metamoto::types::TestCase* test_case) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(test_case_);
  }
  if (test_case) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      test_case = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, test_case, submessage_arena);
    }
    
  } else {
    
  }
  test_case_ = test_case;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SensorInitializeRequest.test_case)
}

// -------------------------------------------------------------------

// SensorInitializeReply

// string name = 1;
inline void SensorInitializeReply::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorInitializeReply::name() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SensorInitializeReply.name)
  return name_.GetNoArena();
}
inline void SensorInitializeReply::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.SensorInitializeReply.name)
}
#if LANG_CXX11
inline void SensorInitializeReply::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.SensorInitializeReply.name)
}
#endif
inline void SensorInitializeReply::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.SensorInitializeReply.name)
}
inline void SensorInitializeReply::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.SensorInitializeReply.name)
}
inline ::std::string* SensorInitializeReply::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.SensorInitializeReply.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorInitializeReply::release_name() {
  // @@protoc_insertion_point(field_release:metamoto.services.SensorInitializeReply.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorInitializeReply::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SensorInitializeReply.name)
}

// string version = 2;
inline void SensorInitializeReply::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorInitializeReply::version() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SensorInitializeReply.version)
  return version_.GetNoArena();
}
inline void SensorInitializeReply::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.services.SensorInitializeReply.version)
}
#if LANG_CXX11
inline void SensorInitializeReply::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.services.SensorInitializeReply.version)
}
#endif
inline void SensorInitializeReply::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.services.SensorInitializeReply.version)
}
inline void SensorInitializeReply::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.services.SensorInitializeReply.version)
}
inline ::std::string* SensorInitializeReply::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.services.SensorInitializeReply.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorInitializeReply::release_version() {
  // @@protoc_insertion_point(field_release:metamoto.services.SensorInitializeReply.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorInitializeReply::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SensorInitializeReply.version)
}

// double update_rate = 3;
inline void SensorInitializeReply::clear_update_rate() {
  update_rate_ = 0;
}
inline double SensorInitializeReply::update_rate() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SensorInitializeReply.update_rate)
  return update_rate_;
}
inline void SensorInitializeReply::set_update_rate(double value) {
  
  update_rate_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.SensorInitializeReply.update_rate)
}

// bool requires_ray_tracing = 4;
inline void SensorInitializeReply::clear_requires_ray_tracing() {
  requires_ray_tracing_ = false;
}
inline bool SensorInitializeReply::requires_ray_tracing() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SensorInitializeReply.requires_ray_tracing)
  return requires_ray_tracing_;
}
inline void SensorInitializeReply::set_requires_ray_tracing(bool value) {
  
  requires_ray_tracing_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.SensorInitializeReply.requires_ray_tracing)
}

// uint32 update_timeout = 5;
inline void SensorInitializeReply::clear_update_timeout() {
  update_timeout_ = 0u;
}
inline ::google::protobuf::uint32 SensorInitializeReply::update_timeout() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SensorInitializeReply.update_timeout)
  return update_timeout_;
}
inline void SensorInitializeReply::set_update_timeout(::google::protobuf::uint32 value) {
  
  update_timeout_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.SensorInitializeReply.update_timeout)
}

// -------------------------------------------------------------------

// SensorUpdateRequest

// double time = 1;
inline void SensorUpdateRequest::clear_time() {
  time_ = 0;
}
inline double SensorUpdateRequest::time() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SensorUpdateRequest.time)
  return time_;
}
inline void SensorUpdateRequest::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.SensorUpdateRequest.time)
}

// double last_step_time = 2;
inline void SensorUpdateRequest::clear_last_step_time() {
  last_step_time_ = 0;
}
inline double SensorUpdateRequest::last_step_time() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SensorUpdateRequest.last_step_time)
  return last_step_time_;
}
inline void SensorUpdateRequest::set_last_step_time(double value) {
  
  last_step_time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.SensorUpdateRequest.last_step_time)
}

// double next_step_time = 3;
inline void SensorUpdateRequest::clear_next_step_time() {
  next_step_time_ = 0;
}
inline double SensorUpdateRequest::next_step_time() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SensorUpdateRequest.next_step_time)
  return next_step_time_;
}
inline void SensorUpdateRequest::set_next_step_time(double value) {
  
  next_step_time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.SensorUpdateRequest.next_step_time)
}

// .metamoto.types.Event event = 4;
inline bool SensorUpdateRequest::has_event() const {
  return this != internal_default_instance() && event_ != NULL;
}
inline const ::metamoto::types::Event& SensorUpdateRequest::_internal_event() const {
  return *event_;
}
inline const ::metamoto::types::Event& SensorUpdateRequest::event() const {
  const ::metamoto::types::Event* p = event_;
  // @@protoc_insertion_point(field_get:metamoto.services.SensorUpdateRequest.event)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Event*>(
      &::metamoto::types::_Event_default_instance_);
}
inline ::metamoto::types::Event* SensorUpdateRequest::release_event() {
  // @@protoc_insertion_point(field_release:metamoto.services.SensorUpdateRequest.event)
  
  ::metamoto::types::Event* temp = event_;
  event_ = NULL;
  return temp;
}
inline ::metamoto::types::Event* SensorUpdateRequest::mutable_event() {
  
  if (event_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Event>(GetArenaNoVirtual());
    event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.services.SensorUpdateRequest.event)
  return event_;
}
inline void SensorUpdateRequest::set_allocated_event(::metamoto::types::Event* event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(event_);
  }
  if (event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SensorUpdateRequest.event)
}

// -------------------------------------------------------------------

// SensorUpdateReply

// double next_update_time = 1;
inline void SensorUpdateReply::clear_next_update_time() {
  next_update_time_ = 0;
}
inline double SensorUpdateReply::next_update_time() const {
  // @@protoc_insertion_point(field_get:metamoto.services.SensorUpdateReply.next_update_time)
  return next_update_time_;
}
inline void SensorUpdateReply::set_next_update_time(double value) {
  
  next_update_time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.services.SensorUpdateReply.next_update_time)
}

// -------------------------------------------------------------------

// SensorCloseRequest

// -------------------------------------------------------------------

// SensorCloseReply

// repeated .metamoto.types.ResultMetadata results = 1;
inline int SensorCloseReply::results_size() const {
  return results_.size();
}
inline ::metamoto::types::ResultMetadata* SensorCloseReply::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.services.SensorCloseReply.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata >*
SensorCloseReply::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.services.SensorCloseReply.results)
  return &results_;
}
inline const ::metamoto::types::ResultMetadata& SensorCloseReply::results(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.services.SensorCloseReply.results)
  return results_.Get(index);
}
inline ::metamoto::types::ResultMetadata* SensorCloseReply::add_results() {
  // @@protoc_insertion_point(field_add:metamoto.services.SensorCloseReply.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata >&
SensorCloseReply::results() const {
  // @@protoc_insertion_point(field_list:metamoto.services.SensorCloseReply.results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace services
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2fservices_2fsensor_2eproto
