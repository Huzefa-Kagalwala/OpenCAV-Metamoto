// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metamoto/services/scenario_service.proto

#include "metamoto/services/scenario_service.pb.h"
#include "metamoto/services/scenario_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace metamoto {
namespace services {

static const char* Scenario_method_names[] = {
  "/metamoto.services.Scenario/Setup",
  "/metamoto.services.Scenario/Update",
  "/metamoto.services.Scenario/GetVehicleWaypoints",
  "/metamoto.services.Scenario/SetVehicleWaypoints",
  "/metamoto.services.Scenario/SetDriverModel",
};

std::unique_ptr< Scenario::Stub> Scenario::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Scenario::Stub> stub(new Scenario::Stub(channel));
  return stub;
}

Scenario::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Setup_(Scenario_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(Scenario_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVehicleWaypoints_(Scenario_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetVehicleWaypoints_(Scenario_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDriverModel_(Scenario_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Scenario::Stub::Setup(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetupRequest& request, ::metamoto::services::ScenarioSetupReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Setup_, context, request, response);
}

void Scenario::Stub::experimental_async::Setup(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetupRequest* request, ::metamoto::services::ScenarioSetupReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Setup_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetupReply>* Scenario::Stub::AsyncSetupRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ScenarioSetupReply>::Create(channel_.get(), cq, rpcmethod_Setup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetupReply>* Scenario::Stub::PrepareAsyncSetupRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ScenarioSetupReply>::Create(channel_.get(), cq, rpcmethod_Setup_, context, request, false);
}

::grpc::Status Scenario::Stub::Update(::grpc::ClientContext* context, const ::metamoto::services::ScenarioUpdateRequest& request, ::metamoto::services::ScenarioUpdateReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Update_, context, request, response);
}

void Scenario::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::metamoto::services::ScenarioUpdateRequest* request, ::metamoto::services::ScenarioUpdateReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioUpdateReply>* Scenario::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ScenarioUpdateReply>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioUpdateReply>* Scenario::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ScenarioUpdateReply>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, false);
}

::grpc::Status Scenario::Stub::GetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest& request, ::metamoto::services::ScenarioGetVehicleWaypointsReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVehicleWaypoints_, context, request, response);
}

void Scenario::Stub::experimental_async::GetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioGetVehicleWaypointsReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVehicleWaypoints_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioGetVehicleWaypointsReply>* Scenario::Stub::AsyncGetVehicleWaypointsRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ScenarioGetVehicleWaypointsReply>::Create(channel_.get(), cq, rpcmethod_GetVehicleWaypoints_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioGetVehicleWaypointsReply>* Scenario::Stub::PrepareAsyncGetVehicleWaypointsRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ScenarioGetVehicleWaypointsReply>::Create(channel_.get(), cq, rpcmethod_GetVehicleWaypoints_, context, request, false);
}

::grpc::Status Scenario::Stub::SetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest& request, ::metamoto::services::ScenarioSetVehicleWaypointsReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetVehicleWaypoints_, context, request, response);
}

void Scenario::Stub::experimental_async::SetVehicleWaypoints(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioSetVehicleWaypointsReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetVehicleWaypoints_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetVehicleWaypointsReply>* Scenario::Stub::AsyncSetVehicleWaypointsRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ScenarioSetVehicleWaypointsReply>::Create(channel_.get(), cq, rpcmethod_SetVehicleWaypoints_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetVehicleWaypointsReply>* Scenario::Stub::PrepareAsyncSetVehicleWaypointsRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ScenarioSetVehicleWaypointsReply>::Create(channel_.get(), cq, rpcmethod_SetVehicleWaypoints_, context, request, false);
}

::grpc::Status Scenario::Stub::SetDriverModel(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest& request, ::metamoto::services::ScenarioSetDriverModelReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetDriverModel_, context, request, response);
}

void Scenario::Stub::experimental_async::SetDriverModel(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest* request, ::metamoto::services::ScenarioSetDriverModelReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDriverModel_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetDriverModelReply>* Scenario::Stub::AsyncSetDriverModelRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ScenarioSetDriverModelReply>::Create(channel_.get(), cq, rpcmethod_SetDriverModel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::ScenarioSetDriverModelReply>* Scenario::Stub::PrepareAsyncSetDriverModelRaw(::grpc::ClientContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::ScenarioSetDriverModelReply>::Create(channel_.get(), cq, rpcmethod_SetDriverModel_, context, request, false);
}

Scenario::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Scenario_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Scenario::Service, ::metamoto::services::ScenarioSetupRequest, ::metamoto::services::ScenarioSetupReply>(
          std::mem_fn(&Scenario::Service::Setup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Scenario_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Scenario::Service, ::metamoto::services::ScenarioUpdateRequest, ::metamoto::services::ScenarioUpdateReply>(
          std::mem_fn(&Scenario::Service::Update), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Scenario_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Scenario::Service, ::metamoto::services::ScenarioGetVehicleWaypointsRequest, ::metamoto::services::ScenarioGetVehicleWaypointsReply>(
          std::mem_fn(&Scenario::Service::GetVehicleWaypoints), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Scenario_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Scenario::Service, ::metamoto::services::ScenarioSetVehicleWaypointsRequest, ::metamoto::services::ScenarioSetVehicleWaypointsReply>(
          std::mem_fn(&Scenario::Service::SetVehicleWaypoints), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Scenario_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Scenario::Service, ::metamoto::services::ScenarioSetDriverModelRequest, ::metamoto::services::ScenarioSetDriverModelReply>(
          std::mem_fn(&Scenario::Service::SetDriverModel), this)));
}

Scenario::Service::~Service() {
}

::grpc::Status Scenario::Service::Setup(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetupRequest* request, ::metamoto::services::ScenarioSetupReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Scenario::Service::Update(::grpc::ServerContext* context, const ::metamoto::services::ScenarioUpdateRequest* request, ::metamoto::services::ScenarioUpdateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Scenario::Service::GetVehicleWaypoints(::grpc::ServerContext* context, const ::metamoto::services::ScenarioGetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioGetVehicleWaypointsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Scenario::Service::SetVehicleWaypoints(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetVehicleWaypointsRequest* request, ::metamoto::services::ScenarioSetVehicleWaypointsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Scenario::Service::SetDriverModel(::grpc::ServerContext* context, const ::metamoto::services::ScenarioSetDriverModelRequest* request, ::metamoto::services::ScenarioSetDriverModelReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace metamoto
}  // namespace services

