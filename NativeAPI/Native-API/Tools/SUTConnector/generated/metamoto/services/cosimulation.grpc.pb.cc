// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metamoto/services/cosimulation.proto

#include "metamoto/services/cosimulation.pb.h"
#include "metamoto/services/cosimulation.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace metamoto {
namespace services {

static const char* Cosimulation_method_names[] = {
  "/metamoto.services.Cosimulation/Initialize",
  "/metamoto.services.Cosimulation/Update",
  "/metamoto.services.Cosimulation/Read",
  "/metamoto.services.Cosimulation/Close",
};

std::unique_ptr< Cosimulation::Stub> Cosimulation::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Cosimulation::Stub> stub(new Cosimulation::Stub(channel));
  return stub;
}

Cosimulation::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Initialize_(Cosimulation_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(Cosimulation_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Read_(Cosimulation_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Close_(Cosimulation_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Cosimulation::Stub::Initialize(::grpc::ClientContext* context, const ::metamoto::services::CosimulationInitializeRequest& request, ::metamoto::services::CosimulationInitializeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Initialize_, context, request, response);
}

void Cosimulation::Stub::experimental_async::Initialize(::grpc::ClientContext* context, const ::metamoto::services::CosimulationInitializeRequest* request, ::metamoto::services::CosimulationInitializeReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Initialize_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::CosimulationInitializeReply>* Cosimulation::Stub::AsyncInitializeRaw(::grpc::ClientContext* context, const ::metamoto::services::CosimulationInitializeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::CosimulationInitializeReply>::Create(channel_.get(), cq, rpcmethod_Initialize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::CosimulationInitializeReply>* Cosimulation::Stub::PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::metamoto::services::CosimulationInitializeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::CosimulationInitializeReply>::Create(channel_.get(), cq, rpcmethod_Initialize_, context, request, false);
}

::grpc::Status Cosimulation::Stub::Update(::grpc::ClientContext* context, const ::metamoto::services::CosimulationUpdateRequest& request, ::metamoto::services::CosimulationUpdateReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Update_, context, request, response);
}

void Cosimulation::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::metamoto::services::CosimulationUpdateRequest* request, ::metamoto::services::CosimulationUpdateReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::CosimulationUpdateReply>* Cosimulation::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::metamoto::services::CosimulationUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::CosimulationUpdateReply>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::CosimulationUpdateReply>* Cosimulation::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::metamoto::services::CosimulationUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::CosimulationUpdateReply>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, false);
}

::grpc::Status Cosimulation::Stub::Read(::grpc::ClientContext* context, const ::metamoto::services::CosimulationReadRequest& request, ::metamoto::services::CosimulationReadReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Read_, context, request, response);
}

void Cosimulation::Stub::experimental_async::Read(::grpc::ClientContext* context, const ::metamoto::services::CosimulationReadRequest* request, ::metamoto::services::CosimulationReadReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::CosimulationReadReply>* Cosimulation::Stub::AsyncReadRaw(::grpc::ClientContext* context, const ::metamoto::services::CosimulationReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::CosimulationReadReply>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::CosimulationReadReply>* Cosimulation::Stub::PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::metamoto::services::CosimulationReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::CosimulationReadReply>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, false);
}

::grpc::Status Cosimulation::Stub::Close(::grpc::ClientContext* context, const ::metamoto::services::CosimulationCloseRequest& request, ::metamoto::services::CosimulationCloseReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Close_, context, request, response);
}

void Cosimulation::Stub::experimental_async::Close(::grpc::ClientContext* context, const ::metamoto::services::CosimulationCloseRequest* request, ::metamoto::services::CosimulationCloseReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Close_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::CosimulationCloseReply>* Cosimulation::Stub::AsyncCloseRaw(::grpc::ClientContext* context, const ::metamoto::services::CosimulationCloseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::CosimulationCloseReply>::Create(channel_.get(), cq, rpcmethod_Close_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::metamoto::services::CosimulationCloseReply>* Cosimulation::Stub::PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::metamoto::services::CosimulationCloseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::metamoto::services::CosimulationCloseReply>::Create(channel_.get(), cq, rpcmethod_Close_, context, request, false);
}

Cosimulation::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cosimulation_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cosimulation::Service, ::metamoto::services::CosimulationInitializeRequest, ::metamoto::services::CosimulationInitializeReply>(
          std::mem_fn(&Cosimulation::Service::Initialize), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cosimulation_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cosimulation::Service, ::metamoto::services::CosimulationUpdateRequest, ::metamoto::services::CosimulationUpdateReply>(
          std::mem_fn(&Cosimulation::Service::Update), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cosimulation_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cosimulation::Service, ::metamoto::services::CosimulationReadRequest, ::metamoto::services::CosimulationReadReply>(
          std::mem_fn(&Cosimulation::Service::Read), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cosimulation_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cosimulation::Service, ::metamoto::services::CosimulationCloseRequest, ::metamoto::services::CosimulationCloseReply>(
          std::mem_fn(&Cosimulation::Service::Close), this)));
}

Cosimulation::Service::~Service() {
}

::grpc::Status Cosimulation::Service::Initialize(::grpc::ServerContext* context, const ::metamoto::services::CosimulationInitializeRequest* request, ::metamoto::services::CosimulationInitializeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cosimulation::Service::Update(::grpc::ServerContext* context, const ::metamoto::services::CosimulationUpdateRequest* request, ::metamoto::services::CosimulationUpdateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cosimulation::Service::Read(::grpc::ServerContext* context, const ::metamoto::services::CosimulationReadRequest* request, ::metamoto::services::CosimulationReadReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cosimulation::Service::Close(::grpc::ServerContext* context, const ::metamoto::services::CosimulationCloseRequest* request, ::metamoto::services::CosimulationCloseReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace metamoto
}  // namespace services

