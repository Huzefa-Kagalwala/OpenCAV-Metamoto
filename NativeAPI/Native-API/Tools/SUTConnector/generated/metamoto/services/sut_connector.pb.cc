// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/services/sut_connector.proto

#include "metamoto/services/sut_connector.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_metamoto_2fservices_2fcontroller_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fcontroller_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ControllerCloseRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fcontroller_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ControllerInitializeReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fcontroller_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ControllerSetupReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fcontroller_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ControllerUpdateReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fcontroller_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ControllerCloseReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fcontroller_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ControllerUpdateRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fcontroller_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ControllerSetupRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fcontroller_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_ControllerInitializeRequest;
}  // namespace protobuf_metamoto_2fservices_2fcontroller_2eproto
namespace protobuf_metamoto_2fservices_2fdata_5fbus_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fdata_5fbus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DataBusPublishReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fdata_5fbus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DataBusReadAllRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fdata_5fbus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DataBusReadLastRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fdata_5fbus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DataBusReadRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fdata_5fbus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DataBusSubscribeReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fdata_5fbus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DataBusWriteReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fdata_5fbus_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DataBusPublishRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fdata_5fbus_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DataBusReadAllReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fdata_5fbus_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DataBusReadLastReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fdata_5fbus_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DataBusReadReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fdata_5fbus_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DataBusSubscribeRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fdata_5fbus_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DataBusWriteRequest;
}  // namespace protobuf_metamoto_2fservices_2fdata_5fbus_2eproto
namespace protobuf_metamoto_2fservices_2fmap_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fmap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MapGetRoadNetworkRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fmap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapGetHeadingReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fmap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapGetHeadingRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fmap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapGetPathReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fmap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapGetPathRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fmap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapGetRoadNetworkReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fmap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapToRoadPointReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fmap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapToRoadPointRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fmap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapToWorldPointReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fmap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapToWorldPointRequest;
}  // namespace protobuf_metamoto_2fservices_2fmap_2eproto
namespace protobuf_metamoto_2fservices_2fray_5ftracer_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fray_5ftracer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RayTracerSetPatternsReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fray_5ftracer_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RayTracerSetPatternsRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fray_5ftracer_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RayTracerTraceReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fray_5ftracer_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RayTracerTraceRequest;
}  // namespace protobuf_metamoto_2fservices_2fray_5ftracer_2eproto
namespace protobuf_metamoto_2fservices_2freporting_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2freporting_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReportingAddTimeSeriesValueReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2freporting_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReportingAddTimeSeriesValueRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2freporting_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReportingLogReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2freporting_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReportingReportEventReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2freporting_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReportingReportEventRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2freporting_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReportingVisualizeReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2freporting_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ReportingLogRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2freporting_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ReportingVisualizeRequest;
}  // namespace protobuf_metamoto_2fservices_2freporting_2eproto
namespace protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioGetVehicleWaypointsRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioSetDriverModelReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioSetVehicleWaypointsReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioSetupReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioUpdateReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ScenarioGetVehicleWaypointsReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ScenarioSetDriverModelRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ScenarioSetVehicleWaypointsRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ScenarioSetupRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ScenarioUpdateRequest;
}  // namespace protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto
namespace protobuf_metamoto_2fservices_2fsensor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SensorCloseRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SensorInitializeReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SensorSetupReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SensorUpdateReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SensorCloseReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SensorUpdateRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_SensorSetupRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_SensorInitializeRequest;
}  // namespace protobuf_metamoto_2fservices_2fsensor_2eproto
namespace protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SUTConnectorConnectReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SUTConnectorConnectRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SUTConnectorDisconnectReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SUTConnectorDisconnectRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SUTConnectorQueryGetConnectedSUTsReply_SUT;
}  // namespace protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto
namespace protobuf_metamoto_2fservices_2fsystem_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fsystem_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemGetResultsSizeReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2fservices_2fsystem_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemGetResultsSizeRequest;
}  // namespace protobuf_metamoto_2fservices_2fsystem_2eproto
namespace protobuf_metamoto_2ftypes_2fstatus_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fstatus_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Status;
}  // namespace protobuf_metamoto_2ftypes_2fstatus_2eproto
namespace metamoto {
namespace services {
class SUTConnectorRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SUTConnectorRequest>
      _instance;
  const ::google::rpc::Status* status_;
  const ::metamoto::services::SUTConnectorConnectRequest* connect_;
  const ::metamoto::services::SUTConnectorDisconnectRequest* disconnect_;
  const ::metamoto::services::ControllerInitializeReply* controller_initialize_;
  const ::metamoto::services::ControllerUpdateReply* controller_update_;
  const ::metamoto::services::ControllerCloseReply* controller_close_;
  const ::metamoto::services::ControllerSetupReply* controller_setup_;
  const ::metamoto::services::SensorInitializeReply* sensor_initialize_;
  const ::metamoto::services::SensorUpdateReply* sensor_update_;
  const ::metamoto::services::SensorCloseReply* sensor_close_;
  const ::metamoto::services::SensorSetupReply* sensor_setup_;
  const ::metamoto::services::DataBusPublishRequest* data_bus_publish_;
  const ::metamoto::services::DataBusSubscribeRequest* data_bus_subscribe_;
  const ::metamoto::services::DataBusWriteRequest* data_bus_write_;
  const ::metamoto::services::DataBusReadRequest* data_bus_read_;
  const ::metamoto::services::DataBusReadAllRequest* data_bus_read_all_;
  const ::metamoto::services::DataBusReadLastRequest* data_bus_read_last_;
  const ::metamoto::services::MapGetRoadNetworkRequest* map_get_road_network_;
  const ::metamoto::services::MapToRoadPointRequest* map_to_road_point_;
  const ::metamoto::services::MapToWorldPointRequest* map_to_world_point_;
  const ::metamoto::services::MapGetPathRequest* map_get_path_;
  const ::metamoto::services::MapGetHeadingRequest* map_get_heading_;
  const ::metamoto::services::RayTracerSetPatternsRequest* ray_tracer_set_patterns_;
  const ::metamoto::services::RayTracerTraceRequest* ray_tracer_trace_;
  const ::metamoto::services::ReportingAddTimeSeriesValueRequest* reporting_add_time_series_value_;
  const ::metamoto::services::ReportingLogRequest* reporting_log_;
  const ::metamoto::services::ReportingReportEventRequest* reporting_report_event_;
  const ::metamoto::services::ReportingVisualizeRequest* reporting_visualize_;
  const ::metamoto::services::ScenarioUpdateRequest* scenario_update_;
  const ::metamoto::services::ScenarioGetVehicleWaypointsRequest* scenario_get_vehicle_waypoints_;
  const ::metamoto::services::ScenarioSetVehicleWaypointsRequest* scenario_set_vehicle_waypoints_;
  const ::metamoto::services::ScenarioSetDriverModelRequest* scenario_set_driver_model_;
  const ::metamoto::services::ScenarioSetupRequest* scenario_setup_;
  const ::metamoto::services::SystemGetResultsSizeRequest* system_get_results_size_;
} _SUTConnectorRequest_default_instance_;
class SUTConnectorReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SUTConnectorReply>
      _instance;
  const ::google::rpc::Status* status_;
  const ::metamoto::services::SUTConnectorConnectReply* connect_;
  const ::metamoto::services::SUTConnectorDisconnectReply* disconnect_;
  const ::metamoto::services::ControllerInitializeRequest* controller_initialize_;
  const ::metamoto::services::ControllerUpdateRequest* controller_update_;
  const ::metamoto::services::ControllerCloseRequest* controller_close_;
  const ::metamoto::services::ControllerSetupRequest* controller_setup_;
  const ::metamoto::services::SensorInitializeRequest* sensor_initialize_;
  const ::metamoto::services::SensorUpdateRequest* sensor_update_;
  const ::metamoto::services::SensorCloseRequest* sensor_close_;
  const ::metamoto::services::SensorSetupRequest* sensor_setup_;
  const ::metamoto::services::DataBusPublishReply* data_bus_publish_;
  const ::metamoto::services::DataBusSubscribeReply* data_bus_subscribe_;
  const ::metamoto::services::DataBusWriteReply* data_bus_write_;
  const ::metamoto::services::DataBusReadReply* data_bus_read_;
  const ::metamoto::services::DataBusReadAllReply* data_bus_read_all_;
  const ::metamoto::services::DataBusReadLastReply* data_bus_read_last_;
  const ::metamoto::services::MapGetRoadNetworkReply* map_get_road_network_;
  const ::metamoto::services::MapToRoadPointReply* map_to_road_point_;
  const ::metamoto::services::MapToWorldPointReply* map_to_world_point_;
  const ::metamoto::services::MapGetPathReply* map_get_path_;
  const ::metamoto::services::MapGetHeadingReply* map_get_heading_;
  const ::metamoto::services::RayTracerSetPatternsReply* ray_tracer_set_patterns_;
  const ::metamoto::services::RayTracerTraceReply* ray_tracer_trace_;
  const ::metamoto::services::ReportingAddTimeSeriesValueReply* reporting_add_time_series_value_;
  const ::metamoto::services::ReportingLogReply* reporting_log_;
  const ::metamoto::services::ReportingReportEventReply* reporting_report_event_;
  const ::metamoto::services::ReportingVisualizeReply* reporting_visualize_;
  const ::metamoto::services::ScenarioUpdateReply* scenario_update_;
  const ::metamoto::services::ScenarioGetVehicleWaypointsReply* scenario_get_vehicle_waypoints_;
  const ::metamoto::services::ScenarioSetVehicleWaypointsReply* scenario_set_vehicle_waypoints_;
  const ::metamoto::services::ScenarioSetDriverModelReply* scenario_set_driver_model_;
  const ::metamoto::services::ScenarioSetupReply* scenario_setup_;
  const ::metamoto::services::SystemGetResultsSizeReply* system_get_results_size_;
} _SUTConnectorReply_default_instance_;
class SUTConnectorConnectRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SUTConnectorConnectRequest>
      _instance;
} _SUTConnectorConnectRequest_default_instance_;
class SUTConnectorDisconnectRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SUTConnectorDisconnectRequest>
      _instance;
} _SUTConnectorDisconnectRequest_default_instance_;
class SUTConnectorConnectReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SUTConnectorConnectReply>
      _instance;
} _SUTConnectorConnectReply_default_instance_;
class SUTConnectorDisconnectReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SUTConnectorDisconnectReply>
      _instance;
} _SUTConnectorDisconnectReply_default_instance_;
class SUTConnectorHeartbeatRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SUTConnectorHeartbeatRequest>
      _instance;
} _SUTConnectorHeartbeatRequest_default_instance_;
class SUTConnectorHeartbeatReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SUTConnectorHeartbeatReply>
      _instance;
} _SUTConnectorHeartbeatReply_default_instance_;
class SUTConnectorQueryGetConnectedSUTsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SUTConnectorQueryGetConnectedSUTsRequest>
      _instance;
} _SUTConnectorQueryGetConnectedSUTsRequest_default_instance_;
class SUTConnectorQueryGetConnectedSUTsReply_SUTDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SUTConnectorQueryGetConnectedSUTsReply_SUT>
      _instance;
} _SUTConnectorQueryGetConnectedSUTsReply_SUT_default_instance_;
class SUTConnectorQueryGetConnectedSUTsReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SUTConnectorQueryGetConnectedSUTsReply>
      _instance;
} _SUTConnectorQueryGetConnectedSUTsReply_default_instance_;
}  // namespace services
}  // namespace metamoto
namespace protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto {
static void InitDefaultsSUTConnectorRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_SUTConnectorRequest_default_instance_;
    new (ptr) ::metamoto::services::SUTConnectorRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::SUTConnectorRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<34> scc_info_SUTConnectorRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 34, InitDefaultsSUTConnectorRequest}, {
      &protobuf_metamoto_2ftypes_2fstatus_2eproto::scc_info_Status.base,
      &protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorConnectRequest.base,
      &protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorDisconnectRequest.base,
      &protobuf_metamoto_2fservices_2fcontroller_2eproto::scc_info_ControllerInitializeReply.base,
      &protobuf_metamoto_2fservices_2fcontroller_2eproto::scc_info_ControllerUpdateReply.base,
      &protobuf_metamoto_2fservices_2fcontroller_2eproto::scc_info_ControllerCloseReply.base,
      &protobuf_metamoto_2fservices_2fcontroller_2eproto::scc_info_ControllerSetupReply.base,
      &protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorInitializeReply.base,
      &protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorUpdateReply.base,
      &protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorCloseReply.base,
      &protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorSetupReply.base,
      &protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::scc_info_DataBusPublishRequest.base,
      &protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::scc_info_DataBusSubscribeRequest.base,
      &protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::scc_info_DataBusWriteRequest.base,
      &protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::scc_info_DataBusReadRequest.base,
      &protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::scc_info_DataBusReadAllRequest.base,
      &protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::scc_info_DataBusReadLastRequest.base,
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapGetRoadNetworkRequest.base,
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapToRoadPointRequest.base,
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapToWorldPointRequest.base,
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapGetPathRequest.base,
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapGetHeadingRequest.base,
      &protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayTracerSetPatternsRequest.base,
      &protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayTracerTraceRequest.base,
      &protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingAddTimeSeriesValueRequest.base,
      &protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingLogRequest.base,
      &protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingReportEventRequest.base,
      &protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingVisualizeRequest.base,
      &protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto::scc_info_ScenarioUpdateRequest.base,
      &protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto::scc_info_ScenarioGetVehicleWaypointsRequest.base,
      &protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto::scc_info_ScenarioSetVehicleWaypointsRequest.base,
      &protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto::scc_info_ScenarioSetDriverModelRequest.base,
      &protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto::scc_info_ScenarioSetupRequest.base,
      &protobuf_metamoto_2fservices_2fsystem_2eproto::scc_info_SystemGetResultsSizeRequest.base,}};

static void InitDefaultsSUTConnectorReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_SUTConnectorReply_default_instance_;
    new (ptr) ::metamoto::services::SUTConnectorReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::SUTConnectorReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<34> scc_info_SUTConnectorReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 34, InitDefaultsSUTConnectorReply}, {
      &protobuf_metamoto_2ftypes_2fstatus_2eproto::scc_info_Status.base,
      &protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorConnectReply.base,
      &protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorDisconnectReply.base,
      &protobuf_metamoto_2fservices_2fcontroller_2eproto::scc_info_ControllerInitializeRequest.base,
      &protobuf_metamoto_2fservices_2fcontroller_2eproto::scc_info_ControllerUpdateRequest.base,
      &protobuf_metamoto_2fservices_2fcontroller_2eproto::scc_info_ControllerCloseRequest.base,
      &protobuf_metamoto_2fservices_2fcontroller_2eproto::scc_info_ControllerSetupRequest.base,
      &protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorInitializeRequest.base,
      &protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorUpdateRequest.base,
      &protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorCloseRequest.base,
      &protobuf_metamoto_2fservices_2fsensor_2eproto::scc_info_SensorSetupRequest.base,
      &protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::scc_info_DataBusPublishReply.base,
      &protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::scc_info_DataBusSubscribeReply.base,
      &protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::scc_info_DataBusWriteReply.base,
      &protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::scc_info_DataBusReadReply.base,
      &protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::scc_info_DataBusReadAllReply.base,
      &protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::scc_info_DataBusReadLastReply.base,
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapGetRoadNetworkReply.base,
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapToRoadPointReply.base,
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapToWorldPointReply.base,
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapGetPathReply.base,
      &protobuf_metamoto_2fservices_2fmap_2eproto::scc_info_MapGetHeadingReply.base,
      &protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayTracerSetPatternsReply.base,
      &protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::scc_info_RayTracerTraceReply.base,
      &protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingAddTimeSeriesValueReply.base,
      &protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingLogReply.base,
      &protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingReportEventReply.base,
      &protobuf_metamoto_2fservices_2freporting_2eproto::scc_info_ReportingVisualizeReply.base,
      &protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto::scc_info_ScenarioUpdateReply.base,
      &protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto::scc_info_ScenarioGetVehicleWaypointsReply.base,
      &protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto::scc_info_ScenarioSetVehicleWaypointsReply.base,
      &protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto::scc_info_ScenarioSetDriverModelReply.base,
      &protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto::scc_info_ScenarioSetupReply.base,
      &protobuf_metamoto_2fservices_2fsystem_2eproto::scc_info_SystemGetResultsSizeReply.base,}};

static void InitDefaultsSUTConnectorConnectRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_SUTConnectorConnectRequest_default_instance_;
    new (ptr) ::metamoto::services::SUTConnectorConnectRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::SUTConnectorConnectRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SUTConnectorConnectRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSUTConnectorConnectRequest}, {}};

static void InitDefaultsSUTConnectorDisconnectRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_SUTConnectorDisconnectRequest_default_instance_;
    new (ptr) ::metamoto::services::SUTConnectorDisconnectRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::SUTConnectorDisconnectRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SUTConnectorDisconnectRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSUTConnectorDisconnectRequest}, {}};

static void InitDefaultsSUTConnectorConnectReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_SUTConnectorConnectReply_default_instance_;
    new (ptr) ::metamoto::services::SUTConnectorConnectReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::SUTConnectorConnectReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SUTConnectorConnectReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSUTConnectorConnectReply}, {}};

static void InitDefaultsSUTConnectorDisconnectReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_SUTConnectorDisconnectReply_default_instance_;
    new (ptr) ::metamoto::services::SUTConnectorDisconnectReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::SUTConnectorDisconnectReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SUTConnectorDisconnectReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSUTConnectorDisconnectReply}, {}};

static void InitDefaultsSUTConnectorHeartbeatRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_SUTConnectorHeartbeatRequest_default_instance_;
    new (ptr) ::metamoto::services::SUTConnectorHeartbeatRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::SUTConnectorHeartbeatRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SUTConnectorHeartbeatRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSUTConnectorHeartbeatRequest}, {}};

static void InitDefaultsSUTConnectorHeartbeatReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_SUTConnectorHeartbeatReply_default_instance_;
    new (ptr) ::metamoto::services::SUTConnectorHeartbeatReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::SUTConnectorHeartbeatReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SUTConnectorHeartbeatReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSUTConnectorHeartbeatReply}, {}};

static void InitDefaultsSUTConnectorQueryGetConnectedSUTsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_SUTConnectorQueryGetConnectedSUTsRequest_default_instance_;
    new (ptr) ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SUTConnectorQueryGetConnectedSUTsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSUTConnectorQueryGetConnectedSUTsRequest}, {}};

static void InitDefaultsSUTConnectorQueryGetConnectedSUTsReply_SUT() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_SUTConnectorQueryGetConnectedSUTsReply_SUT_default_instance_;
    new (ptr) ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SUTConnectorQueryGetConnectedSUTsReply_SUT =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSUTConnectorQueryGetConnectedSUTsReply_SUT}, {}};

static void InitDefaultsSUTConnectorQueryGetConnectedSUTsReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::services::_SUTConnectorQueryGetConnectedSUTsReply_default_instance_;
    new (ptr) ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SUTConnectorQueryGetConnectedSUTsReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSUTConnectorQueryGetConnectedSUTsReply}, {
      &protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorQueryGetConnectedSUTsReply_SUT.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SUTConnectorRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SUTConnectorReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SUTConnectorConnectRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SUTConnectorDisconnectRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SUTConnectorConnectReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SUTConnectorDisconnectReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SUTConnectorHeartbeatRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SUTConnectorHeartbeatReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SUTConnectorQueryGetConnectedSUTsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SUTConnectorQueryGetConnectedSUTsReply_SUT.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SUTConnectorQueryGetConnectedSUTsReply.base);
}

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, status_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, connect_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, disconnect_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, controller_initialize_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, controller_update_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, controller_close_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, controller_setup_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, sensor_initialize_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, sensor_update_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, sensor_close_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, sensor_setup_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, data_bus_publish_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, data_bus_subscribe_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, data_bus_write_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, data_bus_read_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, data_bus_read_all_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, data_bus_read_last_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, map_get_road_network_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, map_to_road_point_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, map_to_world_point_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, map_get_path_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, map_get_heading_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, ray_tracer_set_patterns_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, ray_tracer_trace_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, reporting_add_time_series_value_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, reporting_log_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, reporting_report_event_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, reporting_visualize_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, scenario_update_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, scenario_get_vehicle_waypoints_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, scenario_set_vehicle_waypoints_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, scenario_set_driver_model_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, scenario_setup_),
  offsetof(::metamoto::services::SUTConnectorRequestDefaultTypeInternal, system_get_results_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorRequest, data_oneof_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorReply, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorReply, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, status_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, connect_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, disconnect_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, controller_initialize_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, controller_update_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, controller_close_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, controller_setup_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, sensor_initialize_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, sensor_update_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, sensor_close_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, sensor_setup_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, data_bus_publish_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, data_bus_subscribe_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, data_bus_write_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, data_bus_read_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, data_bus_read_all_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, data_bus_read_last_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, map_get_road_network_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, map_to_road_point_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, map_to_world_point_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, map_get_path_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, map_get_heading_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, ray_tracer_set_patterns_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, ray_tracer_trace_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, reporting_add_time_series_value_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, reporting_log_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, reporting_report_event_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, reporting_visualize_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, scenario_update_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, scenario_get_vehicle_waypoints_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, scenario_set_vehicle_waypoints_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, scenario_set_driver_model_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, scenario_setup_),
  offsetof(::metamoto::services::SUTConnectorReplyDefaultTypeInternal, system_get_results_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorReply, data_oneof_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorConnectRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorConnectRequest, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorDisconnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorConnectReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorDisconnectReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorHeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorHeartbeatRequest, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorHeartbeatReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply, suts_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::services::SUTConnectorRequest)},
  { 40, -1, sizeof(::metamoto::services::SUTConnectorReply)},
  { 80, -1, sizeof(::metamoto::services::SUTConnectorConnectRequest)},
  { 87, -1, sizeof(::metamoto::services::SUTConnectorDisconnectRequest)},
  { 92, -1, sizeof(::metamoto::services::SUTConnectorConnectReply)},
  { 97, -1, sizeof(::metamoto::services::SUTConnectorDisconnectReply)},
  { 102, -1, sizeof(::metamoto::services::SUTConnectorHeartbeatRequest)},
  { 108, -1, sizeof(::metamoto::services::SUTConnectorHeartbeatReply)},
  { 113, -1, sizeof(::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest)},
  { 118, -1, sizeof(::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT)},
  { 125, -1, sizeof(::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_SUTConnectorRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_SUTConnectorReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_SUTConnectorConnectRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_SUTConnectorDisconnectRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_SUTConnectorConnectReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_SUTConnectorDisconnectReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_SUTConnectorHeartbeatRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_SUTConnectorHeartbeatReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_SUTConnectorQueryGetConnectedSUTsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_SUTConnectorQueryGetConnectedSUTsReply_SUT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::services::_SUTConnectorQueryGetConnectedSUTsReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/services/sut_connector.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n%metamoto/services/sut_connector.proto\022"
      "\021metamoto.services\032\033metamoto/types/statu"
      "s.proto\032\"metamoto/services/controller.pr"
      "oto\032 metamoto/services/data_bus.proto\032\033m"
      "etamoto/services/map.proto\032\"metamoto/ser"
      "vices/ray_tracer.proto\032!metamoto/service"
      "s/reporting.proto\032(metamoto/services/sce"
      "nario_service.proto\032\036metamoto/services/s"
      "ensor.proto\032\036metamoto/services/system.pr"
      "oto\"\311\023\n\023SUTConnectorRequest\022$\n\006status\030\001 "
      "\001(\0132\022.google.rpc.StatusH\000\022@\n\007connect\030\002 \001"
      "(\0132-.metamoto.services.SUTConnectorConne"
      "ctRequestH\000\022F\n\ndisconnect\030\003 \001(\01320.metamo"
      "to.services.SUTConnectorDisconnectReques"
      "tH\000\022M\n\025controller_initialize\030\024 \001(\0132,.met"
      "amoto.services.ControllerInitializeReply"
      "H\000\022E\n\021controller_update\030\025 \001(\0132(.metamoto"
      ".services.ControllerUpdateReplyH\000\022C\n\020con"
      "troller_close\030\026 \001(\0132\'.metamoto.services."
      "ControllerCloseReplyH\000\022C\n\020controller_set"
      "up\030\027 \001(\0132\'.metamoto.services.ControllerS"
      "etupReplyH\000\022E\n\021sensor_initialize\030( \001(\0132("
      ".metamoto.services.SensorInitializeReply"
      "H\000\022=\n\rsensor_update\030) \001(\0132$.metamoto.ser"
      "vices.SensorUpdateReplyH\000\022;\n\014sensor_clos"
      "e\030* \001(\0132#.metamoto.services.SensorCloseR"
      "eplyH\000\022;\n\014sensor_setup\030+ \001(\0132#.metamoto."
      "services.SensorSetupReplyH\000\022D\n\020data_bus_"
      "publish\030< \001(\0132(.metamoto.services.DataBu"
      "sPublishRequestH\000\022H\n\022data_bus_subscribe\030"
      "= \001(\0132*.metamoto.services.DataBusSubscri"
      "beRequestH\000\022@\n\016data_bus_write\030> \001(\0132&.me"
      "tamoto.services.DataBusWriteRequestH\000\022>\n"
      "\rdata_bus_read\030\? \001(\0132%.metamoto.services"
      ".DataBusReadRequestH\000\022E\n\021data_bus_read_a"
      "ll\030@ \001(\0132(.metamoto.services.DataBusRead"
      "AllRequestH\000\022G\n\022data_bus_read_last\030A \001(\013"
      "2).metamoto.services.DataBusReadLastRequ"
      "estH\000\022K\n\024map_get_road_network\030P \001(\0132+.me"
      "tamoto.services.MapGetRoadNetworkRequest"
      "H\000\022E\n\021map_to_road_point\030Q \001(\0132(.metamoto"
      ".services.MapToRoadPointRequestH\000\022G\n\022map"
      "_to_world_point\030R \001(\0132).metamoto.service"
      "s.MapToWorldPointRequestH\000\022<\n\014map_get_pa"
      "th\030S \001(\0132$.metamoto.services.MapGetPathR"
      "equestH\000\022B\n\017map_get_heading\030T \001(\0132\'.meta"
      "moto.services.MapGetHeadingRequestH\000\022Q\n\027"
      "ray_tracer_set_patterns\030d \001(\0132..metamoto"
      ".services.RayTracerSetPatternsRequestH\000\022"
      "D\n\020ray_tracer_trace\030e \001(\0132(.metamoto.ser"
      "vices.RayTracerTraceRequestH\000\022`\n\037reporti"
      "ng_add_time_series_value\030x \001(\01325.metamot"
      "o.services.ReportingAddTimeSeriesValueRe"
      "questH\000\022\?\n\rreporting_log\030y \001(\0132&.metamot"
      "o.services.ReportingLogRequestH\000\022P\n\026repo"
      "rting_report_event\030z \001(\0132..metamoto.serv"
      "ices.ReportingReportEventRequestH\000\022K\n\023re"
      "porting_visualize\030{ \001(\0132,.metamoto.servi"
      "ces.ReportingVisualizeRequestH\000\022D\n\017scena"
      "rio_update\030\214\001 \001(\0132(.metamoto.services.Sc"
      "enarioUpdateRequestH\000\022`\n\036scenario_get_ve"
      "hicle_waypoints\030\215\001 \001(\01325.metamoto.servic"
      "es.ScenarioGetVehicleWaypointsRequestH\000\022"
      "`\n\036scenario_set_vehicle_waypoints\030\216\001 \001(\013"
      "25.metamoto.services.ScenarioSetVehicleW"
      "aypointsRequestH\000\022V\n\031scenario_set_driver"
      "_model\030\217\001 \001(\01320.metamoto.services.Scenar"
      "ioSetDriverModelRequestH\000\022B\n\016scenario_se"
      "tup\030\220\001 \001(\0132\'.metamoto.services.ScenarioS"
      "etupRequestH\000\022R\n\027system_get_results_size"
      "\030\240\001 \001(\0132..metamoto.services.SystemGetRes"
      "ultsSizeRequestH\000B\014\n\ndata_oneof\"\245\023\n\021SUTC"
      "onnectorReply\022$\n\006status\030\001 \001(\0132\022.google.r"
      "pc.StatusH\000\022>\n\007connect\030\002 \001(\0132+.metamoto."
      "services.SUTConnectorConnectReplyH\000\022D\n\nd"
      "isconnect\030\003 \001(\0132..metamoto.services.SUTC"
      "onnectorDisconnectReplyH\000\022O\n\025controller_"
      "initialize\030\024 \001(\0132..metamoto.services.Con"
      "trollerInitializeRequestH\000\022G\n\021controller"
      "_update\030\025 \001(\0132*.metamoto.services.Contro"
      "llerUpdateRequestH\000\022E\n\020controller_close\030"
      "\026 \001(\0132).metamoto.services.ControllerClos"
      "eRequestH\000\022E\n\020controller_setup\030\027 \001(\0132).m"
      "etamoto.services.ControllerSetupRequestH"
      "\000\022G\n\021sensor_initialize\030( \001(\0132*.metamoto."
      "services.SensorInitializeRequestH\000\022\?\n\rse"
      "nsor_update\030) \001(\0132&.metamoto.services.Se"
      "nsorUpdateRequestH\000\022=\n\014sensor_close\030* \001("
      "\0132%.metamoto.services.SensorCloseRequest"
      "H\000\022=\n\014sensor_setup\030+ \001(\0132%.metamoto.serv"
      "ices.SensorSetupRequestH\000\022B\n\020data_bus_pu"
      "blish\030< \001(\0132&.metamoto.services.DataBusP"
      "ublishReplyH\000\022F\n\022data_bus_subscribe\030= \001("
      "\0132(.metamoto.services.DataBusSubscribeRe"
      "plyH\000\022>\n\016data_bus_write\030> \001(\0132$.metamoto"
      ".services.DataBusWriteReplyH\000\022<\n\rdata_bu"
      "s_read\030\? \001(\0132#.metamoto.services.DataBus"
      "ReadReplyH\000\022C\n\021data_bus_read_all\030@ \001(\0132&"
      ".metamoto.services.DataBusReadAllReplyH\000"
      "\022E\n\022data_bus_read_last\030A \001(\0132\'.metamoto."
      "services.DataBusReadLastReplyH\000\022I\n\024map_g"
      "et_road_network\030P \001(\0132).metamoto.service"
      "s.MapGetRoadNetworkReplyH\000\022C\n\021map_to_roa"
      "d_point\030Q \001(\0132&.metamoto.services.MapToR"
      "oadPointReplyH\000\022E\n\022map_to_world_point\030R "
      "\001(\0132\'.metamoto.services.MapToWorldPointR"
      "eplyH\000\022:\n\014map_get_path\030S \001(\0132\".metamoto."
      "services.MapGetPathReplyH\000\022@\n\017map_get_he"
      "ading\030T \001(\0132%.metamoto.services.MapGetHe"
      "adingReplyH\000\022O\n\027ray_tracer_set_patterns\030"
      "d \001(\0132,.metamoto.services.RayTracerSetPa"
      "tternsReplyH\000\022B\n\020ray_tracer_trace\030e \001(\0132"
      "&.metamoto.services.RayTracerTraceReplyH"
      "\000\022^\n\037reporting_add_time_series_value\030x \001"
      "(\01323.metamoto.services.ReportingAddTimeS"
      "eriesValueReplyH\000\022=\n\rreporting_log\030y \001(\013"
      "2$.metamoto.services.ReportingLogReplyH\000"
      "\022N\n\026reporting_report_event\030z \001(\0132,.metam"
      "oto.services.ReportingReportEventReplyH\000"
      "\022I\n\023reporting_visualize\030{ \001(\0132*.metamoto"
      ".services.ReportingVisualizeReplyH\000\022B\n\017s"
      "cenario_update\030\214\001 \001(\0132&.metamoto.service"
      "s.ScenarioUpdateReplyH\000\022^\n\036scenario_get_"
      "vehicle_waypoints\030\215\001 \001(\01323.metamoto.serv"
      "ices.ScenarioGetVehicleWaypointsReplyH\000\022"
      "^\n\036scenario_set_vehicle_waypoints\030\216\001 \001(\013"
      "23.metamoto.services.ScenarioSetVehicleW"
      "aypointsReplyH\000\022T\n\031scenario_set_driver_m"
      "odel\030\217\001 \001(\0132..metamoto.services.Scenario"
      "SetDriverModelReplyH\000\022@\n\016scenario_setup\030"
      "\220\001 \001(\0132%.metamoto.services.ScenarioSetup"
      "ReplyH\000\022P\n\027system_get_results_size\030\240\001 \001("
      "\0132,.metamoto.services.SystemGetResultsSi"
      "zeReplyH\000B\014\n\ndata_oneof\"\274\001\n\032SUTConnector"
      "ConnectRequest\022\n\n\002id\030\001 \001(\t\022C\n\004type\030\002 \001(\016"
      "25.metamoto.services.SUTConnectorConnect"
      "Request.SUTType\"M\n\007SUTType\022\024\n\020SUT_TYPE_U"
      "NKNOWN\020\000\022\027\n\023SUT_TYPE_CONTROLLER\020\001\022\023\n\017SUT"
      "_TYPE_SENSOR\020\002\"\037\n\035SUTConnectorDisconnect"
      "Request\"\032\n\030SUTConnectorConnectReply\"\035\n\033S"
      "UTConnectorDisconnectReply\"*\n\034SUTConnect"
      "orHeartbeatRequest\022\n\n\002id\030\001 \001(\t\"\034\n\032SUTCon"
      "nectorHeartbeatReply\"*\n(SUTConnectorQuer"
      "yGetConnectedSUTsRequest\"\226\001\n&SUTConnecto"
      "rQueryGetConnectedSUTsReply\022K\n\004suts\030\001 \003("
      "\0132=.metamoto.services.SUTConnectorQueryG"
      "etConnectedSUTsReply.SUT\032\037\n\003SUT\022\n\n\002id\030\001 "
      "\001(\t\022\014\n\004port\030\002 \001(\r2\334\001\n\014SUTConnector\022]\n\007Co"
      "nnect\022&.metamoto.services.SUTConnectorRe"
      "quest\032$.metamoto.services.SUTConnectorRe"
      "ply\"\000(\0010\001\022m\n\tHeartbeat\022/.metamoto.servic"
      "es.SUTConnectorHeartbeatRequest\032-.metamo"
      "to.services.SUTConnectorHeartbeatReply\"\000"
      "2\242\001\n\021SUTConnectorQuery\022\214\001\n\020GetConnectedS"
      "UTs\022;.metamoto.services.SUTConnectorQuer"
      "yGetConnectedSUTsRequest\0329.metamoto.serv"
      "ices.SUTConnectorQueryGetConnectedSUTsRe"
      "ply\"\000B\024\252\002\021Metamoto.Servicesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6315);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/services/sut_connector.proto", &protobuf_RegisterTypes);
  ::protobuf_metamoto_2ftypes_2fstatus_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fservices_2fcontroller_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fservices_2fdata_5fbus_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fservices_2fmap_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fservices_2fray_5ftracer_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fservices_2freporting_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fservices_2fscenario_5fservice_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fservices_2fsensor_2eproto::AddDescriptors();
  ::protobuf_metamoto_2fservices_2fsystem_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto
namespace metamoto {
namespace services {
const ::google::protobuf::EnumDescriptor* SUTConnectorConnectRequest_SUTType_descriptor() {
  protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_enum_descriptors[0];
}
bool SUTConnectorConnectRequest_SUTType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SUTConnectorConnectRequest_SUTType SUTConnectorConnectRequest::SUT_TYPE_UNKNOWN;
const SUTConnectorConnectRequest_SUTType SUTConnectorConnectRequest::SUT_TYPE_CONTROLLER;
const SUTConnectorConnectRequest_SUTType SUTConnectorConnectRequest::SUT_TYPE_SENSOR;
const SUTConnectorConnectRequest_SUTType SUTConnectorConnectRequest::SUTType_MIN;
const SUTConnectorConnectRequest_SUTType SUTConnectorConnectRequest::SUTType_MAX;
const int SUTConnectorConnectRequest::SUTType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void SUTConnectorRequest::InitAsDefaultInstance() {
  ::metamoto::services::_SUTConnectorRequest_default_instance_.status_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.connect_ = const_cast< ::metamoto::services::SUTConnectorConnectRequest*>(
      ::metamoto::services::SUTConnectorConnectRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.disconnect_ = const_cast< ::metamoto::services::SUTConnectorDisconnectRequest*>(
      ::metamoto::services::SUTConnectorDisconnectRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.controller_initialize_ = const_cast< ::metamoto::services::ControllerInitializeReply*>(
      ::metamoto::services::ControllerInitializeReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.controller_update_ = const_cast< ::metamoto::services::ControllerUpdateReply*>(
      ::metamoto::services::ControllerUpdateReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.controller_close_ = const_cast< ::metamoto::services::ControllerCloseReply*>(
      ::metamoto::services::ControllerCloseReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.controller_setup_ = const_cast< ::metamoto::services::ControllerSetupReply*>(
      ::metamoto::services::ControllerSetupReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.sensor_initialize_ = const_cast< ::metamoto::services::SensorInitializeReply*>(
      ::metamoto::services::SensorInitializeReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.sensor_update_ = const_cast< ::metamoto::services::SensorUpdateReply*>(
      ::metamoto::services::SensorUpdateReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.sensor_close_ = const_cast< ::metamoto::services::SensorCloseReply*>(
      ::metamoto::services::SensorCloseReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.sensor_setup_ = const_cast< ::metamoto::services::SensorSetupReply*>(
      ::metamoto::services::SensorSetupReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.data_bus_publish_ = const_cast< ::metamoto::services::DataBusPublishRequest*>(
      ::metamoto::services::DataBusPublishRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.data_bus_subscribe_ = const_cast< ::metamoto::services::DataBusSubscribeRequest*>(
      ::metamoto::services::DataBusSubscribeRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.data_bus_write_ = const_cast< ::metamoto::services::DataBusWriteRequest*>(
      ::metamoto::services::DataBusWriteRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.data_bus_read_ = const_cast< ::metamoto::services::DataBusReadRequest*>(
      ::metamoto::services::DataBusReadRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.data_bus_read_all_ = const_cast< ::metamoto::services::DataBusReadAllRequest*>(
      ::metamoto::services::DataBusReadAllRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.data_bus_read_last_ = const_cast< ::metamoto::services::DataBusReadLastRequest*>(
      ::metamoto::services::DataBusReadLastRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.map_get_road_network_ = const_cast< ::metamoto::services::MapGetRoadNetworkRequest*>(
      ::metamoto::services::MapGetRoadNetworkRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.map_to_road_point_ = const_cast< ::metamoto::services::MapToRoadPointRequest*>(
      ::metamoto::services::MapToRoadPointRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.map_to_world_point_ = const_cast< ::metamoto::services::MapToWorldPointRequest*>(
      ::metamoto::services::MapToWorldPointRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.map_get_path_ = const_cast< ::metamoto::services::MapGetPathRequest*>(
      ::metamoto::services::MapGetPathRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.map_get_heading_ = const_cast< ::metamoto::services::MapGetHeadingRequest*>(
      ::metamoto::services::MapGetHeadingRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.ray_tracer_set_patterns_ = const_cast< ::metamoto::services::RayTracerSetPatternsRequest*>(
      ::metamoto::services::RayTracerSetPatternsRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.ray_tracer_trace_ = const_cast< ::metamoto::services::RayTracerTraceRequest*>(
      ::metamoto::services::RayTracerTraceRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.reporting_add_time_series_value_ = const_cast< ::metamoto::services::ReportingAddTimeSeriesValueRequest*>(
      ::metamoto::services::ReportingAddTimeSeriesValueRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.reporting_log_ = const_cast< ::metamoto::services::ReportingLogRequest*>(
      ::metamoto::services::ReportingLogRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.reporting_report_event_ = const_cast< ::metamoto::services::ReportingReportEventRequest*>(
      ::metamoto::services::ReportingReportEventRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.reporting_visualize_ = const_cast< ::metamoto::services::ReportingVisualizeRequest*>(
      ::metamoto::services::ReportingVisualizeRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.scenario_update_ = const_cast< ::metamoto::services::ScenarioUpdateRequest*>(
      ::metamoto::services::ScenarioUpdateRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.scenario_get_vehicle_waypoints_ = const_cast< ::metamoto::services::ScenarioGetVehicleWaypointsRequest*>(
      ::metamoto::services::ScenarioGetVehicleWaypointsRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.scenario_set_vehicle_waypoints_ = const_cast< ::metamoto::services::ScenarioSetVehicleWaypointsRequest*>(
      ::metamoto::services::ScenarioSetVehicleWaypointsRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.scenario_set_driver_model_ = const_cast< ::metamoto::services::ScenarioSetDriverModelRequest*>(
      ::metamoto::services::ScenarioSetDriverModelRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.scenario_setup_ = const_cast< ::metamoto::services::ScenarioSetupRequest*>(
      ::metamoto::services::ScenarioSetupRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorRequest_default_instance_.system_get_results_size_ = const_cast< ::metamoto::services::SystemGetResultsSizeRequest*>(
      ::metamoto::services::SystemGetResultsSizeRequest::internal_default_instance());
}
void SUTConnectorRequest::set_allocated_status(::google::rpc::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
    data_oneof_.status_ = status;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.status)
}
void SUTConnectorRequest::clear_status() {
  if (has_status()) {
    delete data_oneof_.status_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_connect(::metamoto::services::SUTConnectorConnectRequest* connect) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (connect) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      connect = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connect, submessage_arena);
    }
    set_has_connect();
    data_oneof_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.connect)
}
void SUTConnectorRequest::set_allocated_disconnect(::metamoto::services::SUTConnectorDisconnectRequest* disconnect) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (disconnect) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      disconnect = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, disconnect, submessage_arena);
    }
    set_has_disconnect();
    data_oneof_.disconnect_ = disconnect;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.disconnect)
}
void SUTConnectorRequest::set_allocated_controller_initialize(::metamoto::services::ControllerInitializeReply* controller_initialize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (controller_initialize) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      controller_initialize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controller_initialize, submessage_arena);
    }
    set_has_controller_initialize();
    data_oneof_.controller_initialize_ = controller_initialize;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.controller_initialize)
}
void SUTConnectorRequest::clear_controller_initialize() {
  if (has_controller_initialize()) {
    delete data_oneof_.controller_initialize_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_controller_update(::metamoto::services::ControllerUpdateReply* controller_update) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (controller_update) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      controller_update = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controller_update, submessage_arena);
    }
    set_has_controller_update();
    data_oneof_.controller_update_ = controller_update;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.controller_update)
}
void SUTConnectorRequest::clear_controller_update() {
  if (has_controller_update()) {
    delete data_oneof_.controller_update_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_controller_close(::metamoto::services::ControllerCloseReply* controller_close) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (controller_close) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      controller_close = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controller_close, submessage_arena);
    }
    set_has_controller_close();
    data_oneof_.controller_close_ = controller_close;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.controller_close)
}
void SUTConnectorRequest::clear_controller_close() {
  if (has_controller_close()) {
    delete data_oneof_.controller_close_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_controller_setup(::metamoto::services::ControllerSetupReply* controller_setup) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (controller_setup) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      controller_setup = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controller_setup, submessage_arena);
    }
    set_has_controller_setup();
    data_oneof_.controller_setup_ = controller_setup;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.controller_setup)
}
void SUTConnectorRequest::clear_controller_setup() {
  if (has_controller_setup()) {
    delete data_oneof_.controller_setup_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_sensor_initialize(::metamoto::services::SensorInitializeReply* sensor_initialize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (sensor_initialize) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sensor_initialize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sensor_initialize, submessage_arena);
    }
    set_has_sensor_initialize();
    data_oneof_.sensor_initialize_ = sensor_initialize;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.sensor_initialize)
}
void SUTConnectorRequest::clear_sensor_initialize() {
  if (has_sensor_initialize()) {
    delete data_oneof_.sensor_initialize_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_sensor_update(::metamoto::services::SensorUpdateReply* sensor_update) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (sensor_update) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sensor_update = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sensor_update, submessage_arena);
    }
    set_has_sensor_update();
    data_oneof_.sensor_update_ = sensor_update;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.sensor_update)
}
void SUTConnectorRequest::clear_sensor_update() {
  if (has_sensor_update()) {
    delete data_oneof_.sensor_update_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_sensor_close(::metamoto::services::SensorCloseReply* sensor_close) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (sensor_close) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sensor_close = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sensor_close, submessage_arena);
    }
    set_has_sensor_close();
    data_oneof_.sensor_close_ = sensor_close;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.sensor_close)
}
void SUTConnectorRequest::clear_sensor_close() {
  if (has_sensor_close()) {
    delete data_oneof_.sensor_close_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_sensor_setup(::metamoto::services::SensorSetupReply* sensor_setup) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (sensor_setup) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sensor_setup = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sensor_setup, submessage_arena);
    }
    set_has_sensor_setup();
    data_oneof_.sensor_setup_ = sensor_setup;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.sensor_setup)
}
void SUTConnectorRequest::clear_sensor_setup() {
  if (has_sensor_setup()) {
    delete data_oneof_.sensor_setup_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_data_bus_publish(::metamoto::services::DataBusPublishRequest* data_bus_publish) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (data_bus_publish) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_bus_publish = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_bus_publish, submessage_arena);
    }
    set_has_data_bus_publish();
    data_oneof_.data_bus_publish_ = data_bus_publish;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.data_bus_publish)
}
void SUTConnectorRequest::clear_data_bus_publish() {
  if (has_data_bus_publish()) {
    delete data_oneof_.data_bus_publish_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_data_bus_subscribe(::metamoto::services::DataBusSubscribeRequest* data_bus_subscribe) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (data_bus_subscribe) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_bus_subscribe = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_bus_subscribe, submessage_arena);
    }
    set_has_data_bus_subscribe();
    data_oneof_.data_bus_subscribe_ = data_bus_subscribe;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.data_bus_subscribe)
}
void SUTConnectorRequest::clear_data_bus_subscribe() {
  if (has_data_bus_subscribe()) {
    delete data_oneof_.data_bus_subscribe_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_data_bus_write(::metamoto::services::DataBusWriteRequest* data_bus_write) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (data_bus_write) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_bus_write = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_bus_write, submessage_arena);
    }
    set_has_data_bus_write();
    data_oneof_.data_bus_write_ = data_bus_write;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.data_bus_write)
}
void SUTConnectorRequest::clear_data_bus_write() {
  if (has_data_bus_write()) {
    delete data_oneof_.data_bus_write_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_data_bus_read(::metamoto::services::DataBusReadRequest* data_bus_read) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (data_bus_read) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_bus_read = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_bus_read, submessage_arena);
    }
    set_has_data_bus_read();
    data_oneof_.data_bus_read_ = data_bus_read;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.data_bus_read)
}
void SUTConnectorRequest::clear_data_bus_read() {
  if (has_data_bus_read()) {
    delete data_oneof_.data_bus_read_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_data_bus_read_all(::metamoto::services::DataBusReadAllRequest* data_bus_read_all) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (data_bus_read_all) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_bus_read_all = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_bus_read_all, submessage_arena);
    }
    set_has_data_bus_read_all();
    data_oneof_.data_bus_read_all_ = data_bus_read_all;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.data_bus_read_all)
}
void SUTConnectorRequest::clear_data_bus_read_all() {
  if (has_data_bus_read_all()) {
    delete data_oneof_.data_bus_read_all_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_data_bus_read_last(::metamoto::services::DataBusReadLastRequest* data_bus_read_last) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (data_bus_read_last) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_bus_read_last = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_bus_read_last, submessage_arena);
    }
    set_has_data_bus_read_last();
    data_oneof_.data_bus_read_last_ = data_bus_read_last;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.data_bus_read_last)
}
void SUTConnectorRequest::clear_data_bus_read_last() {
  if (has_data_bus_read_last()) {
    delete data_oneof_.data_bus_read_last_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_map_get_road_network(::metamoto::services::MapGetRoadNetworkRequest* map_get_road_network) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (map_get_road_network) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map_get_road_network = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map_get_road_network, submessage_arena);
    }
    set_has_map_get_road_network();
    data_oneof_.map_get_road_network_ = map_get_road_network;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.map_get_road_network)
}
void SUTConnectorRequest::clear_map_get_road_network() {
  if (has_map_get_road_network()) {
    delete data_oneof_.map_get_road_network_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_map_to_road_point(::metamoto::services::MapToRoadPointRequest* map_to_road_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (map_to_road_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map_to_road_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map_to_road_point, submessage_arena);
    }
    set_has_map_to_road_point();
    data_oneof_.map_to_road_point_ = map_to_road_point;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.map_to_road_point)
}
void SUTConnectorRequest::clear_map_to_road_point() {
  if (has_map_to_road_point()) {
    delete data_oneof_.map_to_road_point_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_map_to_world_point(::metamoto::services::MapToWorldPointRequest* map_to_world_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (map_to_world_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map_to_world_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map_to_world_point, submessage_arena);
    }
    set_has_map_to_world_point();
    data_oneof_.map_to_world_point_ = map_to_world_point;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.map_to_world_point)
}
void SUTConnectorRequest::clear_map_to_world_point() {
  if (has_map_to_world_point()) {
    delete data_oneof_.map_to_world_point_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_map_get_path(::metamoto::services::MapGetPathRequest* map_get_path) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (map_get_path) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map_get_path = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map_get_path, submessage_arena);
    }
    set_has_map_get_path();
    data_oneof_.map_get_path_ = map_get_path;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.map_get_path)
}
void SUTConnectorRequest::clear_map_get_path() {
  if (has_map_get_path()) {
    delete data_oneof_.map_get_path_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_map_get_heading(::metamoto::services::MapGetHeadingRequest* map_get_heading) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (map_get_heading) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map_get_heading = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map_get_heading, submessage_arena);
    }
    set_has_map_get_heading();
    data_oneof_.map_get_heading_ = map_get_heading;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.map_get_heading)
}
void SUTConnectorRequest::clear_map_get_heading() {
  if (has_map_get_heading()) {
    delete data_oneof_.map_get_heading_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_ray_tracer_set_patterns(::metamoto::services::RayTracerSetPatternsRequest* ray_tracer_set_patterns) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (ray_tracer_set_patterns) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ray_tracer_set_patterns = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ray_tracer_set_patterns, submessage_arena);
    }
    set_has_ray_tracer_set_patterns();
    data_oneof_.ray_tracer_set_patterns_ = ray_tracer_set_patterns;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.ray_tracer_set_patterns)
}
void SUTConnectorRequest::clear_ray_tracer_set_patterns() {
  if (has_ray_tracer_set_patterns()) {
    delete data_oneof_.ray_tracer_set_patterns_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_ray_tracer_trace(::metamoto::services::RayTracerTraceRequest* ray_tracer_trace) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (ray_tracer_trace) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ray_tracer_trace = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ray_tracer_trace, submessage_arena);
    }
    set_has_ray_tracer_trace();
    data_oneof_.ray_tracer_trace_ = ray_tracer_trace;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.ray_tracer_trace)
}
void SUTConnectorRequest::clear_ray_tracer_trace() {
  if (has_ray_tracer_trace()) {
    delete data_oneof_.ray_tracer_trace_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_reporting_add_time_series_value(::metamoto::services::ReportingAddTimeSeriesValueRequest* reporting_add_time_series_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (reporting_add_time_series_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reporting_add_time_series_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reporting_add_time_series_value, submessage_arena);
    }
    set_has_reporting_add_time_series_value();
    data_oneof_.reporting_add_time_series_value_ = reporting_add_time_series_value;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.reporting_add_time_series_value)
}
void SUTConnectorRequest::clear_reporting_add_time_series_value() {
  if (has_reporting_add_time_series_value()) {
    delete data_oneof_.reporting_add_time_series_value_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_reporting_log(::metamoto::services::ReportingLogRequest* reporting_log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (reporting_log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reporting_log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reporting_log, submessage_arena);
    }
    set_has_reporting_log();
    data_oneof_.reporting_log_ = reporting_log;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.reporting_log)
}
void SUTConnectorRequest::clear_reporting_log() {
  if (has_reporting_log()) {
    delete data_oneof_.reporting_log_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_reporting_report_event(::metamoto::services::ReportingReportEventRequest* reporting_report_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (reporting_report_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reporting_report_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reporting_report_event, submessage_arena);
    }
    set_has_reporting_report_event();
    data_oneof_.reporting_report_event_ = reporting_report_event;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.reporting_report_event)
}
void SUTConnectorRequest::clear_reporting_report_event() {
  if (has_reporting_report_event()) {
    delete data_oneof_.reporting_report_event_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_reporting_visualize(::metamoto::services::ReportingVisualizeRequest* reporting_visualize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (reporting_visualize) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reporting_visualize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reporting_visualize, submessage_arena);
    }
    set_has_reporting_visualize();
    data_oneof_.reporting_visualize_ = reporting_visualize;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.reporting_visualize)
}
void SUTConnectorRequest::clear_reporting_visualize() {
  if (has_reporting_visualize()) {
    delete data_oneof_.reporting_visualize_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_scenario_update(::metamoto::services::ScenarioUpdateRequest* scenario_update) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (scenario_update) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scenario_update = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scenario_update, submessage_arena);
    }
    set_has_scenario_update();
    data_oneof_.scenario_update_ = scenario_update;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.scenario_update)
}
void SUTConnectorRequest::clear_scenario_update() {
  if (has_scenario_update()) {
    delete data_oneof_.scenario_update_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_scenario_get_vehicle_waypoints(::metamoto::services::ScenarioGetVehicleWaypointsRequest* scenario_get_vehicle_waypoints) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (scenario_get_vehicle_waypoints) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scenario_get_vehicle_waypoints = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scenario_get_vehicle_waypoints, submessage_arena);
    }
    set_has_scenario_get_vehicle_waypoints();
    data_oneof_.scenario_get_vehicle_waypoints_ = scenario_get_vehicle_waypoints;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.scenario_get_vehicle_waypoints)
}
void SUTConnectorRequest::clear_scenario_get_vehicle_waypoints() {
  if (has_scenario_get_vehicle_waypoints()) {
    delete data_oneof_.scenario_get_vehicle_waypoints_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_scenario_set_vehicle_waypoints(::metamoto::services::ScenarioSetVehicleWaypointsRequest* scenario_set_vehicle_waypoints) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (scenario_set_vehicle_waypoints) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scenario_set_vehicle_waypoints = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scenario_set_vehicle_waypoints, submessage_arena);
    }
    set_has_scenario_set_vehicle_waypoints();
    data_oneof_.scenario_set_vehicle_waypoints_ = scenario_set_vehicle_waypoints;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.scenario_set_vehicle_waypoints)
}
void SUTConnectorRequest::clear_scenario_set_vehicle_waypoints() {
  if (has_scenario_set_vehicle_waypoints()) {
    delete data_oneof_.scenario_set_vehicle_waypoints_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_scenario_set_driver_model(::metamoto::services::ScenarioSetDriverModelRequest* scenario_set_driver_model) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (scenario_set_driver_model) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scenario_set_driver_model = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scenario_set_driver_model, submessage_arena);
    }
    set_has_scenario_set_driver_model();
    data_oneof_.scenario_set_driver_model_ = scenario_set_driver_model;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.scenario_set_driver_model)
}
void SUTConnectorRequest::clear_scenario_set_driver_model() {
  if (has_scenario_set_driver_model()) {
    delete data_oneof_.scenario_set_driver_model_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_scenario_setup(::metamoto::services::ScenarioSetupRequest* scenario_setup) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (scenario_setup) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scenario_setup = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scenario_setup, submessage_arena);
    }
    set_has_scenario_setup();
    data_oneof_.scenario_setup_ = scenario_setup;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.scenario_setup)
}
void SUTConnectorRequest::clear_scenario_setup() {
  if (has_scenario_setup()) {
    delete data_oneof_.scenario_setup_;
    clear_has_data_oneof();
  }
}
void SUTConnectorRequest::set_allocated_system_get_results_size(::metamoto::services::SystemGetResultsSizeRequest* system_get_results_size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (system_get_results_size) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system_get_results_size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system_get_results_size, submessage_arena);
    }
    set_has_system_get_results_size();
    data_oneof_.system_get_results_size_ = system_get_results_size;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorRequest.system_get_results_size)
}
void SUTConnectorRequest::clear_system_get_results_size() {
  if (has_system_get_results_size()) {
    delete data_oneof_.system_get_results_size_;
    clear_has_data_oneof();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SUTConnectorRequest::kStatusFieldNumber;
const int SUTConnectorRequest::kConnectFieldNumber;
const int SUTConnectorRequest::kDisconnectFieldNumber;
const int SUTConnectorRequest::kControllerInitializeFieldNumber;
const int SUTConnectorRequest::kControllerUpdateFieldNumber;
const int SUTConnectorRequest::kControllerCloseFieldNumber;
const int SUTConnectorRequest::kControllerSetupFieldNumber;
const int SUTConnectorRequest::kSensorInitializeFieldNumber;
const int SUTConnectorRequest::kSensorUpdateFieldNumber;
const int SUTConnectorRequest::kSensorCloseFieldNumber;
const int SUTConnectorRequest::kSensorSetupFieldNumber;
const int SUTConnectorRequest::kDataBusPublishFieldNumber;
const int SUTConnectorRequest::kDataBusSubscribeFieldNumber;
const int SUTConnectorRequest::kDataBusWriteFieldNumber;
const int SUTConnectorRequest::kDataBusReadFieldNumber;
const int SUTConnectorRequest::kDataBusReadAllFieldNumber;
const int SUTConnectorRequest::kDataBusReadLastFieldNumber;
const int SUTConnectorRequest::kMapGetRoadNetworkFieldNumber;
const int SUTConnectorRequest::kMapToRoadPointFieldNumber;
const int SUTConnectorRequest::kMapToWorldPointFieldNumber;
const int SUTConnectorRequest::kMapGetPathFieldNumber;
const int SUTConnectorRequest::kMapGetHeadingFieldNumber;
const int SUTConnectorRequest::kRayTracerSetPatternsFieldNumber;
const int SUTConnectorRequest::kRayTracerTraceFieldNumber;
const int SUTConnectorRequest::kReportingAddTimeSeriesValueFieldNumber;
const int SUTConnectorRequest::kReportingLogFieldNumber;
const int SUTConnectorRequest::kReportingReportEventFieldNumber;
const int SUTConnectorRequest::kReportingVisualizeFieldNumber;
const int SUTConnectorRequest::kScenarioUpdateFieldNumber;
const int SUTConnectorRequest::kScenarioGetVehicleWaypointsFieldNumber;
const int SUTConnectorRequest::kScenarioSetVehicleWaypointsFieldNumber;
const int SUTConnectorRequest::kScenarioSetDriverModelFieldNumber;
const int SUTConnectorRequest::kScenarioSetupFieldNumber;
const int SUTConnectorRequest::kSystemGetResultsSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SUTConnectorRequest::SUTConnectorRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.SUTConnectorRequest)
}
SUTConnectorRequest::SUTConnectorRequest(const SUTConnectorRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_data_oneof();
  switch (from.data_oneof_case()) {
    case kStatus: {
      mutable_status()->::google::rpc::Status::MergeFrom(from.status());
      break;
    }
    case kConnect: {
      mutable_connect()->::metamoto::services::SUTConnectorConnectRequest::MergeFrom(from.connect());
      break;
    }
    case kDisconnect: {
      mutable_disconnect()->::metamoto::services::SUTConnectorDisconnectRequest::MergeFrom(from.disconnect());
      break;
    }
    case kControllerInitialize: {
      mutable_controller_initialize()->::metamoto::services::ControllerInitializeReply::MergeFrom(from.controller_initialize());
      break;
    }
    case kControllerUpdate: {
      mutable_controller_update()->::metamoto::services::ControllerUpdateReply::MergeFrom(from.controller_update());
      break;
    }
    case kControllerClose: {
      mutable_controller_close()->::metamoto::services::ControllerCloseReply::MergeFrom(from.controller_close());
      break;
    }
    case kControllerSetup: {
      mutable_controller_setup()->::metamoto::services::ControllerSetupReply::MergeFrom(from.controller_setup());
      break;
    }
    case kSensorInitialize: {
      mutable_sensor_initialize()->::metamoto::services::SensorInitializeReply::MergeFrom(from.sensor_initialize());
      break;
    }
    case kSensorUpdate: {
      mutable_sensor_update()->::metamoto::services::SensorUpdateReply::MergeFrom(from.sensor_update());
      break;
    }
    case kSensorClose: {
      mutable_sensor_close()->::metamoto::services::SensorCloseReply::MergeFrom(from.sensor_close());
      break;
    }
    case kSensorSetup: {
      mutable_sensor_setup()->::metamoto::services::SensorSetupReply::MergeFrom(from.sensor_setup());
      break;
    }
    case kDataBusPublish: {
      mutable_data_bus_publish()->::metamoto::services::DataBusPublishRequest::MergeFrom(from.data_bus_publish());
      break;
    }
    case kDataBusSubscribe: {
      mutable_data_bus_subscribe()->::metamoto::services::DataBusSubscribeRequest::MergeFrom(from.data_bus_subscribe());
      break;
    }
    case kDataBusWrite: {
      mutable_data_bus_write()->::metamoto::services::DataBusWriteRequest::MergeFrom(from.data_bus_write());
      break;
    }
    case kDataBusRead: {
      mutable_data_bus_read()->::metamoto::services::DataBusReadRequest::MergeFrom(from.data_bus_read());
      break;
    }
    case kDataBusReadAll: {
      mutable_data_bus_read_all()->::metamoto::services::DataBusReadAllRequest::MergeFrom(from.data_bus_read_all());
      break;
    }
    case kDataBusReadLast: {
      mutable_data_bus_read_last()->::metamoto::services::DataBusReadLastRequest::MergeFrom(from.data_bus_read_last());
      break;
    }
    case kMapGetRoadNetwork: {
      mutable_map_get_road_network()->::metamoto::services::MapGetRoadNetworkRequest::MergeFrom(from.map_get_road_network());
      break;
    }
    case kMapToRoadPoint: {
      mutable_map_to_road_point()->::metamoto::services::MapToRoadPointRequest::MergeFrom(from.map_to_road_point());
      break;
    }
    case kMapToWorldPoint: {
      mutable_map_to_world_point()->::metamoto::services::MapToWorldPointRequest::MergeFrom(from.map_to_world_point());
      break;
    }
    case kMapGetPath: {
      mutable_map_get_path()->::metamoto::services::MapGetPathRequest::MergeFrom(from.map_get_path());
      break;
    }
    case kMapGetHeading: {
      mutable_map_get_heading()->::metamoto::services::MapGetHeadingRequest::MergeFrom(from.map_get_heading());
      break;
    }
    case kRayTracerSetPatterns: {
      mutable_ray_tracer_set_patterns()->::metamoto::services::RayTracerSetPatternsRequest::MergeFrom(from.ray_tracer_set_patterns());
      break;
    }
    case kRayTracerTrace: {
      mutable_ray_tracer_trace()->::metamoto::services::RayTracerTraceRequest::MergeFrom(from.ray_tracer_trace());
      break;
    }
    case kReportingAddTimeSeriesValue: {
      mutable_reporting_add_time_series_value()->::metamoto::services::ReportingAddTimeSeriesValueRequest::MergeFrom(from.reporting_add_time_series_value());
      break;
    }
    case kReportingLog: {
      mutable_reporting_log()->::metamoto::services::ReportingLogRequest::MergeFrom(from.reporting_log());
      break;
    }
    case kReportingReportEvent: {
      mutable_reporting_report_event()->::metamoto::services::ReportingReportEventRequest::MergeFrom(from.reporting_report_event());
      break;
    }
    case kReportingVisualize: {
      mutable_reporting_visualize()->::metamoto::services::ReportingVisualizeRequest::MergeFrom(from.reporting_visualize());
      break;
    }
    case kScenarioUpdate: {
      mutable_scenario_update()->::metamoto::services::ScenarioUpdateRequest::MergeFrom(from.scenario_update());
      break;
    }
    case kScenarioGetVehicleWaypoints: {
      mutable_scenario_get_vehicle_waypoints()->::metamoto::services::ScenarioGetVehicleWaypointsRequest::MergeFrom(from.scenario_get_vehicle_waypoints());
      break;
    }
    case kScenarioSetVehicleWaypoints: {
      mutable_scenario_set_vehicle_waypoints()->::metamoto::services::ScenarioSetVehicleWaypointsRequest::MergeFrom(from.scenario_set_vehicle_waypoints());
      break;
    }
    case kScenarioSetDriverModel: {
      mutable_scenario_set_driver_model()->::metamoto::services::ScenarioSetDriverModelRequest::MergeFrom(from.scenario_set_driver_model());
      break;
    }
    case kScenarioSetup: {
      mutable_scenario_setup()->::metamoto::services::ScenarioSetupRequest::MergeFrom(from.scenario_setup());
      break;
    }
    case kSystemGetResultsSize: {
      mutable_system_get_results_size()->::metamoto::services::SystemGetResultsSizeRequest::MergeFrom(from.system_get_results_size());
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.services.SUTConnectorRequest)
}

void SUTConnectorRequest::SharedCtor() {
  clear_has_data_oneof();
}

SUTConnectorRequest::~SUTConnectorRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.SUTConnectorRequest)
  SharedDtor();
}

void SUTConnectorRequest::SharedDtor() {
  if (has_data_oneof()) {
    clear_data_oneof();
  }
}

void SUTConnectorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SUTConnectorRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SUTConnectorRequest& SUTConnectorRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorRequest.base);
  return *internal_default_instance();
}


void SUTConnectorRequest::clear_data_oneof() {
// @@protoc_insertion_point(one_of_clear_start:metamoto.services.SUTConnectorRequest)
  switch (data_oneof_case()) {
    case kStatus: {
      delete data_oneof_.status_;
      break;
    }
    case kConnect: {
      delete data_oneof_.connect_;
      break;
    }
    case kDisconnect: {
      delete data_oneof_.disconnect_;
      break;
    }
    case kControllerInitialize: {
      delete data_oneof_.controller_initialize_;
      break;
    }
    case kControllerUpdate: {
      delete data_oneof_.controller_update_;
      break;
    }
    case kControllerClose: {
      delete data_oneof_.controller_close_;
      break;
    }
    case kControllerSetup: {
      delete data_oneof_.controller_setup_;
      break;
    }
    case kSensorInitialize: {
      delete data_oneof_.sensor_initialize_;
      break;
    }
    case kSensorUpdate: {
      delete data_oneof_.sensor_update_;
      break;
    }
    case kSensorClose: {
      delete data_oneof_.sensor_close_;
      break;
    }
    case kSensorSetup: {
      delete data_oneof_.sensor_setup_;
      break;
    }
    case kDataBusPublish: {
      delete data_oneof_.data_bus_publish_;
      break;
    }
    case kDataBusSubscribe: {
      delete data_oneof_.data_bus_subscribe_;
      break;
    }
    case kDataBusWrite: {
      delete data_oneof_.data_bus_write_;
      break;
    }
    case kDataBusRead: {
      delete data_oneof_.data_bus_read_;
      break;
    }
    case kDataBusReadAll: {
      delete data_oneof_.data_bus_read_all_;
      break;
    }
    case kDataBusReadLast: {
      delete data_oneof_.data_bus_read_last_;
      break;
    }
    case kMapGetRoadNetwork: {
      delete data_oneof_.map_get_road_network_;
      break;
    }
    case kMapToRoadPoint: {
      delete data_oneof_.map_to_road_point_;
      break;
    }
    case kMapToWorldPoint: {
      delete data_oneof_.map_to_world_point_;
      break;
    }
    case kMapGetPath: {
      delete data_oneof_.map_get_path_;
      break;
    }
    case kMapGetHeading: {
      delete data_oneof_.map_get_heading_;
      break;
    }
    case kRayTracerSetPatterns: {
      delete data_oneof_.ray_tracer_set_patterns_;
      break;
    }
    case kRayTracerTrace: {
      delete data_oneof_.ray_tracer_trace_;
      break;
    }
    case kReportingAddTimeSeriesValue: {
      delete data_oneof_.reporting_add_time_series_value_;
      break;
    }
    case kReportingLog: {
      delete data_oneof_.reporting_log_;
      break;
    }
    case kReportingReportEvent: {
      delete data_oneof_.reporting_report_event_;
      break;
    }
    case kReportingVisualize: {
      delete data_oneof_.reporting_visualize_;
      break;
    }
    case kScenarioUpdate: {
      delete data_oneof_.scenario_update_;
      break;
    }
    case kScenarioGetVehicleWaypoints: {
      delete data_oneof_.scenario_get_vehicle_waypoints_;
      break;
    }
    case kScenarioSetVehicleWaypoints: {
      delete data_oneof_.scenario_set_vehicle_waypoints_;
      break;
    }
    case kScenarioSetDriverModel: {
      delete data_oneof_.scenario_set_driver_model_;
      break;
    }
    case kScenarioSetup: {
      delete data_oneof_.scenario_setup_;
      break;
    }
    case kSystemGetResultsSize: {
      delete data_oneof_.system_get_results_size_;
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}


void SUTConnectorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.SUTConnectorRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data_oneof();
  _internal_metadata_.Clear();
}

bool SUTConnectorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.SUTConnectorRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.rpc.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.SUTConnectorConnectRequest connect = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.SUTConnectorDisconnectRequest disconnect = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_disconnect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ControllerInitializeReply controller_initialize = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller_initialize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ControllerUpdateReply controller_update = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ControllerCloseReply controller_close = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller_close()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ControllerSetupReply controller_setup = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller_setup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.SensorInitializeReply sensor_initialize = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_initialize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.SensorUpdateReply sensor_update = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.SensorCloseReply sensor_close = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_close()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.SensorSetupReply sensor_setup = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_setup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.DataBusPublishRequest data_bus_publish = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_bus_publish()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.DataBusSubscribeRequest data_bus_subscribe = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 490 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_bus_subscribe()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.DataBusWriteRequest data_bus_write = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 498 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_bus_write()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.DataBusReadRequest data_bus_read = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 506 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_bus_read()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.DataBusReadAllRequest data_bus_read_all = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 514 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_bus_read_all()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.DataBusReadLastRequest data_bus_read_last = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 522 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_bus_read_last()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.MapGetRoadNetworkRequest map_get_road_network = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 642 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_get_road_network()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.MapToRoadPointRequest map_to_road_point = 81;
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 650 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_to_road_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.MapToWorldPointRequest map_to_world_point = 82;
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 658 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_to_world_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.MapGetPathRequest map_get_path = 83;
      case 83: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 666 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_get_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.MapGetHeadingRequest map_get_heading = 84;
      case 84: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 674 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_get_heading()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.RayTracerSetPatternsRequest ray_tracer_set_patterns = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ray_tracer_set_patterns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.RayTracerTraceRequest ray_tracer_trace = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ray_tracer_trace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ReportingAddTimeSeriesValueRequest reporting_add_time_series_value = 120;
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 962 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reporting_add_time_series_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ReportingLogRequest reporting_log = 121;
      case 121: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 970 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reporting_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ReportingReportEventRequest reporting_report_event = 122;
      case 122: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 978 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reporting_report_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ReportingVisualizeRequest reporting_visualize = 123;
      case 123: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 986 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reporting_visualize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ScenarioUpdateRequest scenario_update = 140;
      case 140: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 1122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scenario_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ScenarioGetVehicleWaypointsRequest scenario_get_vehicle_waypoints = 141;
      case 141: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 1130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scenario_get_vehicle_waypoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ScenarioSetVehicleWaypointsRequest scenario_set_vehicle_waypoints = 142;
      case 142: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 1138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scenario_set_vehicle_waypoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ScenarioSetDriverModelRequest scenario_set_driver_model = 143;
      case 143: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 1146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scenario_set_driver_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ScenarioSetupRequest scenario_setup = 144;
      case 144: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 1154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scenario_setup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.SystemGetResultsSizeRequest system_get_results_size = 160;
      case 160: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 1282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_system_get_results_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.SUTConnectorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.SUTConnectorRequest)
  return false;
#undef DO_
}

void SUTConnectorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.SUTConnectorRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_status(), output);
  }

  // .metamoto.services.SUTConnectorConnectRequest connect = 2;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_connect(), output);
  }

  // .metamoto.services.SUTConnectorDisconnectRequest disconnect = 3;
  if (has_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_disconnect(), output);
  }

  // .metamoto.services.ControllerInitializeReply controller_initialize = 20;
  if (has_controller_initialize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_controller_initialize(), output);
  }

  // .metamoto.services.ControllerUpdateReply controller_update = 21;
  if (has_controller_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_controller_update(), output);
  }

  // .metamoto.services.ControllerCloseReply controller_close = 22;
  if (has_controller_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_internal_controller_close(), output);
  }

  // .metamoto.services.ControllerSetupReply controller_setup = 23;
  if (has_controller_setup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->_internal_controller_setup(), output);
  }

  // .metamoto.services.SensorInitializeReply sensor_initialize = 40;
  if (has_sensor_initialize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->_internal_sensor_initialize(), output);
  }

  // .metamoto.services.SensorUpdateReply sensor_update = 41;
  if (has_sensor_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->_internal_sensor_update(), output);
  }

  // .metamoto.services.SensorCloseReply sensor_close = 42;
  if (has_sensor_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->_internal_sensor_close(), output);
  }

  // .metamoto.services.SensorSetupReply sensor_setup = 43;
  if (has_sensor_setup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->_internal_sensor_setup(), output);
  }

  // .metamoto.services.DataBusPublishRequest data_bus_publish = 60;
  if (has_data_bus_publish()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->_internal_data_bus_publish(), output);
  }

  // .metamoto.services.DataBusSubscribeRequest data_bus_subscribe = 61;
  if (has_data_bus_subscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->_internal_data_bus_subscribe(), output);
  }

  // .metamoto.services.DataBusWriteRequest data_bus_write = 62;
  if (has_data_bus_write()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->_internal_data_bus_write(), output);
  }

  // .metamoto.services.DataBusReadRequest data_bus_read = 63;
  if (has_data_bus_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->_internal_data_bus_read(), output);
  }

  // .metamoto.services.DataBusReadAllRequest data_bus_read_all = 64;
  if (has_data_bus_read_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->_internal_data_bus_read_all(), output);
  }

  // .metamoto.services.DataBusReadLastRequest data_bus_read_last = 65;
  if (has_data_bus_read_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->_internal_data_bus_read_last(), output);
  }

  // .metamoto.services.MapGetRoadNetworkRequest map_get_road_network = 80;
  if (has_map_get_road_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80, this->_internal_map_get_road_network(), output);
  }

  // .metamoto.services.MapToRoadPointRequest map_to_road_point = 81;
  if (has_map_to_road_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      81, this->_internal_map_to_road_point(), output);
  }

  // .metamoto.services.MapToWorldPointRequest map_to_world_point = 82;
  if (has_map_to_world_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      82, this->_internal_map_to_world_point(), output);
  }

  // .metamoto.services.MapGetPathRequest map_get_path = 83;
  if (has_map_get_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      83, this->_internal_map_get_path(), output);
  }

  // .metamoto.services.MapGetHeadingRequest map_get_heading = 84;
  if (has_map_get_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      84, this->_internal_map_get_heading(), output);
  }

  // .metamoto.services.RayTracerSetPatternsRequest ray_tracer_set_patterns = 100;
  if (has_ray_tracer_set_patterns()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->_internal_ray_tracer_set_patterns(), output);
  }

  // .metamoto.services.RayTracerTraceRequest ray_tracer_trace = 101;
  if (has_ray_tracer_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->_internal_ray_tracer_trace(), output);
  }

  // .metamoto.services.ReportingAddTimeSeriesValueRequest reporting_add_time_series_value = 120;
  if (has_reporting_add_time_series_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      120, this->_internal_reporting_add_time_series_value(), output);
  }

  // .metamoto.services.ReportingLogRequest reporting_log = 121;
  if (has_reporting_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      121, this->_internal_reporting_log(), output);
  }

  // .metamoto.services.ReportingReportEventRequest reporting_report_event = 122;
  if (has_reporting_report_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      122, this->_internal_reporting_report_event(), output);
  }

  // .metamoto.services.ReportingVisualizeRequest reporting_visualize = 123;
  if (has_reporting_visualize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      123, this->_internal_reporting_visualize(), output);
  }

  // .metamoto.services.ScenarioUpdateRequest scenario_update = 140;
  if (has_scenario_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      140, this->_internal_scenario_update(), output);
  }

  // .metamoto.services.ScenarioGetVehicleWaypointsRequest scenario_get_vehicle_waypoints = 141;
  if (has_scenario_get_vehicle_waypoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      141, this->_internal_scenario_get_vehicle_waypoints(), output);
  }

  // .metamoto.services.ScenarioSetVehicleWaypointsRequest scenario_set_vehicle_waypoints = 142;
  if (has_scenario_set_vehicle_waypoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      142, this->_internal_scenario_set_vehicle_waypoints(), output);
  }

  // .metamoto.services.ScenarioSetDriverModelRequest scenario_set_driver_model = 143;
  if (has_scenario_set_driver_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      143, this->_internal_scenario_set_driver_model(), output);
  }

  // .metamoto.services.ScenarioSetupRequest scenario_setup = 144;
  if (has_scenario_setup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      144, this->_internal_scenario_setup(), output);
  }

  // .metamoto.services.SystemGetResultsSizeRequest system_get_results_size = 160;
  if (has_system_get_results_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      160, this->_internal_system_get_results_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.SUTConnectorRequest)
}

::google::protobuf::uint8* SUTConnectorRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.SUTConnectorRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_status(), deterministic, target);
  }

  // .metamoto.services.SUTConnectorConnectRequest connect = 2;
  if (has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_connect(), deterministic, target);
  }

  // .metamoto.services.SUTConnectorDisconnectRequest disconnect = 3;
  if (has_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_disconnect(), deterministic, target);
  }

  // .metamoto.services.ControllerInitializeReply controller_initialize = 20;
  if (has_controller_initialize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_controller_initialize(), deterministic, target);
  }

  // .metamoto.services.ControllerUpdateReply controller_update = 21;
  if (has_controller_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_controller_update(), deterministic, target);
  }

  // .metamoto.services.ControllerCloseReply controller_close = 22;
  if (has_controller_close()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->_internal_controller_close(), deterministic, target);
  }

  // .metamoto.services.ControllerSetupReply controller_setup = 23;
  if (has_controller_setup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->_internal_controller_setup(), deterministic, target);
  }

  // .metamoto.services.SensorInitializeReply sensor_initialize = 40;
  if (has_sensor_initialize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40, this->_internal_sensor_initialize(), deterministic, target);
  }

  // .metamoto.services.SensorUpdateReply sensor_update = 41;
  if (has_sensor_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        41, this->_internal_sensor_update(), deterministic, target);
  }

  // .metamoto.services.SensorCloseReply sensor_close = 42;
  if (has_sensor_close()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        42, this->_internal_sensor_close(), deterministic, target);
  }

  // .metamoto.services.SensorSetupReply sensor_setup = 43;
  if (has_sensor_setup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        43, this->_internal_sensor_setup(), deterministic, target);
  }

  // .metamoto.services.DataBusPublishRequest data_bus_publish = 60;
  if (has_data_bus_publish()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        60, this->_internal_data_bus_publish(), deterministic, target);
  }

  // .metamoto.services.DataBusSubscribeRequest data_bus_subscribe = 61;
  if (has_data_bus_subscribe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        61, this->_internal_data_bus_subscribe(), deterministic, target);
  }

  // .metamoto.services.DataBusWriteRequest data_bus_write = 62;
  if (has_data_bus_write()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        62, this->_internal_data_bus_write(), deterministic, target);
  }

  // .metamoto.services.DataBusReadRequest data_bus_read = 63;
  if (has_data_bus_read()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        63, this->_internal_data_bus_read(), deterministic, target);
  }

  // .metamoto.services.DataBusReadAllRequest data_bus_read_all = 64;
  if (has_data_bus_read_all()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        64, this->_internal_data_bus_read_all(), deterministic, target);
  }

  // .metamoto.services.DataBusReadLastRequest data_bus_read_last = 65;
  if (has_data_bus_read_last()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        65, this->_internal_data_bus_read_last(), deterministic, target);
  }

  // .metamoto.services.MapGetRoadNetworkRequest map_get_road_network = 80;
  if (has_map_get_road_network()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        80, this->_internal_map_get_road_network(), deterministic, target);
  }

  // .metamoto.services.MapToRoadPointRequest map_to_road_point = 81;
  if (has_map_to_road_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        81, this->_internal_map_to_road_point(), deterministic, target);
  }

  // .metamoto.services.MapToWorldPointRequest map_to_world_point = 82;
  if (has_map_to_world_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        82, this->_internal_map_to_world_point(), deterministic, target);
  }

  // .metamoto.services.MapGetPathRequest map_get_path = 83;
  if (has_map_get_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        83, this->_internal_map_get_path(), deterministic, target);
  }

  // .metamoto.services.MapGetHeadingRequest map_get_heading = 84;
  if (has_map_get_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        84, this->_internal_map_get_heading(), deterministic, target);
  }

  // .metamoto.services.RayTracerSetPatternsRequest ray_tracer_set_patterns = 100;
  if (has_ray_tracer_set_patterns()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, this->_internal_ray_tracer_set_patterns(), deterministic, target);
  }

  // .metamoto.services.RayTracerTraceRequest ray_tracer_trace = 101;
  if (has_ray_tracer_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        101, this->_internal_ray_tracer_trace(), deterministic, target);
  }

  // .metamoto.services.ReportingAddTimeSeriesValueRequest reporting_add_time_series_value = 120;
  if (has_reporting_add_time_series_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        120, this->_internal_reporting_add_time_series_value(), deterministic, target);
  }

  // .metamoto.services.ReportingLogRequest reporting_log = 121;
  if (has_reporting_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        121, this->_internal_reporting_log(), deterministic, target);
  }

  // .metamoto.services.ReportingReportEventRequest reporting_report_event = 122;
  if (has_reporting_report_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        122, this->_internal_reporting_report_event(), deterministic, target);
  }

  // .metamoto.services.ReportingVisualizeRequest reporting_visualize = 123;
  if (has_reporting_visualize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        123, this->_internal_reporting_visualize(), deterministic, target);
  }

  // .metamoto.services.ScenarioUpdateRequest scenario_update = 140;
  if (has_scenario_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        140, this->_internal_scenario_update(), deterministic, target);
  }

  // .metamoto.services.ScenarioGetVehicleWaypointsRequest scenario_get_vehicle_waypoints = 141;
  if (has_scenario_get_vehicle_waypoints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        141, this->_internal_scenario_get_vehicle_waypoints(), deterministic, target);
  }

  // .metamoto.services.ScenarioSetVehicleWaypointsRequest scenario_set_vehicle_waypoints = 142;
  if (has_scenario_set_vehicle_waypoints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        142, this->_internal_scenario_set_vehicle_waypoints(), deterministic, target);
  }

  // .metamoto.services.ScenarioSetDriverModelRequest scenario_set_driver_model = 143;
  if (has_scenario_set_driver_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        143, this->_internal_scenario_set_driver_model(), deterministic, target);
  }

  // .metamoto.services.ScenarioSetupRequest scenario_setup = 144;
  if (has_scenario_setup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        144, this->_internal_scenario_setup(), deterministic, target);
  }

  // .metamoto.services.SystemGetResultsSizeRequest system_get_results_size = 160;
  if (has_system_get_results_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        160, this->_internal_system_get_results_size(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.SUTConnectorRequest)
  return target;
}

size_t SUTConnectorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.SUTConnectorRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (data_oneof_case()) {
    // .google.rpc.Status status = 1;
    case kStatus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.status_);
      break;
    }
    // .metamoto.services.SUTConnectorConnectRequest connect = 2;
    case kConnect: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.connect_);
      break;
    }
    // .metamoto.services.SUTConnectorDisconnectRequest disconnect = 3;
    case kDisconnect: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.disconnect_);
      break;
    }
    // .metamoto.services.ControllerInitializeReply controller_initialize = 20;
    case kControllerInitialize: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.controller_initialize_);
      break;
    }
    // .metamoto.services.ControllerUpdateReply controller_update = 21;
    case kControllerUpdate: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.controller_update_);
      break;
    }
    // .metamoto.services.ControllerCloseReply controller_close = 22;
    case kControllerClose: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.controller_close_);
      break;
    }
    // .metamoto.services.ControllerSetupReply controller_setup = 23;
    case kControllerSetup: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.controller_setup_);
      break;
    }
    // .metamoto.services.SensorInitializeReply sensor_initialize = 40;
    case kSensorInitialize: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.sensor_initialize_);
      break;
    }
    // .metamoto.services.SensorUpdateReply sensor_update = 41;
    case kSensorUpdate: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.sensor_update_);
      break;
    }
    // .metamoto.services.SensorCloseReply sensor_close = 42;
    case kSensorClose: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.sensor_close_);
      break;
    }
    // .metamoto.services.SensorSetupReply sensor_setup = 43;
    case kSensorSetup: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.sensor_setup_);
      break;
    }
    // .metamoto.services.DataBusPublishRequest data_bus_publish = 60;
    case kDataBusPublish: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.data_bus_publish_);
      break;
    }
    // .metamoto.services.DataBusSubscribeRequest data_bus_subscribe = 61;
    case kDataBusSubscribe: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.data_bus_subscribe_);
      break;
    }
    // .metamoto.services.DataBusWriteRequest data_bus_write = 62;
    case kDataBusWrite: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.data_bus_write_);
      break;
    }
    // .metamoto.services.DataBusReadRequest data_bus_read = 63;
    case kDataBusRead: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.data_bus_read_);
      break;
    }
    // .metamoto.services.DataBusReadAllRequest data_bus_read_all = 64;
    case kDataBusReadAll: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.data_bus_read_all_);
      break;
    }
    // .metamoto.services.DataBusReadLastRequest data_bus_read_last = 65;
    case kDataBusReadLast: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.data_bus_read_last_);
      break;
    }
    // .metamoto.services.MapGetRoadNetworkRequest map_get_road_network = 80;
    case kMapGetRoadNetwork: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.map_get_road_network_);
      break;
    }
    // .metamoto.services.MapToRoadPointRequest map_to_road_point = 81;
    case kMapToRoadPoint: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.map_to_road_point_);
      break;
    }
    // .metamoto.services.MapToWorldPointRequest map_to_world_point = 82;
    case kMapToWorldPoint: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.map_to_world_point_);
      break;
    }
    // .metamoto.services.MapGetPathRequest map_get_path = 83;
    case kMapGetPath: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.map_get_path_);
      break;
    }
    // .metamoto.services.MapGetHeadingRequest map_get_heading = 84;
    case kMapGetHeading: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.map_get_heading_);
      break;
    }
    // .metamoto.services.RayTracerSetPatternsRequest ray_tracer_set_patterns = 100;
    case kRayTracerSetPatterns: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.ray_tracer_set_patterns_);
      break;
    }
    // .metamoto.services.RayTracerTraceRequest ray_tracer_trace = 101;
    case kRayTracerTrace: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.ray_tracer_trace_);
      break;
    }
    // .metamoto.services.ReportingAddTimeSeriesValueRequest reporting_add_time_series_value = 120;
    case kReportingAddTimeSeriesValue: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.reporting_add_time_series_value_);
      break;
    }
    // .metamoto.services.ReportingLogRequest reporting_log = 121;
    case kReportingLog: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.reporting_log_);
      break;
    }
    // .metamoto.services.ReportingReportEventRequest reporting_report_event = 122;
    case kReportingReportEvent: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.reporting_report_event_);
      break;
    }
    // .metamoto.services.ReportingVisualizeRequest reporting_visualize = 123;
    case kReportingVisualize: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.reporting_visualize_);
      break;
    }
    // .metamoto.services.ScenarioUpdateRequest scenario_update = 140;
    case kScenarioUpdate: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.scenario_update_);
      break;
    }
    // .metamoto.services.ScenarioGetVehicleWaypointsRequest scenario_get_vehicle_waypoints = 141;
    case kScenarioGetVehicleWaypoints: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.scenario_get_vehicle_waypoints_);
      break;
    }
    // .metamoto.services.ScenarioSetVehicleWaypointsRequest scenario_set_vehicle_waypoints = 142;
    case kScenarioSetVehicleWaypoints: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.scenario_set_vehicle_waypoints_);
      break;
    }
    // .metamoto.services.ScenarioSetDriverModelRequest scenario_set_driver_model = 143;
    case kScenarioSetDriverModel: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.scenario_set_driver_model_);
      break;
    }
    // .metamoto.services.ScenarioSetupRequest scenario_setup = 144;
    case kScenarioSetup: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.scenario_setup_);
      break;
    }
    // .metamoto.services.SystemGetResultsSizeRequest system_get_results_size = 160;
    case kSystemGetResultsSize: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.system_get_results_size_);
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUTConnectorRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.SUTConnectorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SUTConnectorRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SUTConnectorRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.SUTConnectorRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.SUTConnectorRequest)
    MergeFrom(*source);
  }
}

void SUTConnectorRequest::MergeFrom(const SUTConnectorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.SUTConnectorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_oneof_case()) {
    case kStatus: {
      mutable_status()->::google::rpc::Status::MergeFrom(from.status());
      break;
    }
    case kConnect: {
      mutable_connect()->::metamoto::services::SUTConnectorConnectRequest::MergeFrom(from.connect());
      break;
    }
    case kDisconnect: {
      mutable_disconnect()->::metamoto::services::SUTConnectorDisconnectRequest::MergeFrom(from.disconnect());
      break;
    }
    case kControllerInitialize: {
      mutable_controller_initialize()->::metamoto::services::ControllerInitializeReply::MergeFrom(from.controller_initialize());
      break;
    }
    case kControllerUpdate: {
      mutable_controller_update()->::metamoto::services::ControllerUpdateReply::MergeFrom(from.controller_update());
      break;
    }
    case kControllerClose: {
      mutable_controller_close()->::metamoto::services::ControllerCloseReply::MergeFrom(from.controller_close());
      break;
    }
    case kControllerSetup: {
      mutable_controller_setup()->::metamoto::services::ControllerSetupReply::MergeFrom(from.controller_setup());
      break;
    }
    case kSensorInitialize: {
      mutable_sensor_initialize()->::metamoto::services::SensorInitializeReply::MergeFrom(from.sensor_initialize());
      break;
    }
    case kSensorUpdate: {
      mutable_sensor_update()->::metamoto::services::SensorUpdateReply::MergeFrom(from.sensor_update());
      break;
    }
    case kSensorClose: {
      mutable_sensor_close()->::metamoto::services::SensorCloseReply::MergeFrom(from.sensor_close());
      break;
    }
    case kSensorSetup: {
      mutable_sensor_setup()->::metamoto::services::SensorSetupReply::MergeFrom(from.sensor_setup());
      break;
    }
    case kDataBusPublish: {
      mutable_data_bus_publish()->::metamoto::services::DataBusPublishRequest::MergeFrom(from.data_bus_publish());
      break;
    }
    case kDataBusSubscribe: {
      mutable_data_bus_subscribe()->::metamoto::services::DataBusSubscribeRequest::MergeFrom(from.data_bus_subscribe());
      break;
    }
    case kDataBusWrite: {
      mutable_data_bus_write()->::metamoto::services::DataBusWriteRequest::MergeFrom(from.data_bus_write());
      break;
    }
    case kDataBusRead: {
      mutable_data_bus_read()->::metamoto::services::DataBusReadRequest::MergeFrom(from.data_bus_read());
      break;
    }
    case kDataBusReadAll: {
      mutable_data_bus_read_all()->::metamoto::services::DataBusReadAllRequest::MergeFrom(from.data_bus_read_all());
      break;
    }
    case kDataBusReadLast: {
      mutable_data_bus_read_last()->::metamoto::services::DataBusReadLastRequest::MergeFrom(from.data_bus_read_last());
      break;
    }
    case kMapGetRoadNetwork: {
      mutable_map_get_road_network()->::metamoto::services::MapGetRoadNetworkRequest::MergeFrom(from.map_get_road_network());
      break;
    }
    case kMapToRoadPoint: {
      mutable_map_to_road_point()->::metamoto::services::MapToRoadPointRequest::MergeFrom(from.map_to_road_point());
      break;
    }
    case kMapToWorldPoint: {
      mutable_map_to_world_point()->::metamoto::services::MapToWorldPointRequest::MergeFrom(from.map_to_world_point());
      break;
    }
    case kMapGetPath: {
      mutable_map_get_path()->::metamoto::services::MapGetPathRequest::MergeFrom(from.map_get_path());
      break;
    }
    case kMapGetHeading: {
      mutable_map_get_heading()->::metamoto::services::MapGetHeadingRequest::MergeFrom(from.map_get_heading());
      break;
    }
    case kRayTracerSetPatterns: {
      mutable_ray_tracer_set_patterns()->::metamoto::services::RayTracerSetPatternsRequest::MergeFrom(from.ray_tracer_set_patterns());
      break;
    }
    case kRayTracerTrace: {
      mutable_ray_tracer_trace()->::metamoto::services::RayTracerTraceRequest::MergeFrom(from.ray_tracer_trace());
      break;
    }
    case kReportingAddTimeSeriesValue: {
      mutable_reporting_add_time_series_value()->::metamoto::services::ReportingAddTimeSeriesValueRequest::MergeFrom(from.reporting_add_time_series_value());
      break;
    }
    case kReportingLog: {
      mutable_reporting_log()->::metamoto::services::ReportingLogRequest::MergeFrom(from.reporting_log());
      break;
    }
    case kReportingReportEvent: {
      mutable_reporting_report_event()->::metamoto::services::ReportingReportEventRequest::MergeFrom(from.reporting_report_event());
      break;
    }
    case kReportingVisualize: {
      mutable_reporting_visualize()->::metamoto::services::ReportingVisualizeRequest::MergeFrom(from.reporting_visualize());
      break;
    }
    case kScenarioUpdate: {
      mutable_scenario_update()->::metamoto::services::ScenarioUpdateRequest::MergeFrom(from.scenario_update());
      break;
    }
    case kScenarioGetVehicleWaypoints: {
      mutable_scenario_get_vehicle_waypoints()->::metamoto::services::ScenarioGetVehicleWaypointsRequest::MergeFrom(from.scenario_get_vehicle_waypoints());
      break;
    }
    case kScenarioSetVehicleWaypoints: {
      mutable_scenario_set_vehicle_waypoints()->::metamoto::services::ScenarioSetVehicleWaypointsRequest::MergeFrom(from.scenario_set_vehicle_waypoints());
      break;
    }
    case kScenarioSetDriverModel: {
      mutable_scenario_set_driver_model()->::metamoto::services::ScenarioSetDriverModelRequest::MergeFrom(from.scenario_set_driver_model());
      break;
    }
    case kScenarioSetup: {
      mutable_scenario_setup()->::metamoto::services::ScenarioSetupRequest::MergeFrom(from.scenario_setup());
      break;
    }
    case kSystemGetResultsSize: {
      mutable_system_get_results_size()->::metamoto::services::SystemGetResultsSizeRequest::MergeFrom(from.system_get_results_size());
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
}

void SUTConnectorRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.SUTConnectorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUTConnectorRequest::CopyFrom(const SUTConnectorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.SUTConnectorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUTConnectorRequest::IsInitialized() const {
  return true;
}

void SUTConnectorRequest::Swap(SUTConnectorRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SUTConnectorRequest::InternalSwap(SUTConnectorRequest* other) {
  using std::swap;
  swap(data_oneof_, other->data_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SUTConnectorRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SUTConnectorReply::InitAsDefaultInstance() {
  ::metamoto::services::_SUTConnectorReply_default_instance_.status_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.connect_ = const_cast< ::metamoto::services::SUTConnectorConnectReply*>(
      ::metamoto::services::SUTConnectorConnectReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.disconnect_ = const_cast< ::metamoto::services::SUTConnectorDisconnectReply*>(
      ::metamoto::services::SUTConnectorDisconnectReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.controller_initialize_ = const_cast< ::metamoto::services::ControllerInitializeRequest*>(
      ::metamoto::services::ControllerInitializeRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.controller_update_ = const_cast< ::metamoto::services::ControllerUpdateRequest*>(
      ::metamoto::services::ControllerUpdateRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.controller_close_ = const_cast< ::metamoto::services::ControllerCloseRequest*>(
      ::metamoto::services::ControllerCloseRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.controller_setup_ = const_cast< ::metamoto::services::ControllerSetupRequest*>(
      ::metamoto::services::ControllerSetupRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.sensor_initialize_ = const_cast< ::metamoto::services::SensorInitializeRequest*>(
      ::metamoto::services::SensorInitializeRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.sensor_update_ = const_cast< ::metamoto::services::SensorUpdateRequest*>(
      ::metamoto::services::SensorUpdateRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.sensor_close_ = const_cast< ::metamoto::services::SensorCloseRequest*>(
      ::metamoto::services::SensorCloseRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.sensor_setup_ = const_cast< ::metamoto::services::SensorSetupRequest*>(
      ::metamoto::services::SensorSetupRequest::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.data_bus_publish_ = const_cast< ::metamoto::services::DataBusPublishReply*>(
      ::metamoto::services::DataBusPublishReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.data_bus_subscribe_ = const_cast< ::metamoto::services::DataBusSubscribeReply*>(
      ::metamoto::services::DataBusSubscribeReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.data_bus_write_ = const_cast< ::metamoto::services::DataBusWriteReply*>(
      ::metamoto::services::DataBusWriteReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.data_bus_read_ = const_cast< ::metamoto::services::DataBusReadReply*>(
      ::metamoto::services::DataBusReadReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.data_bus_read_all_ = const_cast< ::metamoto::services::DataBusReadAllReply*>(
      ::metamoto::services::DataBusReadAllReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.data_bus_read_last_ = const_cast< ::metamoto::services::DataBusReadLastReply*>(
      ::metamoto::services::DataBusReadLastReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.map_get_road_network_ = const_cast< ::metamoto::services::MapGetRoadNetworkReply*>(
      ::metamoto::services::MapGetRoadNetworkReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.map_to_road_point_ = const_cast< ::metamoto::services::MapToRoadPointReply*>(
      ::metamoto::services::MapToRoadPointReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.map_to_world_point_ = const_cast< ::metamoto::services::MapToWorldPointReply*>(
      ::metamoto::services::MapToWorldPointReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.map_get_path_ = const_cast< ::metamoto::services::MapGetPathReply*>(
      ::metamoto::services::MapGetPathReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.map_get_heading_ = const_cast< ::metamoto::services::MapGetHeadingReply*>(
      ::metamoto::services::MapGetHeadingReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.ray_tracer_set_patterns_ = const_cast< ::metamoto::services::RayTracerSetPatternsReply*>(
      ::metamoto::services::RayTracerSetPatternsReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.ray_tracer_trace_ = const_cast< ::metamoto::services::RayTracerTraceReply*>(
      ::metamoto::services::RayTracerTraceReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.reporting_add_time_series_value_ = const_cast< ::metamoto::services::ReportingAddTimeSeriesValueReply*>(
      ::metamoto::services::ReportingAddTimeSeriesValueReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.reporting_log_ = const_cast< ::metamoto::services::ReportingLogReply*>(
      ::metamoto::services::ReportingLogReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.reporting_report_event_ = const_cast< ::metamoto::services::ReportingReportEventReply*>(
      ::metamoto::services::ReportingReportEventReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.reporting_visualize_ = const_cast< ::metamoto::services::ReportingVisualizeReply*>(
      ::metamoto::services::ReportingVisualizeReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.scenario_update_ = const_cast< ::metamoto::services::ScenarioUpdateReply*>(
      ::metamoto::services::ScenarioUpdateReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.scenario_get_vehicle_waypoints_ = const_cast< ::metamoto::services::ScenarioGetVehicleWaypointsReply*>(
      ::metamoto::services::ScenarioGetVehicleWaypointsReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.scenario_set_vehicle_waypoints_ = const_cast< ::metamoto::services::ScenarioSetVehicleWaypointsReply*>(
      ::metamoto::services::ScenarioSetVehicleWaypointsReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.scenario_set_driver_model_ = const_cast< ::metamoto::services::ScenarioSetDriverModelReply*>(
      ::metamoto::services::ScenarioSetDriverModelReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.scenario_setup_ = const_cast< ::metamoto::services::ScenarioSetupReply*>(
      ::metamoto::services::ScenarioSetupReply::internal_default_instance());
  ::metamoto::services::_SUTConnectorReply_default_instance_.system_get_results_size_ = const_cast< ::metamoto::services::SystemGetResultsSizeReply*>(
      ::metamoto::services::SystemGetResultsSizeReply::internal_default_instance());
}
void SUTConnectorReply::set_allocated_status(::google::rpc::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
    data_oneof_.status_ = status;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.status)
}
void SUTConnectorReply::clear_status() {
  if (has_status()) {
    delete data_oneof_.status_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_connect(::metamoto::services::SUTConnectorConnectReply* connect) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (connect) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      connect = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connect, submessage_arena);
    }
    set_has_connect();
    data_oneof_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.connect)
}
void SUTConnectorReply::set_allocated_disconnect(::metamoto::services::SUTConnectorDisconnectReply* disconnect) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (disconnect) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      disconnect = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, disconnect, submessage_arena);
    }
    set_has_disconnect();
    data_oneof_.disconnect_ = disconnect;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.disconnect)
}
void SUTConnectorReply::set_allocated_controller_initialize(::metamoto::services::ControllerInitializeRequest* controller_initialize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (controller_initialize) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      controller_initialize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controller_initialize, submessage_arena);
    }
    set_has_controller_initialize();
    data_oneof_.controller_initialize_ = controller_initialize;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.controller_initialize)
}
void SUTConnectorReply::clear_controller_initialize() {
  if (has_controller_initialize()) {
    delete data_oneof_.controller_initialize_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_controller_update(::metamoto::services::ControllerUpdateRequest* controller_update) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (controller_update) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      controller_update = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controller_update, submessage_arena);
    }
    set_has_controller_update();
    data_oneof_.controller_update_ = controller_update;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.controller_update)
}
void SUTConnectorReply::clear_controller_update() {
  if (has_controller_update()) {
    delete data_oneof_.controller_update_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_controller_close(::metamoto::services::ControllerCloseRequest* controller_close) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (controller_close) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      controller_close = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controller_close, submessage_arena);
    }
    set_has_controller_close();
    data_oneof_.controller_close_ = controller_close;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.controller_close)
}
void SUTConnectorReply::clear_controller_close() {
  if (has_controller_close()) {
    delete data_oneof_.controller_close_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_controller_setup(::metamoto::services::ControllerSetupRequest* controller_setup) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (controller_setup) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      controller_setup = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controller_setup, submessage_arena);
    }
    set_has_controller_setup();
    data_oneof_.controller_setup_ = controller_setup;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.controller_setup)
}
void SUTConnectorReply::clear_controller_setup() {
  if (has_controller_setup()) {
    delete data_oneof_.controller_setup_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_sensor_initialize(::metamoto::services::SensorInitializeRequest* sensor_initialize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (sensor_initialize) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sensor_initialize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sensor_initialize, submessage_arena);
    }
    set_has_sensor_initialize();
    data_oneof_.sensor_initialize_ = sensor_initialize;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.sensor_initialize)
}
void SUTConnectorReply::clear_sensor_initialize() {
  if (has_sensor_initialize()) {
    delete data_oneof_.sensor_initialize_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_sensor_update(::metamoto::services::SensorUpdateRequest* sensor_update) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (sensor_update) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sensor_update = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sensor_update, submessage_arena);
    }
    set_has_sensor_update();
    data_oneof_.sensor_update_ = sensor_update;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.sensor_update)
}
void SUTConnectorReply::clear_sensor_update() {
  if (has_sensor_update()) {
    delete data_oneof_.sensor_update_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_sensor_close(::metamoto::services::SensorCloseRequest* sensor_close) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (sensor_close) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sensor_close = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sensor_close, submessage_arena);
    }
    set_has_sensor_close();
    data_oneof_.sensor_close_ = sensor_close;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.sensor_close)
}
void SUTConnectorReply::clear_sensor_close() {
  if (has_sensor_close()) {
    delete data_oneof_.sensor_close_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_sensor_setup(::metamoto::services::SensorSetupRequest* sensor_setup) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (sensor_setup) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sensor_setup = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sensor_setup, submessage_arena);
    }
    set_has_sensor_setup();
    data_oneof_.sensor_setup_ = sensor_setup;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.sensor_setup)
}
void SUTConnectorReply::clear_sensor_setup() {
  if (has_sensor_setup()) {
    delete data_oneof_.sensor_setup_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_data_bus_publish(::metamoto::services::DataBusPublishReply* data_bus_publish) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (data_bus_publish) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_bus_publish = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_bus_publish, submessage_arena);
    }
    set_has_data_bus_publish();
    data_oneof_.data_bus_publish_ = data_bus_publish;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.data_bus_publish)
}
void SUTConnectorReply::clear_data_bus_publish() {
  if (has_data_bus_publish()) {
    delete data_oneof_.data_bus_publish_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_data_bus_subscribe(::metamoto::services::DataBusSubscribeReply* data_bus_subscribe) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (data_bus_subscribe) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_bus_subscribe = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_bus_subscribe, submessage_arena);
    }
    set_has_data_bus_subscribe();
    data_oneof_.data_bus_subscribe_ = data_bus_subscribe;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.data_bus_subscribe)
}
void SUTConnectorReply::clear_data_bus_subscribe() {
  if (has_data_bus_subscribe()) {
    delete data_oneof_.data_bus_subscribe_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_data_bus_write(::metamoto::services::DataBusWriteReply* data_bus_write) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (data_bus_write) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_bus_write = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_bus_write, submessage_arena);
    }
    set_has_data_bus_write();
    data_oneof_.data_bus_write_ = data_bus_write;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.data_bus_write)
}
void SUTConnectorReply::clear_data_bus_write() {
  if (has_data_bus_write()) {
    delete data_oneof_.data_bus_write_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_data_bus_read(::metamoto::services::DataBusReadReply* data_bus_read) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (data_bus_read) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_bus_read = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_bus_read, submessage_arena);
    }
    set_has_data_bus_read();
    data_oneof_.data_bus_read_ = data_bus_read;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.data_bus_read)
}
void SUTConnectorReply::clear_data_bus_read() {
  if (has_data_bus_read()) {
    delete data_oneof_.data_bus_read_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_data_bus_read_all(::metamoto::services::DataBusReadAllReply* data_bus_read_all) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (data_bus_read_all) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_bus_read_all = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_bus_read_all, submessage_arena);
    }
    set_has_data_bus_read_all();
    data_oneof_.data_bus_read_all_ = data_bus_read_all;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.data_bus_read_all)
}
void SUTConnectorReply::clear_data_bus_read_all() {
  if (has_data_bus_read_all()) {
    delete data_oneof_.data_bus_read_all_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_data_bus_read_last(::metamoto::services::DataBusReadLastReply* data_bus_read_last) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (data_bus_read_last) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_bus_read_last = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_bus_read_last, submessage_arena);
    }
    set_has_data_bus_read_last();
    data_oneof_.data_bus_read_last_ = data_bus_read_last;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.data_bus_read_last)
}
void SUTConnectorReply::clear_data_bus_read_last() {
  if (has_data_bus_read_last()) {
    delete data_oneof_.data_bus_read_last_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_map_get_road_network(::metamoto::services::MapGetRoadNetworkReply* map_get_road_network) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (map_get_road_network) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map_get_road_network = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map_get_road_network, submessage_arena);
    }
    set_has_map_get_road_network();
    data_oneof_.map_get_road_network_ = map_get_road_network;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.map_get_road_network)
}
void SUTConnectorReply::clear_map_get_road_network() {
  if (has_map_get_road_network()) {
    delete data_oneof_.map_get_road_network_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_map_to_road_point(::metamoto::services::MapToRoadPointReply* map_to_road_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (map_to_road_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map_to_road_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map_to_road_point, submessage_arena);
    }
    set_has_map_to_road_point();
    data_oneof_.map_to_road_point_ = map_to_road_point;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.map_to_road_point)
}
void SUTConnectorReply::clear_map_to_road_point() {
  if (has_map_to_road_point()) {
    delete data_oneof_.map_to_road_point_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_map_to_world_point(::metamoto::services::MapToWorldPointReply* map_to_world_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (map_to_world_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map_to_world_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map_to_world_point, submessage_arena);
    }
    set_has_map_to_world_point();
    data_oneof_.map_to_world_point_ = map_to_world_point;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.map_to_world_point)
}
void SUTConnectorReply::clear_map_to_world_point() {
  if (has_map_to_world_point()) {
    delete data_oneof_.map_to_world_point_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_map_get_path(::metamoto::services::MapGetPathReply* map_get_path) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (map_get_path) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map_get_path = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map_get_path, submessage_arena);
    }
    set_has_map_get_path();
    data_oneof_.map_get_path_ = map_get_path;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.map_get_path)
}
void SUTConnectorReply::clear_map_get_path() {
  if (has_map_get_path()) {
    delete data_oneof_.map_get_path_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_map_get_heading(::metamoto::services::MapGetHeadingReply* map_get_heading) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (map_get_heading) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map_get_heading = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map_get_heading, submessage_arena);
    }
    set_has_map_get_heading();
    data_oneof_.map_get_heading_ = map_get_heading;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.map_get_heading)
}
void SUTConnectorReply::clear_map_get_heading() {
  if (has_map_get_heading()) {
    delete data_oneof_.map_get_heading_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_ray_tracer_set_patterns(::metamoto::services::RayTracerSetPatternsReply* ray_tracer_set_patterns) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (ray_tracer_set_patterns) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ray_tracer_set_patterns = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ray_tracer_set_patterns, submessage_arena);
    }
    set_has_ray_tracer_set_patterns();
    data_oneof_.ray_tracer_set_patterns_ = ray_tracer_set_patterns;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.ray_tracer_set_patterns)
}
void SUTConnectorReply::clear_ray_tracer_set_patterns() {
  if (has_ray_tracer_set_patterns()) {
    delete data_oneof_.ray_tracer_set_patterns_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_ray_tracer_trace(::metamoto::services::RayTracerTraceReply* ray_tracer_trace) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (ray_tracer_trace) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ray_tracer_trace = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ray_tracer_trace, submessage_arena);
    }
    set_has_ray_tracer_trace();
    data_oneof_.ray_tracer_trace_ = ray_tracer_trace;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.ray_tracer_trace)
}
void SUTConnectorReply::clear_ray_tracer_trace() {
  if (has_ray_tracer_trace()) {
    delete data_oneof_.ray_tracer_trace_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_reporting_add_time_series_value(::metamoto::services::ReportingAddTimeSeriesValueReply* reporting_add_time_series_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (reporting_add_time_series_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reporting_add_time_series_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reporting_add_time_series_value, submessage_arena);
    }
    set_has_reporting_add_time_series_value();
    data_oneof_.reporting_add_time_series_value_ = reporting_add_time_series_value;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.reporting_add_time_series_value)
}
void SUTConnectorReply::clear_reporting_add_time_series_value() {
  if (has_reporting_add_time_series_value()) {
    delete data_oneof_.reporting_add_time_series_value_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_reporting_log(::metamoto::services::ReportingLogReply* reporting_log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (reporting_log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reporting_log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reporting_log, submessage_arena);
    }
    set_has_reporting_log();
    data_oneof_.reporting_log_ = reporting_log;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.reporting_log)
}
void SUTConnectorReply::clear_reporting_log() {
  if (has_reporting_log()) {
    delete data_oneof_.reporting_log_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_reporting_report_event(::metamoto::services::ReportingReportEventReply* reporting_report_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (reporting_report_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reporting_report_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reporting_report_event, submessage_arena);
    }
    set_has_reporting_report_event();
    data_oneof_.reporting_report_event_ = reporting_report_event;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.reporting_report_event)
}
void SUTConnectorReply::clear_reporting_report_event() {
  if (has_reporting_report_event()) {
    delete data_oneof_.reporting_report_event_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_reporting_visualize(::metamoto::services::ReportingVisualizeReply* reporting_visualize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (reporting_visualize) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reporting_visualize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reporting_visualize, submessage_arena);
    }
    set_has_reporting_visualize();
    data_oneof_.reporting_visualize_ = reporting_visualize;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.reporting_visualize)
}
void SUTConnectorReply::clear_reporting_visualize() {
  if (has_reporting_visualize()) {
    delete data_oneof_.reporting_visualize_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_scenario_update(::metamoto::services::ScenarioUpdateReply* scenario_update) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (scenario_update) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scenario_update = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scenario_update, submessage_arena);
    }
    set_has_scenario_update();
    data_oneof_.scenario_update_ = scenario_update;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.scenario_update)
}
void SUTConnectorReply::clear_scenario_update() {
  if (has_scenario_update()) {
    delete data_oneof_.scenario_update_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_scenario_get_vehicle_waypoints(::metamoto::services::ScenarioGetVehicleWaypointsReply* scenario_get_vehicle_waypoints) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (scenario_get_vehicle_waypoints) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scenario_get_vehicle_waypoints = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scenario_get_vehicle_waypoints, submessage_arena);
    }
    set_has_scenario_get_vehicle_waypoints();
    data_oneof_.scenario_get_vehicle_waypoints_ = scenario_get_vehicle_waypoints;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.scenario_get_vehicle_waypoints)
}
void SUTConnectorReply::clear_scenario_get_vehicle_waypoints() {
  if (has_scenario_get_vehicle_waypoints()) {
    delete data_oneof_.scenario_get_vehicle_waypoints_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_scenario_set_vehicle_waypoints(::metamoto::services::ScenarioSetVehicleWaypointsReply* scenario_set_vehicle_waypoints) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (scenario_set_vehicle_waypoints) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scenario_set_vehicle_waypoints = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scenario_set_vehicle_waypoints, submessage_arena);
    }
    set_has_scenario_set_vehicle_waypoints();
    data_oneof_.scenario_set_vehicle_waypoints_ = scenario_set_vehicle_waypoints;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.scenario_set_vehicle_waypoints)
}
void SUTConnectorReply::clear_scenario_set_vehicle_waypoints() {
  if (has_scenario_set_vehicle_waypoints()) {
    delete data_oneof_.scenario_set_vehicle_waypoints_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_scenario_set_driver_model(::metamoto::services::ScenarioSetDriverModelReply* scenario_set_driver_model) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (scenario_set_driver_model) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scenario_set_driver_model = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scenario_set_driver_model, submessage_arena);
    }
    set_has_scenario_set_driver_model();
    data_oneof_.scenario_set_driver_model_ = scenario_set_driver_model;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.scenario_set_driver_model)
}
void SUTConnectorReply::clear_scenario_set_driver_model() {
  if (has_scenario_set_driver_model()) {
    delete data_oneof_.scenario_set_driver_model_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_scenario_setup(::metamoto::services::ScenarioSetupReply* scenario_setup) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (scenario_setup) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scenario_setup = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scenario_setup, submessage_arena);
    }
    set_has_scenario_setup();
    data_oneof_.scenario_setup_ = scenario_setup;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.scenario_setup)
}
void SUTConnectorReply::clear_scenario_setup() {
  if (has_scenario_setup()) {
    delete data_oneof_.scenario_setup_;
    clear_has_data_oneof();
  }
}
void SUTConnectorReply::set_allocated_system_get_results_size(::metamoto::services::SystemGetResultsSizeReply* system_get_results_size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (system_get_results_size) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system_get_results_size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system_get_results_size, submessage_arena);
    }
    set_has_system_get_results_size();
    data_oneof_.system_get_results_size_ = system_get_results_size;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.services.SUTConnectorReply.system_get_results_size)
}
void SUTConnectorReply::clear_system_get_results_size() {
  if (has_system_get_results_size()) {
    delete data_oneof_.system_get_results_size_;
    clear_has_data_oneof();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SUTConnectorReply::kStatusFieldNumber;
const int SUTConnectorReply::kConnectFieldNumber;
const int SUTConnectorReply::kDisconnectFieldNumber;
const int SUTConnectorReply::kControllerInitializeFieldNumber;
const int SUTConnectorReply::kControllerUpdateFieldNumber;
const int SUTConnectorReply::kControllerCloseFieldNumber;
const int SUTConnectorReply::kControllerSetupFieldNumber;
const int SUTConnectorReply::kSensorInitializeFieldNumber;
const int SUTConnectorReply::kSensorUpdateFieldNumber;
const int SUTConnectorReply::kSensorCloseFieldNumber;
const int SUTConnectorReply::kSensorSetupFieldNumber;
const int SUTConnectorReply::kDataBusPublishFieldNumber;
const int SUTConnectorReply::kDataBusSubscribeFieldNumber;
const int SUTConnectorReply::kDataBusWriteFieldNumber;
const int SUTConnectorReply::kDataBusReadFieldNumber;
const int SUTConnectorReply::kDataBusReadAllFieldNumber;
const int SUTConnectorReply::kDataBusReadLastFieldNumber;
const int SUTConnectorReply::kMapGetRoadNetworkFieldNumber;
const int SUTConnectorReply::kMapToRoadPointFieldNumber;
const int SUTConnectorReply::kMapToWorldPointFieldNumber;
const int SUTConnectorReply::kMapGetPathFieldNumber;
const int SUTConnectorReply::kMapGetHeadingFieldNumber;
const int SUTConnectorReply::kRayTracerSetPatternsFieldNumber;
const int SUTConnectorReply::kRayTracerTraceFieldNumber;
const int SUTConnectorReply::kReportingAddTimeSeriesValueFieldNumber;
const int SUTConnectorReply::kReportingLogFieldNumber;
const int SUTConnectorReply::kReportingReportEventFieldNumber;
const int SUTConnectorReply::kReportingVisualizeFieldNumber;
const int SUTConnectorReply::kScenarioUpdateFieldNumber;
const int SUTConnectorReply::kScenarioGetVehicleWaypointsFieldNumber;
const int SUTConnectorReply::kScenarioSetVehicleWaypointsFieldNumber;
const int SUTConnectorReply::kScenarioSetDriverModelFieldNumber;
const int SUTConnectorReply::kScenarioSetupFieldNumber;
const int SUTConnectorReply::kSystemGetResultsSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SUTConnectorReply::SUTConnectorReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.SUTConnectorReply)
}
SUTConnectorReply::SUTConnectorReply(const SUTConnectorReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_data_oneof();
  switch (from.data_oneof_case()) {
    case kStatus: {
      mutable_status()->::google::rpc::Status::MergeFrom(from.status());
      break;
    }
    case kConnect: {
      mutable_connect()->::metamoto::services::SUTConnectorConnectReply::MergeFrom(from.connect());
      break;
    }
    case kDisconnect: {
      mutable_disconnect()->::metamoto::services::SUTConnectorDisconnectReply::MergeFrom(from.disconnect());
      break;
    }
    case kControllerInitialize: {
      mutable_controller_initialize()->::metamoto::services::ControllerInitializeRequest::MergeFrom(from.controller_initialize());
      break;
    }
    case kControllerUpdate: {
      mutable_controller_update()->::metamoto::services::ControllerUpdateRequest::MergeFrom(from.controller_update());
      break;
    }
    case kControllerClose: {
      mutable_controller_close()->::metamoto::services::ControllerCloseRequest::MergeFrom(from.controller_close());
      break;
    }
    case kControllerSetup: {
      mutable_controller_setup()->::metamoto::services::ControllerSetupRequest::MergeFrom(from.controller_setup());
      break;
    }
    case kSensorInitialize: {
      mutable_sensor_initialize()->::metamoto::services::SensorInitializeRequest::MergeFrom(from.sensor_initialize());
      break;
    }
    case kSensorUpdate: {
      mutable_sensor_update()->::metamoto::services::SensorUpdateRequest::MergeFrom(from.sensor_update());
      break;
    }
    case kSensorClose: {
      mutable_sensor_close()->::metamoto::services::SensorCloseRequest::MergeFrom(from.sensor_close());
      break;
    }
    case kSensorSetup: {
      mutable_sensor_setup()->::metamoto::services::SensorSetupRequest::MergeFrom(from.sensor_setup());
      break;
    }
    case kDataBusPublish: {
      mutable_data_bus_publish()->::metamoto::services::DataBusPublishReply::MergeFrom(from.data_bus_publish());
      break;
    }
    case kDataBusSubscribe: {
      mutable_data_bus_subscribe()->::metamoto::services::DataBusSubscribeReply::MergeFrom(from.data_bus_subscribe());
      break;
    }
    case kDataBusWrite: {
      mutable_data_bus_write()->::metamoto::services::DataBusWriteReply::MergeFrom(from.data_bus_write());
      break;
    }
    case kDataBusRead: {
      mutable_data_bus_read()->::metamoto::services::DataBusReadReply::MergeFrom(from.data_bus_read());
      break;
    }
    case kDataBusReadAll: {
      mutable_data_bus_read_all()->::metamoto::services::DataBusReadAllReply::MergeFrom(from.data_bus_read_all());
      break;
    }
    case kDataBusReadLast: {
      mutable_data_bus_read_last()->::metamoto::services::DataBusReadLastReply::MergeFrom(from.data_bus_read_last());
      break;
    }
    case kMapGetRoadNetwork: {
      mutable_map_get_road_network()->::metamoto::services::MapGetRoadNetworkReply::MergeFrom(from.map_get_road_network());
      break;
    }
    case kMapToRoadPoint: {
      mutable_map_to_road_point()->::metamoto::services::MapToRoadPointReply::MergeFrom(from.map_to_road_point());
      break;
    }
    case kMapToWorldPoint: {
      mutable_map_to_world_point()->::metamoto::services::MapToWorldPointReply::MergeFrom(from.map_to_world_point());
      break;
    }
    case kMapGetPath: {
      mutable_map_get_path()->::metamoto::services::MapGetPathReply::MergeFrom(from.map_get_path());
      break;
    }
    case kMapGetHeading: {
      mutable_map_get_heading()->::metamoto::services::MapGetHeadingReply::MergeFrom(from.map_get_heading());
      break;
    }
    case kRayTracerSetPatterns: {
      mutable_ray_tracer_set_patterns()->::metamoto::services::RayTracerSetPatternsReply::MergeFrom(from.ray_tracer_set_patterns());
      break;
    }
    case kRayTracerTrace: {
      mutable_ray_tracer_trace()->::metamoto::services::RayTracerTraceReply::MergeFrom(from.ray_tracer_trace());
      break;
    }
    case kReportingAddTimeSeriesValue: {
      mutable_reporting_add_time_series_value()->::metamoto::services::ReportingAddTimeSeriesValueReply::MergeFrom(from.reporting_add_time_series_value());
      break;
    }
    case kReportingLog: {
      mutable_reporting_log()->::metamoto::services::ReportingLogReply::MergeFrom(from.reporting_log());
      break;
    }
    case kReportingReportEvent: {
      mutable_reporting_report_event()->::metamoto::services::ReportingReportEventReply::MergeFrom(from.reporting_report_event());
      break;
    }
    case kReportingVisualize: {
      mutable_reporting_visualize()->::metamoto::services::ReportingVisualizeReply::MergeFrom(from.reporting_visualize());
      break;
    }
    case kScenarioUpdate: {
      mutable_scenario_update()->::metamoto::services::ScenarioUpdateReply::MergeFrom(from.scenario_update());
      break;
    }
    case kScenarioGetVehicleWaypoints: {
      mutable_scenario_get_vehicle_waypoints()->::metamoto::services::ScenarioGetVehicleWaypointsReply::MergeFrom(from.scenario_get_vehicle_waypoints());
      break;
    }
    case kScenarioSetVehicleWaypoints: {
      mutable_scenario_set_vehicle_waypoints()->::metamoto::services::ScenarioSetVehicleWaypointsReply::MergeFrom(from.scenario_set_vehicle_waypoints());
      break;
    }
    case kScenarioSetDriverModel: {
      mutable_scenario_set_driver_model()->::metamoto::services::ScenarioSetDriverModelReply::MergeFrom(from.scenario_set_driver_model());
      break;
    }
    case kScenarioSetup: {
      mutable_scenario_setup()->::metamoto::services::ScenarioSetupReply::MergeFrom(from.scenario_setup());
      break;
    }
    case kSystemGetResultsSize: {
      mutable_system_get_results_size()->::metamoto::services::SystemGetResultsSizeReply::MergeFrom(from.system_get_results_size());
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.services.SUTConnectorReply)
}

void SUTConnectorReply::SharedCtor() {
  clear_has_data_oneof();
}

SUTConnectorReply::~SUTConnectorReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.SUTConnectorReply)
  SharedDtor();
}

void SUTConnectorReply::SharedDtor() {
  if (has_data_oneof()) {
    clear_data_oneof();
  }
}

void SUTConnectorReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SUTConnectorReply::descriptor() {
  ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SUTConnectorReply& SUTConnectorReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorReply.base);
  return *internal_default_instance();
}


void SUTConnectorReply::clear_data_oneof() {
// @@protoc_insertion_point(one_of_clear_start:metamoto.services.SUTConnectorReply)
  switch (data_oneof_case()) {
    case kStatus: {
      delete data_oneof_.status_;
      break;
    }
    case kConnect: {
      delete data_oneof_.connect_;
      break;
    }
    case kDisconnect: {
      delete data_oneof_.disconnect_;
      break;
    }
    case kControllerInitialize: {
      delete data_oneof_.controller_initialize_;
      break;
    }
    case kControllerUpdate: {
      delete data_oneof_.controller_update_;
      break;
    }
    case kControllerClose: {
      delete data_oneof_.controller_close_;
      break;
    }
    case kControllerSetup: {
      delete data_oneof_.controller_setup_;
      break;
    }
    case kSensorInitialize: {
      delete data_oneof_.sensor_initialize_;
      break;
    }
    case kSensorUpdate: {
      delete data_oneof_.sensor_update_;
      break;
    }
    case kSensorClose: {
      delete data_oneof_.sensor_close_;
      break;
    }
    case kSensorSetup: {
      delete data_oneof_.sensor_setup_;
      break;
    }
    case kDataBusPublish: {
      delete data_oneof_.data_bus_publish_;
      break;
    }
    case kDataBusSubscribe: {
      delete data_oneof_.data_bus_subscribe_;
      break;
    }
    case kDataBusWrite: {
      delete data_oneof_.data_bus_write_;
      break;
    }
    case kDataBusRead: {
      delete data_oneof_.data_bus_read_;
      break;
    }
    case kDataBusReadAll: {
      delete data_oneof_.data_bus_read_all_;
      break;
    }
    case kDataBusReadLast: {
      delete data_oneof_.data_bus_read_last_;
      break;
    }
    case kMapGetRoadNetwork: {
      delete data_oneof_.map_get_road_network_;
      break;
    }
    case kMapToRoadPoint: {
      delete data_oneof_.map_to_road_point_;
      break;
    }
    case kMapToWorldPoint: {
      delete data_oneof_.map_to_world_point_;
      break;
    }
    case kMapGetPath: {
      delete data_oneof_.map_get_path_;
      break;
    }
    case kMapGetHeading: {
      delete data_oneof_.map_get_heading_;
      break;
    }
    case kRayTracerSetPatterns: {
      delete data_oneof_.ray_tracer_set_patterns_;
      break;
    }
    case kRayTracerTrace: {
      delete data_oneof_.ray_tracer_trace_;
      break;
    }
    case kReportingAddTimeSeriesValue: {
      delete data_oneof_.reporting_add_time_series_value_;
      break;
    }
    case kReportingLog: {
      delete data_oneof_.reporting_log_;
      break;
    }
    case kReportingReportEvent: {
      delete data_oneof_.reporting_report_event_;
      break;
    }
    case kReportingVisualize: {
      delete data_oneof_.reporting_visualize_;
      break;
    }
    case kScenarioUpdate: {
      delete data_oneof_.scenario_update_;
      break;
    }
    case kScenarioGetVehicleWaypoints: {
      delete data_oneof_.scenario_get_vehicle_waypoints_;
      break;
    }
    case kScenarioSetVehicleWaypoints: {
      delete data_oneof_.scenario_set_vehicle_waypoints_;
      break;
    }
    case kScenarioSetDriverModel: {
      delete data_oneof_.scenario_set_driver_model_;
      break;
    }
    case kScenarioSetup: {
      delete data_oneof_.scenario_setup_;
      break;
    }
    case kSystemGetResultsSize: {
      delete data_oneof_.system_get_results_size_;
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}


void SUTConnectorReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.SUTConnectorReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data_oneof();
  _internal_metadata_.Clear();
}

bool SUTConnectorReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.SUTConnectorReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.rpc.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.SUTConnectorConnectReply connect = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.SUTConnectorDisconnectReply disconnect = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_disconnect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ControllerInitializeRequest controller_initialize = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller_initialize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ControllerUpdateRequest controller_update = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ControllerCloseRequest controller_close = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller_close()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ControllerSetupRequest controller_setup = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller_setup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.SensorInitializeRequest sensor_initialize = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_initialize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.SensorUpdateRequest sensor_update = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.SensorCloseRequest sensor_close = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_close()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.SensorSetupRequest sensor_setup = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_setup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.DataBusPublishReply data_bus_publish = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_bus_publish()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.DataBusSubscribeReply data_bus_subscribe = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 490 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_bus_subscribe()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.DataBusWriteReply data_bus_write = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 498 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_bus_write()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.DataBusReadReply data_bus_read = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 506 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_bus_read()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.DataBusReadAllReply data_bus_read_all = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 514 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_bus_read_all()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.DataBusReadLastReply data_bus_read_last = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 522 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_bus_read_last()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.MapGetRoadNetworkReply map_get_road_network = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 642 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_get_road_network()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.MapToRoadPointReply map_to_road_point = 81;
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 650 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_to_road_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.MapToWorldPointReply map_to_world_point = 82;
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 658 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_to_world_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.MapGetPathReply map_get_path = 83;
      case 83: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 666 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_get_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.MapGetHeadingReply map_get_heading = 84;
      case 84: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 674 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_get_heading()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.RayTracerSetPatternsReply ray_tracer_set_patterns = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ray_tracer_set_patterns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.RayTracerTraceReply ray_tracer_trace = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ray_tracer_trace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ReportingAddTimeSeriesValueReply reporting_add_time_series_value = 120;
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 962 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reporting_add_time_series_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ReportingLogReply reporting_log = 121;
      case 121: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 970 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reporting_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ReportingReportEventReply reporting_report_event = 122;
      case 122: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 978 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reporting_report_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ReportingVisualizeReply reporting_visualize = 123;
      case 123: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 986 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reporting_visualize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ScenarioUpdateReply scenario_update = 140;
      case 140: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 1122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scenario_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ScenarioGetVehicleWaypointsReply scenario_get_vehicle_waypoints = 141;
      case 141: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 1130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scenario_get_vehicle_waypoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ScenarioSetVehicleWaypointsReply scenario_set_vehicle_waypoints = 142;
      case 142: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 1138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scenario_set_vehicle_waypoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ScenarioSetDriverModelReply scenario_set_driver_model = 143;
      case 143: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 1146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scenario_set_driver_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.ScenarioSetupReply scenario_setup = 144;
      case 144: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 1154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scenario_setup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.SystemGetResultsSizeReply system_get_results_size = 160;
      case 160: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 1282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_system_get_results_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.SUTConnectorReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.SUTConnectorReply)
  return false;
#undef DO_
}

void SUTConnectorReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.SUTConnectorReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_status(), output);
  }

  // .metamoto.services.SUTConnectorConnectReply connect = 2;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_connect(), output);
  }

  // .metamoto.services.SUTConnectorDisconnectReply disconnect = 3;
  if (has_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_disconnect(), output);
  }

  // .metamoto.services.ControllerInitializeRequest controller_initialize = 20;
  if (has_controller_initialize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_controller_initialize(), output);
  }

  // .metamoto.services.ControllerUpdateRequest controller_update = 21;
  if (has_controller_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_controller_update(), output);
  }

  // .metamoto.services.ControllerCloseRequest controller_close = 22;
  if (has_controller_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_internal_controller_close(), output);
  }

  // .metamoto.services.ControllerSetupRequest controller_setup = 23;
  if (has_controller_setup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->_internal_controller_setup(), output);
  }

  // .metamoto.services.SensorInitializeRequest sensor_initialize = 40;
  if (has_sensor_initialize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->_internal_sensor_initialize(), output);
  }

  // .metamoto.services.SensorUpdateRequest sensor_update = 41;
  if (has_sensor_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->_internal_sensor_update(), output);
  }

  // .metamoto.services.SensorCloseRequest sensor_close = 42;
  if (has_sensor_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->_internal_sensor_close(), output);
  }

  // .metamoto.services.SensorSetupRequest sensor_setup = 43;
  if (has_sensor_setup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->_internal_sensor_setup(), output);
  }

  // .metamoto.services.DataBusPublishReply data_bus_publish = 60;
  if (has_data_bus_publish()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->_internal_data_bus_publish(), output);
  }

  // .metamoto.services.DataBusSubscribeReply data_bus_subscribe = 61;
  if (has_data_bus_subscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->_internal_data_bus_subscribe(), output);
  }

  // .metamoto.services.DataBusWriteReply data_bus_write = 62;
  if (has_data_bus_write()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->_internal_data_bus_write(), output);
  }

  // .metamoto.services.DataBusReadReply data_bus_read = 63;
  if (has_data_bus_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->_internal_data_bus_read(), output);
  }

  // .metamoto.services.DataBusReadAllReply data_bus_read_all = 64;
  if (has_data_bus_read_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->_internal_data_bus_read_all(), output);
  }

  // .metamoto.services.DataBusReadLastReply data_bus_read_last = 65;
  if (has_data_bus_read_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->_internal_data_bus_read_last(), output);
  }

  // .metamoto.services.MapGetRoadNetworkReply map_get_road_network = 80;
  if (has_map_get_road_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80, this->_internal_map_get_road_network(), output);
  }

  // .metamoto.services.MapToRoadPointReply map_to_road_point = 81;
  if (has_map_to_road_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      81, this->_internal_map_to_road_point(), output);
  }

  // .metamoto.services.MapToWorldPointReply map_to_world_point = 82;
  if (has_map_to_world_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      82, this->_internal_map_to_world_point(), output);
  }

  // .metamoto.services.MapGetPathReply map_get_path = 83;
  if (has_map_get_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      83, this->_internal_map_get_path(), output);
  }

  // .metamoto.services.MapGetHeadingReply map_get_heading = 84;
  if (has_map_get_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      84, this->_internal_map_get_heading(), output);
  }

  // .metamoto.services.RayTracerSetPatternsReply ray_tracer_set_patterns = 100;
  if (has_ray_tracer_set_patterns()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->_internal_ray_tracer_set_patterns(), output);
  }

  // .metamoto.services.RayTracerTraceReply ray_tracer_trace = 101;
  if (has_ray_tracer_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->_internal_ray_tracer_trace(), output);
  }

  // .metamoto.services.ReportingAddTimeSeriesValueReply reporting_add_time_series_value = 120;
  if (has_reporting_add_time_series_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      120, this->_internal_reporting_add_time_series_value(), output);
  }

  // .metamoto.services.ReportingLogReply reporting_log = 121;
  if (has_reporting_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      121, this->_internal_reporting_log(), output);
  }

  // .metamoto.services.ReportingReportEventReply reporting_report_event = 122;
  if (has_reporting_report_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      122, this->_internal_reporting_report_event(), output);
  }

  // .metamoto.services.ReportingVisualizeReply reporting_visualize = 123;
  if (has_reporting_visualize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      123, this->_internal_reporting_visualize(), output);
  }

  // .metamoto.services.ScenarioUpdateReply scenario_update = 140;
  if (has_scenario_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      140, this->_internal_scenario_update(), output);
  }

  // .metamoto.services.ScenarioGetVehicleWaypointsReply scenario_get_vehicle_waypoints = 141;
  if (has_scenario_get_vehicle_waypoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      141, this->_internal_scenario_get_vehicle_waypoints(), output);
  }

  // .metamoto.services.ScenarioSetVehicleWaypointsReply scenario_set_vehicle_waypoints = 142;
  if (has_scenario_set_vehicle_waypoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      142, this->_internal_scenario_set_vehicle_waypoints(), output);
  }

  // .metamoto.services.ScenarioSetDriverModelReply scenario_set_driver_model = 143;
  if (has_scenario_set_driver_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      143, this->_internal_scenario_set_driver_model(), output);
  }

  // .metamoto.services.ScenarioSetupReply scenario_setup = 144;
  if (has_scenario_setup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      144, this->_internal_scenario_setup(), output);
  }

  // .metamoto.services.SystemGetResultsSizeReply system_get_results_size = 160;
  if (has_system_get_results_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      160, this->_internal_system_get_results_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.SUTConnectorReply)
}

::google::protobuf::uint8* SUTConnectorReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.SUTConnectorReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_status(), deterministic, target);
  }

  // .metamoto.services.SUTConnectorConnectReply connect = 2;
  if (has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_connect(), deterministic, target);
  }

  // .metamoto.services.SUTConnectorDisconnectReply disconnect = 3;
  if (has_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_disconnect(), deterministic, target);
  }

  // .metamoto.services.ControllerInitializeRequest controller_initialize = 20;
  if (has_controller_initialize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_controller_initialize(), deterministic, target);
  }

  // .metamoto.services.ControllerUpdateRequest controller_update = 21;
  if (has_controller_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_controller_update(), deterministic, target);
  }

  // .metamoto.services.ControllerCloseRequest controller_close = 22;
  if (has_controller_close()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->_internal_controller_close(), deterministic, target);
  }

  // .metamoto.services.ControllerSetupRequest controller_setup = 23;
  if (has_controller_setup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->_internal_controller_setup(), deterministic, target);
  }

  // .metamoto.services.SensorInitializeRequest sensor_initialize = 40;
  if (has_sensor_initialize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40, this->_internal_sensor_initialize(), deterministic, target);
  }

  // .metamoto.services.SensorUpdateRequest sensor_update = 41;
  if (has_sensor_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        41, this->_internal_sensor_update(), deterministic, target);
  }

  // .metamoto.services.SensorCloseRequest sensor_close = 42;
  if (has_sensor_close()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        42, this->_internal_sensor_close(), deterministic, target);
  }

  // .metamoto.services.SensorSetupRequest sensor_setup = 43;
  if (has_sensor_setup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        43, this->_internal_sensor_setup(), deterministic, target);
  }

  // .metamoto.services.DataBusPublishReply data_bus_publish = 60;
  if (has_data_bus_publish()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        60, this->_internal_data_bus_publish(), deterministic, target);
  }

  // .metamoto.services.DataBusSubscribeReply data_bus_subscribe = 61;
  if (has_data_bus_subscribe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        61, this->_internal_data_bus_subscribe(), deterministic, target);
  }

  // .metamoto.services.DataBusWriteReply data_bus_write = 62;
  if (has_data_bus_write()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        62, this->_internal_data_bus_write(), deterministic, target);
  }

  // .metamoto.services.DataBusReadReply data_bus_read = 63;
  if (has_data_bus_read()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        63, this->_internal_data_bus_read(), deterministic, target);
  }

  // .metamoto.services.DataBusReadAllReply data_bus_read_all = 64;
  if (has_data_bus_read_all()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        64, this->_internal_data_bus_read_all(), deterministic, target);
  }

  // .metamoto.services.DataBusReadLastReply data_bus_read_last = 65;
  if (has_data_bus_read_last()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        65, this->_internal_data_bus_read_last(), deterministic, target);
  }

  // .metamoto.services.MapGetRoadNetworkReply map_get_road_network = 80;
  if (has_map_get_road_network()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        80, this->_internal_map_get_road_network(), deterministic, target);
  }

  // .metamoto.services.MapToRoadPointReply map_to_road_point = 81;
  if (has_map_to_road_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        81, this->_internal_map_to_road_point(), deterministic, target);
  }

  // .metamoto.services.MapToWorldPointReply map_to_world_point = 82;
  if (has_map_to_world_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        82, this->_internal_map_to_world_point(), deterministic, target);
  }

  // .metamoto.services.MapGetPathReply map_get_path = 83;
  if (has_map_get_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        83, this->_internal_map_get_path(), deterministic, target);
  }

  // .metamoto.services.MapGetHeadingReply map_get_heading = 84;
  if (has_map_get_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        84, this->_internal_map_get_heading(), deterministic, target);
  }

  // .metamoto.services.RayTracerSetPatternsReply ray_tracer_set_patterns = 100;
  if (has_ray_tracer_set_patterns()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, this->_internal_ray_tracer_set_patterns(), deterministic, target);
  }

  // .metamoto.services.RayTracerTraceReply ray_tracer_trace = 101;
  if (has_ray_tracer_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        101, this->_internal_ray_tracer_trace(), deterministic, target);
  }

  // .metamoto.services.ReportingAddTimeSeriesValueReply reporting_add_time_series_value = 120;
  if (has_reporting_add_time_series_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        120, this->_internal_reporting_add_time_series_value(), deterministic, target);
  }

  // .metamoto.services.ReportingLogReply reporting_log = 121;
  if (has_reporting_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        121, this->_internal_reporting_log(), deterministic, target);
  }

  // .metamoto.services.ReportingReportEventReply reporting_report_event = 122;
  if (has_reporting_report_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        122, this->_internal_reporting_report_event(), deterministic, target);
  }

  // .metamoto.services.ReportingVisualizeReply reporting_visualize = 123;
  if (has_reporting_visualize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        123, this->_internal_reporting_visualize(), deterministic, target);
  }

  // .metamoto.services.ScenarioUpdateReply scenario_update = 140;
  if (has_scenario_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        140, this->_internal_scenario_update(), deterministic, target);
  }

  // .metamoto.services.ScenarioGetVehicleWaypointsReply scenario_get_vehicle_waypoints = 141;
  if (has_scenario_get_vehicle_waypoints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        141, this->_internal_scenario_get_vehicle_waypoints(), deterministic, target);
  }

  // .metamoto.services.ScenarioSetVehicleWaypointsReply scenario_set_vehicle_waypoints = 142;
  if (has_scenario_set_vehicle_waypoints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        142, this->_internal_scenario_set_vehicle_waypoints(), deterministic, target);
  }

  // .metamoto.services.ScenarioSetDriverModelReply scenario_set_driver_model = 143;
  if (has_scenario_set_driver_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        143, this->_internal_scenario_set_driver_model(), deterministic, target);
  }

  // .metamoto.services.ScenarioSetupReply scenario_setup = 144;
  if (has_scenario_setup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        144, this->_internal_scenario_setup(), deterministic, target);
  }

  // .metamoto.services.SystemGetResultsSizeReply system_get_results_size = 160;
  if (has_system_get_results_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        160, this->_internal_system_get_results_size(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.SUTConnectorReply)
  return target;
}

size_t SUTConnectorReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.SUTConnectorReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (data_oneof_case()) {
    // .google.rpc.Status status = 1;
    case kStatus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.status_);
      break;
    }
    // .metamoto.services.SUTConnectorConnectReply connect = 2;
    case kConnect: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.connect_);
      break;
    }
    // .metamoto.services.SUTConnectorDisconnectReply disconnect = 3;
    case kDisconnect: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.disconnect_);
      break;
    }
    // .metamoto.services.ControllerInitializeRequest controller_initialize = 20;
    case kControllerInitialize: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.controller_initialize_);
      break;
    }
    // .metamoto.services.ControllerUpdateRequest controller_update = 21;
    case kControllerUpdate: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.controller_update_);
      break;
    }
    // .metamoto.services.ControllerCloseRequest controller_close = 22;
    case kControllerClose: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.controller_close_);
      break;
    }
    // .metamoto.services.ControllerSetupRequest controller_setup = 23;
    case kControllerSetup: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.controller_setup_);
      break;
    }
    // .metamoto.services.SensorInitializeRequest sensor_initialize = 40;
    case kSensorInitialize: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.sensor_initialize_);
      break;
    }
    // .metamoto.services.SensorUpdateRequest sensor_update = 41;
    case kSensorUpdate: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.sensor_update_);
      break;
    }
    // .metamoto.services.SensorCloseRequest sensor_close = 42;
    case kSensorClose: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.sensor_close_);
      break;
    }
    // .metamoto.services.SensorSetupRequest sensor_setup = 43;
    case kSensorSetup: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.sensor_setup_);
      break;
    }
    // .metamoto.services.DataBusPublishReply data_bus_publish = 60;
    case kDataBusPublish: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.data_bus_publish_);
      break;
    }
    // .metamoto.services.DataBusSubscribeReply data_bus_subscribe = 61;
    case kDataBusSubscribe: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.data_bus_subscribe_);
      break;
    }
    // .metamoto.services.DataBusWriteReply data_bus_write = 62;
    case kDataBusWrite: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.data_bus_write_);
      break;
    }
    // .metamoto.services.DataBusReadReply data_bus_read = 63;
    case kDataBusRead: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.data_bus_read_);
      break;
    }
    // .metamoto.services.DataBusReadAllReply data_bus_read_all = 64;
    case kDataBusReadAll: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.data_bus_read_all_);
      break;
    }
    // .metamoto.services.DataBusReadLastReply data_bus_read_last = 65;
    case kDataBusReadLast: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.data_bus_read_last_);
      break;
    }
    // .metamoto.services.MapGetRoadNetworkReply map_get_road_network = 80;
    case kMapGetRoadNetwork: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.map_get_road_network_);
      break;
    }
    // .metamoto.services.MapToRoadPointReply map_to_road_point = 81;
    case kMapToRoadPoint: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.map_to_road_point_);
      break;
    }
    // .metamoto.services.MapToWorldPointReply map_to_world_point = 82;
    case kMapToWorldPoint: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.map_to_world_point_);
      break;
    }
    // .metamoto.services.MapGetPathReply map_get_path = 83;
    case kMapGetPath: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.map_get_path_);
      break;
    }
    // .metamoto.services.MapGetHeadingReply map_get_heading = 84;
    case kMapGetHeading: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.map_get_heading_);
      break;
    }
    // .metamoto.services.RayTracerSetPatternsReply ray_tracer_set_patterns = 100;
    case kRayTracerSetPatterns: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.ray_tracer_set_patterns_);
      break;
    }
    // .metamoto.services.RayTracerTraceReply ray_tracer_trace = 101;
    case kRayTracerTrace: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.ray_tracer_trace_);
      break;
    }
    // .metamoto.services.ReportingAddTimeSeriesValueReply reporting_add_time_series_value = 120;
    case kReportingAddTimeSeriesValue: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.reporting_add_time_series_value_);
      break;
    }
    // .metamoto.services.ReportingLogReply reporting_log = 121;
    case kReportingLog: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.reporting_log_);
      break;
    }
    // .metamoto.services.ReportingReportEventReply reporting_report_event = 122;
    case kReportingReportEvent: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.reporting_report_event_);
      break;
    }
    // .metamoto.services.ReportingVisualizeReply reporting_visualize = 123;
    case kReportingVisualize: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.reporting_visualize_);
      break;
    }
    // .metamoto.services.ScenarioUpdateReply scenario_update = 140;
    case kScenarioUpdate: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.scenario_update_);
      break;
    }
    // .metamoto.services.ScenarioGetVehicleWaypointsReply scenario_get_vehicle_waypoints = 141;
    case kScenarioGetVehicleWaypoints: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.scenario_get_vehicle_waypoints_);
      break;
    }
    // .metamoto.services.ScenarioSetVehicleWaypointsReply scenario_set_vehicle_waypoints = 142;
    case kScenarioSetVehicleWaypoints: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.scenario_set_vehicle_waypoints_);
      break;
    }
    // .metamoto.services.ScenarioSetDriverModelReply scenario_set_driver_model = 143;
    case kScenarioSetDriverModel: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.scenario_set_driver_model_);
      break;
    }
    // .metamoto.services.ScenarioSetupReply scenario_setup = 144;
    case kScenarioSetup: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.scenario_setup_);
      break;
    }
    // .metamoto.services.SystemGetResultsSizeReply system_get_results_size = 160;
    case kSystemGetResultsSize: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_oneof_.system_get_results_size_);
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUTConnectorReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.SUTConnectorReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SUTConnectorReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SUTConnectorReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.SUTConnectorReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.SUTConnectorReply)
    MergeFrom(*source);
  }
}

void SUTConnectorReply::MergeFrom(const SUTConnectorReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.SUTConnectorReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_oneof_case()) {
    case kStatus: {
      mutable_status()->::google::rpc::Status::MergeFrom(from.status());
      break;
    }
    case kConnect: {
      mutable_connect()->::metamoto::services::SUTConnectorConnectReply::MergeFrom(from.connect());
      break;
    }
    case kDisconnect: {
      mutable_disconnect()->::metamoto::services::SUTConnectorDisconnectReply::MergeFrom(from.disconnect());
      break;
    }
    case kControllerInitialize: {
      mutable_controller_initialize()->::metamoto::services::ControllerInitializeRequest::MergeFrom(from.controller_initialize());
      break;
    }
    case kControllerUpdate: {
      mutable_controller_update()->::metamoto::services::ControllerUpdateRequest::MergeFrom(from.controller_update());
      break;
    }
    case kControllerClose: {
      mutable_controller_close()->::metamoto::services::ControllerCloseRequest::MergeFrom(from.controller_close());
      break;
    }
    case kControllerSetup: {
      mutable_controller_setup()->::metamoto::services::ControllerSetupRequest::MergeFrom(from.controller_setup());
      break;
    }
    case kSensorInitialize: {
      mutable_sensor_initialize()->::metamoto::services::SensorInitializeRequest::MergeFrom(from.sensor_initialize());
      break;
    }
    case kSensorUpdate: {
      mutable_sensor_update()->::metamoto::services::SensorUpdateRequest::MergeFrom(from.sensor_update());
      break;
    }
    case kSensorClose: {
      mutable_sensor_close()->::metamoto::services::SensorCloseRequest::MergeFrom(from.sensor_close());
      break;
    }
    case kSensorSetup: {
      mutable_sensor_setup()->::metamoto::services::SensorSetupRequest::MergeFrom(from.sensor_setup());
      break;
    }
    case kDataBusPublish: {
      mutable_data_bus_publish()->::metamoto::services::DataBusPublishReply::MergeFrom(from.data_bus_publish());
      break;
    }
    case kDataBusSubscribe: {
      mutable_data_bus_subscribe()->::metamoto::services::DataBusSubscribeReply::MergeFrom(from.data_bus_subscribe());
      break;
    }
    case kDataBusWrite: {
      mutable_data_bus_write()->::metamoto::services::DataBusWriteReply::MergeFrom(from.data_bus_write());
      break;
    }
    case kDataBusRead: {
      mutable_data_bus_read()->::metamoto::services::DataBusReadReply::MergeFrom(from.data_bus_read());
      break;
    }
    case kDataBusReadAll: {
      mutable_data_bus_read_all()->::metamoto::services::DataBusReadAllReply::MergeFrom(from.data_bus_read_all());
      break;
    }
    case kDataBusReadLast: {
      mutable_data_bus_read_last()->::metamoto::services::DataBusReadLastReply::MergeFrom(from.data_bus_read_last());
      break;
    }
    case kMapGetRoadNetwork: {
      mutable_map_get_road_network()->::metamoto::services::MapGetRoadNetworkReply::MergeFrom(from.map_get_road_network());
      break;
    }
    case kMapToRoadPoint: {
      mutable_map_to_road_point()->::metamoto::services::MapToRoadPointReply::MergeFrom(from.map_to_road_point());
      break;
    }
    case kMapToWorldPoint: {
      mutable_map_to_world_point()->::metamoto::services::MapToWorldPointReply::MergeFrom(from.map_to_world_point());
      break;
    }
    case kMapGetPath: {
      mutable_map_get_path()->::metamoto::services::MapGetPathReply::MergeFrom(from.map_get_path());
      break;
    }
    case kMapGetHeading: {
      mutable_map_get_heading()->::metamoto::services::MapGetHeadingReply::MergeFrom(from.map_get_heading());
      break;
    }
    case kRayTracerSetPatterns: {
      mutable_ray_tracer_set_patterns()->::metamoto::services::RayTracerSetPatternsReply::MergeFrom(from.ray_tracer_set_patterns());
      break;
    }
    case kRayTracerTrace: {
      mutable_ray_tracer_trace()->::metamoto::services::RayTracerTraceReply::MergeFrom(from.ray_tracer_trace());
      break;
    }
    case kReportingAddTimeSeriesValue: {
      mutable_reporting_add_time_series_value()->::metamoto::services::ReportingAddTimeSeriesValueReply::MergeFrom(from.reporting_add_time_series_value());
      break;
    }
    case kReportingLog: {
      mutable_reporting_log()->::metamoto::services::ReportingLogReply::MergeFrom(from.reporting_log());
      break;
    }
    case kReportingReportEvent: {
      mutable_reporting_report_event()->::metamoto::services::ReportingReportEventReply::MergeFrom(from.reporting_report_event());
      break;
    }
    case kReportingVisualize: {
      mutable_reporting_visualize()->::metamoto::services::ReportingVisualizeReply::MergeFrom(from.reporting_visualize());
      break;
    }
    case kScenarioUpdate: {
      mutable_scenario_update()->::metamoto::services::ScenarioUpdateReply::MergeFrom(from.scenario_update());
      break;
    }
    case kScenarioGetVehicleWaypoints: {
      mutable_scenario_get_vehicle_waypoints()->::metamoto::services::ScenarioGetVehicleWaypointsReply::MergeFrom(from.scenario_get_vehicle_waypoints());
      break;
    }
    case kScenarioSetVehicleWaypoints: {
      mutable_scenario_set_vehicle_waypoints()->::metamoto::services::ScenarioSetVehicleWaypointsReply::MergeFrom(from.scenario_set_vehicle_waypoints());
      break;
    }
    case kScenarioSetDriverModel: {
      mutable_scenario_set_driver_model()->::metamoto::services::ScenarioSetDriverModelReply::MergeFrom(from.scenario_set_driver_model());
      break;
    }
    case kScenarioSetup: {
      mutable_scenario_setup()->::metamoto::services::ScenarioSetupReply::MergeFrom(from.scenario_setup());
      break;
    }
    case kSystemGetResultsSize: {
      mutable_system_get_results_size()->::metamoto::services::SystemGetResultsSizeReply::MergeFrom(from.system_get_results_size());
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
}

void SUTConnectorReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.SUTConnectorReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUTConnectorReply::CopyFrom(const SUTConnectorReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.SUTConnectorReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUTConnectorReply::IsInitialized() const {
  return true;
}

void SUTConnectorReply::Swap(SUTConnectorReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SUTConnectorReply::InternalSwap(SUTConnectorReply* other) {
  using std::swap;
  swap(data_oneof_, other->data_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SUTConnectorReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SUTConnectorConnectRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SUTConnectorConnectRequest::kIdFieldNumber;
const int SUTConnectorConnectRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SUTConnectorConnectRequest::SUTConnectorConnectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorConnectRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.SUTConnectorConnectRequest)
}
SUTConnectorConnectRequest::SUTConnectorConnectRequest(const SUTConnectorConnectRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:metamoto.services.SUTConnectorConnectRequest)
}

void SUTConnectorConnectRequest::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

SUTConnectorConnectRequest::~SUTConnectorConnectRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.SUTConnectorConnectRequest)
  SharedDtor();
}

void SUTConnectorConnectRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SUTConnectorConnectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SUTConnectorConnectRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SUTConnectorConnectRequest& SUTConnectorConnectRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorConnectRequest.base);
  return *internal_default_instance();
}


void SUTConnectorConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.SUTConnectorConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool SUTConnectorConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.SUTConnectorConnectRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.services.SUTConnectorConnectRequest.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.services.SUTConnectorConnectRequest.SUTType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::metamoto::services::SUTConnectorConnectRequest_SUTType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.SUTConnectorConnectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.SUTConnectorConnectRequest)
  return false;
#undef DO_
}

void SUTConnectorConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.SUTConnectorConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.SUTConnectorConnectRequest.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .metamoto.services.SUTConnectorConnectRequest.SUTType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.SUTConnectorConnectRequest)
}

::google::protobuf::uint8* SUTConnectorConnectRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.SUTConnectorConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.SUTConnectorConnectRequest.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .metamoto.services.SUTConnectorConnectRequest.SUTType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.SUTConnectorConnectRequest)
  return target;
}

size_t SUTConnectorConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.SUTConnectorConnectRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .metamoto.services.SUTConnectorConnectRequest.SUTType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUTConnectorConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.SUTConnectorConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SUTConnectorConnectRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SUTConnectorConnectRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.SUTConnectorConnectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.SUTConnectorConnectRequest)
    MergeFrom(*source);
  }
}

void SUTConnectorConnectRequest::MergeFrom(const SUTConnectorConnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.SUTConnectorConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SUTConnectorConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.SUTConnectorConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUTConnectorConnectRequest::CopyFrom(const SUTConnectorConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.SUTConnectorConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUTConnectorConnectRequest::IsInitialized() const {
  return true;
}

void SUTConnectorConnectRequest::Swap(SUTConnectorConnectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SUTConnectorConnectRequest::InternalSwap(SUTConnectorConnectRequest* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SUTConnectorConnectRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SUTConnectorDisconnectRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SUTConnectorDisconnectRequest::SUTConnectorDisconnectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorDisconnectRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.SUTConnectorDisconnectRequest)
}
SUTConnectorDisconnectRequest::SUTConnectorDisconnectRequest(const SUTConnectorDisconnectRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.services.SUTConnectorDisconnectRequest)
}

void SUTConnectorDisconnectRequest::SharedCtor() {
}

SUTConnectorDisconnectRequest::~SUTConnectorDisconnectRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.SUTConnectorDisconnectRequest)
  SharedDtor();
}

void SUTConnectorDisconnectRequest::SharedDtor() {
}

void SUTConnectorDisconnectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SUTConnectorDisconnectRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SUTConnectorDisconnectRequest& SUTConnectorDisconnectRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorDisconnectRequest.base);
  return *internal_default_instance();
}


void SUTConnectorDisconnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.SUTConnectorDisconnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SUTConnectorDisconnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.SUTConnectorDisconnectRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.SUTConnectorDisconnectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.SUTConnectorDisconnectRequest)
  return false;
#undef DO_
}

void SUTConnectorDisconnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.SUTConnectorDisconnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.SUTConnectorDisconnectRequest)
}

::google::protobuf::uint8* SUTConnectorDisconnectRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.SUTConnectorDisconnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.SUTConnectorDisconnectRequest)
  return target;
}

size_t SUTConnectorDisconnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.SUTConnectorDisconnectRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUTConnectorDisconnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.SUTConnectorDisconnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SUTConnectorDisconnectRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SUTConnectorDisconnectRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.SUTConnectorDisconnectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.SUTConnectorDisconnectRequest)
    MergeFrom(*source);
  }
}

void SUTConnectorDisconnectRequest::MergeFrom(const SUTConnectorDisconnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.SUTConnectorDisconnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SUTConnectorDisconnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.SUTConnectorDisconnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUTConnectorDisconnectRequest::CopyFrom(const SUTConnectorDisconnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.SUTConnectorDisconnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUTConnectorDisconnectRequest::IsInitialized() const {
  return true;
}

void SUTConnectorDisconnectRequest::Swap(SUTConnectorDisconnectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SUTConnectorDisconnectRequest::InternalSwap(SUTConnectorDisconnectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SUTConnectorDisconnectRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SUTConnectorConnectReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SUTConnectorConnectReply::SUTConnectorConnectReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorConnectReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.SUTConnectorConnectReply)
}
SUTConnectorConnectReply::SUTConnectorConnectReply(const SUTConnectorConnectReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.services.SUTConnectorConnectReply)
}

void SUTConnectorConnectReply::SharedCtor() {
}

SUTConnectorConnectReply::~SUTConnectorConnectReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.SUTConnectorConnectReply)
  SharedDtor();
}

void SUTConnectorConnectReply::SharedDtor() {
}

void SUTConnectorConnectReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SUTConnectorConnectReply::descriptor() {
  ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SUTConnectorConnectReply& SUTConnectorConnectReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorConnectReply.base);
  return *internal_default_instance();
}


void SUTConnectorConnectReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.SUTConnectorConnectReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SUTConnectorConnectReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.SUTConnectorConnectReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.SUTConnectorConnectReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.SUTConnectorConnectReply)
  return false;
#undef DO_
}

void SUTConnectorConnectReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.SUTConnectorConnectReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.SUTConnectorConnectReply)
}

::google::protobuf::uint8* SUTConnectorConnectReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.SUTConnectorConnectReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.SUTConnectorConnectReply)
  return target;
}

size_t SUTConnectorConnectReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.SUTConnectorConnectReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUTConnectorConnectReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.SUTConnectorConnectReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SUTConnectorConnectReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SUTConnectorConnectReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.SUTConnectorConnectReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.SUTConnectorConnectReply)
    MergeFrom(*source);
  }
}

void SUTConnectorConnectReply::MergeFrom(const SUTConnectorConnectReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.SUTConnectorConnectReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SUTConnectorConnectReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.SUTConnectorConnectReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUTConnectorConnectReply::CopyFrom(const SUTConnectorConnectReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.SUTConnectorConnectReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUTConnectorConnectReply::IsInitialized() const {
  return true;
}

void SUTConnectorConnectReply::Swap(SUTConnectorConnectReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SUTConnectorConnectReply::InternalSwap(SUTConnectorConnectReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SUTConnectorConnectReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SUTConnectorDisconnectReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SUTConnectorDisconnectReply::SUTConnectorDisconnectReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorDisconnectReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.SUTConnectorDisconnectReply)
}
SUTConnectorDisconnectReply::SUTConnectorDisconnectReply(const SUTConnectorDisconnectReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.services.SUTConnectorDisconnectReply)
}

void SUTConnectorDisconnectReply::SharedCtor() {
}

SUTConnectorDisconnectReply::~SUTConnectorDisconnectReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.SUTConnectorDisconnectReply)
  SharedDtor();
}

void SUTConnectorDisconnectReply::SharedDtor() {
}

void SUTConnectorDisconnectReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SUTConnectorDisconnectReply::descriptor() {
  ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SUTConnectorDisconnectReply& SUTConnectorDisconnectReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorDisconnectReply.base);
  return *internal_default_instance();
}


void SUTConnectorDisconnectReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.SUTConnectorDisconnectReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SUTConnectorDisconnectReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.SUTConnectorDisconnectReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.SUTConnectorDisconnectReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.SUTConnectorDisconnectReply)
  return false;
#undef DO_
}

void SUTConnectorDisconnectReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.SUTConnectorDisconnectReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.SUTConnectorDisconnectReply)
}

::google::protobuf::uint8* SUTConnectorDisconnectReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.SUTConnectorDisconnectReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.SUTConnectorDisconnectReply)
  return target;
}

size_t SUTConnectorDisconnectReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.SUTConnectorDisconnectReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUTConnectorDisconnectReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.SUTConnectorDisconnectReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SUTConnectorDisconnectReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SUTConnectorDisconnectReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.SUTConnectorDisconnectReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.SUTConnectorDisconnectReply)
    MergeFrom(*source);
  }
}

void SUTConnectorDisconnectReply::MergeFrom(const SUTConnectorDisconnectReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.SUTConnectorDisconnectReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SUTConnectorDisconnectReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.SUTConnectorDisconnectReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUTConnectorDisconnectReply::CopyFrom(const SUTConnectorDisconnectReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.SUTConnectorDisconnectReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUTConnectorDisconnectReply::IsInitialized() const {
  return true;
}

void SUTConnectorDisconnectReply::Swap(SUTConnectorDisconnectReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SUTConnectorDisconnectReply::InternalSwap(SUTConnectorDisconnectReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SUTConnectorDisconnectReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SUTConnectorHeartbeatRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SUTConnectorHeartbeatRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SUTConnectorHeartbeatRequest::SUTConnectorHeartbeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorHeartbeatRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.SUTConnectorHeartbeatRequest)
}
SUTConnectorHeartbeatRequest::SUTConnectorHeartbeatRequest(const SUTConnectorHeartbeatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.services.SUTConnectorHeartbeatRequest)
}

void SUTConnectorHeartbeatRequest::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SUTConnectorHeartbeatRequest::~SUTConnectorHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.SUTConnectorHeartbeatRequest)
  SharedDtor();
}

void SUTConnectorHeartbeatRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SUTConnectorHeartbeatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SUTConnectorHeartbeatRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SUTConnectorHeartbeatRequest& SUTConnectorHeartbeatRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorHeartbeatRequest.base);
  return *internal_default_instance();
}


void SUTConnectorHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.SUTConnectorHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SUTConnectorHeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.SUTConnectorHeartbeatRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.services.SUTConnectorHeartbeatRequest.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.SUTConnectorHeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.SUTConnectorHeartbeatRequest)
  return false;
#undef DO_
}

void SUTConnectorHeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.SUTConnectorHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.SUTConnectorHeartbeatRequest.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.SUTConnectorHeartbeatRequest)
}

::google::protobuf::uint8* SUTConnectorHeartbeatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.SUTConnectorHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.SUTConnectorHeartbeatRequest.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.SUTConnectorHeartbeatRequest)
  return target;
}

size_t SUTConnectorHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.SUTConnectorHeartbeatRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUTConnectorHeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.SUTConnectorHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SUTConnectorHeartbeatRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SUTConnectorHeartbeatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.SUTConnectorHeartbeatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.SUTConnectorHeartbeatRequest)
    MergeFrom(*source);
  }
}

void SUTConnectorHeartbeatRequest::MergeFrom(const SUTConnectorHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.SUTConnectorHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void SUTConnectorHeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.SUTConnectorHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUTConnectorHeartbeatRequest::CopyFrom(const SUTConnectorHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.SUTConnectorHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUTConnectorHeartbeatRequest::IsInitialized() const {
  return true;
}

void SUTConnectorHeartbeatRequest::Swap(SUTConnectorHeartbeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SUTConnectorHeartbeatRequest::InternalSwap(SUTConnectorHeartbeatRequest* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SUTConnectorHeartbeatRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SUTConnectorHeartbeatReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SUTConnectorHeartbeatReply::SUTConnectorHeartbeatReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorHeartbeatReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.SUTConnectorHeartbeatReply)
}
SUTConnectorHeartbeatReply::SUTConnectorHeartbeatReply(const SUTConnectorHeartbeatReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.services.SUTConnectorHeartbeatReply)
}

void SUTConnectorHeartbeatReply::SharedCtor() {
}

SUTConnectorHeartbeatReply::~SUTConnectorHeartbeatReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.SUTConnectorHeartbeatReply)
  SharedDtor();
}

void SUTConnectorHeartbeatReply::SharedDtor() {
}

void SUTConnectorHeartbeatReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SUTConnectorHeartbeatReply::descriptor() {
  ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SUTConnectorHeartbeatReply& SUTConnectorHeartbeatReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorHeartbeatReply.base);
  return *internal_default_instance();
}


void SUTConnectorHeartbeatReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.SUTConnectorHeartbeatReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SUTConnectorHeartbeatReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.SUTConnectorHeartbeatReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.SUTConnectorHeartbeatReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.SUTConnectorHeartbeatReply)
  return false;
#undef DO_
}

void SUTConnectorHeartbeatReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.SUTConnectorHeartbeatReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.SUTConnectorHeartbeatReply)
}

::google::protobuf::uint8* SUTConnectorHeartbeatReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.SUTConnectorHeartbeatReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.SUTConnectorHeartbeatReply)
  return target;
}

size_t SUTConnectorHeartbeatReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.SUTConnectorHeartbeatReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUTConnectorHeartbeatReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.SUTConnectorHeartbeatReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SUTConnectorHeartbeatReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SUTConnectorHeartbeatReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.SUTConnectorHeartbeatReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.SUTConnectorHeartbeatReply)
    MergeFrom(*source);
  }
}

void SUTConnectorHeartbeatReply::MergeFrom(const SUTConnectorHeartbeatReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.SUTConnectorHeartbeatReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SUTConnectorHeartbeatReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.SUTConnectorHeartbeatReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUTConnectorHeartbeatReply::CopyFrom(const SUTConnectorHeartbeatReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.SUTConnectorHeartbeatReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUTConnectorHeartbeatReply::IsInitialized() const {
  return true;
}

void SUTConnectorHeartbeatReply::Swap(SUTConnectorHeartbeatReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SUTConnectorHeartbeatReply::InternalSwap(SUTConnectorHeartbeatReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SUTConnectorHeartbeatReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SUTConnectorQueryGetConnectedSUTsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SUTConnectorQueryGetConnectedSUTsRequest::SUTConnectorQueryGetConnectedSUTsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorQueryGetConnectedSUTsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest)
}
SUTConnectorQueryGetConnectedSUTsRequest::SUTConnectorQueryGetConnectedSUTsRequest(const SUTConnectorQueryGetConnectedSUTsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest)
}

void SUTConnectorQueryGetConnectedSUTsRequest::SharedCtor() {
}

SUTConnectorQueryGetConnectedSUTsRequest::~SUTConnectorQueryGetConnectedSUTsRequest() {
  // @@protoc_insertion_point(destructor:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest)
  SharedDtor();
}

void SUTConnectorQueryGetConnectedSUTsRequest::SharedDtor() {
}

void SUTConnectorQueryGetConnectedSUTsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SUTConnectorQueryGetConnectedSUTsRequest::descriptor() {
  ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SUTConnectorQueryGetConnectedSUTsRequest& SUTConnectorQueryGetConnectedSUTsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorQueryGetConnectedSUTsRequest.base);
  return *internal_default_instance();
}


void SUTConnectorQueryGetConnectedSUTsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SUTConnectorQueryGetConnectedSUTsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest)
  return false;
#undef DO_
}

void SUTConnectorQueryGetConnectedSUTsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest)
}

::google::protobuf::uint8* SUTConnectorQueryGetConnectedSUTsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest)
  return target;
}

size_t SUTConnectorQueryGetConnectedSUTsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUTConnectorQueryGetConnectedSUTsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SUTConnectorQueryGetConnectedSUTsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SUTConnectorQueryGetConnectedSUTsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest)
    MergeFrom(*source);
  }
}

void SUTConnectorQueryGetConnectedSUTsRequest::MergeFrom(const SUTConnectorQueryGetConnectedSUTsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SUTConnectorQueryGetConnectedSUTsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUTConnectorQueryGetConnectedSUTsRequest::CopyFrom(const SUTConnectorQueryGetConnectedSUTsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUTConnectorQueryGetConnectedSUTsRequest::IsInitialized() const {
  return true;
}

void SUTConnectorQueryGetConnectedSUTsRequest::Swap(SUTConnectorQueryGetConnectedSUTsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SUTConnectorQueryGetConnectedSUTsRequest::InternalSwap(SUTConnectorQueryGetConnectedSUTsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SUTConnectorQueryGetConnectedSUTsRequest::GetMetadata() const {
  protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SUTConnectorQueryGetConnectedSUTsReply_SUT::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SUTConnectorQueryGetConnectedSUTsReply_SUT::kIdFieldNumber;
const int SUTConnectorQueryGetConnectedSUTsReply_SUT::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SUTConnectorQueryGetConnectedSUTsReply_SUT::SUTConnectorQueryGetConnectedSUTsReply_SUT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorQueryGetConnectedSUTsReply_SUT.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT)
}
SUTConnectorQueryGetConnectedSUTsReply_SUT::SUTConnectorQueryGetConnectedSUTsReply_SUT(const SUTConnectorQueryGetConnectedSUTsReply_SUT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT)
}

void SUTConnectorQueryGetConnectedSUTsReply_SUT::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

SUTConnectorQueryGetConnectedSUTsReply_SUT::~SUTConnectorQueryGetConnectedSUTsReply_SUT() {
  // @@protoc_insertion_point(destructor:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT)
  SharedDtor();
}

void SUTConnectorQueryGetConnectedSUTsReply_SUT::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SUTConnectorQueryGetConnectedSUTsReply_SUT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SUTConnectorQueryGetConnectedSUTsReply_SUT::descriptor() {
  ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SUTConnectorQueryGetConnectedSUTsReply_SUT& SUTConnectorQueryGetConnectedSUTsReply_SUT::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorQueryGetConnectedSUTsReply_SUT.base);
  return *internal_default_instance();
}


void SUTConnectorQueryGetConnectedSUTsReply_SUT::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _internal_metadata_.Clear();
}

bool SUTConnectorQueryGetConnectedSUTsReply_SUT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT)
  return false;
#undef DO_
}

void SUTConnectorQueryGetConnectedSUTsReply_SUT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT)
}

::google::protobuf::uint8* SUTConnectorQueryGetConnectedSUTsReply_SUT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT)
  return target;
}

size_t SUTConnectorQueryGetConnectedSUTsReply_SUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUTConnectorQueryGetConnectedSUTsReply_SUT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT)
  GOOGLE_DCHECK_NE(&from, this);
  const SUTConnectorQueryGetConnectedSUTsReply_SUT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SUTConnectorQueryGetConnectedSUTsReply_SUT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT)
    MergeFrom(*source);
  }
}

void SUTConnectorQueryGetConnectedSUTsReply_SUT::MergeFrom(const SUTConnectorQueryGetConnectedSUTsReply_SUT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void SUTConnectorQueryGetConnectedSUTsReply_SUT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUTConnectorQueryGetConnectedSUTsReply_SUT::CopyFrom(const SUTConnectorQueryGetConnectedSUTsReply_SUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUTConnectorQueryGetConnectedSUTsReply_SUT::IsInitialized() const {
  return true;
}

void SUTConnectorQueryGetConnectedSUTsReply_SUT::Swap(SUTConnectorQueryGetConnectedSUTsReply_SUT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SUTConnectorQueryGetConnectedSUTsReply_SUT::InternalSwap(SUTConnectorQueryGetConnectedSUTsReply_SUT* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SUTConnectorQueryGetConnectedSUTsReply_SUT::GetMetadata() const {
  protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SUTConnectorQueryGetConnectedSUTsReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SUTConnectorQueryGetConnectedSUTsReply::kSutsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SUTConnectorQueryGetConnectedSUTsReply::SUTConnectorQueryGetConnectedSUTsReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorQueryGetConnectedSUTsReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply)
}
SUTConnectorQueryGetConnectedSUTsReply::SUTConnectorQueryGetConnectedSUTsReply(const SUTConnectorQueryGetConnectedSUTsReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      suts_(from.suts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply)
}

void SUTConnectorQueryGetConnectedSUTsReply::SharedCtor() {
}

SUTConnectorQueryGetConnectedSUTsReply::~SUTConnectorQueryGetConnectedSUTsReply() {
  // @@protoc_insertion_point(destructor:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply)
  SharedDtor();
}

void SUTConnectorQueryGetConnectedSUTsReply::SharedDtor() {
}

void SUTConnectorQueryGetConnectedSUTsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SUTConnectorQueryGetConnectedSUTsReply::descriptor() {
  ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SUTConnectorQueryGetConnectedSUTsReply& SUTConnectorQueryGetConnectedSUTsReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::scc_info_SUTConnectorQueryGetConnectedSUTsReply.base);
  return *internal_default_instance();
}


void SUTConnectorQueryGetConnectedSUTsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  suts_.Clear();
  _internal_metadata_.Clear();
}

bool SUTConnectorQueryGetConnectedSUTsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT suts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_suts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply)
  return false;
#undef DO_
}

void SUTConnectorQueryGetConnectedSUTsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT suts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->suts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->suts(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply)
}

::google::protobuf::uint8* SUTConnectorQueryGetConnectedSUTsReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT suts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->suts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->suts(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply)
  return target;
}

size_t SUTConnectorQueryGetConnectedSUTsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.services.SUTConnectorQueryGetConnectedSUTsReply.SUT suts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->suts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->suts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUTConnectorQueryGetConnectedSUTsReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SUTConnectorQueryGetConnectedSUTsReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SUTConnectorQueryGetConnectedSUTsReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply)
    MergeFrom(*source);
  }
}

void SUTConnectorQueryGetConnectedSUTsReply::MergeFrom(const SUTConnectorQueryGetConnectedSUTsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  suts_.MergeFrom(from.suts_);
}

void SUTConnectorQueryGetConnectedSUTsReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUTConnectorQueryGetConnectedSUTsReply::CopyFrom(const SUTConnectorQueryGetConnectedSUTsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.services.SUTConnectorQueryGetConnectedSUTsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUTConnectorQueryGetConnectedSUTsReply::IsInitialized() const {
  return true;
}

void SUTConnectorQueryGetConnectedSUTsReply::Swap(SUTConnectorQueryGetConnectedSUTsReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SUTConnectorQueryGetConnectedSUTsReply::InternalSwap(SUTConnectorQueryGetConnectedSUTsReply* other) {
  using std::swap;
  CastToBase(&suts_)->InternalSwap(CastToBase(&other->suts_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SUTConnectorQueryGetConnectedSUTsReply::GetMetadata() const {
  protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2fservices_2fsut_5fconnector_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace services
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::SUTConnectorRequest* Arena::CreateMaybeMessage< ::metamoto::services::SUTConnectorRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::SUTConnectorRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::SUTConnectorReply* Arena::CreateMaybeMessage< ::metamoto::services::SUTConnectorReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::SUTConnectorReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::SUTConnectorConnectRequest* Arena::CreateMaybeMessage< ::metamoto::services::SUTConnectorConnectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::SUTConnectorConnectRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::SUTConnectorDisconnectRequest* Arena::CreateMaybeMessage< ::metamoto::services::SUTConnectorDisconnectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::SUTConnectorDisconnectRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::SUTConnectorConnectReply* Arena::CreateMaybeMessage< ::metamoto::services::SUTConnectorConnectReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::SUTConnectorConnectReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::SUTConnectorDisconnectReply* Arena::CreateMaybeMessage< ::metamoto::services::SUTConnectorDisconnectReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::SUTConnectorDisconnectReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::SUTConnectorHeartbeatRequest* Arena::CreateMaybeMessage< ::metamoto::services::SUTConnectorHeartbeatRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::SUTConnectorHeartbeatRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::SUTConnectorHeartbeatReply* Arena::CreateMaybeMessage< ::metamoto::services::SUTConnectorHeartbeatReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::SUTConnectorHeartbeatReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest* Arena::CreateMaybeMessage< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT* Arena::CreateMaybeMessage< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply_SUT >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply* Arena::CreateMaybeMessage< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::services::SUTConnectorQueryGetConnectedSUTsReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
