// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metamoto/services/map.proto
// Original file comments:
// Copyright (c) 2018-2020 Metamoto, Inc. All Rights Reserved.
//
#ifndef GRPC_metamoto_2fservices_2fmap_2eproto__INCLUDED
#define GRPC_metamoto_2fservices_2fmap_2eproto__INCLUDED

#include "metamoto/services/map.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace metamoto {
namespace services {

class Map final {
 public:
  static constexpr char const* service_full_name() {
    return "metamoto.services.Map";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Returns the road network structure of the current scene. Large response, call only once.
    virtual ::grpc::Status GetRoadNetwork(::grpc::ClientContext* context, const ::metamoto::services::MapGetRoadNetworkRequest& request, ::metamoto::services::MapGetRoadNetworkReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapGetRoadNetworkReply>> AsyncGetRoadNetwork(::grpc::ClientContext* context, const ::metamoto::services::MapGetRoadNetworkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapGetRoadNetworkReply>>(AsyncGetRoadNetworkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapGetRoadNetworkReply>> PrepareAsyncGetRoadNetwork(::grpc::ClientContext* context, const ::metamoto::services::MapGetRoadNetworkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapGetRoadNetworkReply>>(PrepareAsyncGetRoadNetworkRaw(context, request, cq));
    }
    // Converts from world coordinates to road coordinates.
    virtual ::grpc::Status ToRoadPoint(::grpc::ClientContext* context, const ::metamoto::services::MapToRoadPointRequest& request, ::metamoto::services::MapToRoadPointReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapToRoadPointReply>> AsyncToRoadPoint(::grpc::ClientContext* context, const ::metamoto::services::MapToRoadPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapToRoadPointReply>>(AsyncToRoadPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapToRoadPointReply>> PrepareAsyncToRoadPoint(::grpc::ClientContext* context, const ::metamoto::services::MapToRoadPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapToRoadPointReply>>(PrepareAsyncToRoadPointRaw(context, request, cq));
    }
    // Converts from road coordinates to world coordinates.
    virtual ::grpc::Status ToWorldPoint(::grpc::ClientContext* context, const ::metamoto::services::MapToWorldPointRequest& request, ::metamoto::services::MapToWorldPointReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapToWorldPointReply>> AsyncToWorldPoint(::grpc::ClientContext* context, const ::metamoto::services::MapToWorldPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapToWorldPointReply>>(AsyncToWorldPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapToWorldPointReply>> PrepareAsyncToWorldPoint(::grpc::ClientContext* context, const ::metamoto::services::MapToWorldPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapToWorldPointReply>>(PrepareAsyncToWorldPointRaw(context, request, cq));
    }
    // Returns the heading unit vector (in world coordinates) at a given RoadPoint.
    // Returns zero vector if the road point is not found in the road network.
    virtual ::grpc::Status GetHeading(::grpc::ClientContext* context, const ::metamoto::services::MapGetHeadingRequest& request, ::metamoto::services::MapGetHeadingReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapGetHeadingReply>> AsyncGetHeading(::grpc::ClientContext* context, const ::metamoto::services::MapGetHeadingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapGetHeadingReply>>(AsyncGetHeadingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapGetHeadingReply>> PrepareAsyncGetHeading(::grpc::ClientContext* context, const ::metamoto::services::MapGetHeadingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapGetHeadingReply>>(PrepareAsyncGetHeadingRaw(context, request, cq));
    }
    // Returns detailed path in world points, with orientations and speeds, between two points.
    virtual ::grpc::Status GetPath(::grpc::ClientContext* context, const ::metamoto::services::MapGetPathRequest& request, ::metamoto::services::MapGetPathReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapGetPathReply>> AsyncGetPath(::grpc::ClientContext* context, const ::metamoto::services::MapGetPathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapGetPathReply>>(AsyncGetPathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapGetPathReply>> PrepareAsyncGetPath(::grpc::ClientContext* context, const ::metamoto::services::MapGetPathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapGetPathReply>>(PrepareAsyncGetPathRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Returns the road network structure of the current scene. Large response, call only once.
      virtual void GetRoadNetwork(::grpc::ClientContext* context, const ::metamoto::services::MapGetRoadNetworkRequest* request, ::metamoto::services::MapGetRoadNetworkReply* response, std::function<void(::grpc::Status)>) = 0;
      // Converts from world coordinates to road coordinates.
      virtual void ToRoadPoint(::grpc::ClientContext* context, const ::metamoto::services::MapToRoadPointRequest* request, ::metamoto::services::MapToRoadPointReply* response, std::function<void(::grpc::Status)>) = 0;
      // Converts from road coordinates to world coordinates.
      virtual void ToWorldPoint(::grpc::ClientContext* context, const ::metamoto::services::MapToWorldPointRequest* request, ::metamoto::services::MapToWorldPointReply* response, std::function<void(::grpc::Status)>) = 0;
      // Returns the heading unit vector (in world coordinates) at a given RoadPoint.
      // Returns zero vector if the road point is not found in the road network.
      virtual void GetHeading(::grpc::ClientContext* context, const ::metamoto::services::MapGetHeadingRequest* request, ::metamoto::services::MapGetHeadingReply* response, std::function<void(::grpc::Status)>) = 0;
      // Returns detailed path in world points, with orientations and speeds, between two points.
      virtual void GetPath(::grpc::ClientContext* context, const ::metamoto::services::MapGetPathRequest* request, ::metamoto::services::MapGetPathReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapGetRoadNetworkReply>* AsyncGetRoadNetworkRaw(::grpc::ClientContext* context, const ::metamoto::services::MapGetRoadNetworkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapGetRoadNetworkReply>* PrepareAsyncGetRoadNetworkRaw(::grpc::ClientContext* context, const ::metamoto::services::MapGetRoadNetworkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapToRoadPointReply>* AsyncToRoadPointRaw(::grpc::ClientContext* context, const ::metamoto::services::MapToRoadPointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapToRoadPointReply>* PrepareAsyncToRoadPointRaw(::grpc::ClientContext* context, const ::metamoto::services::MapToRoadPointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapToWorldPointReply>* AsyncToWorldPointRaw(::grpc::ClientContext* context, const ::metamoto::services::MapToWorldPointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapToWorldPointReply>* PrepareAsyncToWorldPointRaw(::grpc::ClientContext* context, const ::metamoto::services::MapToWorldPointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapGetHeadingReply>* AsyncGetHeadingRaw(::grpc::ClientContext* context, const ::metamoto::services::MapGetHeadingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapGetHeadingReply>* PrepareAsyncGetHeadingRaw(::grpc::ClientContext* context, const ::metamoto::services::MapGetHeadingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapGetPathReply>* AsyncGetPathRaw(::grpc::ClientContext* context, const ::metamoto::services::MapGetPathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::metamoto::services::MapGetPathReply>* PrepareAsyncGetPathRaw(::grpc::ClientContext* context, const ::metamoto::services::MapGetPathRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetRoadNetwork(::grpc::ClientContext* context, const ::metamoto::services::MapGetRoadNetworkRequest& request, ::metamoto::services::MapGetRoadNetworkReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapGetRoadNetworkReply>> AsyncGetRoadNetwork(::grpc::ClientContext* context, const ::metamoto::services::MapGetRoadNetworkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapGetRoadNetworkReply>>(AsyncGetRoadNetworkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapGetRoadNetworkReply>> PrepareAsyncGetRoadNetwork(::grpc::ClientContext* context, const ::metamoto::services::MapGetRoadNetworkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapGetRoadNetworkReply>>(PrepareAsyncGetRoadNetworkRaw(context, request, cq));
    }
    ::grpc::Status ToRoadPoint(::grpc::ClientContext* context, const ::metamoto::services::MapToRoadPointRequest& request, ::metamoto::services::MapToRoadPointReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapToRoadPointReply>> AsyncToRoadPoint(::grpc::ClientContext* context, const ::metamoto::services::MapToRoadPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapToRoadPointReply>>(AsyncToRoadPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapToRoadPointReply>> PrepareAsyncToRoadPoint(::grpc::ClientContext* context, const ::metamoto::services::MapToRoadPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapToRoadPointReply>>(PrepareAsyncToRoadPointRaw(context, request, cq));
    }
    ::grpc::Status ToWorldPoint(::grpc::ClientContext* context, const ::metamoto::services::MapToWorldPointRequest& request, ::metamoto::services::MapToWorldPointReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapToWorldPointReply>> AsyncToWorldPoint(::grpc::ClientContext* context, const ::metamoto::services::MapToWorldPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapToWorldPointReply>>(AsyncToWorldPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapToWorldPointReply>> PrepareAsyncToWorldPoint(::grpc::ClientContext* context, const ::metamoto::services::MapToWorldPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapToWorldPointReply>>(PrepareAsyncToWorldPointRaw(context, request, cq));
    }
    ::grpc::Status GetHeading(::grpc::ClientContext* context, const ::metamoto::services::MapGetHeadingRequest& request, ::metamoto::services::MapGetHeadingReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapGetHeadingReply>> AsyncGetHeading(::grpc::ClientContext* context, const ::metamoto::services::MapGetHeadingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapGetHeadingReply>>(AsyncGetHeadingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapGetHeadingReply>> PrepareAsyncGetHeading(::grpc::ClientContext* context, const ::metamoto::services::MapGetHeadingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapGetHeadingReply>>(PrepareAsyncGetHeadingRaw(context, request, cq));
    }
    ::grpc::Status GetPath(::grpc::ClientContext* context, const ::metamoto::services::MapGetPathRequest& request, ::metamoto::services::MapGetPathReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapGetPathReply>> AsyncGetPath(::grpc::ClientContext* context, const ::metamoto::services::MapGetPathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapGetPathReply>>(AsyncGetPathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapGetPathReply>> PrepareAsyncGetPath(::grpc::ClientContext* context, const ::metamoto::services::MapGetPathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapGetPathReply>>(PrepareAsyncGetPathRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetRoadNetwork(::grpc::ClientContext* context, const ::metamoto::services::MapGetRoadNetworkRequest* request, ::metamoto::services::MapGetRoadNetworkReply* response, std::function<void(::grpc::Status)>) override;
      void ToRoadPoint(::grpc::ClientContext* context, const ::metamoto::services::MapToRoadPointRequest* request, ::metamoto::services::MapToRoadPointReply* response, std::function<void(::grpc::Status)>) override;
      void ToWorldPoint(::grpc::ClientContext* context, const ::metamoto::services::MapToWorldPointRequest* request, ::metamoto::services::MapToWorldPointReply* response, std::function<void(::grpc::Status)>) override;
      void GetHeading(::grpc::ClientContext* context, const ::metamoto::services::MapGetHeadingRequest* request, ::metamoto::services::MapGetHeadingReply* response, std::function<void(::grpc::Status)>) override;
      void GetPath(::grpc::ClientContext* context, const ::metamoto::services::MapGetPathRequest* request, ::metamoto::services::MapGetPathReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapGetRoadNetworkReply>* AsyncGetRoadNetworkRaw(::grpc::ClientContext* context, const ::metamoto::services::MapGetRoadNetworkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapGetRoadNetworkReply>* PrepareAsyncGetRoadNetworkRaw(::grpc::ClientContext* context, const ::metamoto::services::MapGetRoadNetworkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapToRoadPointReply>* AsyncToRoadPointRaw(::grpc::ClientContext* context, const ::metamoto::services::MapToRoadPointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapToRoadPointReply>* PrepareAsyncToRoadPointRaw(::grpc::ClientContext* context, const ::metamoto::services::MapToRoadPointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapToWorldPointReply>* AsyncToWorldPointRaw(::grpc::ClientContext* context, const ::metamoto::services::MapToWorldPointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapToWorldPointReply>* PrepareAsyncToWorldPointRaw(::grpc::ClientContext* context, const ::metamoto::services::MapToWorldPointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapGetHeadingReply>* AsyncGetHeadingRaw(::grpc::ClientContext* context, const ::metamoto::services::MapGetHeadingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapGetHeadingReply>* PrepareAsyncGetHeadingRaw(::grpc::ClientContext* context, const ::metamoto::services::MapGetHeadingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapGetPathReply>* AsyncGetPathRaw(::grpc::ClientContext* context, const ::metamoto::services::MapGetPathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::metamoto::services::MapGetPathReply>* PrepareAsyncGetPathRaw(::grpc::ClientContext* context, const ::metamoto::services::MapGetPathRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetRoadNetwork_;
    const ::grpc::internal::RpcMethod rpcmethod_ToRoadPoint_;
    const ::grpc::internal::RpcMethod rpcmethod_ToWorldPoint_;
    const ::grpc::internal::RpcMethod rpcmethod_GetHeading_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPath_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Returns the road network structure of the current scene. Large response, call only once.
    virtual ::grpc::Status GetRoadNetwork(::grpc::ServerContext* context, const ::metamoto::services::MapGetRoadNetworkRequest* request, ::metamoto::services::MapGetRoadNetworkReply* response);
    // Converts from world coordinates to road coordinates.
    virtual ::grpc::Status ToRoadPoint(::grpc::ServerContext* context, const ::metamoto::services::MapToRoadPointRequest* request, ::metamoto::services::MapToRoadPointReply* response);
    // Converts from road coordinates to world coordinates.
    virtual ::grpc::Status ToWorldPoint(::grpc::ServerContext* context, const ::metamoto::services::MapToWorldPointRequest* request, ::metamoto::services::MapToWorldPointReply* response);
    // Returns the heading unit vector (in world coordinates) at a given RoadPoint.
    // Returns zero vector if the road point is not found in the road network.
    virtual ::grpc::Status GetHeading(::grpc::ServerContext* context, const ::metamoto::services::MapGetHeadingRequest* request, ::metamoto::services::MapGetHeadingReply* response);
    // Returns detailed path in world points, with orientations and speeds, between two points.
    virtual ::grpc::Status GetPath(::grpc::ServerContext* context, const ::metamoto::services::MapGetPathRequest* request, ::metamoto::services::MapGetPathReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRoadNetwork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRoadNetwork() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetRoadNetwork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoadNetwork(::grpc::ServerContext* context, const ::metamoto::services::MapGetRoadNetworkRequest* request, ::metamoto::services::MapGetRoadNetworkReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRoadNetwork(::grpc::ServerContext* context, ::metamoto::services::MapGetRoadNetworkRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::MapGetRoadNetworkReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ToRoadPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ToRoadPoint() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ToRoadPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToRoadPoint(::grpc::ServerContext* context, const ::metamoto::services::MapToRoadPointRequest* request, ::metamoto::services::MapToRoadPointReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestToRoadPoint(::grpc::ServerContext* context, ::metamoto::services::MapToRoadPointRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::MapToRoadPointReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ToWorldPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ToWorldPoint() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ToWorldPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToWorldPoint(::grpc::ServerContext* context, const ::metamoto::services::MapToWorldPointRequest* request, ::metamoto::services::MapToWorldPointReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestToWorldPoint(::grpc::ServerContext* context, ::metamoto::services::MapToWorldPointRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::MapToWorldPointReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHeading : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetHeading() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetHeading() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeading(::grpc::ServerContext* context, const ::metamoto::services::MapGetHeadingRequest* request, ::metamoto::services::MapGetHeadingReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHeading(::grpc::ServerContext* context, ::metamoto::services::MapGetHeadingRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::MapGetHeadingReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPath() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetPath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPath(::grpc::ServerContext* context, const ::metamoto::services::MapGetPathRequest* request, ::metamoto::services::MapGetPathReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPath(::grpc::ServerContext* context, ::metamoto::services::MapGetPathRequest* request, ::grpc::ServerAsyncResponseWriter< ::metamoto::services::MapGetPathReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetRoadNetwork<WithAsyncMethod_ToRoadPoint<WithAsyncMethod_ToWorldPoint<WithAsyncMethod_GetHeading<WithAsyncMethod_GetPath<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRoadNetwork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetRoadNetwork() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::MapGetRoadNetworkRequest, ::metamoto::services::MapGetRoadNetworkReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::MapGetRoadNetworkRequest* request,
                 ::metamoto::services::MapGetRoadNetworkReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetRoadNetwork(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetRoadNetwork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoadNetwork(::grpc::ServerContext* context, const ::metamoto::services::MapGetRoadNetworkRequest* request, ::metamoto::services::MapGetRoadNetworkReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRoadNetwork(::grpc::ServerContext* context, const ::metamoto::services::MapGetRoadNetworkRequest* request, ::metamoto::services::MapGetRoadNetworkReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ToRoadPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ToRoadPoint() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::MapToRoadPointRequest, ::metamoto::services::MapToRoadPointReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::MapToRoadPointRequest* request,
                 ::metamoto::services::MapToRoadPointReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ToRoadPoint(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ToRoadPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToRoadPoint(::grpc::ServerContext* context, const ::metamoto::services::MapToRoadPointRequest* request, ::metamoto::services::MapToRoadPointReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ToRoadPoint(::grpc::ServerContext* context, const ::metamoto::services::MapToRoadPointRequest* request, ::metamoto::services::MapToRoadPointReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ToWorldPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ToWorldPoint() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::MapToWorldPointRequest, ::metamoto::services::MapToWorldPointReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::MapToWorldPointRequest* request,
                 ::metamoto::services::MapToWorldPointReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ToWorldPoint(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ToWorldPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToWorldPoint(::grpc::ServerContext* context, const ::metamoto::services::MapToWorldPointRequest* request, ::metamoto::services::MapToWorldPointReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ToWorldPoint(::grpc::ServerContext* context, const ::metamoto::services::MapToWorldPointRequest* request, ::metamoto::services::MapToWorldPointReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetHeading : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetHeading() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::MapGetHeadingRequest, ::metamoto::services::MapGetHeadingReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::MapGetHeadingRequest* request,
                 ::metamoto::services::MapGetHeadingReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetHeading(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetHeading() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeading(::grpc::ServerContext* context, const ::metamoto::services::MapGetHeadingRequest* request, ::metamoto::services::MapGetHeadingReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetHeading(::grpc::ServerContext* context, const ::metamoto::services::MapGetHeadingRequest* request, ::metamoto::services::MapGetHeadingReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetPath() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::metamoto::services::MapGetPathRequest, ::metamoto::services::MapGetPathReply>(
          [this](::grpc::ServerContext* context,
                 const ::metamoto::services::MapGetPathRequest* request,
                 ::metamoto::services::MapGetPathReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetPath(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetPath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPath(::grpc::ServerContext* context, const ::metamoto::services::MapGetPathRequest* request, ::metamoto::services::MapGetPathReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetPath(::grpc::ServerContext* context, const ::metamoto::services::MapGetPathRequest* request, ::metamoto::services::MapGetPathReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GetRoadNetwork<ExperimentalWithCallbackMethod_ToRoadPoint<ExperimentalWithCallbackMethod_ToWorldPoint<ExperimentalWithCallbackMethod_GetHeading<ExperimentalWithCallbackMethod_GetPath<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetRoadNetwork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRoadNetwork() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetRoadNetwork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoadNetwork(::grpc::ServerContext* context, const ::metamoto::services::MapGetRoadNetworkRequest* request, ::metamoto::services::MapGetRoadNetworkReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ToRoadPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ToRoadPoint() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ToRoadPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToRoadPoint(::grpc::ServerContext* context, const ::metamoto::services::MapToRoadPointRequest* request, ::metamoto::services::MapToRoadPointReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ToWorldPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ToWorldPoint() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ToWorldPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToWorldPoint(::grpc::ServerContext* context, const ::metamoto::services::MapToWorldPointRequest* request, ::metamoto::services::MapToWorldPointReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHeading : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetHeading() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetHeading() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeading(::grpc::ServerContext* context, const ::metamoto::services::MapGetHeadingRequest* request, ::metamoto::services::MapGetHeadingReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPath() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetPath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPath(::grpc::ServerContext* context, const ::metamoto::services::MapGetPathRequest* request, ::metamoto::services::MapGetPathReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRoadNetwork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetRoadNetwork() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetRoadNetwork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoadNetwork(::grpc::ServerContext* context, const ::metamoto::services::MapGetRoadNetworkRequest* request, ::metamoto::services::MapGetRoadNetworkReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRoadNetwork(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ToRoadPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ToRoadPoint() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ToRoadPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToRoadPoint(::grpc::ServerContext* context, const ::metamoto::services::MapToRoadPointRequest* request, ::metamoto::services::MapToRoadPointReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestToRoadPoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ToWorldPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ToWorldPoint() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ToWorldPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToWorldPoint(::grpc::ServerContext* context, const ::metamoto::services::MapToWorldPointRequest* request, ::metamoto::services::MapToWorldPointReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestToWorldPoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetHeading : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetHeading() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetHeading() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeading(::grpc::ServerContext* context, const ::metamoto::services::MapGetHeadingRequest* request, ::metamoto::services::MapGetHeadingReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHeading(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetPath() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetPath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPath(::grpc::ServerContext* context, const ::metamoto::services::MapGetPathRequest* request, ::metamoto::services::MapGetPathReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPath(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRoadNetwork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRoadNetwork() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetRoadNetwork(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRoadNetwork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoadNetwork(::grpc::ServerContext* context, const ::metamoto::services::MapGetRoadNetworkRequest* request, ::metamoto::services::MapGetRoadNetworkReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRoadNetwork(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ToRoadPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ToRoadPoint() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ToRoadPoint(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ToRoadPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToRoadPoint(::grpc::ServerContext* context, const ::metamoto::services::MapToRoadPointRequest* request, ::metamoto::services::MapToRoadPointReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ToRoadPoint(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ToWorldPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ToWorldPoint() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ToWorldPoint(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ToWorldPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToWorldPoint(::grpc::ServerContext* context, const ::metamoto::services::MapToWorldPointRequest* request, ::metamoto::services::MapToWorldPointReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ToWorldPoint(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetHeading : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetHeading() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetHeading(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetHeading() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeading(::grpc::ServerContext* context, const ::metamoto::services::MapGetHeadingRequest* request, ::metamoto::services::MapGetHeadingReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetHeading(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPath() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetPath(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPath(::grpc::ServerContext* context, const ::metamoto::services::MapGetPathRequest* request, ::metamoto::services::MapGetPathReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetPath(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRoadNetwork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetRoadNetwork() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::MapGetRoadNetworkRequest, ::metamoto::services::MapGetRoadNetworkReply>(std::bind(&WithStreamedUnaryMethod_GetRoadNetwork<BaseClass>::StreamedGetRoadNetwork, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRoadNetwork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRoadNetwork(::grpc::ServerContext* context, const ::metamoto::services::MapGetRoadNetworkRequest* request, ::metamoto::services::MapGetRoadNetworkReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRoadNetwork(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::MapGetRoadNetworkRequest,::metamoto::services::MapGetRoadNetworkReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ToRoadPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ToRoadPoint() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::MapToRoadPointRequest, ::metamoto::services::MapToRoadPointReply>(std::bind(&WithStreamedUnaryMethod_ToRoadPoint<BaseClass>::StreamedToRoadPoint, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ToRoadPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ToRoadPoint(::grpc::ServerContext* context, const ::metamoto::services::MapToRoadPointRequest* request, ::metamoto::services::MapToRoadPointReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedToRoadPoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::MapToRoadPointRequest,::metamoto::services::MapToRoadPointReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ToWorldPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ToWorldPoint() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::MapToWorldPointRequest, ::metamoto::services::MapToWorldPointReply>(std::bind(&WithStreamedUnaryMethod_ToWorldPoint<BaseClass>::StreamedToWorldPoint, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ToWorldPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ToWorldPoint(::grpc::ServerContext* context, const ::metamoto::services::MapToWorldPointRequest* request, ::metamoto::services::MapToWorldPointReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedToWorldPoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::MapToWorldPointRequest,::metamoto::services::MapToWorldPointReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHeading : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetHeading() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::MapGetHeadingRequest, ::metamoto::services::MapGetHeadingReply>(std::bind(&WithStreamedUnaryMethod_GetHeading<BaseClass>::StreamedGetHeading, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetHeading() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHeading(::grpc::ServerContext* context, const ::metamoto::services::MapGetHeadingRequest* request, ::metamoto::services::MapGetHeadingReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHeading(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::MapGetHeadingRequest,::metamoto::services::MapGetHeadingReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPath() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::metamoto::services::MapGetPathRequest, ::metamoto::services::MapGetPathReply>(std::bind(&WithStreamedUnaryMethod_GetPath<BaseClass>::StreamedGetPath, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPath(::grpc::ServerContext* context, const ::metamoto::services::MapGetPathRequest* request, ::metamoto::services::MapGetPathReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPath(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::metamoto::services::MapGetPathRequest,::metamoto::services::MapGetPathReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetRoadNetwork<WithStreamedUnaryMethod_ToRoadPoint<WithStreamedUnaryMethod_ToWorldPoint<WithStreamedUnaryMethod_GetHeading<WithStreamedUnaryMethod_GetPath<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetRoadNetwork<WithStreamedUnaryMethod_ToRoadPoint<WithStreamedUnaryMethod_ToWorldPoint<WithStreamedUnaryMethod_GetHeading<WithStreamedUnaryMethod_GetPath<Service > > > > > StreamedService;
};

}  // namespace services
}  // namespace metamoto


#endif  // GRPC_metamoto_2fservices_2fmap_2eproto__INCLUDED
