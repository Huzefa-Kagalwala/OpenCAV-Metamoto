// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/rcs_table.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2frcs_5ftable_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2frcs_5ftable_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/enumerations.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2frcs_5ftable_2eproto 

namespace protobuf_metamoto_2ftypes_2frcs_5ftable_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2frcs_5ftable_2eproto
namespace metamoto {
namespace types {
class RCSTable;
class RCSTableDefaultTypeInternal;
extern RCSTableDefaultTypeInternal _RCSTable_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::RCSTable* Arena::CreateMaybeMessage<::metamoto::types::RCSTable>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

// ===================================================================

class RCSTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.RCSTable) */ {
 public:
  RCSTable();
  virtual ~RCSTable();

  RCSTable(const RCSTable& from);

  inline RCSTable& operator=(const RCSTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RCSTable(RCSTable&& from) noexcept
    : RCSTable() {
    *this = ::std::move(from);
  }

  inline RCSTable& operator=(RCSTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RCSTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RCSTable* internal_default_instance() {
    return reinterpret_cast<const RCSTable*>(
               &_RCSTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RCSTable* other);
  friend void swap(RCSTable& a, RCSTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RCSTable* New() const final {
    return CreateMaybeMessage<RCSTable>(NULL);
  }

  RCSTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RCSTable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RCSTable& from);
  void MergeFrom(const RCSTable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RCSTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float azimuth_angles = 2;
  int azimuth_angles_size() const;
  void clear_azimuth_angles();
  static const int kAzimuthAnglesFieldNumber = 2;
  float azimuth_angles(int index) const;
  void set_azimuth_angles(int index, float value);
  void add_azimuth_angles(float value);
  const ::google::protobuf::RepeatedField< float >&
      azimuth_angles() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_azimuth_angles();

  // repeated float elevation_angles = 3;
  int elevation_angles_size() const;
  void clear_elevation_angles();
  static const int kElevationAnglesFieldNumber = 3;
  float elevation_angles(int index) const;
  void set_elevation_angles(int index, float value);
  void add_elevation_angles(float value);
  const ::google::protobuf::RepeatedField< float >&
      elevation_angles() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_elevation_angles();

  // repeated float rcs_values = 4;
  int rcs_values_size() const;
  void clear_rcs_values();
  static const int kRcsValuesFieldNumber = 4;
  float rcs_values(int index) const;
  void set_rcs_values(int index, float value);
  void add_rcs_values(float value);
  const ::google::protobuf::RepeatedField< float >&
      rcs_values() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_rcs_values();

  // .metamoto.types.ObjectType object_type = 1;
  void clear_object_type();
  static const int kObjectTypeFieldNumber = 1;
  ::metamoto::types::ObjectType object_type() const;
  void set_object_type(::metamoto::types::ObjectType value);

  // @@protoc_insertion_point(class_scope:metamoto.types.RCSTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > azimuth_angles_;
  mutable int _azimuth_angles_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > elevation_angles_;
  mutable int _elevation_angles_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > rcs_values_;
  mutable int _rcs_values_cached_byte_size_;
  int object_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2frcs_5ftable_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RCSTable

// .metamoto.types.ObjectType object_type = 1;
inline void RCSTable::clear_object_type() {
  object_type_ = 0;
}
inline ::metamoto::types::ObjectType RCSTable::object_type() const {
  // @@protoc_insertion_point(field_get:metamoto.types.RCSTable.object_type)
  return static_cast< ::metamoto::types::ObjectType >(object_type_);
}
inline void RCSTable::set_object_type(::metamoto::types::ObjectType value) {
  
  object_type_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.RCSTable.object_type)
}

// repeated float azimuth_angles = 2;
inline int RCSTable::azimuth_angles_size() const {
  return azimuth_angles_.size();
}
inline void RCSTable::clear_azimuth_angles() {
  azimuth_angles_.Clear();
}
inline float RCSTable::azimuth_angles(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.RCSTable.azimuth_angles)
  return azimuth_angles_.Get(index);
}
inline void RCSTable::set_azimuth_angles(int index, float value) {
  azimuth_angles_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.types.RCSTable.azimuth_angles)
}
inline void RCSTable::add_azimuth_angles(float value) {
  azimuth_angles_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.types.RCSTable.azimuth_angles)
}
inline const ::google::protobuf::RepeatedField< float >&
RCSTable::azimuth_angles() const {
  // @@protoc_insertion_point(field_list:metamoto.types.RCSTable.azimuth_angles)
  return azimuth_angles_;
}
inline ::google::protobuf::RepeatedField< float >*
RCSTable::mutable_azimuth_angles() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.RCSTable.azimuth_angles)
  return &azimuth_angles_;
}

// repeated float elevation_angles = 3;
inline int RCSTable::elevation_angles_size() const {
  return elevation_angles_.size();
}
inline void RCSTable::clear_elevation_angles() {
  elevation_angles_.Clear();
}
inline float RCSTable::elevation_angles(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.RCSTable.elevation_angles)
  return elevation_angles_.Get(index);
}
inline void RCSTable::set_elevation_angles(int index, float value) {
  elevation_angles_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.types.RCSTable.elevation_angles)
}
inline void RCSTable::add_elevation_angles(float value) {
  elevation_angles_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.types.RCSTable.elevation_angles)
}
inline const ::google::protobuf::RepeatedField< float >&
RCSTable::elevation_angles() const {
  // @@protoc_insertion_point(field_list:metamoto.types.RCSTable.elevation_angles)
  return elevation_angles_;
}
inline ::google::protobuf::RepeatedField< float >*
RCSTable::mutable_elevation_angles() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.RCSTable.elevation_angles)
  return &elevation_angles_;
}

// repeated float rcs_values = 4;
inline int RCSTable::rcs_values_size() const {
  return rcs_values_.size();
}
inline void RCSTable::clear_rcs_values() {
  rcs_values_.Clear();
}
inline float RCSTable::rcs_values(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.RCSTable.rcs_values)
  return rcs_values_.Get(index);
}
inline void RCSTable::set_rcs_values(int index, float value) {
  rcs_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.types.RCSTable.rcs_values)
}
inline void RCSTable::add_rcs_values(float value) {
  rcs_values_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.types.RCSTable.rcs_values)
}
inline const ::google::protobuf::RepeatedField< float >&
RCSTable::rcs_values() const {
  // @@protoc_insertion_point(field_list:metamoto.types.RCSTable.rcs_values)
  return rcs_values_;
}
inline ::google::protobuf::RepeatedField< float >*
RCSTable::mutable_rcs_values() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.RCSTable.rcs_values)
  return &rcs_values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2frcs_5ftable_2eproto
