// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/scenario.proto

#include "metamoto/types/scenario.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FloatValue;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace protobuf_metamoto_2ftypes_2fasset_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fasset_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Asset;
}  // namespace protobuf_metamoto_2ftypes_2fasset_2eproto
namespace protobuf_metamoto_2ftypes_2fenvironment_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fenvironment_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Environment;
}  // namespace protobuf_metamoto_2ftypes_2fenvironment_2eproto
namespace protobuf_metamoto_2ftypes_2fnormal_5fdistribution_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fnormal_5fdistribution_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NormalDistribution;
}  // namespace protobuf_metamoto_2ftypes_2fnormal_5fdistribution_2eproto
namespace protobuf_metamoto_2ftypes_2fpose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fpose_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Pose;
}  // namespace protobuf_metamoto_2ftypes_2fpose_2eproto
namespace protobuf_metamoto_2ftypes_2frange_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2frange_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Range;
}  // namespace protobuf_metamoto_2ftypes_2frange_2eproto
namespace protobuf_metamoto_2ftypes_2froads_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2froads_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RoadPoint;
}  // namespace protobuf_metamoto_2ftypes_2froads_2eproto
namespace protobuf_metamoto_2ftypes_2fscenario_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DriverModel_BrakingBehavior;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_Intersection_SignalState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_System_Encoder;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_System_Logger;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_System_RayTracer;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_System_Service;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DriverModel;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Event_ProximityTrigger;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Infraction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PedestrianConfiguration;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PedestrianConfiguration_PathPoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Scenario_Intersection_IntersectionState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Scenario_Intersection_Phase;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Scenario_IntersectionsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Scenario_RangesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Scenario_System_ServicesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Scenario_TrafficLight;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Scenario_TrafficLight_Direction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Scenario_TrafficLightsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrafficFlow_LaneSpan;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Event;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Scenario_EgoVehicle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Scenario_Intersection;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrafficFlow;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ParkedVehicle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Scenario_Objectives;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Scenario_Pedestrians;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Scenario_Pedestrians_Distribution;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Scenario_Traffic_Distribution;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_TrafficVehicle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Scenario_System;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fscenario_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Scenario_Traffic;
}  // namespace protobuf_metamoto_2ftypes_2fscenario_2eproto
namespace protobuf_metamoto_2ftypes_2fvector3_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fvector3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3;
}  // namespace protobuf_metamoto_2ftypes_2fvector3_2eproto
namespace protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VehicleInstance;
}  // namespace protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto
namespace protobuf_metamoto_2ftypes_2fversion_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fversion_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Version;
}  // namespace protobuf_metamoto_2ftypes_2fversion_2eproto
namespace protobuf_metamoto_2ftypes_2fwaypoint_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fwaypoint_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Waypoint;
}  // namespace protobuf_metamoto_2ftypes_2fwaypoint_2eproto
namespace metamoto {
namespace types {
class Scenario_System_EncoderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_System_Encoder>
      _instance;
} _Scenario_System_Encoder_default_instance_;
class Scenario_System_LoggerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_System_Logger>
      _instance;
} _Scenario_System_Logger_default_instance_;
class Scenario_System_RayTracerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_System_RayTracer>
      _instance;
} _Scenario_System_RayTracer_default_instance_;
class Scenario_System_ServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_System_Service>
      _instance;
} _Scenario_System_Service_default_instance_;
class Scenario_System_ServicesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_System_ServicesEntry_DoNotUse>
      _instance;
} _Scenario_System_ServicesEntry_DoNotUse_default_instance_;
class Scenario_SystemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_System>
      _instance;
} _Scenario_System_default_instance_;
class Scenario_ObjectivesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_Objectives>
      _instance;
  const ::metamoto::types::Vector3* destination_world_point_;
  const ::metamoto::types::RoadPoint* destination_road_point_;
} _Scenario_Objectives_default_instance_;
class Scenario_EgoVehicleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_EgoVehicle>
      _instance;
} _Scenario_EgoVehicle_default_instance_;
class Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse>
      _instance;
} _Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse_default_instance_;
class Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse>
      _instance;
} _Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse_default_instance_;
class Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse>
      _instance;
} _Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse_default_instance_;
class Scenario_Traffic_DistributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_Traffic_Distribution>
      _instance;
} _Scenario_Traffic_Distribution_default_instance_;
class Scenario_TrafficDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_Traffic>
      _instance;
  ::google::protobuf::int32 num_random_vehicles_;
  float congestion_;
  ::google::protobuf::int32 num_random_parked_vehicles_;
  float parking_fullness_;
} _Scenario_Traffic_default_instance_;
class Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse>
      _instance;
} _Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse_default_instance_;
class Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse>
      _instance;
} _Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse_default_instance_;
class Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse>
      _instance;
} _Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse_default_instance_;
class Scenario_Pedestrians_DistributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_Pedestrians_Distribution>
      _instance;
} _Scenario_Pedestrians_Distribution_default_instance_;
class Scenario_PedestriansDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_Pedestrians>
      _instance;
  ::google::protobuf::int32 num_random_pedestrians_;
  float pedestrian_traffic_;
} _Scenario_Pedestrians_default_instance_;
class Scenario_TrafficLight_DirectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_TrafficLight_Direction>
      _instance;
} _Scenario_TrafficLight_Direction_default_instance_;
class Scenario_TrafficLightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_TrafficLight>
      _instance;
} _Scenario_TrafficLight_default_instance_;
class Scenario_TrafficLightsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_TrafficLightsEntry_DoNotUse>
      _instance;
} _Scenario_TrafficLightsEntry_DoNotUse_default_instance_;
class Scenario_Intersection_SignalStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_Intersection_SignalState>
      _instance;
} _Scenario_Intersection_SignalState_default_instance_;
class Scenario_Intersection_IntersectionStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_Intersection_IntersectionState>
      _instance;
} _Scenario_Intersection_IntersectionState_default_instance_;
class Scenario_Intersection_PhaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_Intersection_Phase>
      _instance;
} _Scenario_Intersection_Phase_default_instance_;
class Scenario_IntersectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_Intersection>
      _instance;
} _Scenario_Intersection_default_instance_;
class Scenario_IntersectionsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_IntersectionsEntry_DoNotUse>
      _instance;
} _Scenario_IntersectionsEntry_DoNotUse_default_instance_;
class Scenario_RangesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario_RangesEntry_DoNotUse>
      _instance;
} _Scenario_RangesEntry_DoNotUse_default_instance_;
class ScenarioDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scenario>
      _instance;
} _Scenario_default_instance_;
class InfractionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Infraction>
      _instance;
} _Infraction_default_instance_;
class DriverModel_BrakingBehaviorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DriverModel_BrakingBehavior>
      _instance;
} _DriverModel_BrakingBehavior_default_instance_;
class DriverModelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DriverModel>
      _instance;
} _DriverModel_default_instance_;
class TrafficFlow_LaneSpanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficFlow_LaneSpan>
      _instance;
} _TrafficFlow_LaneSpan_default_instance_;
class TrafficFlowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficFlow>
      _instance;
} _TrafficFlow_default_instance_;
class TrafficVehicleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficVehicle>
      _instance;
} _TrafficVehicle_default_instance_;
class ParkedVehicleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParkedVehicle>
      _instance;
  const ::metamoto::types::Pose* world_point_;
  const ::metamoto::types::RoadPoint* road_point_;
} _ParkedVehicle_default_instance_;
class PedestrianConfiguration_PathPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PedestrianConfiguration_PathPoint>
      _instance;
} _PedestrianConfiguration_PathPoint_default_instance_;
class PedestrianConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PedestrianConfiguration>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
} _PedestrianConfiguration_default_instance_;
class Event_ProximityTriggerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Event_ProximityTrigger>
      _instance;
} _Event_ProximityTrigger_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Event>
      _instance;
} _Event_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace protobuf_metamoto_2ftypes_2fscenario_2eproto {
static void InitDefaultsScenario_System_Encoder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_System_Encoder_default_instance_;
    new (ptr) ::metamoto::types::Scenario_System_Encoder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Scenario_System_Encoder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_System_Encoder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenario_System_Encoder}, {}};

static void InitDefaultsScenario_System_Logger() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_System_Logger_default_instance_;
    new (ptr) ::metamoto::types::Scenario_System_Logger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Scenario_System_Logger::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_System_Logger =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenario_System_Logger}, {}};

static void InitDefaultsScenario_System_RayTracer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_System_RayTracer_default_instance_;
    new (ptr) ::metamoto::types::Scenario_System_RayTracer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Scenario_System_RayTracer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_System_RayTracer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenario_System_RayTracer}, {}};

static void InitDefaultsScenario_System_Service() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_System_Service_default_instance_;
    new (ptr) ::metamoto::types::Scenario_System_Service();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Scenario_System_Service::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_System_Service =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenario_System_Service}, {}};

static void InitDefaultsScenario_System_ServicesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_System_ServicesEntry_DoNotUse_default_instance_;
    new (ptr) ::metamoto::types::Scenario_System_ServicesEntry_DoNotUse();
  }
  ::metamoto::types::Scenario_System_ServicesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Scenario_System_ServicesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScenario_System_ServicesEntry_DoNotUse}, {
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_System_Service.base,}};

static void InitDefaultsScenario_System() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_System_default_instance_;
    new (ptr) ::metamoto::types::Scenario_System();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Scenario_System::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Scenario_System =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsScenario_System}, {
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_System_Encoder.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_System_Logger.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_System_RayTracer.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_System_ServicesEntry_DoNotUse.base,}};

static void InitDefaultsScenario_Objectives() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_Objectives_default_instance_;
    new (ptr) ::metamoto::types::Scenario_Objectives();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Scenario_Objectives::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Scenario_Objectives =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsScenario_Objectives}, {
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_RoadPoint.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Infraction.base,}};

static void InitDefaultsScenario_EgoVehicle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_EgoVehicle_default_instance_;
    new (ptr) ::metamoto::types::Scenario_EgoVehicle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Scenario_EgoVehicle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Scenario_EgoVehicle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsScenario_EgoVehicle}, {
      &protobuf_metamoto_2ftypes_2fwaypoint_2eproto::scc_info_Waypoint.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_DriverModel.base,}};

static void InitDefaultsScenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse_default_instance_;
    new (ptr) ::metamoto::types::Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse();
  }
  ::metamoto::types::Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse}, {}};

static void InitDefaultsScenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse_default_instance_;
    new (ptr) ::metamoto::types::Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse();
  }
  ::metamoto::types::Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse}, {}};

static void InitDefaultsScenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse_default_instance_;
    new (ptr) ::metamoto::types::Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse();
  }
  ::metamoto::types::Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse}, {}};

static void InitDefaultsScenario_Traffic_Distribution() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_Traffic_Distribution_default_instance_;
    new (ptr) ::metamoto::types::Scenario_Traffic_Distribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Scenario_Traffic_Distribution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Scenario_Traffic_Distribution =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsScenario_Traffic_Distribution}, {
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse.base,}};

static void InitDefaultsScenario_Traffic() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_Traffic_default_instance_;
    new (ptr) ::metamoto::types::Scenario_Traffic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Scenario_Traffic::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Scenario_Traffic =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsScenario_Traffic}, {
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Traffic_Distribution.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_TrafficFlow.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_TrafficVehicle.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_ParkedVehicle.base,}};

static void InitDefaultsScenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse_default_instance_;
    new (ptr) ::metamoto::types::Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse();
  }
  ::metamoto::types::Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse}, {}};

static void InitDefaultsScenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse_default_instance_;
    new (ptr) ::metamoto::types::Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse();
  }
  ::metamoto::types::Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse}, {}};

static void InitDefaultsScenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse_default_instance_;
    new (ptr) ::metamoto::types::Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse();
  }
  ::metamoto::types::Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse}, {}};

static void InitDefaultsScenario_Pedestrians_Distribution() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_Pedestrians_Distribution_default_instance_;
    new (ptr) ::metamoto::types::Scenario_Pedestrians_Distribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Scenario_Pedestrians_Distribution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Scenario_Pedestrians_Distribution =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsScenario_Pedestrians_Distribution}, {
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse.base,}};

static void InitDefaultsScenario_Pedestrians() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_Pedestrians_default_instance_;
    new (ptr) ::metamoto::types::Scenario_Pedestrians();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Scenario_Pedestrians::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Scenario_Pedestrians =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsScenario_Pedestrians}, {
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Pedestrians_Distribution.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_PedestrianConfiguration.base,}};

static void InitDefaultsScenario_TrafficLight_Direction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_TrafficLight_Direction_default_instance_;
    new (ptr) ::metamoto::types::Scenario_TrafficLight_Direction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Scenario_TrafficLight_Direction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Scenario_TrafficLight_Direction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScenario_TrafficLight_Direction}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_FloatValue.base,}};

static void InitDefaultsScenario_TrafficLight() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_TrafficLight_default_instance_;
    new (ptr) ::metamoto::types::Scenario_TrafficLight();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Scenario_TrafficLight::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Scenario_TrafficLight =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScenario_TrafficLight}, {
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_TrafficLight_Direction.base,}};

static void InitDefaultsScenario_TrafficLightsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_TrafficLightsEntry_DoNotUse_default_instance_;
    new (ptr) ::metamoto::types::Scenario_TrafficLightsEntry_DoNotUse();
  }
  ::metamoto::types::Scenario_TrafficLightsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Scenario_TrafficLightsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScenario_TrafficLightsEntry_DoNotUse}, {
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_TrafficLight.base,}};

static void InitDefaultsScenario_Intersection_SignalState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_Intersection_SignalState_default_instance_;
    new (ptr) ::metamoto::types::Scenario_Intersection_SignalState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Scenario_Intersection_SignalState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Scenario_Intersection_SignalState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenario_Intersection_SignalState}, {}};

static void InitDefaultsScenario_Intersection_IntersectionState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_Intersection_IntersectionState_default_instance_;
    new (ptr) ::metamoto::types::Scenario_Intersection_IntersectionState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Scenario_Intersection_IntersectionState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Scenario_Intersection_IntersectionState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScenario_Intersection_IntersectionState}, {
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Intersection_SignalState.base,}};

static void InitDefaultsScenario_Intersection_Phase() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_Intersection_Phase_default_instance_;
    new (ptr) ::metamoto::types::Scenario_Intersection_Phase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Scenario_Intersection_Phase::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Scenario_Intersection_Phase =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScenario_Intersection_Phase}, {
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Intersection_IntersectionState.base,}};

static void InitDefaultsScenario_Intersection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_Intersection_default_instance_;
    new (ptr) ::metamoto::types::Scenario_Intersection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Scenario_Intersection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Scenario_Intersection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsScenario_Intersection}, {
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Intersection_Phase.base,
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsScenario_IntersectionsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_IntersectionsEntry_DoNotUse_default_instance_;
    new (ptr) ::metamoto::types::Scenario_IntersectionsEntry_DoNotUse();
  }
  ::metamoto::types::Scenario_IntersectionsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Scenario_IntersectionsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScenario_IntersectionsEntry_DoNotUse}, {
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Intersection.base,}};

static void InitDefaultsScenario_RangesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_RangesEntry_DoNotUse_default_instance_;
    new (ptr) ::metamoto::types::Scenario_RangesEntry_DoNotUse();
  }
  ::metamoto::types::Scenario_RangesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Scenario_RangesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScenario_RangesEntry_DoNotUse}, {
      &protobuf_metamoto_2ftypes_2frange_2eproto::scc_info_Range.base,}};

static void InitDefaultsScenario() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Scenario_default_instance_;
    new (ptr) ::metamoto::types::Scenario();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Scenario::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<12> scc_info_Scenario =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 12, InitDefaultsScenario}, {
      &protobuf_metamoto_2ftypes_2fversion_2eproto::scc_info_Version.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_System.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Objectives.base,
      &protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_Environment.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_EgoVehicle.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Traffic.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Pedestrians.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_TrafficLightsEntry_DoNotUse.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Event.base,
      &protobuf_metamoto_2ftypes_2fasset_2eproto::scc_info_Asset.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_IntersectionsEntry_DoNotUse.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_RangesEntry_DoNotUse.base,}};

static void InitDefaultsInfraction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Infraction_default_instance_;
    new (ptr) ::metamoto::types::Infraction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Infraction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Infraction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInfraction}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_FloatValue.base,}};

static void InitDefaultsDriverModel_BrakingBehavior() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_DriverModel_BrakingBehavior_default_instance_;
    new (ptr) ::metamoto::types::DriverModel_BrakingBehavior();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::DriverModel_BrakingBehavior::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DriverModel_BrakingBehavior =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDriverModel_BrakingBehavior}, {}};

static void InitDefaultsDriverModel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_DriverModel_default_instance_;
    new (ptr) ::metamoto::types::DriverModel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::DriverModel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DriverModel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDriverModel}, {
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_DriverModel_BrakingBehavior.base,}};

static void InitDefaultsTrafficFlow_LaneSpan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_TrafficFlow_LaneSpan_default_instance_;
    new (ptr) ::metamoto::types::TrafficFlow_LaneSpan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::TrafficFlow_LaneSpan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrafficFlow_LaneSpan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrafficFlow_LaneSpan}, {
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsTrafficFlow() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_TrafficFlow_default_instance_;
    new (ptr) ::metamoto::types::TrafficFlow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::TrafficFlow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TrafficFlow =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTrafficFlow}, {
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_TrafficFlow_LaneSpan.base,
      &protobuf_metamoto_2ftypes_2fnormal_5fdistribution_2eproto::scc_info_NormalDistribution.base,}};

static void InitDefaultsTrafficVehicle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_TrafficVehicle_default_instance_;
    new (ptr) ::metamoto::types::TrafficVehicle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::TrafficVehicle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TrafficVehicle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTrafficVehicle}, {
      &protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::scc_info_VehicleInstance.base,
      &protobuf_metamoto_2ftypes_2fwaypoint_2eproto::scc_info_Waypoint.base,
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_DriverModel.base,}};

static void InitDefaultsParkedVehicle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_ParkedVehicle_default_instance_;
    new (ptr) ::metamoto::types::ParkedVehicle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::ParkedVehicle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ParkedVehicle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsParkedVehicle}, {
      &protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::scc_info_VehicleInstance.base,
      &protobuf_metamoto_2ftypes_2fpose_2eproto::scc_info_Pose.base,
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_RoadPoint.base,}};

static void InitDefaultsPedestrianConfiguration_PathPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_PedestrianConfiguration_PathPoint_default_instance_;
    new (ptr) ::metamoto::types::PedestrianConfiguration_PathPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::PedestrianConfiguration_PathPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PedestrianConfiguration_PathPoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPedestrianConfiguration_PathPoint}, {
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsPedestrianConfiguration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_PedestrianConfiguration_default_instance_;
    new (ptr) ::metamoto::types::PedestrianConfiguration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::PedestrianConfiguration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PedestrianConfiguration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPedestrianConfiguration}, {
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_PedestrianConfiguration_PathPoint.base,}};

static void InitDefaultsEvent_ProximityTrigger() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Event_ProximityTrigger_default_instance_;
    new (ptr) ::metamoto::types::Event_ProximityTrigger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Event_ProximityTrigger::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Event_ProximityTrigger =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEvent_ProximityTrigger}, {
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Event_default_instance_;
    new (ptr) ::metamoto::types::Event();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Event::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Event =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEvent}, {
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Event_ProximityTrigger.base,
      &protobuf_metamoto_2ftypes_2fwaypoint_2eproto::scc_info_Waypoint.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_System_Encoder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_System_Logger.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_System_RayTracer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_System_Service.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_System_ServicesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_System.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_Objectives.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_EgoVehicle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_Traffic_Distribution.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_Traffic.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_Pedestrians_Distribution.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_Pedestrians.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_TrafficLight_Direction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_TrafficLight.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_TrafficLightsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_Intersection_SignalState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_Intersection_IntersectionState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_Intersection_Phase.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_Intersection.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_IntersectionsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario_RangesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scenario.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Infraction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DriverModel_BrakingBehavior.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DriverModel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficFlow_LaneSpan.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficFlow.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficVehicle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ParkedVehicle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PedestrianConfiguration_PathPoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PedestrianConfiguration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Event_ProximityTrigger.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Event.base);
}

::google::protobuf::Metadata file_level_metadata[39];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_Encoder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_Encoder, ffmpeg_exe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_Encoder, ffmpeg_codec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_Encoder, ffmpeg_codec_options_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_Logger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_Logger, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_Logger, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_Logger, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_Logger, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_RayTracer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_RayTracer, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_RayTracer, file_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_RayTracer, file_threshold_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_Service, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_Service, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_Service, external_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_ServicesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_ServicesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_ServicesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System_ServicesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System, random_seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System, record_ground_truth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System, profile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System, physics_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System, encoder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System, logger_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System, ray_tracer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System, services_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System, camera_lod_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_System, ray_tracer_lod_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Objectives, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Objectives, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Objectives, duration_),
  offsetof(::metamoto::types::Scenario_ObjectivesDefaultTypeInternal, destination_world_point_),
  offsetof(::metamoto::types::Scenario_ObjectivesDefaultTypeInternal, destination_road_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Objectives, destination_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Objectives, infractions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Objectives, random_failure_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Objectives, monitor_all_vehicles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Objectives, destination_oneof_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_EgoVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_EgoVehicle, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_EgoVehicle, driver_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_EgoVehicle, random_spawn_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic_Distribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic_Distribution, model_weights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic_Distribution, type_weights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic_Distribution, paint_weights_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic, distribution_),
  offsetof(::metamoto::types::Scenario_TrafficDefaultTypeInternal, num_random_vehicles_),
  offsetof(::metamoto::types::Scenario_TrafficDefaultTypeInternal, congestion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic, flows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic, vehicles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic, parked_distribution_),
  offsetof(::metamoto::types::Scenario_TrafficDefaultTypeInternal, num_random_parked_vehicles_),
  offsetof(::metamoto::types::Scenario_TrafficDefaultTypeInternal, parking_fullness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic, parked_vehicles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic, random_oneof_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Traffic, random_parked_oneof_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians_Distribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians_Distribution, name_weights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians_Distribution, type_weights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians_Distribution, state_weights_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians, distribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians, pedestrians_),
  offsetof(::metamoto::types::Scenario_PedestriansDefaultTypeInternal, num_random_pedestrians_),
  offsetof(::metamoto::types::Scenario_PedestriansDefaultTypeInternal, pedestrian_traffic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Pedestrians, random_oneof_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_TrafficLight_Direction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_TrafficLight_Direction, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_TrafficLight_Direction, green_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_TrafficLight_Direction, yellow_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_TrafficLight_Direction, crosswalk_walk_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_TrafficLight_Direction, synchronize_with_direction_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_TrafficLight, directions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_TrafficLight, all_red_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_TrafficLight, start_green_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_TrafficLight, start_cycle_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_TrafficLightsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_TrafficLightsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_TrafficLightsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_TrafficLightsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Intersection_SignalState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Intersection_SignalState, signal_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Intersection_SignalState, state_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Intersection_IntersectionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Intersection_IntersectionState, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Intersection_IntersectionState, signal_states_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Intersection_Phase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Intersection_Phase, intersection_states_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Intersection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Intersection, phases_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Intersection, starting_phase_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Intersection, starting_duration_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Intersection, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_Intersection, vector_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_IntersectionsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_IntersectionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_IntersectionsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_IntersectionsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_RangesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_RangesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_RangesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario_RangesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario, scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario, read_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario, system_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario, objectives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario, environment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario, ego_vehicle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario, traffic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario, pedestrians_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario, traffic_lights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario, events_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario, assets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario, ego_vehicles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario, intersections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Scenario, ranges_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Infraction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Infraction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Infraction, fail_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Infraction, stop_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Infraction, other_values_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::DriverModel_BrakingBehavior, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::DriverModel_BrakingBehavior, coast_deceleration_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::DriverModel_BrakingBehavior, coast_speed_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::DriverModel_BrakingBehavior, min_brake_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::DriverModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::DriverModel, collision_avoidance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::DriverModel, speed_coefficient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::DriverModel, obeys_lights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::DriverModel, random_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::DriverModel, lane_change_optimization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::DriverModel, lane_center_deviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::DriverModel, timegap_multiplier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::DriverModel, braking_behavior_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TrafficFlow_LaneSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TrafficFlow_LaneSpan, road_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TrafficFlow_LaneSpan, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TrafficFlow_LaneSpan, lanes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TrafficFlow_LaneSpan, positions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TrafficFlow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TrafficFlow, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TrafficFlow, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TrafficFlow, sinks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TrafficFlow, generation_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TrafficFlow, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TrafficFlow, populate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TrafficVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TrafficVehicle, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TrafficVehicle, instance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TrafficVehicle, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TrafficVehicle, driver_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TrafficVehicle, flow_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::ParkedVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::ParkedVehicle, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::ParkedVehicle, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::ParkedVehicle, instance_),
  offsetof(::metamoto::types::ParkedVehicleDefaultTypeInternal, world_point_),
  offsetof(::metamoto::types::ParkedVehicleDefaultTypeInternal, road_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::ParkedVehicle, point_oneof_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::PedestrianConfiguration_PathPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::PedestrianConfiguration_PathPoint, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::PedestrianConfiguration_PathPoint, state_variant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::PedestrianConfiguration_PathPoint, target_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::PedestrianConfiguration_PathPoint, wait_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::PedestrianConfiguration_PathPoint, pathing_behaviour_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::PedestrianConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::PedestrianConfiguration, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::PedestrianConfiguration, display_name_),
  offsetof(::metamoto::types::PedestrianConfigurationDefaultTypeInternal, name_),
  offsetof(::metamoto::types::PedestrianConfigurationDefaultTypeInternal, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::PedestrianConfiguration, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::PedestrianConfiguration, random_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::PedestrianConfiguration, instance_oneof_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Event_ProximityTrigger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Event_ProximityTrigger, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Event_ProximityTrigger, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Event_ProximityTrigger, ego_vehicle_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Event, object_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Event, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Event, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Event, trigger_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Event, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Event, secondary_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Event, payload_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Event, payload_float_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Event, waypoints_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::types::Scenario_System_Encoder)},
  { 8, -1, sizeof(::metamoto::types::Scenario_System_Logger)},
  { 17, -1, sizeof(::metamoto::types::Scenario_System_RayTracer)},
  { 25, -1, sizeof(::metamoto::types::Scenario_System_Service)},
  { 32, 39, sizeof(::metamoto::types::Scenario_System_ServicesEntry_DoNotUse)},
  { 41, -1, sizeof(::metamoto::types::Scenario_System)},
  { 57, -1, sizeof(::metamoto::types::Scenario_Objectives)},
  { 70, -1, sizeof(::metamoto::types::Scenario_EgoVehicle)},
  { 78, 85, sizeof(::metamoto::types::Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse)},
  { 87, 94, sizeof(::metamoto::types::Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse)},
  { 96, 103, sizeof(::metamoto::types::Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse)},
  { 105, -1, sizeof(::metamoto::types::Scenario_Traffic_Distribution)},
  { 113, -1, sizeof(::metamoto::types::Scenario_Traffic)},
  { 130, 137, sizeof(::metamoto::types::Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse)},
  { 139, 146, sizeof(::metamoto::types::Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse)},
  { 148, 155, sizeof(::metamoto::types::Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse)},
  { 157, -1, sizeof(::metamoto::types::Scenario_Pedestrians_Distribution)},
  { 165, -1, sizeof(::metamoto::types::Scenario_Pedestrians)},
  { 176, -1, sizeof(::metamoto::types::Scenario_TrafficLight_Direction)},
  { 186, -1, sizeof(::metamoto::types::Scenario_TrafficLight)},
  { 195, 202, sizeof(::metamoto::types::Scenario_TrafficLightsEntry_DoNotUse)},
  { 204, -1, sizeof(::metamoto::types::Scenario_Intersection_SignalState)},
  { 211, -1, sizeof(::metamoto::types::Scenario_Intersection_IntersectionState)},
  { 218, -1, sizeof(::metamoto::types::Scenario_Intersection_Phase)},
  { 224, -1, sizeof(::metamoto::types::Scenario_Intersection)},
  { 234, 241, sizeof(::metamoto::types::Scenario_IntersectionsEntry_DoNotUse)},
  { 243, 250, sizeof(::metamoto::types::Scenario_RangesEntry_DoNotUse)},
  { 252, -1, sizeof(::metamoto::types::Scenario)},
  { 275, -1, sizeof(::metamoto::types::Infraction)},
  { 284, -1, sizeof(::metamoto::types::DriverModel_BrakingBehavior)},
  { 292, -1, sizeof(::metamoto::types::DriverModel)},
  { 305, -1, sizeof(::metamoto::types::TrafficFlow_LaneSpan)},
  { 314, -1, sizeof(::metamoto::types::TrafficFlow)},
  { 325, -1, sizeof(::metamoto::types::TrafficVehicle)},
  { 335, -1, sizeof(::metamoto::types::ParkedVehicle)},
  { 345, -1, sizeof(::metamoto::types::PedestrianConfiguration_PathPoint)},
  { 355, -1, sizeof(::metamoto::types::PedestrianConfiguration)},
  { 366, -1, sizeof(::metamoto::types::Event_ProximityTrigger)},
  { 374, -1, sizeof(::metamoto::types::Event)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_System_Encoder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_System_Logger_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_System_RayTracer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_System_Service_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_System_ServicesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_System_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_Objectives_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_EgoVehicle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_Traffic_Distribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_Traffic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_Pedestrians_Distribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_Pedestrians_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_TrafficLight_Direction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_TrafficLight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_TrafficLightsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_Intersection_SignalState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_Intersection_IntersectionState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_Intersection_Phase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_Intersection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_IntersectionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_RangesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Scenario_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Infraction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_DriverModel_BrakingBehavior_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_DriverModel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_TrafficFlow_LaneSpan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_TrafficFlow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_TrafficVehicle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_ParkedVehicle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_PedestrianConfiguration_PathPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_PedestrianConfiguration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Event_ProximityTrigger_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Event_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/types/scenario.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 39);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035metamoto/types/scenario.proto\022\016metamot"
      "o.types\032\036google/protobuf/wrappers.proto\032"
      "\032metamoto/types/asset.proto\032 metamoto/ty"
      "pes/environment.proto\032(metamoto/types/no"
      "rmal_distribution.proto\032\037metamoto/types/"
      "pedestrian.proto\032\031metamoto/types/pose.pr"
      "oto\032\032metamoto/types/range.proto\032\032metamot"
      "o/types/roads.proto\032\034metamoto/types/vect"
      "or3.proto\032%metamoto/types/vehicle_instan"
      "ce.proto\032\034metamoto/types/version.proto\032\035"
      "metamoto/types/waypoint.proto\"\277&\n\010Scenar"
      "io\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\r\n\005scene\030\003 "
      "\001(\t\022\023\n\013description\030\004 \001(\t\022\021\n\tread_only\030\005 "
      "\001(\010\022(\n\007version\030\021 \001(\0132\027.metamoto.types.Ve"
      "rsion\022/\n\006system\030\006 \001(\0132\037.metamoto.types.S"
      "cenario.System\0227\n\nobjectives\030\007 \001(\0132#.met"
      "amoto.types.Scenario.Objectives\0220\n\013envir"
      "onment\030\010 \001(\0132\033.metamoto.types.Environmen"
      "t\0228\n\013ego_vehicle\030\t \001(\0132#.metamoto.types."
      "Scenario.EgoVehicle\0221\n\007traffic\030\n \001(\0132 .m"
      "etamoto.types.Scenario.Traffic\0229\n\013pedest"
      "rians\030\013 \001(\0132$.metamoto.types.Scenario.Pe"
      "destrians\022C\n\016traffic_lights\030\014 \003(\0132+.meta"
      "moto.types.Scenario.TrafficLightsEntry\022%"
      "\n\006events\030\r \003(\0132\025.metamoto.types.Event\022%\n"
      "\006assets\030\016 \003(\0132\025.metamoto.types.Asset\0229\n\014"
      "ego_vehicles\030\017 \003(\0132#.metamoto.types.Scen"
      "ario.EgoVehicle\022B\n\rintersections\030\020 \003(\0132+"
      ".metamoto.types.Scenario.IntersectionsEn"
      "try\0224\n\006ranges\030d \003(\0132$.metamoto.types.Sce"
      "nario.RangesEntry\032\223\007\n\006System\022\023\n\013random_s"
      "eed\030\001 \001(\005\022\014\n\004host\030\002 \001(\t\022\033\n\023record_ground"
      "_truth\030\003 \001(\010\022\017\n\007profile\030\004 \001(\010\022\024\n\014physics"
      "_rate\030\005 \001(\002\0228\n\007encoder\030\006 \001(\0132\'.metamoto."
      "types.Scenario.System.Encoder\0226\n\006logger\030"
      "\007 \001(\0132&.metamoto.types.Scenario.System.L"
      "ogger\022=\n\nray_tracer\030\010 \001(\0132).metamoto.typ"
      "es.Scenario.System.RayTracer\022\?\n\010services"
      "\030\t \003(\0132-.metamoto.types.Scenario.System."
      "ServicesEntry\022A\n\ncamera_lod\030\n \001(\0162-.meta"
      "moto.types.Scenario.System.LevelOfDetail"
      "\022E\n\016ray_tracer_lod\030\013 \001(\0162-.metamoto.type"
      "s.Scenario.System.LevelOfDetail\032Q\n\007Encod"
      "er\022\022\n\nffmpeg_exe\030\001 \001(\t\022\024\n\014ffmpeg_codec\030\002"
      " \001(\t\022\034\n\024ffmpeg_codec_options\030\003 \001(\t\032G\n\006Lo"
      "gger\022\014\n\004mode\030\001 \001(\t\022\020\n\010filename\030\002 \001(\t\022\017\n\007"
      "address\030\003 \001(\t\022\014\n\004port\030\004 \001(\005\032C\n\tRayTracer"
      "\022\013\n\003url\030\001 \001(\t\022\021\n\tfile_mode\030\002 \001(\010\022\026\n\016file"
      "_threshold\030\003 \001(\005\032.\n\007Service\022\014\n\004port\030\001 \001("
      "\005\022\025\n\rexternal_port\030\002 \001(\005\032X\n\rServicesEntr"
      "y\022\013\n\003key\030\001 \001(\t\0226\n\005value\030\002 \001(\0132\'.metamoto"
      ".types.Scenario.System.Service:\0028\001\";\n\rLe"
      "velOfDetail\022\013\n\007DYNAMIC\020\000\022\010\n\004HIGH\020\001\022\n\n\006ME"
      "DIUM\020\002\022\007\n\003LOW\020\003\032\273\002\n\nObjectives\022\020\n\010durati"
      "on\030\001 \001(\002\022:\n\027destination_world_point\030\002 \001("
      "\0132\027.metamoto.types.Vector3H\000\022;\n\026destinat"
      "ion_road_point\030\003 \001(\0132\031.metamoto.types.Ro"
      "adPointH\000\022\032\n\022destination_radius\030\004 \001(\002\022/\n"
      "\013infractions\030\005 \003(\0132\032.metamoto.types.Infr"
      "action\022\"\n\032random_failure_probability\030\006 \001"
      "(\002\022\034\n\024monitor_all_vehicles\030\007 \001(\010B\023\n\021dest"
      "ination_oneof\032\203\001\n\nEgoVehicle\022&\n\004path\030\001 \003"
      "(\0132\030.metamoto.types.Waypoint\0221\n\014driver_m"
      "odel\030\002 \001(\0132\033.metamoto.types.DriverModel\022"
      "\032\n\022random_spawn_point\030\003 \001(\010\032\254\007\n\007Traffic\022"
      "\'\n\006region\030\001 \003(\0132\027.metamoto.types.Vector3"
      "\022C\n\014distribution\030\002 \001(\0132-.metamoto.types."
      "Scenario.Traffic.Distribution\022\035\n\023num_ran"
      "dom_vehicles\030\003 \001(\005H\000\022\024\n\ncongestion\030\004 \001(\002"
      "H\000\022*\n\005flows\030\005 \003(\0132\033.metamoto.types.Traff"
      "icFlow\0220\n\010vehicles\030\006 \003(\0132\036.metamoto.type"
      "s.TrafficVehicle\022J\n\023parked_distribution\030"
      "\007 \001(\0132-.metamoto.types.Scenario.Traffic."
      "Distribution\022$\n\032num_random_parked_vehicl"
      "es\030\010 \001(\005H\001\022\032\n\020parking_fullness\030\t \001(\002H\001\0226"
      "\n\017parked_vehicles\030\n \003(\0132\035.metamoto.types"
      ".ParkedVehicle\032\262\003\n\014Distribution\022V\n\rmodel"
      "_weights\030\001 \003(\0132\?.metamoto.types.Scenario"
      ".Traffic.Distribution.ModelWeightsEntry\022"
      "T\n\014type_weights\030\002 \003(\0132>.metamoto.types.S"
      "cenario.Traffic.Distribution.TypeWeights"
      "Entry\022V\n\rpaint_weights\030\003 \003(\0132\?.metamoto."
      "types.Scenario.Traffic.Distribution.Pain"
      "tWeightsEntry\0323\n\021ModelWeightsEntry\022\013\n\003ke"
      "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001\0322\n\020TypeWeight"
      "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001\0323"
      "\n\021PaintWeightsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
      "e\030\002 \001(\002:\0028\001B\016\n\014random_oneofB\025\n\023random_pa"
      "rked_oneof\032\313\005\n\013Pedestrians\022\'\n\006region\030\001 \003"
      "(\0132\027.metamoto.types.Vector3\022G\n\014distribut"
      "ion\030\002 \001(\01321.metamoto.types.Scenario.Pede"
      "strians.Distribution\022<\n\013pedestrians\030\003 \003("
      "\0132\'.metamoto.types.PedestrianConfigurati"
      "on\022 \n\026num_random_pedestrians\030\004 \001(\005H\000\022\034\n\022"
      "pedestrian_traffic\030\005 \001(\002H\000\032\273\003\n\014Distribut"
      "ion\022X\n\014name_weights\030\001 \003(\0132B.metamoto.typ"
      "es.Scenario.Pedestrians.Distribution.Nam"
      "eWeightsEntry\022X\n\014type_weights\030\002 \003(\0132B.me"
      "tamoto.types.Scenario.Pedestrians.Distri"
      "bution.TypeWeightsEntry\022Z\n\rstate_weights"
      "\030\003 \003(\0132C.metamoto.types.Scenario.Pedestr"
      "ians.Distribution.StateWeightsEntry\0322\n\020N"
      "ameWeightsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
      "\001(\002:\0028\001\0322\n\020TypeWeightsEntry\022\013\n\003key\030\001 \001(\t"
      "\022\r\n\005value\030\002 \001(\002:\0028\001\0323\n\021StateWeightsEntry"
      "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001B\016\n\014rand"
      "om_oneof\032\202\003\n\014TrafficLight\022C\n\ndirections\030"
      "\001 \003(\0132/.metamoto.types.Scenario.TrafficL"
      "ight.Direction\022\024\n\014all_red_time\030\002 \001(\002\022\035\n\025"
      "start_green_direction\030\003 \001(\t\022\032\n\022start_cyc"
      "le_offset\030\004 \001(\002\032\333\001\n\tDirection\022\n\n\002id\030\001 \001("
      "\t\022/\n\ngreen_time\030\002 \001(\0132\033.google.protobuf."
      "FloatValue\0220\n\013yellow_time\030\003 \001(\0132\033.google"
      ".protobuf.FloatValue\0228\n\023crosswalk_walk_t"
      "ime\030\004 \001(\0132\033.google.protobuf.FloatValue\022%"
      "\n\035synchronize_with_direction_id\030\005 \001(\t\032[\n"
      "\022TrafficLightsEntry\022\013\n\003key\030\001 \001(\t\0224\n\005valu"
      "e\030\002 \001(\0132%.metamoto.types.Scenario.Traffi"
      "cLight:\0028\001\032\317\003\n\014Intersection\022;\n\006phases\030\001 "
      "\003(\0132+.metamoto.types.Scenario.Intersecti"
      "on.Phase\022\034\n\024starting_phase_index\030\002 \001(\005\022 "
      "\n\030starting_duration_offset\030\003 \001(\002\022)\n\010posi"
      "tion\030\004 \001(\0132\027.metamoto.types.Vector3\022\021\n\tv"
      "ector_id\030\005 \001(\t\0324\n\013SignalState\022\021\n\tsignal_"
      "id\030\001 \001(\t\022\022\n\nstate_name\030\002 \001(\t\032o\n\021Intersec"
      "tionState\022\020\n\010duration\030\001 \001(\002\022H\n\rsignal_st"
      "ates\030\002 \003(\01321.metamoto.types.Scenario.Int"
      "ersection.SignalState\032]\n\005Phase\022T\n\023inters"
      "ection_states\030\001 \003(\01327.metamoto.types.Sce"
      "nario.Intersection.IntersectionState\032[\n\022"
      "IntersectionsEntry\022\013\n\003key\030\001 \001(\t\0224\n\005value"
      "\030\002 \001(\0132%.metamoto.types.Scenario.Interse"
      "ction:\0028\001\032D\n\013RangesEntry\022\013\n\003key\030\001 \001(\t\022$\n"
      "\005value\030\002 \001(\0132\025.metamoto.types.Range:\0028\001\""
      "\207\004\n\nInfraction\022-\n\004type\030\001 \001(\0162\037.metamoto."
      "types.Infraction.Type\022/\n\nfail_value\030\002 \001("
      "\0132\033.google.protobuf.FloatValue\022/\n\nstop_v"
      "alue\030\003 \001(\0132\033.google.protobuf.FloatValue\022"
      "1\n\014other_values\030\004 \003(\0132\033.google.protobuf."
      "FloatValue\"\264\002\n\004Type\022\013\n\007UNKNOWN\020\000\022\t\n\005OTHE"
      "R\020\001\022\025\n\021VEHICLE_COLLISION\020\002\022\030\n\024PEDESTRIAN"
      "_COLLISION\020\003\022\031\n\025ENVIRONMENT_COLLISION\020\004\022"
      "\026\n\022OBSTACLE_COLLISION\020\005\022\021\n\rTRAFFIC_LIGHT"
      "\020\006\022\r\n\tSTOP_SIGN\020\007\022\017\n\013SPEED_LIMIT\020\010\022\016\n\nHA"
      "RD_BRAKE\020\t\022\r\n\tWRONG_WAY\020\n\022\014\n\010OFF_ROAD\020\013\022"
      "\024\n\020EXTERNAL_WARNING\020\014\022\024\n\020EXTERNAL_FAILUR"
      "E\020\r\022\021\n\rEXTERNAL_PASS\020\016\022\021\n\rEXTERNAL_STOP\020"
      "\017\"\377\002\n\013DriverModel\022\033\n\023collision_avoidance"
      "\030\001 \001(\002\022\031\n\021speed_coefficient\030\002 \001(\002\022\024\n\014obe"
      "ys_lights\030\003 \001(\010\022\023\n\013random_path\030\004 \001(\010\022 \n\030"
      "lane_change_optimization\030\005 \001(\002\022\035\n\025lane_c"
      "enter_deviation\030\006 \001(\002\022\032\n\022timegap_multipl"
      "ier\030\007 \001(\002\022E\n\020braking_behavior\030\t \001(\0132+.me"
      "tamoto.types.DriverModel.BrakingBehavior"
      "\032i\n\017BrakingBehavior\022$\n\034coast_deceleratio"
      "n_threshold\030\007 \001(\002\022\035\n\025coast_speed_thresho"
      "ld\030\001 \001(\002\022\021\n\tmin_brake\030\002 \001(\002\"\305\002\n\013TrafficF"
      "low\022\n\n\002id\030\001 \001(\005\0224\n\006source\030\002 \001(\0132$.metamo"
      "to.types.TrafficFlow.LaneSpan\0223\n\005sinks\030\003"
      " \003(\0132$.metamoto.types.TrafficFlow.LaneSp"
      "an\022;\n\017generation_rate\030\004 \001(\0132\".metamoto.t"
      "ypes.NormalDistribution\022\r\n\005speed\030\005 \001(\002\022\020"
      "\n\010populate\030\006 \001(\010\032a\n\010LaneSpan\022\017\n\007road_id\030"
      "\001 \001(\t\022\t\n\001s\030\002 \001(\002\022\r\n\005lanes\030\003 \003(\005\022*\n\tposit"
      "ions\030\004 \003(\0132\027.metamoto.types.Vector3\"\305\001\n\016"
      "TrafficVehicle\022\024\n\014display_name\030\001 \001(\t\0221\n\010"
      "instance\030\002 \001(\0132\037.metamoto.types.VehicleI"
      "nstance\022&\n\004path\030\003 \003(\0132\030.metamoto.types.W"
      "aypoint\0221\n\014driver_model\030\004 \001(\0132\033.metamoto"
      ".types.DriverModel\022\017\n\007flow_id\030\005 \001(\005\"\305\001\n\r"
      "ParkedVehicle\022\024\n\014display_name\030\001 \001(\t\0221\n\010i"
      "nstance\030\002 \001(\0132\037.metamoto.types.VehicleIn"
      "stance\022+\n\013world_point\030\003 \001(\0132\024.metamoto.t"
      "ypes.PoseH\000\022/\n\nroad_point\030\004 \001(\0132\031.metamo"
      "to.types.RoadPointH\000B\r\n\013point_oneof\"\343\004\n\027"
      "PedestrianConfiguration\022\024\n\014display_name\030"
      "\001 \001(\t\022\016\n\004name\030\002 \001(\tH\000\022/\n\004type\030\003 \001(\0162\037.me"
      "tamoto.types.Pedestrian.TypeH\000\022\?\n\004path\030\004"
      " \003(\01321.metamoto.types.PedestrianConfigur"
      "ation.PathPoint\022\023\n\013random_path\030\005 \001(\010\032\367\001\n"
      "\tPathPoint\022<\n\005state\030\001 \001(\0162-.metamoto.typ"
      "es.PedestrianConfiguration.State\022\025\n\rstat"
      "e_variant\030\002 \001(\r\022-\n\014target_point\030\003 \001(\0132\027."
      "metamoto.types.Vector3\022\021\n\twait_time\030\004 \001("
      "\002\022S\n\021pathing_behaviour\030\005 \001(\01628.metamoto."
      "types.PedestrianConfiguration.PathingBeh"
      "aviour\"Z\n\005State\022\021\n\rSTATE_UNKNOWN\020\000\022\017\n\013ST"
      "ATE_OTHER\020\001\022\010\n\004IDLE\020\002\022\010\n\004WALK\020\003\022\007\n\003RUN\020\004"
      "\022\020\n\014RUN_IN_PLACE\020\005\"3\n\020PathingBehaviour\022\014"
      "\n\010STANDARD\020\000\022\021\n\rUNCONSTRAINED\020\001B\020\n\016insta"
      "nce_oneof\"\254\005\n\005Event\0225\n\013object_type\030\001 \001(\016"
      "2 .metamoto.types.Event.ObjectType\022,\n\006ac"
      "tion\030\002 \001(\0162\034.metamoto.types.Event.Action"
      "\022\014\n\004time\030\003 \001(\001\0227\n\007trigger\030\004 \001(\0132&.metamo"
      "to.types.Event.ProximityTrigger\022\n\n\002id\030\005 "
      "\001(\t\022\024\n\014secondary_id\030\006 \001(\t\022\026\n\016payload_str"
      "ing\030\007 \003(\t\022\025\n\rpayload_float\030\010 \003(\002\022+\n\twayp"
      "oints\030\t \003(\0132\030.metamoto.types.Waypoint\032h\n"
      "\020ProximityTrigger\022)\n\010location\030\001 \001(\0132\027.me"
      "tamoto.types.Vector3\022\016\n\006radius\030\002 \001(\002\022\031\n\021"
      "ego_vehicle_index\030\003 \001(\005\"\246\001\n\nObjectType\022\020"
      "\n\014OBJECT_OTHER\020\000\022\n\n\006SENSOR\020\001\022\016\n\nCONTROLL"
      "ER\020\002\022\017\n\013EGO_VEHICLE\020\003\022\023\n\017TRAFFIC_VEHICLE"
      "\020\004\022\020\n\014TRAFFIC_FLOW\020\005\022\016\n\nPEDESTRIAN\020\006\022\021\n\r"
      "TRAFFIC_LIGHT\020\007\022\017\n\013ENVIRONMENT\020\010\"f\n\006Acti"
      "on\022\020\n\014ACTION_OTHER\020\000\022\014\n\010ACTIVATE\020\001\022\016\n\nDE"
      "ACTIVATE\020\002\022\n\n\006CREATE\020\003\022\n\n\006REMOVE\020\004\022\n\n\006MO"
      "DIFY\020\005\022\010\n\004SEND\020\006B\021\252\002\016Metamoto.Typesb\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8323);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/types/scenario.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fasset_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fnormal_5fdistribution_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fpedestrian_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fpose_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2frange_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2froads_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fvector3_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fversion_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fwaypoint_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2ftypes_2fscenario_2eproto
namespace metamoto {
namespace types {
const ::google::protobuf::EnumDescriptor* Scenario_System_LevelOfDetail_descriptor() {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_enum_descriptors[0];
}
bool Scenario_System_LevelOfDetail_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Scenario_System_LevelOfDetail Scenario_System::DYNAMIC;
const Scenario_System_LevelOfDetail Scenario_System::HIGH;
const Scenario_System_LevelOfDetail Scenario_System::MEDIUM;
const Scenario_System_LevelOfDetail Scenario_System::LOW;
const Scenario_System_LevelOfDetail Scenario_System::LevelOfDetail_MIN;
const Scenario_System_LevelOfDetail Scenario_System::LevelOfDetail_MAX;
const int Scenario_System::LevelOfDetail_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Infraction_Type_descriptor() {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_enum_descriptors[1];
}
bool Infraction_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Infraction_Type Infraction::UNKNOWN;
const Infraction_Type Infraction::OTHER;
const Infraction_Type Infraction::VEHICLE_COLLISION;
const Infraction_Type Infraction::PEDESTRIAN_COLLISION;
const Infraction_Type Infraction::ENVIRONMENT_COLLISION;
const Infraction_Type Infraction::OBSTACLE_COLLISION;
const Infraction_Type Infraction::TRAFFIC_LIGHT;
const Infraction_Type Infraction::STOP_SIGN;
const Infraction_Type Infraction::SPEED_LIMIT;
const Infraction_Type Infraction::HARD_BRAKE;
const Infraction_Type Infraction::WRONG_WAY;
const Infraction_Type Infraction::OFF_ROAD;
const Infraction_Type Infraction::EXTERNAL_WARNING;
const Infraction_Type Infraction::EXTERNAL_FAILURE;
const Infraction_Type Infraction::EXTERNAL_PASS;
const Infraction_Type Infraction::EXTERNAL_STOP;
const Infraction_Type Infraction::Type_MIN;
const Infraction_Type Infraction::Type_MAX;
const int Infraction::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PedestrianConfiguration_State_descriptor() {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_enum_descriptors[2];
}
bool PedestrianConfiguration_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PedestrianConfiguration_State PedestrianConfiguration::STATE_UNKNOWN;
const PedestrianConfiguration_State PedestrianConfiguration::STATE_OTHER;
const PedestrianConfiguration_State PedestrianConfiguration::IDLE;
const PedestrianConfiguration_State PedestrianConfiguration::WALK;
const PedestrianConfiguration_State PedestrianConfiguration::RUN;
const PedestrianConfiguration_State PedestrianConfiguration::RUN_IN_PLACE;
const PedestrianConfiguration_State PedestrianConfiguration::State_MIN;
const PedestrianConfiguration_State PedestrianConfiguration::State_MAX;
const int PedestrianConfiguration::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PedestrianConfiguration_PathingBehaviour_descriptor() {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_enum_descriptors[3];
}
bool PedestrianConfiguration_PathingBehaviour_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PedestrianConfiguration_PathingBehaviour PedestrianConfiguration::STANDARD;
const PedestrianConfiguration_PathingBehaviour PedestrianConfiguration::UNCONSTRAINED;
const PedestrianConfiguration_PathingBehaviour PedestrianConfiguration::PathingBehaviour_MIN;
const PedestrianConfiguration_PathingBehaviour PedestrianConfiguration::PathingBehaviour_MAX;
const int PedestrianConfiguration::PathingBehaviour_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Event_ObjectType_descriptor() {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_enum_descriptors[4];
}
bool Event_ObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Event_ObjectType Event::OBJECT_OTHER;
const Event_ObjectType Event::SENSOR;
const Event_ObjectType Event::CONTROLLER;
const Event_ObjectType Event::EGO_VEHICLE;
const Event_ObjectType Event::TRAFFIC_VEHICLE;
const Event_ObjectType Event::TRAFFIC_FLOW;
const Event_ObjectType Event::PEDESTRIAN;
const Event_ObjectType Event::TRAFFIC_LIGHT;
const Event_ObjectType Event::ENVIRONMENT;
const Event_ObjectType Event::ObjectType_MIN;
const Event_ObjectType Event::ObjectType_MAX;
const int Event::ObjectType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Event_Action_descriptor() {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_enum_descriptors[5];
}
bool Event_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Event_Action Event::ACTION_OTHER;
const Event_Action Event::ACTIVATE;
const Event_Action Event::DEACTIVATE;
const Event_Action Event::CREATE;
const Event_Action Event::REMOVE;
const Event_Action Event::MODIFY;
const Event_Action Event::SEND;
const Event_Action Event::Action_MIN;
const Event_Action Event::Action_MAX;
const int Event::Action_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Scenario_System_Encoder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario_System_Encoder::kFfmpegExeFieldNumber;
const int Scenario_System_Encoder::kFfmpegCodecFieldNumber;
const int Scenario_System_Encoder::kFfmpegCodecOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario_System_Encoder::Scenario_System_Encoder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_System_Encoder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Scenario.System.Encoder)
}
Scenario_System_Encoder::Scenario_System_Encoder(const Scenario_System_Encoder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ffmpeg_exe_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ffmpeg_exe().size() > 0) {
    ffmpeg_exe_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ffmpeg_exe_);
  }
  ffmpeg_codec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ffmpeg_codec().size() > 0) {
    ffmpeg_codec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ffmpeg_codec_);
  }
  ffmpeg_codec_options_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ffmpeg_codec_options().size() > 0) {
    ffmpeg_codec_options_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ffmpeg_codec_options_);
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Scenario.System.Encoder)
}

void Scenario_System_Encoder::SharedCtor() {
  ffmpeg_exe_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ffmpeg_codec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ffmpeg_codec_options_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Scenario_System_Encoder::~Scenario_System_Encoder() {
  // @@protoc_insertion_point(destructor:metamoto.types.Scenario.System.Encoder)
  SharedDtor();
}

void Scenario_System_Encoder::SharedDtor() {
  ffmpeg_exe_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ffmpeg_codec_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ffmpeg_codec_options_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Scenario_System_Encoder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scenario_System_Encoder::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenario_System_Encoder& Scenario_System_Encoder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_System_Encoder.base);
  return *internal_default_instance();
}


void Scenario_System_Encoder::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Scenario.System.Encoder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ffmpeg_exe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ffmpeg_codec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ffmpeg_codec_options_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Scenario_System_Encoder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Scenario.System.Encoder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ffmpeg_exe = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ffmpeg_exe()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ffmpeg_exe().data(), static_cast<int>(this->ffmpeg_exe().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.System.Encoder.ffmpeg_exe"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ffmpeg_codec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ffmpeg_codec()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ffmpeg_codec().data(), static_cast<int>(this->ffmpeg_codec().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.System.Encoder.ffmpeg_codec"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ffmpeg_codec_options = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ffmpeg_codec_options()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ffmpeg_codec_options().data(), static_cast<int>(this->ffmpeg_codec_options().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.System.Encoder.ffmpeg_codec_options"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Scenario.System.Encoder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Scenario.System.Encoder)
  return false;
#undef DO_
}

void Scenario_System_Encoder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Scenario.System.Encoder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ffmpeg_exe = 1;
  if (this->ffmpeg_exe().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ffmpeg_exe().data(), static_cast<int>(this->ffmpeg_exe().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.System.Encoder.ffmpeg_exe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ffmpeg_exe(), output);
  }

  // string ffmpeg_codec = 2;
  if (this->ffmpeg_codec().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ffmpeg_codec().data(), static_cast<int>(this->ffmpeg_codec().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.System.Encoder.ffmpeg_codec");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ffmpeg_codec(), output);
  }

  // string ffmpeg_codec_options = 3;
  if (this->ffmpeg_codec_options().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ffmpeg_codec_options().data(), static_cast<int>(this->ffmpeg_codec_options().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.System.Encoder.ffmpeg_codec_options");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ffmpeg_codec_options(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Scenario.System.Encoder)
}

::google::protobuf::uint8* Scenario_System_Encoder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Scenario.System.Encoder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ffmpeg_exe = 1;
  if (this->ffmpeg_exe().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ffmpeg_exe().data(), static_cast<int>(this->ffmpeg_exe().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.System.Encoder.ffmpeg_exe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ffmpeg_exe(), target);
  }

  // string ffmpeg_codec = 2;
  if (this->ffmpeg_codec().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ffmpeg_codec().data(), static_cast<int>(this->ffmpeg_codec().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.System.Encoder.ffmpeg_codec");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ffmpeg_codec(), target);
  }

  // string ffmpeg_codec_options = 3;
  if (this->ffmpeg_codec_options().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ffmpeg_codec_options().data(), static_cast<int>(this->ffmpeg_codec_options().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.System.Encoder.ffmpeg_codec_options");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ffmpeg_codec_options(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Scenario.System.Encoder)
  return target;
}

size_t Scenario_System_Encoder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Scenario.System.Encoder)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ffmpeg_exe = 1;
  if (this->ffmpeg_exe().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ffmpeg_exe());
  }

  // string ffmpeg_codec = 2;
  if (this->ffmpeg_codec().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ffmpeg_codec());
  }

  // string ffmpeg_codec_options = 3;
  if (this->ffmpeg_codec_options().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ffmpeg_codec_options());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scenario_System_Encoder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Scenario.System.Encoder)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario_System_Encoder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario_System_Encoder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Scenario.System.Encoder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Scenario.System.Encoder)
    MergeFrom(*source);
  }
}

void Scenario_System_Encoder::MergeFrom(const Scenario_System_Encoder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Scenario.System.Encoder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ffmpeg_exe().size() > 0) {

    ffmpeg_exe_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ffmpeg_exe_);
  }
  if (from.ffmpeg_codec().size() > 0) {

    ffmpeg_codec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ffmpeg_codec_);
  }
  if (from.ffmpeg_codec_options().size() > 0) {

    ffmpeg_codec_options_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ffmpeg_codec_options_);
  }
}

void Scenario_System_Encoder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Scenario.System.Encoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario_System_Encoder::CopyFrom(const Scenario_System_Encoder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Scenario.System.Encoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario_System_Encoder::IsInitialized() const {
  return true;
}

void Scenario_System_Encoder::Swap(Scenario_System_Encoder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario_System_Encoder::InternalSwap(Scenario_System_Encoder* other) {
  using std::swap;
  ffmpeg_exe_.Swap(&other->ffmpeg_exe_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ffmpeg_codec_.Swap(&other->ffmpeg_codec_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ffmpeg_codec_options_.Swap(&other->ffmpeg_codec_options_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scenario_System_Encoder::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Scenario_System_Logger::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario_System_Logger::kModeFieldNumber;
const int Scenario_System_Logger::kFilenameFieldNumber;
const int Scenario_System_Logger::kAddressFieldNumber;
const int Scenario_System_Logger::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario_System_Logger::Scenario_System_Logger()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_System_Logger.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Scenario.System.Logger)
}
Scenario_System_Logger::Scenario_System_Logger(const Scenario_System_Logger& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mode().size() > 0) {
    mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mode_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Scenario.System.Logger)
}

void Scenario_System_Logger::SharedCtor() {
  mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

Scenario_System_Logger::~Scenario_System_Logger() {
  // @@protoc_insertion_point(destructor:metamoto.types.Scenario.System.Logger)
  SharedDtor();
}

void Scenario_System_Logger::SharedDtor() {
  mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Scenario_System_Logger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scenario_System_Logger::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenario_System_Logger& Scenario_System_Logger::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_System_Logger.base);
  return *internal_default_instance();
}


void Scenario_System_Logger::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Scenario.System.Logger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  _internal_metadata_.Clear();
}

bool Scenario_System_Logger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Scenario.System.Logger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mode().data(), static_cast<int>(this->mode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.System.Logger.mode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.System.Logger.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.System.Logger.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Scenario.System.Logger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Scenario.System.Logger)
  return false;
#undef DO_
}

void Scenario_System_Logger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Scenario.System.Logger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mode = 1;
  if (this->mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mode().data(), static_cast<int>(this->mode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.System.Logger.mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mode(), output);
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.System.Logger.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // string address = 3;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.System.Logger.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->address(), output);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Scenario.System.Logger)
}

::google::protobuf::uint8* Scenario_System_Logger::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Scenario.System.Logger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mode = 1;
  if (this->mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mode().data(), static_cast<int>(this->mode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.System.Logger.mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mode(), target);
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.System.Logger.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // string address = 3;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.System.Logger.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->address(), target);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Scenario.System.Logger)
  return target;
}

size_t Scenario_System_Logger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Scenario.System.Logger)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string mode = 1;
  if (this->mode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mode());
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // string address = 3;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // int32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scenario_System_Logger::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Scenario.System.Logger)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario_System_Logger* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario_System_Logger>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Scenario.System.Logger)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Scenario.System.Logger)
    MergeFrom(*source);
  }
}

void Scenario_System_Logger::MergeFrom(const Scenario_System_Logger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Scenario.System.Logger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode().size() > 0) {

    mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mode_);
  }
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void Scenario_System_Logger::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Scenario.System.Logger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario_System_Logger::CopyFrom(const Scenario_System_Logger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Scenario.System.Logger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario_System_Logger::IsInitialized() const {
  return true;
}

void Scenario_System_Logger::Swap(Scenario_System_Logger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario_System_Logger::InternalSwap(Scenario_System_Logger* other) {
  using std::swap;
  mode_.Swap(&other->mode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scenario_System_Logger::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Scenario_System_RayTracer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario_System_RayTracer::kUrlFieldNumber;
const int Scenario_System_RayTracer::kFileModeFieldNumber;
const int Scenario_System_RayTracer::kFileThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario_System_RayTracer::Scenario_System_RayTracer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_System_RayTracer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Scenario.System.RayTracer)
}
Scenario_System_RayTracer::Scenario_System_RayTracer(const Scenario_System_RayTracer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&file_mode_, &from.file_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_threshold_) -
    reinterpret_cast<char*>(&file_mode_)) + sizeof(file_threshold_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Scenario.System.RayTracer)
}

void Scenario_System_RayTracer::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_threshold_) -
      reinterpret_cast<char*>(&file_mode_)) + sizeof(file_threshold_));
}

Scenario_System_RayTracer::~Scenario_System_RayTracer() {
  // @@protoc_insertion_point(destructor:metamoto.types.Scenario.System.RayTracer)
  SharedDtor();
}

void Scenario_System_RayTracer::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Scenario_System_RayTracer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scenario_System_RayTracer::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenario_System_RayTracer& Scenario_System_RayTracer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_System_RayTracer.base);
  return *internal_default_instance();
}


void Scenario_System_RayTracer::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Scenario.System.RayTracer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_threshold_) -
      reinterpret_cast<char*>(&file_mode_)) + sizeof(file_threshold_));
  _internal_metadata_.Clear();
}

bool Scenario_System_RayTracer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Scenario.System.RayTracer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.System.RayTracer.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool file_mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &file_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 file_threshold = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Scenario.System.RayTracer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Scenario.System.RayTracer)
  return false;
#undef DO_
}

void Scenario_System_RayTracer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Scenario.System.RayTracer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.System.RayTracer.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // bool file_mode = 2;
  if (this->file_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->file_mode(), output);
  }

  // int32 file_threshold = 3;
  if (this->file_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->file_threshold(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Scenario.System.RayTracer)
}

::google::protobuf::uint8* Scenario_System_RayTracer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Scenario.System.RayTracer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.System.RayTracer.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // bool file_mode = 2;
  if (this->file_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->file_mode(), target);
  }

  // int32 file_threshold = 3;
  if (this->file_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->file_threshold(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Scenario.System.RayTracer)
  return target;
}

size_t Scenario_System_RayTracer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Scenario.System.RayTracer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // bool file_mode = 2;
  if (this->file_mode() != 0) {
    total_size += 1 + 1;
  }

  // int32 file_threshold = 3;
  if (this->file_threshold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->file_threshold());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scenario_System_RayTracer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Scenario.System.RayTracer)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario_System_RayTracer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario_System_RayTracer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Scenario.System.RayTracer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Scenario.System.RayTracer)
    MergeFrom(*source);
  }
}

void Scenario_System_RayTracer::MergeFrom(const Scenario_System_RayTracer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Scenario.System.RayTracer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.file_mode() != 0) {
    set_file_mode(from.file_mode());
  }
  if (from.file_threshold() != 0) {
    set_file_threshold(from.file_threshold());
  }
}

void Scenario_System_RayTracer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Scenario.System.RayTracer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario_System_RayTracer::CopyFrom(const Scenario_System_RayTracer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Scenario.System.RayTracer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario_System_RayTracer::IsInitialized() const {
  return true;
}

void Scenario_System_RayTracer::Swap(Scenario_System_RayTracer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario_System_RayTracer::InternalSwap(Scenario_System_RayTracer* other) {
  using std::swap;
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_mode_, other->file_mode_);
  swap(file_threshold_, other->file_threshold_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scenario_System_RayTracer::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Scenario_System_Service::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario_System_Service::kPortFieldNumber;
const int Scenario_System_Service::kExternalPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario_System_Service::Scenario_System_Service()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_System_Service.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Scenario.System.Service)
}
Scenario_System_Service::Scenario_System_Service(const Scenario_System_Service& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&external_port_) -
    reinterpret_cast<char*>(&port_)) + sizeof(external_port_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Scenario.System.Service)
}

void Scenario_System_Service::SharedCtor() {
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&external_port_) -
      reinterpret_cast<char*>(&port_)) + sizeof(external_port_));
}

Scenario_System_Service::~Scenario_System_Service() {
  // @@protoc_insertion_point(destructor:metamoto.types.Scenario.System.Service)
  SharedDtor();
}

void Scenario_System_Service::SharedDtor() {
}

void Scenario_System_Service::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scenario_System_Service::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenario_System_Service& Scenario_System_Service::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_System_Service.base);
  return *internal_default_instance();
}


void Scenario_System_Service::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Scenario.System.Service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&external_port_) -
      reinterpret_cast<char*>(&port_)) + sizeof(external_port_));
  _internal_metadata_.Clear();
}

bool Scenario_System_Service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Scenario.System.Service)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 external_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &external_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Scenario.System.Service)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Scenario.System.Service)
  return false;
#undef DO_
}

void Scenario_System_Service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Scenario.System.Service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->port(), output);
  }

  // int32 external_port = 2;
  if (this->external_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->external_port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Scenario.System.Service)
}

::google::protobuf::uint8* Scenario_System_Service::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Scenario.System.Service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->port(), target);
  }

  // int32 external_port = 2;
  if (this->external_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->external_port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Scenario.System.Service)
  return target;
}

size_t Scenario_System_Service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Scenario.System.Service)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 port = 1;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 external_port = 2;
  if (this->external_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->external_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scenario_System_Service::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Scenario.System.Service)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario_System_Service* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario_System_Service>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Scenario.System.Service)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Scenario.System.Service)
    MergeFrom(*source);
  }
}

void Scenario_System_Service::MergeFrom(const Scenario_System_Service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Scenario.System.Service)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.external_port() != 0) {
    set_external_port(from.external_port());
  }
}

void Scenario_System_Service::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Scenario.System.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario_System_Service::CopyFrom(const Scenario_System_Service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Scenario.System.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario_System_Service::IsInitialized() const {
  return true;
}

void Scenario_System_Service::Swap(Scenario_System_Service* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario_System_Service::InternalSwap(Scenario_System_Service* other) {
  using std::swap;
  swap(port_, other->port_);
  swap(external_port_, other->external_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scenario_System_Service::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Scenario_System_ServicesEntry_DoNotUse::Scenario_System_ServicesEntry_DoNotUse() {}
Scenario_System_ServicesEntry_DoNotUse::Scenario_System_ServicesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Scenario_System_ServicesEntry_DoNotUse::MergeFrom(const Scenario_System_ServicesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Scenario_System_ServicesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[4];
}
void Scenario_System_ServicesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Scenario_System::InitAsDefaultInstance() {
  ::metamoto::types::_Scenario_System_default_instance_._instance.get_mutable()->encoder_ = const_cast< ::metamoto::types::Scenario_System_Encoder*>(
      ::metamoto::types::Scenario_System_Encoder::internal_default_instance());
  ::metamoto::types::_Scenario_System_default_instance_._instance.get_mutable()->logger_ = const_cast< ::metamoto::types::Scenario_System_Logger*>(
      ::metamoto::types::Scenario_System_Logger::internal_default_instance());
  ::metamoto::types::_Scenario_System_default_instance_._instance.get_mutable()->ray_tracer_ = const_cast< ::metamoto::types::Scenario_System_RayTracer*>(
      ::metamoto::types::Scenario_System_RayTracer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario_System::kRandomSeedFieldNumber;
const int Scenario_System::kHostFieldNumber;
const int Scenario_System::kRecordGroundTruthFieldNumber;
const int Scenario_System::kProfileFieldNumber;
const int Scenario_System::kPhysicsRateFieldNumber;
const int Scenario_System::kEncoderFieldNumber;
const int Scenario_System::kLoggerFieldNumber;
const int Scenario_System::kRayTracerFieldNumber;
const int Scenario_System::kServicesFieldNumber;
const int Scenario_System::kCameraLodFieldNumber;
const int Scenario_System::kRayTracerLodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario_System::Scenario_System()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_System.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Scenario.System)
}
Scenario_System::Scenario_System(const Scenario_System& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  services_.MergeFrom(from.services_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.has_encoder()) {
    encoder_ = new ::metamoto::types::Scenario_System_Encoder(*from.encoder_);
  } else {
    encoder_ = NULL;
  }
  if (from.has_logger()) {
    logger_ = new ::metamoto::types::Scenario_System_Logger(*from.logger_);
  } else {
    logger_ = NULL;
  }
  if (from.has_ray_tracer()) {
    ray_tracer_ = new ::metamoto::types::Scenario_System_RayTracer(*from.ray_tracer_);
  } else {
    ray_tracer_ = NULL;
  }
  ::memcpy(&random_seed_, &from.random_seed_,
    static_cast<size_t>(reinterpret_cast<char*>(&ray_tracer_lod_) -
    reinterpret_cast<char*>(&random_seed_)) + sizeof(ray_tracer_lod_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Scenario.System)
}

void Scenario_System::SharedCtor() {
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&encoder_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ray_tracer_lod_) -
      reinterpret_cast<char*>(&encoder_)) + sizeof(ray_tracer_lod_));
}

Scenario_System::~Scenario_System() {
  // @@protoc_insertion_point(destructor:metamoto.types.Scenario.System)
  SharedDtor();
}

void Scenario_System::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete encoder_;
  if (this != internal_default_instance()) delete logger_;
  if (this != internal_default_instance()) delete ray_tracer_;
}

void Scenario_System::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scenario_System::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenario_System& Scenario_System::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_System.base);
  return *internal_default_instance();
}


void Scenario_System::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Scenario.System)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && encoder_ != NULL) {
    delete encoder_;
  }
  encoder_ = NULL;
  if (GetArenaNoVirtual() == NULL && logger_ != NULL) {
    delete logger_;
  }
  logger_ = NULL;
  if (GetArenaNoVirtual() == NULL && ray_tracer_ != NULL) {
    delete ray_tracer_;
  }
  ray_tracer_ = NULL;
  ::memset(&random_seed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ray_tracer_lod_) -
      reinterpret_cast<char*>(&random_seed_)) + sizeof(ray_tracer_lod_));
  _internal_metadata_.Clear();
}

bool Scenario_System::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Scenario.System)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 random_seed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string host = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.System.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool record_ground_truth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_ground_truth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool profile = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &profile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float physics_rate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &physics_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Scenario.System.Encoder encoder = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_encoder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Scenario.System.Logger logger = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_logger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Scenario.System.RayTracer ray_tracer = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ray_tracer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .metamoto.types.Scenario.System.Service> services = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          Scenario_System_ServicesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Scenario_System_ServicesEntry_DoNotUse,
              ::std::string, ::metamoto::types::Scenario_System_Service,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_System_Service > > parser(&services_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.System.ServicesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Scenario.System.LevelOfDetail camera_lod = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera_lod(static_cast< ::metamoto::types::Scenario_System_LevelOfDetail >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Scenario.System.LevelOfDetail ray_tracer_lod = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ray_tracer_lod(static_cast< ::metamoto::types::Scenario_System_LevelOfDetail >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Scenario.System)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Scenario.System)
  return false;
#undef DO_
}

void Scenario_System::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Scenario.System)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 random_seed = 1;
  if (this->random_seed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->random_seed(), output);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.System.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->host(), output);
  }

  // bool record_ground_truth = 3;
  if (this->record_ground_truth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->record_ground_truth(), output);
  }

  // bool profile = 4;
  if (this->profile() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->profile(), output);
  }

  // float physics_rate = 5;
  if (this->physics_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->physics_rate(), output);
  }

  // .metamoto.types.Scenario.System.Encoder encoder = 6;
  if (this->has_encoder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_encoder(), output);
  }

  // .metamoto.types.Scenario.System.Logger logger = 7;
  if (this->has_logger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_logger(), output);
  }

  // .metamoto.types.Scenario.System.RayTracer ray_tracer = 8;
  if (this->has_ray_tracer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_ray_tracer(), output);
  }

  // map<string, .metamoto.types.Scenario.System.Service> services = 9;
  if (!this->services().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_System_Service >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.System.ServicesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->services().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->services().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_System_Service >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_System_Service >::const_iterator
          it = this->services().begin();
          it != this->services().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_System_ServicesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(services_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_System_ServicesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_System_Service >::const_iterator
          it = this->services().begin();
          it != this->services().end(); ++it) {
        entry.reset(services_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .metamoto.types.Scenario.System.LevelOfDetail camera_lod = 10;
  if (this->camera_lod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->camera_lod(), output);
  }

  // .metamoto.types.Scenario.System.LevelOfDetail ray_tracer_lod = 11;
  if (this->ray_tracer_lod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->ray_tracer_lod(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Scenario.System)
}

::google::protobuf::uint8* Scenario_System::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Scenario.System)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 random_seed = 1;
  if (this->random_seed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->random_seed(), target);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.System.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }

  // bool record_ground_truth = 3;
  if (this->record_ground_truth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->record_ground_truth(), target);
  }

  // bool profile = 4;
  if (this->profile() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->profile(), target);
  }

  // float physics_rate = 5;
  if (this->physics_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->physics_rate(), target);
  }

  // .metamoto.types.Scenario.System.Encoder encoder = 6;
  if (this->has_encoder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_encoder(), deterministic, target);
  }

  // .metamoto.types.Scenario.System.Logger logger = 7;
  if (this->has_logger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_logger(), deterministic, target);
  }

  // .metamoto.types.Scenario.System.RayTracer ray_tracer = 8;
  if (this->has_ray_tracer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_ray_tracer(), deterministic, target);
  }

  // map<string, .metamoto.types.Scenario.System.Service> services = 9;
  if (!this->services().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_System_Service >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.System.ServicesEntry.key");
      }
    };

    if (deterministic &&
        this->services().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->services().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_System_Service >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_System_Service >::const_iterator
          it = this->services().begin();
          it != this->services().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_System_ServicesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(services_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_System_ServicesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_System_Service >::const_iterator
          it = this->services().begin();
          it != this->services().end(); ++it) {
        entry.reset(services_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .metamoto.types.Scenario.System.LevelOfDetail camera_lod = 10;
  if (this->camera_lod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->camera_lod(), target);
  }

  // .metamoto.types.Scenario.System.LevelOfDetail ray_tracer_lod = 11;
  if (this->ray_tracer_lod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->ray_tracer_lod(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Scenario.System)
  return target;
}

size_t Scenario_System::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Scenario.System)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .metamoto.types.Scenario.System.Service> services = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->services_size());
  {
    ::std::unique_ptr<Scenario_System_ServicesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_System_Service >::const_iterator
        it = this->services().begin();
        it != this->services().end(); ++it) {
      entry.reset(services_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string host = 2;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // .metamoto.types.Scenario.System.Encoder encoder = 6;
  if (this->has_encoder()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *encoder_);
  }

  // .metamoto.types.Scenario.System.Logger logger = 7;
  if (this->has_logger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *logger_);
  }

  // .metamoto.types.Scenario.System.RayTracer ray_tracer = 8;
  if (this->has_ray_tracer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ray_tracer_);
  }

  // int32 random_seed = 1;
  if (this->random_seed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->random_seed());
  }

  // bool record_ground_truth = 3;
  if (this->record_ground_truth() != 0) {
    total_size += 1 + 1;
  }

  // bool profile = 4;
  if (this->profile() != 0) {
    total_size += 1 + 1;
  }

  // float physics_rate = 5;
  if (this->physics_rate() != 0) {
    total_size += 1 + 4;
  }

  // .metamoto.types.Scenario.System.LevelOfDetail camera_lod = 10;
  if (this->camera_lod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_lod());
  }

  // .metamoto.types.Scenario.System.LevelOfDetail ray_tracer_lod = 11;
  if (this->ray_tracer_lod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ray_tracer_lod());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scenario_System::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Scenario.System)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario_System* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario_System>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Scenario.System)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Scenario.System)
    MergeFrom(*source);
  }
}

void Scenario_System::MergeFrom(const Scenario_System& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Scenario.System)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.has_encoder()) {
    mutable_encoder()->::metamoto::types::Scenario_System_Encoder::MergeFrom(from.encoder());
  }
  if (from.has_logger()) {
    mutable_logger()->::metamoto::types::Scenario_System_Logger::MergeFrom(from.logger());
  }
  if (from.has_ray_tracer()) {
    mutable_ray_tracer()->::metamoto::types::Scenario_System_RayTracer::MergeFrom(from.ray_tracer());
  }
  if (from.random_seed() != 0) {
    set_random_seed(from.random_seed());
  }
  if (from.record_ground_truth() != 0) {
    set_record_ground_truth(from.record_ground_truth());
  }
  if (from.profile() != 0) {
    set_profile(from.profile());
  }
  if (from.physics_rate() != 0) {
    set_physics_rate(from.physics_rate());
  }
  if (from.camera_lod() != 0) {
    set_camera_lod(from.camera_lod());
  }
  if (from.ray_tracer_lod() != 0) {
    set_ray_tracer_lod(from.ray_tracer_lod());
  }
}

void Scenario_System::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Scenario.System)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario_System::CopyFrom(const Scenario_System& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Scenario.System)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario_System::IsInitialized() const {
  return true;
}

void Scenario_System::Swap(Scenario_System* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario_System::InternalSwap(Scenario_System* other) {
  using std::swap;
  services_.Swap(&other->services_);
  host_.Swap(&other->host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encoder_, other->encoder_);
  swap(logger_, other->logger_);
  swap(ray_tracer_, other->ray_tracer_);
  swap(random_seed_, other->random_seed_);
  swap(record_ground_truth_, other->record_ground_truth_);
  swap(profile_, other->profile_);
  swap(physics_rate_, other->physics_rate_);
  swap(camera_lod_, other->camera_lod_);
  swap(ray_tracer_lod_, other->ray_tracer_lod_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scenario_System::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Scenario_Objectives::InitAsDefaultInstance() {
  ::metamoto::types::_Scenario_Objectives_default_instance_.destination_world_point_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
  ::metamoto::types::_Scenario_Objectives_default_instance_.destination_road_point_ = const_cast< ::metamoto::types::RoadPoint*>(
      ::metamoto::types::RoadPoint::internal_default_instance());
}
void Scenario_Objectives::set_allocated_destination_world_point(::metamoto::types::Vector3* destination_world_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_destination_oneof();
  if (destination_world_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination_world_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination_world_point, submessage_arena);
    }
    set_has_destination_world_point();
    destination_oneof_.destination_world_point_ = destination_world_point;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Scenario.Objectives.destination_world_point)
}
void Scenario_Objectives::clear_destination_world_point() {
  if (has_destination_world_point()) {
    delete destination_oneof_.destination_world_point_;
    clear_has_destination_oneof();
  }
}
void Scenario_Objectives::set_allocated_destination_road_point(::metamoto::types::RoadPoint* destination_road_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_destination_oneof();
  if (destination_road_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination_road_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination_road_point, submessage_arena);
    }
    set_has_destination_road_point();
    destination_oneof_.destination_road_point_ = destination_road_point;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Scenario.Objectives.destination_road_point)
}
void Scenario_Objectives::clear_destination_road_point() {
  if (has_destination_road_point()) {
    delete destination_oneof_.destination_road_point_;
    clear_has_destination_oneof();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario_Objectives::kDurationFieldNumber;
const int Scenario_Objectives::kDestinationWorldPointFieldNumber;
const int Scenario_Objectives::kDestinationRoadPointFieldNumber;
const int Scenario_Objectives::kDestinationRadiusFieldNumber;
const int Scenario_Objectives::kInfractionsFieldNumber;
const int Scenario_Objectives::kRandomFailureProbabilityFieldNumber;
const int Scenario_Objectives::kMonitorAllVehiclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario_Objectives::Scenario_Objectives()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Objectives.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Scenario.Objectives)
}
Scenario_Objectives::Scenario_Objectives(const Scenario_Objectives& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      infractions_(from.infractions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&monitor_all_vehicles_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(monitor_all_vehicles_));
  clear_has_destination_oneof();
  switch (from.destination_oneof_case()) {
    case kDestinationWorldPoint: {
      mutable_destination_world_point()->::metamoto::types::Vector3::MergeFrom(from.destination_world_point());
      break;
    }
    case kDestinationRoadPoint: {
      mutable_destination_road_point()->::metamoto::types::RoadPoint::MergeFrom(from.destination_road_point());
      break;
    }
    case DESTINATION_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Scenario.Objectives)
}

void Scenario_Objectives::SharedCtor() {
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monitor_all_vehicles_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(monitor_all_vehicles_));
  clear_has_destination_oneof();
}

Scenario_Objectives::~Scenario_Objectives() {
  // @@protoc_insertion_point(destructor:metamoto.types.Scenario.Objectives)
  SharedDtor();
}

void Scenario_Objectives::SharedDtor() {
  if (has_destination_oneof()) {
    clear_destination_oneof();
  }
}

void Scenario_Objectives::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scenario_Objectives::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenario_Objectives& Scenario_Objectives::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Objectives.base);
  return *internal_default_instance();
}


void Scenario_Objectives::clear_destination_oneof() {
// @@protoc_insertion_point(one_of_clear_start:metamoto.types.Scenario.Objectives)
  switch (destination_oneof_case()) {
    case kDestinationWorldPoint: {
      delete destination_oneof_.destination_world_point_;
      break;
    }
    case kDestinationRoadPoint: {
      delete destination_oneof_.destination_road_point_;
      break;
    }
    case DESTINATION_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DESTINATION_ONEOF_NOT_SET;
}


void Scenario_Objectives::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Scenario.Objectives)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infractions_.Clear();
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monitor_all_vehicles_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(monitor_all_vehicles_));
  clear_destination_oneof();
  _internal_metadata_.Clear();
}

bool Scenario_Objectives::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Scenario.Objectives)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float duration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 destination_world_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_world_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.RoadPoint destination_road_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_road_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float destination_radius = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &destination_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Infraction infractions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_infractions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float random_failure_probability = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_failure_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool monitor_all_vehicles = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &monitor_all_vehicles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Scenario.Objectives)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Scenario.Objectives)
  return false;
#undef DO_
}

void Scenario_Objectives::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Scenario.Objectives)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float duration = 1;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->duration(), output);
  }

  // .metamoto.types.Vector3 destination_world_point = 2;
  if (has_destination_world_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_destination_world_point(), output);
  }

  // .metamoto.types.RoadPoint destination_road_point = 3;
  if (has_destination_road_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_destination_road_point(), output);
  }

  // float destination_radius = 4;
  if (this->destination_radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->destination_radius(), output);
  }

  // repeated .metamoto.types.Infraction infractions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infractions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->infractions(static_cast<int>(i)),
      output);
  }

  // float random_failure_probability = 6;
  if (this->random_failure_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->random_failure_probability(), output);
  }

  // bool monitor_all_vehicles = 7;
  if (this->monitor_all_vehicles() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->monitor_all_vehicles(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Scenario.Objectives)
}

::google::protobuf::uint8* Scenario_Objectives::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Scenario.Objectives)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float duration = 1;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->duration(), target);
  }

  // .metamoto.types.Vector3 destination_world_point = 2;
  if (has_destination_world_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_destination_world_point(), deterministic, target);
  }

  // .metamoto.types.RoadPoint destination_road_point = 3;
  if (has_destination_road_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_destination_road_point(), deterministic, target);
  }

  // float destination_radius = 4;
  if (this->destination_radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->destination_radius(), target);
  }

  // repeated .metamoto.types.Infraction infractions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infractions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->infractions(static_cast<int>(i)), deterministic, target);
  }

  // float random_failure_probability = 6;
  if (this->random_failure_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->random_failure_probability(), target);
  }

  // bool monitor_all_vehicles = 7;
  if (this->monitor_all_vehicles() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->monitor_all_vehicles(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Scenario.Objectives)
  return target;
}

size_t Scenario_Objectives::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Scenario.Objectives)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.Infraction infractions = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->infractions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->infractions(static_cast<int>(i)));
    }
  }

  // float duration = 1;
  if (this->duration() != 0) {
    total_size += 1 + 4;
  }

  // float destination_radius = 4;
  if (this->destination_radius() != 0) {
    total_size += 1 + 4;
  }

  // float random_failure_probability = 6;
  if (this->random_failure_probability() != 0) {
    total_size += 1 + 4;
  }

  // bool monitor_all_vehicles = 7;
  if (this->monitor_all_vehicles() != 0) {
    total_size += 1 + 1;
  }

  switch (destination_oneof_case()) {
    // .metamoto.types.Vector3 destination_world_point = 2;
    case kDestinationWorldPoint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *destination_oneof_.destination_world_point_);
      break;
    }
    // .metamoto.types.RoadPoint destination_road_point = 3;
    case kDestinationRoadPoint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *destination_oneof_.destination_road_point_);
      break;
    }
    case DESTINATION_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scenario_Objectives::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Scenario.Objectives)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario_Objectives* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario_Objectives>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Scenario.Objectives)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Scenario.Objectives)
    MergeFrom(*source);
  }
}

void Scenario_Objectives::MergeFrom(const Scenario_Objectives& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Scenario.Objectives)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infractions_.MergeFrom(from.infractions_);
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.destination_radius() != 0) {
    set_destination_radius(from.destination_radius());
  }
  if (from.random_failure_probability() != 0) {
    set_random_failure_probability(from.random_failure_probability());
  }
  if (from.monitor_all_vehicles() != 0) {
    set_monitor_all_vehicles(from.monitor_all_vehicles());
  }
  switch (from.destination_oneof_case()) {
    case kDestinationWorldPoint: {
      mutable_destination_world_point()->::metamoto::types::Vector3::MergeFrom(from.destination_world_point());
      break;
    }
    case kDestinationRoadPoint: {
      mutable_destination_road_point()->::metamoto::types::RoadPoint::MergeFrom(from.destination_road_point());
      break;
    }
    case DESTINATION_ONEOF_NOT_SET: {
      break;
    }
  }
}

void Scenario_Objectives::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Scenario.Objectives)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario_Objectives::CopyFrom(const Scenario_Objectives& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Scenario.Objectives)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario_Objectives::IsInitialized() const {
  return true;
}

void Scenario_Objectives::Swap(Scenario_Objectives* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario_Objectives::InternalSwap(Scenario_Objectives* other) {
  using std::swap;
  CastToBase(&infractions_)->InternalSwap(CastToBase(&other->infractions_));
  swap(duration_, other->duration_);
  swap(destination_radius_, other->destination_radius_);
  swap(random_failure_probability_, other->random_failure_probability_);
  swap(monitor_all_vehicles_, other->monitor_all_vehicles_);
  swap(destination_oneof_, other->destination_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scenario_Objectives::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Scenario_EgoVehicle::InitAsDefaultInstance() {
  ::metamoto::types::_Scenario_EgoVehicle_default_instance_._instance.get_mutable()->driver_model_ = const_cast< ::metamoto::types::DriverModel*>(
      ::metamoto::types::DriverModel::internal_default_instance());
}
void Scenario_EgoVehicle::clear_path() {
  path_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario_EgoVehicle::kPathFieldNumber;
const int Scenario_EgoVehicle::kDriverModelFieldNumber;
const int Scenario_EgoVehicle::kRandomSpawnPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario_EgoVehicle::Scenario_EgoVehicle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_EgoVehicle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Scenario.EgoVehicle)
}
Scenario_EgoVehicle::Scenario_EgoVehicle(const Scenario_EgoVehicle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      path_(from.path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_driver_model()) {
    driver_model_ = new ::metamoto::types::DriverModel(*from.driver_model_);
  } else {
    driver_model_ = NULL;
  }
  random_spawn_point_ = from.random_spawn_point_;
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Scenario.EgoVehicle)
}

void Scenario_EgoVehicle::SharedCtor() {
  ::memset(&driver_model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_spawn_point_) -
      reinterpret_cast<char*>(&driver_model_)) + sizeof(random_spawn_point_));
}

Scenario_EgoVehicle::~Scenario_EgoVehicle() {
  // @@protoc_insertion_point(destructor:metamoto.types.Scenario.EgoVehicle)
  SharedDtor();
}

void Scenario_EgoVehicle::SharedDtor() {
  if (this != internal_default_instance()) delete driver_model_;
}

void Scenario_EgoVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scenario_EgoVehicle::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenario_EgoVehicle& Scenario_EgoVehicle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_EgoVehicle.base);
  return *internal_default_instance();
}


void Scenario_EgoVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Scenario.EgoVehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  if (GetArenaNoVirtual() == NULL && driver_model_ != NULL) {
    delete driver_model_;
  }
  driver_model_ = NULL;
  random_spawn_point_ = false;
  _internal_metadata_.Clear();
}

bool Scenario_EgoVehicle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Scenario.EgoVehicle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metamoto.types.Waypoint path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.DriverModel driver_model = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_driver_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool random_spawn_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &random_spawn_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Scenario.EgoVehicle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Scenario.EgoVehicle)
  return false;
#undef DO_
}

void Scenario_EgoVehicle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Scenario.EgoVehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.Waypoint path = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->path(static_cast<int>(i)),
      output);
  }

  // .metamoto.types.DriverModel driver_model = 2;
  if (this->has_driver_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_driver_model(), output);
  }

  // bool random_spawn_point = 3;
  if (this->random_spawn_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->random_spawn_point(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Scenario.EgoVehicle)
}

::google::protobuf::uint8* Scenario_EgoVehicle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Scenario.EgoVehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.Waypoint path = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->path(static_cast<int>(i)), deterministic, target);
  }

  // .metamoto.types.DriverModel driver_model = 2;
  if (this->has_driver_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_driver_model(), deterministic, target);
  }

  // bool random_spawn_point = 3;
  if (this->random_spawn_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->random_spawn_point(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Scenario.EgoVehicle)
  return target;
}

size_t Scenario_EgoVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Scenario.EgoVehicle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.Waypoint path = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->path_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->path(static_cast<int>(i)));
    }
  }

  // .metamoto.types.DriverModel driver_model = 2;
  if (this->has_driver_model()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *driver_model_);
  }

  // bool random_spawn_point = 3;
  if (this->random_spawn_point() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scenario_EgoVehicle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Scenario.EgoVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario_EgoVehicle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario_EgoVehicle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Scenario.EgoVehicle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Scenario.EgoVehicle)
    MergeFrom(*source);
  }
}

void Scenario_EgoVehicle::MergeFrom(const Scenario_EgoVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Scenario.EgoVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  if (from.has_driver_model()) {
    mutable_driver_model()->::metamoto::types::DriverModel::MergeFrom(from.driver_model());
  }
  if (from.random_spawn_point() != 0) {
    set_random_spawn_point(from.random_spawn_point());
  }
}

void Scenario_EgoVehicle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Scenario.EgoVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario_EgoVehicle::CopyFrom(const Scenario_EgoVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Scenario.EgoVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario_EgoVehicle::IsInitialized() const {
  return true;
}

void Scenario_EgoVehicle::Swap(Scenario_EgoVehicle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario_EgoVehicle::InternalSwap(Scenario_EgoVehicle* other) {
  using std::swap;
  CastToBase(&path_)->InternalSwap(CastToBase(&other->path_));
  swap(driver_model_, other->driver_model_);
  swap(random_spawn_point_, other->random_spawn_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scenario_EgoVehicle::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse::Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse() {}
Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse::Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse::MergeFrom(const Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[8];
}
void Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse::Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse() {}
Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse::Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse::MergeFrom(const Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[9];
}
void Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse::Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse() {}
Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse::Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse::MergeFrom(const Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[10];
}
void Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Scenario_Traffic_Distribution::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario_Traffic_Distribution::kModelWeightsFieldNumber;
const int Scenario_Traffic_Distribution::kTypeWeightsFieldNumber;
const int Scenario_Traffic_Distribution::kPaintWeightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario_Traffic_Distribution::Scenario_Traffic_Distribution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Traffic_Distribution.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Scenario.Traffic.Distribution)
}
Scenario_Traffic_Distribution::Scenario_Traffic_Distribution(const Scenario_Traffic_Distribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_weights_.MergeFrom(from.model_weights_);
  type_weights_.MergeFrom(from.type_weights_);
  paint_weights_.MergeFrom(from.paint_weights_);
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Scenario.Traffic.Distribution)
}

void Scenario_Traffic_Distribution::SharedCtor() {
}

Scenario_Traffic_Distribution::~Scenario_Traffic_Distribution() {
  // @@protoc_insertion_point(destructor:metamoto.types.Scenario.Traffic.Distribution)
  SharedDtor();
}

void Scenario_Traffic_Distribution::SharedDtor() {
}

void Scenario_Traffic_Distribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scenario_Traffic_Distribution::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenario_Traffic_Distribution& Scenario_Traffic_Distribution::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Traffic_Distribution.base);
  return *internal_default_instance();
}


void Scenario_Traffic_Distribution::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Scenario.Traffic.Distribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_weights_.Clear();
  type_weights_.Clear();
  paint_weights_.Clear();
  _internal_metadata_.Clear();
}

bool Scenario_Traffic_Distribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Scenario.Traffic.Distribution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, float> model_weights = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse,
              ::std::string, float,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::google::protobuf::Map< ::std::string, float > > parser(&model_weights_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.Traffic.Distribution.ModelWeightsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, float> type_weights = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse,
              ::std::string, float,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::google::protobuf::Map< ::std::string, float > > parser(&type_weights_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.Traffic.Distribution.TypeWeightsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, float> paint_weights = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse,
              ::std::string, float,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::google::protobuf::Map< ::std::string, float > > parser(&paint_weights_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.Traffic.Distribution.PaintWeightsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Scenario.Traffic.Distribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Scenario.Traffic.Distribution)
  return false;
#undef DO_
}

void Scenario_Traffic_Distribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Scenario.Traffic.Distribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, float> model_weights = 1;
  if (!this->model_weights().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.Traffic.Distribution.ModelWeightsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->model_weights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->model_weights().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->model_weights().begin();
          it != this->model_weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(model_weights_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->model_weights().begin();
          it != this->model_weights().end(); ++it) {
        entry.reset(model_weights_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, float> type_weights = 2;
  if (!this->type_weights().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.Traffic.Distribution.TypeWeightsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->type_weights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->type_weights().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->type_weights().begin();
          it != this->type_weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(type_weights_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->type_weights().begin();
          it != this->type_weights().end(); ++it) {
        entry.reset(type_weights_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, float> paint_weights = 3;
  if (!this->paint_weights().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.Traffic.Distribution.PaintWeightsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->paint_weights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->paint_weights().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->paint_weights().begin();
          it != this->paint_weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(paint_weights_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->paint_weights().begin();
          it != this->paint_weights().end(); ++it) {
        entry.reset(paint_weights_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Scenario.Traffic.Distribution)
}

::google::protobuf::uint8* Scenario_Traffic_Distribution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Scenario.Traffic.Distribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, float> model_weights = 1;
  if (!this->model_weights().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.Traffic.Distribution.ModelWeightsEntry.key");
      }
    };

    if (deterministic &&
        this->model_weights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->model_weights().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->model_weights().begin();
          it != this->model_weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(model_weights_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->model_weights().begin();
          it != this->model_weights().end(); ++it) {
        entry.reset(model_weights_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, float> type_weights = 2;
  if (!this->type_weights().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.Traffic.Distribution.TypeWeightsEntry.key");
      }
    };

    if (deterministic &&
        this->type_weights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->type_weights().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->type_weights().begin();
          it != this->type_weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(type_weights_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->type_weights().begin();
          it != this->type_weights().end(); ++it) {
        entry.reset(type_weights_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, float> paint_weights = 3;
  if (!this->paint_weights().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.Traffic.Distribution.PaintWeightsEntry.key");
      }
    };

    if (deterministic &&
        this->paint_weights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->paint_weights().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->paint_weights().begin();
          it != this->paint_weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(paint_weights_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->paint_weights().begin();
          it != this->paint_weights().end(); ++it) {
        entry.reset(paint_weights_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Scenario.Traffic.Distribution)
  return target;
}

size_t Scenario_Traffic_Distribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Scenario.Traffic.Distribution)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, float> model_weights = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->model_weights_size());
  {
    ::std::unique_ptr<Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->model_weights().begin();
        it != this->model_weights().end(); ++it) {
      entry.reset(model_weights_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, float> type_weights = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->type_weights_size());
  {
    ::std::unique_ptr<Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->type_weights().begin();
        it != this->type_weights().end(); ++it) {
      entry.reset(type_weights_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, float> paint_weights = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->paint_weights_size());
  {
    ::std::unique_ptr<Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->paint_weights().begin();
        it != this->paint_weights().end(); ++it) {
      entry.reset(paint_weights_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scenario_Traffic_Distribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Scenario.Traffic.Distribution)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario_Traffic_Distribution* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario_Traffic_Distribution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Scenario.Traffic.Distribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Scenario.Traffic.Distribution)
    MergeFrom(*source);
  }
}

void Scenario_Traffic_Distribution::MergeFrom(const Scenario_Traffic_Distribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Scenario.Traffic.Distribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_weights_.MergeFrom(from.model_weights_);
  type_weights_.MergeFrom(from.type_weights_);
  paint_weights_.MergeFrom(from.paint_weights_);
}

void Scenario_Traffic_Distribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Scenario.Traffic.Distribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario_Traffic_Distribution::CopyFrom(const Scenario_Traffic_Distribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Scenario.Traffic.Distribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario_Traffic_Distribution::IsInitialized() const {
  return true;
}

void Scenario_Traffic_Distribution::Swap(Scenario_Traffic_Distribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario_Traffic_Distribution::InternalSwap(Scenario_Traffic_Distribution* other) {
  using std::swap;
  model_weights_.Swap(&other->model_weights_);
  type_weights_.Swap(&other->type_weights_);
  paint_weights_.Swap(&other->paint_weights_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scenario_Traffic_Distribution::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Scenario_Traffic::InitAsDefaultInstance() {
  ::metamoto::types::_Scenario_Traffic_default_instance_._instance.get_mutable()->distribution_ = const_cast< ::metamoto::types::Scenario_Traffic_Distribution*>(
      ::metamoto::types::Scenario_Traffic_Distribution::internal_default_instance());
  ::metamoto::types::_Scenario_Traffic_default_instance_.num_random_vehicles_ = 0;
  ::metamoto::types::_Scenario_Traffic_default_instance_.congestion_ = 0;
  ::metamoto::types::_Scenario_Traffic_default_instance_._instance.get_mutable()->parked_distribution_ = const_cast< ::metamoto::types::Scenario_Traffic_Distribution*>(
      ::metamoto::types::Scenario_Traffic_Distribution::internal_default_instance());
  ::metamoto::types::_Scenario_Traffic_default_instance_.num_random_parked_vehicles_ = 0;
  ::metamoto::types::_Scenario_Traffic_default_instance_.parking_fullness_ = 0;
}
void Scenario_Traffic::clear_region() {
  region_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario_Traffic::kRegionFieldNumber;
const int Scenario_Traffic::kDistributionFieldNumber;
const int Scenario_Traffic::kNumRandomVehiclesFieldNumber;
const int Scenario_Traffic::kCongestionFieldNumber;
const int Scenario_Traffic::kFlowsFieldNumber;
const int Scenario_Traffic::kVehiclesFieldNumber;
const int Scenario_Traffic::kParkedDistributionFieldNumber;
const int Scenario_Traffic::kNumRandomParkedVehiclesFieldNumber;
const int Scenario_Traffic::kParkingFullnessFieldNumber;
const int Scenario_Traffic::kParkedVehiclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario_Traffic::Scenario_Traffic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Traffic.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Scenario.Traffic)
}
Scenario_Traffic::Scenario_Traffic(const Scenario_Traffic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      region_(from.region_),
      flows_(from.flows_),
      vehicles_(from.vehicles_),
      parked_vehicles_(from.parked_vehicles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_distribution()) {
    distribution_ = new ::metamoto::types::Scenario_Traffic_Distribution(*from.distribution_);
  } else {
    distribution_ = NULL;
  }
  if (from.has_parked_distribution()) {
    parked_distribution_ = new ::metamoto::types::Scenario_Traffic_Distribution(*from.parked_distribution_);
  } else {
    parked_distribution_ = NULL;
  }
  clear_has_random_oneof();
  switch (from.random_oneof_case()) {
    case kNumRandomVehicles: {
      set_num_random_vehicles(from.num_random_vehicles());
      break;
    }
    case kCongestion: {
      set_congestion(from.congestion());
      break;
    }
    case RANDOM_ONEOF_NOT_SET: {
      break;
    }
  }
  clear_has_random_parked_oneof();
  switch (from.random_parked_oneof_case()) {
    case kNumRandomParkedVehicles: {
      set_num_random_parked_vehicles(from.num_random_parked_vehicles());
      break;
    }
    case kParkingFullness: {
      set_parking_fullness(from.parking_fullness());
      break;
    }
    case RANDOM_PARKED_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Scenario.Traffic)
}

void Scenario_Traffic::SharedCtor() {
  ::memset(&distribution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parked_distribution_) -
      reinterpret_cast<char*>(&distribution_)) + sizeof(parked_distribution_));
  clear_has_random_oneof();
  clear_has_random_parked_oneof();
}

Scenario_Traffic::~Scenario_Traffic() {
  // @@protoc_insertion_point(destructor:metamoto.types.Scenario.Traffic)
  SharedDtor();
}

void Scenario_Traffic::SharedDtor() {
  if (this != internal_default_instance()) delete distribution_;
  if (this != internal_default_instance()) delete parked_distribution_;
  if (has_random_oneof()) {
    clear_random_oneof();
  }
  if (has_random_parked_oneof()) {
    clear_random_parked_oneof();
  }
}

void Scenario_Traffic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scenario_Traffic::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenario_Traffic& Scenario_Traffic::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Traffic.base);
  return *internal_default_instance();
}


void Scenario_Traffic::clear_random_oneof() {
// @@protoc_insertion_point(one_of_clear_start:metamoto.types.Scenario.Traffic)
  switch (random_oneof_case()) {
    case kNumRandomVehicles: {
      // No need to clear
      break;
    }
    case kCongestion: {
      // No need to clear
      break;
    }
    case RANDOM_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RANDOM_ONEOF_NOT_SET;
}

void Scenario_Traffic::clear_random_parked_oneof() {
// @@protoc_insertion_point(one_of_clear_start:metamoto.types.Scenario.Traffic)
  switch (random_parked_oneof_case()) {
    case kNumRandomParkedVehicles: {
      // No need to clear
      break;
    }
    case kParkingFullness: {
      // No need to clear
      break;
    }
    case RANDOM_PARKED_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = RANDOM_PARKED_ONEOF_NOT_SET;
}


void Scenario_Traffic::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Scenario.Traffic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_.Clear();
  flows_.Clear();
  vehicles_.Clear();
  parked_vehicles_.Clear();
  if (GetArenaNoVirtual() == NULL && distribution_ != NULL) {
    delete distribution_;
  }
  distribution_ = NULL;
  if (GetArenaNoVirtual() == NULL && parked_distribution_ != NULL) {
    delete parked_distribution_;
  }
  parked_distribution_ = NULL;
  clear_random_oneof();
  clear_random_parked_oneof();
  _internal_metadata_.Clear();
}

bool Scenario_Traffic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Scenario.Traffic)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metamoto.types.Vector3 region = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Scenario.Traffic.Distribution distribution = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_distribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_random_vehicles = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_random_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_oneof_.num_random_vehicles_)));
          set_has_num_random_vehicles();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float congestion = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          clear_random_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_oneof_.congestion_)));
          set_has_congestion();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.TrafficFlow flows = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_flows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.TrafficVehicle vehicles = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vehicles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Scenario.Traffic.Distribution parked_distribution = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parked_distribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_random_parked_vehicles = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          clear_random_parked_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_parked_oneof_.num_random_parked_vehicles_)));
          set_has_num_random_parked_vehicles();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float parking_fullness = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          clear_random_parked_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_parked_oneof_.parking_fullness_)));
          set_has_parking_fullness();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.ParkedVehicle parked_vehicles = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_parked_vehicles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Scenario.Traffic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Scenario.Traffic)
  return false;
#undef DO_
}

void Scenario_Traffic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Scenario.Traffic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.Vector3 region = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->region(static_cast<int>(i)),
      output);
  }

  // .metamoto.types.Scenario.Traffic.Distribution distribution = 2;
  if (this->has_distribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_distribution(), output);
  }

  // int32 num_random_vehicles = 3;
  if (has_num_random_vehicles()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_random_vehicles(), output);
  }

  // float congestion = 4;
  if (has_congestion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->congestion(), output);
  }

  // repeated .metamoto.types.TrafficFlow flows = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->flows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->flows(static_cast<int>(i)),
      output);
  }

  // repeated .metamoto.types.TrafficVehicle vehicles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->vehicles(static_cast<int>(i)),
      output);
  }

  // .metamoto.types.Scenario.Traffic.Distribution parked_distribution = 7;
  if (this->has_parked_distribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_parked_distribution(), output);
  }

  // int32 num_random_parked_vehicles = 8;
  if (has_num_random_parked_vehicles()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->num_random_parked_vehicles(), output);
  }

  // float parking_fullness = 9;
  if (has_parking_fullness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->parking_fullness(), output);
  }

  // repeated .metamoto.types.ParkedVehicle parked_vehicles = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parked_vehicles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->parked_vehicles(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Scenario.Traffic)
}

::google::protobuf::uint8* Scenario_Traffic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Scenario.Traffic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.Vector3 region = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->region(static_cast<int>(i)), deterministic, target);
  }

  // .metamoto.types.Scenario.Traffic.Distribution distribution = 2;
  if (this->has_distribution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_distribution(), deterministic, target);
  }

  // int32 num_random_vehicles = 3;
  if (has_num_random_vehicles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_random_vehicles(), target);
  }

  // float congestion = 4;
  if (has_congestion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->congestion(), target);
  }

  // repeated .metamoto.types.TrafficFlow flows = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->flows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->flows(static_cast<int>(i)), deterministic, target);
  }

  // repeated .metamoto.types.TrafficVehicle vehicles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->vehicles(static_cast<int>(i)), deterministic, target);
  }

  // .metamoto.types.Scenario.Traffic.Distribution parked_distribution = 7;
  if (this->has_parked_distribution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_parked_distribution(), deterministic, target);
  }

  // int32 num_random_parked_vehicles = 8;
  if (has_num_random_parked_vehicles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->num_random_parked_vehicles(), target);
  }

  // float parking_fullness = 9;
  if (has_parking_fullness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->parking_fullness(), target);
  }

  // repeated .metamoto.types.ParkedVehicle parked_vehicles = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parked_vehicles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->parked_vehicles(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Scenario.Traffic)
  return target;
}

size_t Scenario_Traffic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Scenario.Traffic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.Vector3 region = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->region_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->region(static_cast<int>(i)));
    }
  }

  // repeated .metamoto.types.TrafficFlow flows = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->flows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->flows(static_cast<int>(i)));
    }
  }

  // repeated .metamoto.types.TrafficVehicle vehicles = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->vehicles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vehicles(static_cast<int>(i)));
    }
  }

  // repeated .metamoto.types.ParkedVehicle parked_vehicles = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->parked_vehicles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->parked_vehicles(static_cast<int>(i)));
    }
  }

  // .metamoto.types.Scenario.Traffic.Distribution distribution = 2;
  if (this->has_distribution()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *distribution_);
  }

  // .metamoto.types.Scenario.Traffic.Distribution parked_distribution = 7;
  if (this->has_parked_distribution()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *parked_distribution_);
  }

  switch (random_oneof_case()) {
    // int32 num_random_vehicles = 3;
    case kNumRandomVehicles: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_random_vehicles());
      break;
    }
    // float congestion = 4;
    case kCongestion: {
      total_size += 1 + 4;
      break;
    }
    case RANDOM_ONEOF_NOT_SET: {
      break;
    }
  }
  switch (random_parked_oneof_case()) {
    // int32 num_random_parked_vehicles = 8;
    case kNumRandomParkedVehicles: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_random_parked_vehicles());
      break;
    }
    // float parking_fullness = 9;
    case kParkingFullness: {
      total_size += 1 + 4;
      break;
    }
    case RANDOM_PARKED_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scenario_Traffic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Scenario.Traffic)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario_Traffic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario_Traffic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Scenario.Traffic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Scenario.Traffic)
    MergeFrom(*source);
  }
}

void Scenario_Traffic::MergeFrom(const Scenario_Traffic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Scenario.Traffic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_.MergeFrom(from.region_);
  flows_.MergeFrom(from.flows_);
  vehicles_.MergeFrom(from.vehicles_);
  parked_vehicles_.MergeFrom(from.parked_vehicles_);
  if (from.has_distribution()) {
    mutable_distribution()->::metamoto::types::Scenario_Traffic_Distribution::MergeFrom(from.distribution());
  }
  if (from.has_parked_distribution()) {
    mutable_parked_distribution()->::metamoto::types::Scenario_Traffic_Distribution::MergeFrom(from.parked_distribution());
  }
  switch (from.random_oneof_case()) {
    case kNumRandomVehicles: {
      set_num_random_vehicles(from.num_random_vehicles());
      break;
    }
    case kCongestion: {
      set_congestion(from.congestion());
      break;
    }
    case RANDOM_ONEOF_NOT_SET: {
      break;
    }
  }
  switch (from.random_parked_oneof_case()) {
    case kNumRandomParkedVehicles: {
      set_num_random_parked_vehicles(from.num_random_parked_vehicles());
      break;
    }
    case kParkingFullness: {
      set_parking_fullness(from.parking_fullness());
      break;
    }
    case RANDOM_PARKED_ONEOF_NOT_SET: {
      break;
    }
  }
}

void Scenario_Traffic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Scenario.Traffic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario_Traffic::CopyFrom(const Scenario_Traffic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Scenario.Traffic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario_Traffic::IsInitialized() const {
  return true;
}

void Scenario_Traffic::Swap(Scenario_Traffic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario_Traffic::InternalSwap(Scenario_Traffic* other) {
  using std::swap;
  CastToBase(&region_)->InternalSwap(CastToBase(&other->region_));
  CastToBase(&flows_)->InternalSwap(CastToBase(&other->flows_));
  CastToBase(&vehicles_)->InternalSwap(CastToBase(&other->vehicles_));
  CastToBase(&parked_vehicles_)->InternalSwap(CastToBase(&other->parked_vehicles_));
  swap(distribution_, other->distribution_);
  swap(parked_distribution_, other->parked_distribution_);
  swap(random_oneof_, other->random_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(random_parked_oneof_, other->random_parked_oneof_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scenario_Traffic::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse::Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse() {}
Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse::Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse::MergeFrom(const Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[13];
}
void Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse::Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse() {}
Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse::Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse::MergeFrom(const Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[14];
}
void Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse::Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse() {}
Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse::Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse::MergeFrom(const Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[15];
}
void Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Scenario_Pedestrians_Distribution::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario_Pedestrians_Distribution::kNameWeightsFieldNumber;
const int Scenario_Pedestrians_Distribution::kTypeWeightsFieldNumber;
const int Scenario_Pedestrians_Distribution::kStateWeightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario_Pedestrians_Distribution::Scenario_Pedestrians_Distribution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Pedestrians_Distribution.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Scenario.Pedestrians.Distribution)
}
Scenario_Pedestrians_Distribution::Scenario_Pedestrians_Distribution(const Scenario_Pedestrians_Distribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_weights_.MergeFrom(from.name_weights_);
  type_weights_.MergeFrom(from.type_weights_);
  state_weights_.MergeFrom(from.state_weights_);
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Scenario.Pedestrians.Distribution)
}

void Scenario_Pedestrians_Distribution::SharedCtor() {
}

Scenario_Pedestrians_Distribution::~Scenario_Pedestrians_Distribution() {
  // @@protoc_insertion_point(destructor:metamoto.types.Scenario.Pedestrians.Distribution)
  SharedDtor();
}

void Scenario_Pedestrians_Distribution::SharedDtor() {
}

void Scenario_Pedestrians_Distribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scenario_Pedestrians_Distribution::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenario_Pedestrians_Distribution& Scenario_Pedestrians_Distribution::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Pedestrians_Distribution.base);
  return *internal_default_instance();
}


void Scenario_Pedestrians_Distribution::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Scenario.Pedestrians.Distribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_weights_.Clear();
  type_weights_.Clear();
  state_weights_.Clear();
  _internal_metadata_.Clear();
}

bool Scenario_Pedestrians_Distribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Scenario.Pedestrians.Distribution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, float> name_weights = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse,
              ::std::string, float,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::google::protobuf::Map< ::std::string, float > > parser(&name_weights_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.Pedestrians.Distribution.NameWeightsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, float> type_weights = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse,
              ::std::string, float,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::google::protobuf::Map< ::std::string, float > > parser(&type_weights_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.Pedestrians.Distribution.TypeWeightsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, float> state_weights = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse,
              ::std::string, float,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::google::protobuf::Map< ::std::string, float > > parser(&state_weights_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.Pedestrians.Distribution.StateWeightsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Scenario.Pedestrians.Distribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Scenario.Pedestrians.Distribution)
  return false;
#undef DO_
}

void Scenario_Pedestrians_Distribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Scenario.Pedestrians.Distribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, float> name_weights = 1;
  if (!this->name_weights().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.Pedestrians.Distribution.NameWeightsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->name_weights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->name_weights().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->name_weights().begin();
          it != this->name_weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(name_weights_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->name_weights().begin();
          it != this->name_weights().end(); ++it) {
        entry.reset(name_weights_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, float> type_weights = 2;
  if (!this->type_weights().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.Pedestrians.Distribution.TypeWeightsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->type_weights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->type_weights().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->type_weights().begin();
          it != this->type_weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(type_weights_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->type_weights().begin();
          it != this->type_weights().end(); ++it) {
        entry.reset(type_weights_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, float> state_weights = 3;
  if (!this->state_weights().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.Pedestrians.Distribution.StateWeightsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->state_weights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->state_weights().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->state_weights().begin();
          it != this->state_weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(state_weights_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->state_weights().begin();
          it != this->state_weights().end(); ++it) {
        entry.reset(state_weights_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Scenario.Pedestrians.Distribution)
}

::google::protobuf::uint8* Scenario_Pedestrians_Distribution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Scenario.Pedestrians.Distribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, float> name_weights = 1;
  if (!this->name_weights().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.Pedestrians.Distribution.NameWeightsEntry.key");
      }
    };

    if (deterministic &&
        this->name_weights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->name_weights().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->name_weights().begin();
          it != this->name_weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(name_weights_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->name_weights().begin();
          it != this->name_weights().end(); ++it) {
        entry.reset(name_weights_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, float> type_weights = 2;
  if (!this->type_weights().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.Pedestrians.Distribution.TypeWeightsEntry.key");
      }
    };

    if (deterministic &&
        this->type_weights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->type_weights().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->type_weights().begin();
          it != this->type_weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(type_weights_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->type_weights().begin();
          it != this->type_weights().end(); ++it) {
        entry.reset(type_weights_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, float> state_weights = 3;
  if (!this->state_weights().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.Pedestrians.Distribution.StateWeightsEntry.key");
      }
    };

    if (deterministic &&
        this->state_weights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->state_weights().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->state_weights().begin();
          it != this->state_weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(state_weights_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->state_weights().begin();
          it != this->state_weights().end(); ++it) {
        entry.reset(state_weights_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Scenario.Pedestrians.Distribution)
  return target;
}

size_t Scenario_Pedestrians_Distribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Scenario.Pedestrians.Distribution)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, float> name_weights = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->name_weights_size());
  {
    ::std::unique_ptr<Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->name_weights().begin();
        it != this->name_weights().end(); ++it) {
      entry.reset(name_weights_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, float> type_weights = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->type_weights_size());
  {
    ::std::unique_ptr<Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->type_weights().begin();
        it != this->type_weights().end(); ++it) {
      entry.reset(type_weights_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, float> state_weights = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->state_weights_size());
  {
    ::std::unique_ptr<Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->state_weights().begin();
        it != this->state_weights().end(); ++it) {
      entry.reset(state_weights_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scenario_Pedestrians_Distribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Scenario.Pedestrians.Distribution)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario_Pedestrians_Distribution* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario_Pedestrians_Distribution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Scenario.Pedestrians.Distribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Scenario.Pedestrians.Distribution)
    MergeFrom(*source);
  }
}

void Scenario_Pedestrians_Distribution::MergeFrom(const Scenario_Pedestrians_Distribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Scenario.Pedestrians.Distribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  name_weights_.MergeFrom(from.name_weights_);
  type_weights_.MergeFrom(from.type_weights_);
  state_weights_.MergeFrom(from.state_weights_);
}

void Scenario_Pedestrians_Distribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Scenario.Pedestrians.Distribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario_Pedestrians_Distribution::CopyFrom(const Scenario_Pedestrians_Distribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Scenario.Pedestrians.Distribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario_Pedestrians_Distribution::IsInitialized() const {
  return true;
}

void Scenario_Pedestrians_Distribution::Swap(Scenario_Pedestrians_Distribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario_Pedestrians_Distribution::InternalSwap(Scenario_Pedestrians_Distribution* other) {
  using std::swap;
  name_weights_.Swap(&other->name_weights_);
  type_weights_.Swap(&other->type_weights_);
  state_weights_.Swap(&other->state_weights_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scenario_Pedestrians_Distribution::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Scenario_Pedestrians::InitAsDefaultInstance() {
  ::metamoto::types::_Scenario_Pedestrians_default_instance_._instance.get_mutable()->distribution_ = const_cast< ::metamoto::types::Scenario_Pedestrians_Distribution*>(
      ::metamoto::types::Scenario_Pedestrians_Distribution::internal_default_instance());
  ::metamoto::types::_Scenario_Pedestrians_default_instance_.num_random_pedestrians_ = 0;
  ::metamoto::types::_Scenario_Pedestrians_default_instance_.pedestrian_traffic_ = 0;
}
void Scenario_Pedestrians::clear_region() {
  region_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario_Pedestrians::kRegionFieldNumber;
const int Scenario_Pedestrians::kDistributionFieldNumber;
const int Scenario_Pedestrians::kPedestriansFieldNumber;
const int Scenario_Pedestrians::kNumRandomPedestriansFieldNumber;
const int Scenario_Pedestrians::kPedestrianTrafficFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario_Pedestrians::Scenario_Pedestrians()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Pedestrians.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Scenario.Pedestrians)
}
Scenario_Pedestrians::Scenario_Pedestrians(const Scenario_Pedestrians& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      region_(from.region_),
      pedestrians_(from.pedestrians_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_distribution()) {
    distribution_ = new ::metamoto::types::Scenario_Pedestrians_Distribution(*from.distribution_);
  } else {
    distribution_ = NULL;
  }
  clear_has_random_oneof();
  switch (from.random_oneof_case()) {
    case kNumRandomPedestrians: {
      set_num_random_pedestrians(from.num_random_pedestrians());
      break;
    }
    case kPedestrianTraffic: {
      set_pedestrian_traffic(from.pedestrian_traffic());
      break;
    }
    case RANDOM_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Scenario.Pedestrians)
}

void Scenario_Pedestrians::SharedCtor() {
  distribution_ = NULL;
  clear_has_random_oneof();
}

Scenario_Pedestrians::~Scenario_Pedestrians() {
  // @@protoc_insertion_point(destructor:metamoto.types.Scenario.Pedestrians)
  SharedDtor();
}

void Scenario_Pedestrians::SharedDtor() {
  if (this != internal_default_instance()) delete distribution_;
  if (has_random_oneof()) {
    clear_random_oneof();
  }
}

void Scenario_Pedestrians::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scenario_Pedestrians::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenario_Pedestrians& Scenario_Pedestrians::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Pedestrians.base);
  return *internal_default_instance();
}


void Scenario_Pedestrians::clear_random_oneof() {
// @@protoc_insertion_point(one_of_clear_start:metamoto.types.Scenario.Pedestrians)
  switch (random_oneof_case()) {
    case kNumRandomPedestrians: {
      // No need to clear
      break;
    }
    case kPedestrianTraffic: {
      // No need to clear
      break;
    }
    case RANDOM_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RANDOM_ONEOF_NOT_SET;
}


void Scenario_Pedestrians::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Scenario.Pedestrians)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_.Clear();
  pedestrians_.Clear();
  if (GetArenaNoVirtual() == NULL && distribution_ != NULL) {
    delete distribution_;
  }
  distribution_ = NULL;
  clear_random_oneof();
  _internal_metadata_.Clear();
}

bool Scenario_Pedestrians::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Scenario.Pedestrians)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metamoto.types.Vector3 region = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Scenario.Pedestrians.Distribution distribution = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_distribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.PedestrianConfiguration pedestrians = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pedestrians()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_random_pedestrians = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          clear_random_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_oneof_.num_random_pedestrians_)));
          set_has_num_random_pedestrians();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pedestrian_traffic = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          clear_random_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_oneof_.pedestrian_traffic_)));
          set_has_pedestrian_traffic();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Scenario.Pedestrians)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Scenario.Pedestrians)
  return false;
#undef DO_
}

void Scenario_Pedestrians::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Scenario.Pedestrians)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.Vector3 region = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->region(static_cast<int>(i)),
      output);
  }

  // .metamoto.types.Scenario.Pedestrians.Distribution distribution = 2;
  if (this->has_distribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_distribution(), output);
  }

  // repeated .metamoto.types.PedestrianConfiguration pedestrians = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pedestrians_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->pedestrians(static_cast<int>(i)),
      output);
  }

  // int32 num_random_pedestrians = 4;
  if (has_num_random_pedestrians()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_random_pedestrians(), output);
  }

  // float pedestrian_traffic = 5;
  if (has_pedestrian_traffic()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pedestrian_traffic(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Scenario.Pedestrians)
}

::google::protobuf::uint8* Scenario_Pedestrians::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Scenario.Pedestrians)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.Vector3 region = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->region(static_cast<int>(i)), deterministic, target);
  }

  // .metamoto.types.Scenario.Pedestrians.Distribution distribution = 2;
  if (this->has_distribution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_distribution(), deterministic, target);
  }

  // repeated .metamoto.types.PedestrianConfiguration pedestrians = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pedestrians_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->pedestrians(static_cast<int>(i)), deterministic, target);
  }

  // int32 num_random_pedestrians = 4;
  if (has_num_random_pedestrians()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_random_pedestrians(), target);
  }

  // float pedestrian_traffic = 5;
  if (has_pedestrian_traffic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pedestrian_traffic(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Scenario.Pedestrians)
  return target;
}

size_t Scenario_Pedestrians::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Scenario.Pedestrians)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.Vector3 region = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->region_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->region(static_cast<int>(i)));
    }
  }

  // repeated .metamoto.types.PedestrianConfiguration pedestrians = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->pedestrians_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pedestrians(static_cast<int>(i)));
    }
  }

  // .metamoto.types.Scenario.Pedestrians.Distribution distribution = 2;
  if (this->has_distribution()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *distribution_);
  }

  switch (random_oneof_case()) {
    // int32 num_random_pedestrians = 4;
    case kNumRandomPedestrians: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_random_pedestrians());
      break;
    }
    // float pedestrian_traffic = 5;
    case kPedestrianTraffic: {
      total_size += 1 + 4;
      break;
    }
    case RANDOM_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scenario_Pedestrians::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Scenario.Pedestrians)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario_Pedestrians* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario_Pedestrians>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Scenario.Pedestrians)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Scenario.Pedestrians)
    MergeFrom(*source);
  }
}

void Scenario_Pedestrians::MergeFrom(const Scenario_Pedestrians& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Scenario.Pedestrians)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_.MergeFrom(from.region_);
  pedestrians_.MergeFrom(from.pedestrians_);
  if (from.has_distribution()) {
    mutable_distribution()->::metamoto::types::Scenario_Pedestrians_Distribution::MergeFrom(from.distribution());
  }
  switch (from.random_oneof_case()) {
    case kNumRandomPedestrians: {
      set_num_random_pedestrians(from.num_random_pedestrians());
      break;
    }
    case kPedestrianTraffic: {
      set_pedestrian_traffic(from.pedestrian_traffic());
      break;
    }
    case RANDOM_ONEOF_NOT_SET: {
      break;
    }
  }
}

void Scenario_Pedestrians::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Scenario.Pedestrians)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario_Pedestrians::CopyFrom(const Scenario_Pedestrians& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Scenario.Pedestrians)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario_Pedestrians::IsInitialized() const {
  return true;
}

void Scenario_Pedestrians::Swap(Scenario_Pedestrians* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario_Pedestrians::InternalSwap(Scenario_Pedestrians* other) {
  using std::swap;
  CastToBase(&region_)->InternalSwap(CastToBase(&other->region_));
  CastToBase(&pedestrians_)->InternalSwap(CastToBase(&other->pedestrians_));
  swap(distribution_, other->distribution_);
  swap(random_oneof_, other->random_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scenario_Pedestrians::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Scenario_TrafficLight_Direction::InitAsDefaultInstance() {
  ::metamoto::types::_Scenario_TrafficLight_Direction_default_instance_._instance.get_mutable()->green_time_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::metamoto::types::_Scenario_TrafficLight_Direction_default_instance_._instance.get_mutable()->yellow_time_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::metamoto::types::_Scenario_TrafficLight_Direction_default_instance_._instance.get_mutable()->crosswalk_walk_time_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
}
void Scenario_TrafficLight_Direction::clear_green_time() {
  if (GetArenaNoVirtual() == NULL && green_time_ != NULL) {
    delete green_time_;
  }
  green_time_ = NULL;
}
void Scenario_TrafficLight_Direction::clear_yellow_time() {
  if (GetArenaNoVirtual() == NULL && yellow_time_ != NULL) {
    delete yellow_time_;
  }
  yellow_time_ = NULL;
}
void Scenario_TrafficLight_Direction::clear_crosswalk_walk_time() {
  if (GetArenaNoVirtual() == NULL && crosswalk_walk_time_ != NULL) {
    delete crosswalk_walk_time_;
  }
  crosswalk_walk_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario_TrafficLight_Direction::kIdFieldNumber;
const int Scenario_TrafficLight_Direction::kGreenTimeFieldNumber;
const int Scenario_TrafficLight_Direction::kYellowTimeFieldNumber;
const int Scenario_TrafficLight_Direction::kCrosswalkWalkTimeFieldNumber;
const int Scenario_TrafficLight_Direction::kSynchronizeWithDirectionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario_TrafficLight_Direction::Scenario_TrafficLight_Direction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_TrafficLight_Direction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Scenario.TrafficLight.Direction)
}
Scenario_TrafficLight_Direction::Scenario_TrafficLight_Direction(const Scenario_TrafficLight_Direction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  synchronize_with_direction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.synchronize_with_direction_id().size() > 0) {
    synchronize_with_direction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.synchronize_with_direction_id_);
  }
  if (from.has_green_time()) {
    green_time_ = new ::google::protobuf::FloatValue(*from.green_time_);
  } else {
    green_time_ = NULL;
  }
  if (from.has_yellow_time()) {
    yellow_time_ = new ::google::protobuf::FloatValue(*from.yellow_time_);
  } else {
    yellow_time_ = NULL;
  }
  if (from.has_crosswalk_walk_time()) {
    crosswalk_walk_time_ = new ::google::protobuf::FloatValue(*from.crosswalk_walk_time_);
  } else {
    crosswalk_walk_time_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Scenario.TrafficLight.Direction)
}

void Scenario_TrafficLight_Direction::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  synchronize_with_direction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&green_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crosswalk_walk_time_) -
      reinterpret_cast<char*>(&green_time_)) + sizeof(crosswalk_walk_time_));
}

Scenario_TrafficLight_Direction::~Scenario_TrafficLight_Direction() {
  // @@protoc_insertion_point(destructor:metamoto.types.Scenario.TrafficLight.Direction)
  SharedDtor();
}

void Scenario_TrafficLight_Direction::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  synchronize_with_direction_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete green_time_;
  if (this != internal_default_instance()) delete yellow_time_;
  if (this != internal_default_instance()) delete crosswalk_walk_time_;
}

void Scenario_TrafficLight_Direction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scenario_TrafficLight_Direction::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenario_TrafficLight_Direction& Scenario_TrafficLight_Direction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_TrafficLight_Direction.base);
  return *internal_default_instance();
}


void Scenario_TrafficLight_Direction::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Scenario.TrafficLight.Direction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  synchronize_with_direction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && green_time_ != NULL) {
    delete green_time_;
  }
  green_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && yellow_time_ != NULL) {
    delete yellow_time_;
  }
  yellow_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && crosswalk_walk_time_ != NULL) {
    delete crosswalk_walk_time_;
  }
  crosswalk_walk_time_ = NULL;
  _internal_metadata_.Clear();
}

bool Scenario_TrafficLight_Direction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Scenario.TrafficLight.Direction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.TrafficLight.Direction.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue green_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_green_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue yellow_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yellow_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue crosswalk_walk_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crosswalk_walk_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string synchronize_with_direction_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_synchronize_with_direction_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->synchronize_with_direction_id().data(), static_cast<int>(this->synchronize_with_direction_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.TrafficLight.Direction.synchronize_with_direction_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Scenario.TrafficLight.Direction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Scenario.TrafficLight.Direction)
  return false;
#undef DO_
}

void Scenario_TrafficLight_Direction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Scenario.TrafficLight.Direction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.TrafficLight.Direction.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .google.protobuf.FloatValue green_time = 2;
  if (this->has_green_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_green_time(), output);
  }

  // .google.protobuf.FloatValue yellow_time = 3;
  if (this->has_yellow_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_yellow_time(), output);
  }

  // .google.protobuf.FloatValue crosswalk_walk_time = 4;
  if (this->has_crosswalk_walk_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_crosswalk_walk_time(), output);
  }

  // string synchronize_with_direction_id = 5;
  if (this->synchronize_with_direction_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->synchronize_with_direction_id().data(), static_cast<int>(this->synchronize_with_direction_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.TrafficLight.Direction.synchronize_with_direction_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->synchronize_with_direction_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Scenario.TrafficLight.Direction)
}

::google::protobuf::uint8* Scenario_TrafficLight_Direction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Scenario.TrafficLight.Direction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.TrafficLight.Direction.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .google.protobuf.FloatValue green_time = 2;
  if (this->has_green_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_green_time(), deterministic, target);
  }

  // .google.protobuf.FloatValue yellow_time = 3;
  if (this->has_yellow_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_yellow_time(), deterministic, target);
  }

  // .google.protobuf.FloatValue crosswalk_walk_time = 4;
  if (this->has_crosswalk_walk_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_crosswalk_walk_time(), deterministic, target);
  }

  // string synchronize_with_direction_id = 5;
  if (this->synchronize_with_direction_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->synchronize_with_direction_id().data(), static_cast<int>(this->synchronize_with_direction_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.TrafficLight.Direction.synchronize_with_direction_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->synchronize_with_direction_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Scenario.TrafficLight.Direction)
  return target;
}

size_t Scenario_TrafficLight_Direction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Scenario.TrafficLight.Direction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string synchronize_with_direction_id = 5;
  if (this->synchronize_with_direction_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->synchronize_with_direction_id());
  }

  // .google.protobuf.FloatValue green_time = 2;
  if (this->has_green_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *green_time_);
  }

  // .google.protobuf.FloatValue yellow_time = 3;
  if (this->has_yellow_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *yellow_time_);
  }

  // .google.protobuf.FloatValue crosswalk_walk_time = 4;
  if (this->has_crosswalk_walk_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *crosswalk_walk_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scenario_TrafficLight_Direction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Scenario.TrafficLight.Direction)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario_TrafficLight_Direction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario_TrafficLight_Direction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Scenario.TrafficLight.Direction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Scenario.TrafficLight.Direction)
    MergeFrom(*source);
  }
}

void Scenario_TrafficLight_Direction::MergeFrom(const Scenario_TrafficLight_Direction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Scenario.TrafficLight.Direction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.synchronize_with_direction_id().size() > 0) {

    synchronize_with_direction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.synchronize_with_direction_id_);
  }
  if (from.has_green_time()) {
    mutable_green_time()->::google::protobuf::FloatValue::MergeFrom(from.green_time());
  }
  if (from.has_yellow_time()) {
    mutable_yellow_time()->::google::protobuf::FloatValue::MergeFrom(from.yellow_time());
  }
  if (from.has_crosswalk_walk_time()) {
    mutable_crosswalk_walk_time()->::google::protobuf::FloatValue::MergeFrom(from.crosswalk_walk_time());
  }
}

void Scenario_TrafficLight_Direction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Scenario.TrafficLight.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario_TrafficLight_Direction::CopyFrom(const Scenario_TrafficLight_Direction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Scenario.TrafficLight.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario_TrafficLight_Direction::IsInitialized() const {
  return true;
}

void Scenario_TrafficLight_Direction::Swap(Scenario_TrafficLight_Direction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario_TrafficLight_Direction::InternalSwap(Scenario_TrafficLight_Direction* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  synchronize_with_direction_id_.Swap(&other->synchronize_with_direction_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(green_time_, other->green_time_);
  swap(yellow_time_, other->yellow_time_);
  swap(crosswalk_walk_time_, other->crosswalk_walk_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scenario_TrafficLight_Direction::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Scenario_TrafficLight::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario_TrafficLight::kDirectionsFieldNumber;
const int Scenario_TrafficLight::kAllRedTimeFieldNumber;
const int Scenario_TrafficLight::kStartGreenDirectionFieldNumber;
const int Scenario_TrafficLight::kStartCycleOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario_TrafficLight::Scenario_TrafficLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_TrafficLight.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Scenario.TrafficLight)
}
Scenario_TrafficLight::Scenario_TrafficLight(const Scenario_TrafficLight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      directions_(from.directions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_green_direction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_green_direction().size() > 0) {
    start_green_direction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_green_direction_);
  }
  ::memcpy(&all_red_time_, &from.all_red_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_cycle_offset_) -
    reinterpret_cast<char*>(&all_red_time_)) + sizeof(start_cycle_offset_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Scenario.TrafficLight)
}

void Scenario_TrafficLight::SharedCtor() {
  start_green_direction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&all_red_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_cycle_offset_) -
      reinterpret_cast<char*>(&all_red_time_)) + sizeof(start_cycle_offset_));
}

Scenario_TrafficLight::~Scenario_TrafficLight() {
  // @@protoc_insertion_point(destructor:metamoto.types.Scenario.TrafficLight)
  SharedDtor();
}

void Scenario_TrafficLight::SharedDtor() {
  start_green_direction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Scenario_TrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scenario_TrafficLight::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenario_TrafficLight& Scenario_TrafficLight::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_TrafficLight.base);
  return *internal_default_instance();
}


void Scenario_TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Scenario.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directions_.Clear();
  start_green_direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&all_red_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_cycle_offset_) -
      reinterpret_cast<char*>(&all_red_time_)) + sizeof(start_cycle_offset_));
  _internal_metadata_.Clear();
}

bool Scenario_TrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Scenario.TrafficLight)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metamoto.types.Scenario.TrafficLight.Direction directions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_directions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float all_red_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &all_red_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string start_green_direction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_green_direction()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_green_direction().data(), static_cast<int>(this->start_green_direction().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.TrafficLight.start_green_direction"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float start_cycle_offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_cycle_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Scenario.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Scenario.TrafficLight)
  return false;
#undef DO_
}

void Scenario_TrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Scenario.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.Scenario.TrafficLight.Direction directions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->directions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->directions(static_cast<int>(i)),
      output);
  }

  // float all_red_time = 2;
  if (this->all_red_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->all_red_time(), output);
  }

  // string start_green_direction = 3;
  if (this->start_green_direction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_green_direction().data(), static_cast<int>(this->start_green_direction().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.TrafficLight.start_green_direction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->start_green_direction(), output);
  }

  // float start_cycle_offset = 4;
  if (this->start_cycle_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->start_cycle_offset(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Scenario.TrafficLight)
}

::google::protobuf::uint8* Scenario_TrafficLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Scenario.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.Scenario.TrafficLight.Direction directions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->directions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->directions(static_cast<int>(i)), deterministic, target);
  }

  // float all_red_time = 2;
  if (this->all_red_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->all_red_time(), target);
  }

  // string start_green_direction = 3;
  if (this->start_green_direction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_green_direction().data(), static_cast<int>(this->start_green_direction().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.TrafficLight.start_green_direction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->start_green_direction(), target);
  }

  // float start_cycle_offset = 4;
  if (this->start_cycle_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->start_cycle_offset(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Scenario.TrafficLight)
  return target;
}

size_t Scenario_TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Scenario.TrafficLight)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.Scenario.TrafficLight.Direction directions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->directions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->directions(static_cast<int>(i)));
    }
  }

  // string start_green_direction = 3;
  if (this->start_green_direction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_green_direction());
  }

  // float all_red_time = 2;
  if (this->all_red_time() != 0) {
    total_size += 1 + 4;
  }

  // float start_cycle_offset = 4;
  if (this->start_cycle_offset() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scenario_TrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Scenario.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario_TrafficLight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario_TrafficLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Scenario.TrafficLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Scenario.TrafficLight)
    MergeFrom(*source);
  }
}

void Scenario_TrafficLight::MergeFrom(const Scenario_TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Scenario.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  directions_.MergeFrom(from.directions_);
  if (from.start_green_direction().size() > 0) {

    start_green_direction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_green_direction_);
  }
  if (from.all_red_time() != 0) {
    set_all_red_time(from.all_red_time());
  }
  if (from.start_cycle_offset() != 0) {
    set_start_cycle_offset(from.start_cycle_offset());
  }
}

void Scenario_TrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Scenario.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario_TrafficLight::CopyFrom(const Scenario_TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Scenario.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario_TrafficLight::IsInitialized() const {
  return true;
}

void Scenario_TrafficLight::Swap(Scenario_TrafficLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario_TrafficLight::InternalSwap(Scenario_TrafficLight* other) {
  using std::swap;
  CastToBase(&directions_)->InternalSwap(CastToBase(&other->directions_));
  start_green_direction_.Swap(&other->start_green_direction_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(all_red_time_, other->all_red_time_);
  swap(start_cycle_offset_, other->start_cycle_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scenario_TrafficLight::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Scenario_TrafficLightsEntry_DoNotUse::Scenario_TrafficLightsEntry_DoNotUse() {}
Scenario_TrafficLightsEntry_DoNotUse::Scenario_TrafficLightsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Scenario_TrafficLightsEntry_DoNotUse::MergeFrom(const Scenario_TrafficLightsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Scenario_TrafficLightsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[20];
}
void Scenario_TrafficLightsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Scenario_Intersection_SignalState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario_Intersection_SignalState::kSignalIdFieldNumber;
const int Scenario_Intersection_SignalState::kStateNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario_Intersection_SignalState::Scenario_Intersection_SignalState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Intersection_SignalState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Scenario.Intersection.SignalState)
}
Scenario_Intersection_SignalState::Scenario_Intersection_SignalState(const Scenario_Intersection_SignalState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signal_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signal_id().size() > 0) {
    signal_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signal_id_);
  }
  state_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state_name().size() > 0) {
    state_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_name_);
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Scenario.Intersection.SignalState)
}

void Scenario_Intersection_SignalState::SharedCtor() {
  signal_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Scenario_Intersection_SignalState::~Scenario_Intersection_SignalState() {
  // @@protoc_insertion_point(destructor:metamoto.types.Scenario.Intersection.SignalState)
  SharedDtor();
}

void Scenario_Intersection_SignalState::SharedDtor() {
  signal_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Scenario_Intersection_SignalState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scenario_Intersection_SignalState::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenario_Intersection_SignalState& Scenario_Intersection_SignalState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Intersection_SignalState.base);
  return *internal_default_instance();
}


void Scenario_Intersection_SignalState::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Scenario.Intersection.SignalState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Scenario_Intersection_SignalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Scenario.Intersection.SignalState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string signal_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signal_id().data(), static_cast<int>(this->signal_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.Intersection.SignalState.signal_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string state_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state_name().data(), static_cast<int>(this->state_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.Intersection.SignalState.state_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Scenario.Intersection.SignalState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Scenario.Intersection.SignalState)
  return false;
#undef DO_
}

void Scenario_Intersection_SignalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Scenario.Intersection.SignalState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signal_id = 1;
  if (this->signal_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signal_id().data(), static_cast<int>(this->signal_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.Intersection.SignalState.signal_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->signal_id(), output);
  }

  // string state_name = 2;
  if (this->state_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state_name().data(), static_cast<int>(this->state_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.Intersection.SignalState.state_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->state_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Scenario.Intersection.SignalState)
}

::google::protobuf::uint8* Scenario_Intersection_SignalState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Scenario.Intersection.SignalState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signal_id = 1;
  if (this->signal_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signal_id().data(), static_cast<int>(this->signal_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.Intersection.SignalState.signal_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signal_id(), target);
  }

  // string state_name = 2;
  if (this->state_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state_name().data(), static_cast<int>(this->state_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.Intersection.SignalState.state_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->state_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Scenario.Intersection.SignalState)
  return target;
}

size_t Scenario_Intersection_SignalState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Scenario.Intersection.SignalState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string signal_id = 1;
  if (this->signal_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signal_id());
  }

  // string state_name = 2;
  if (this->state_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scenario_Intersection_SignalState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Scenario.Intersection.SignalState)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario_Intersection_SignalState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario_Intersection_SignalState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Scenario.Intersection.SignalState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Scenario.Intersection.SignalState)
    MergeFrom(*source);
  }
}

void Scenario_Intersection_SignalState::MergeFrom(const Scenario_Intersection_SignalState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Scenario.Intersection.SignalState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signal_id().size() > 0) {

    signal_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signal_id_);
  }
  if (from.state_name().size() > 0) {

    state_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_name_);
  }
}

void Scenario_Intersection_SignalState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Scenario.Intersection.SignalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario_Intersection_SignalState::CopyFrom(const Scenario_Intersection_SignalState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Scenario.Intersection.SignalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario_Intersection_SignalState::IsInitialized() const {
  return true;
}

void Scenario_Intersection_SignalState::Swap(Scenario_Intersection_SignalState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario_Intersection_SignalState::InternalSwap(Scenario_Intersection_SignalState* other) {
  using std::swap;
  signal_id_.Swap(&other->signal_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  state_name_.Swap(&other->state_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scenario_Intersection_SignalState::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Scenario_Intersection_IntersectionState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario_Intersection_IntersectionState::kDurationFieldNumber;
const int Scenario_Intersection_IntersectionState::kSignalStatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario_Intersection_IntersectionState::Scenario_Intersection_IntersectionState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Intersection_IntersectionState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Scenario.Intersection.IntersectionState)
}
Scenario_Intersection_IntersectionState::Scenario_Intersection_IntersectionState(const Scenario_Intersection_IntersectionState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      signal_states_(from.signal_states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Scenario.Intersection.IntersectionState)
}

void Scenario_Intersection_IntersectionState::SharedCtor() {
  duration_ = 0;
}

Scenario_Intersection_IntersectionState::~Scenario_Intersection_IntersectionState() {
  // @@protoc_insertion_point(destructor:metamoto.types.Scenario.Intersection.IntersectionState)
  SharedDtor();
}

void Scenario_Intersection_IntersectionState::SharedDtor() {
}

void Scenario_Intersection_IntersectionState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scenario_Intersection_IntersectionState::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenario_Intersection_IntersectionState& Scenario_Intersection_IntersectionState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Intersection_IntersectionState.base);
  return *internal_default_instance();
}


void Scenario_Intersection_IntersectionState::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Scenario.Intersection.IntersectionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_states_.Clear();
  duration_ = 0;
  _internal_metadata_.Clear();
}

bool Scenario_Intersection_IntersectionState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Scenario.Intersection.IntersectionState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float duration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Scenario.Intersection.SignalState signal_states = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_signal_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Scenario.Intersection.IntersectionState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Scenario.Intersection.IntersectionState)
  return false;
#undef DO_
}

void Scenario_Intersection_IntersectionState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Scenario.Intersection.IntersectionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float duration = 1;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->duration(), output);
  }

  // repeated .metamoto.types.Scenario.Intersection.SignalState signal_states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signal_states_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->signal_states(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Scenario.Intersection.IntersectionState)
}

::google::protobuf::uint8* Scenario_Intersection_IntersectionState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Scenario.Intersection.IntersectionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float duration = 1;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->duration(), target);
  }

  // repeated .metamoto.types.Scenario.Intersection.SignalState signal_states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signal_states_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->signal_states(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Scenario.Intersection.IntersectionState)
  return target;
}

size_t Scenario_Intersection_IntersectionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Scenario.Intersection.IntersectionState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.Scenario.Intersection.SignalState signal_states = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->signal_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->signal_states(static_cast<int>(i)));
    }
  }

  // float duration = 1;
  if (this->duration() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scenario_Intersection_IntersectionState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Scenario.Intersection.IntersectionState)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario_Intersection_IntersectionState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario_Intersection_IntersectionState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Scenario.Intersection.IntersectionState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Scenario.Intersection.IntersectionState)
    MergeFrom(*source);
  }
}

void Scenario_Intersection_IntersectionState::MergeFrom(const Scenario_Intersection_IntersectionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Scenario.Intersection.IntersectionState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_states_.MergeFrom(from.signal_states_);
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void Scenario_Intersection_IntersectionState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Scenario.Intersection.IntersectionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario_Intersection_IntersectionState::CopyFrom(const Scenario_Intersection_IntersectionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Scenario.Intersection.IntersectionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario_Intersection_IntersectionState::IsInitialized() const {
  return true;
}

void Scenario_Intersection_IntersectionState::Swap(Scenario_Intersection_IntersectionState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario_Intersection_IntersectionState::InternalSwap(Scenario_Intersection_IntersectionState* other) {
  using std::swap;
  CastToBase(&signal_states_)->InternalSwap(CastToBase(&other->signal_states_));
  swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scenario_Intersection_IntersectionState::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Scenario_Intersection_Phase::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario_Intersection_Phase::kIntersectionStatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario_Intersection_Phase::Scenario_Intersection_Phase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Intersection_Phase.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Scenario.Intersection.Phase)
}
Scenario_Intersection_Phase::Scenario_Intersection_Phase(const Scenario_Intersection_Phase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      intersection_states_(from.intersection_states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Scenario.Intersection.Phase)
}

void Scenario_Intersection_Phase::SharedCtor() {
}

Scenario_Intersection_Phase::~Scenario_Intersection_Phase() {
  // @@protoc_insertion_point(destructor:metamoto.types.Scenario.Intersection.Phase)
  SharedDtor();
}

void Scenario_Intersection_Phase::SharedDtor() {
}

void Scenario_Intersection_Phase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scenario_Intersection_Phase::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenario_Intersection_Phase& Scenario_Intersection_Phase::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Intersection_Phase.base);
  return *internal_default_instance();
}


void Scenario_Intersection_Phase::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Scenario.Intersection.Phase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intersection_states_.Clear();
  _internal_metadata_.Clear();
}

bool Scenario_Intersection_Phase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Scenario.Intersection.Phase)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metamoto.types.Scenario.Intersection.IntersectionState intersection_states = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_intersection_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Scenario.Intersection.Phase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Scenario.Intersection.Phase)
  return false;
#undef DO_
}

void Scenario_Intersection_Phase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Scenario.Intersection.Phase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.Scenario.Intersection.IntersectionState intersection_states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intersection_states_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->intersection_states(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Scenario.Intersection.Phase)
}

::google::protobuf::uint8* Scenario_Intersection_Phase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Scenario.Intersection.Phase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.Scenario.Intersection.IntersectionState intersection_states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intersection_states_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->intersection_states(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Scenario.Intersection.Phase)
  return target;
}

size_t Scenario_Intersection_Phase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Scenario.Intersection.Phase)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.Scenario.Intersection.IntersectionState intersection_states = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->intersection_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->intersection_states(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scenario_Intersection_Phase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Scenario.Intersection.Phase)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario_Intersection_Phase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario_Intersection_Phase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Scenario.Intersection.Phase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Scenario.Intersection.Phase)
    MergeFrom(*source);
  }
}

void Scenario_Intersection_Phase::MergeFrom(const Scenario_Intersection_Phase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Scenario.Intersection.Phase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intersection_states_.MergeFrom(from.intersection_states_);
}

void Scenario_Intersection_Phase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Scenario.Intersection.Phase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario_Intersection_Phase::CopyFrom(const Scenario_Intersection_Phase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Scenario.Intersection.Phase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario_Intersection_Phase::IsInitialized() const {
  return true;
}

void Scenario_Intersection_Phase::Swap(Scenario_Intersection_Phase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario_Intersection_Phase::InternalSwap(Scenario_Intersection_Phase* other) {
  using std::swap;
  CastToBase(&intersection_states_)->InternalSwap(CastToBase(&other->intersection_states_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scenario_Intersection_Phase::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Scenario_Intersection::InitAsDefaultInstance() {
  ::metamoto::types::_Scenario_Intersection_default_instance_._instance.get_mutable()->position_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
}
void Scenario_Intersection::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario_Intersection::kPhasesFieldNumber;
const int Scenario_Intersection::kStartingPhaseIndexFieldNumber;
const int Scenario_Intersection::kStartingDurationOffsetFieldNumber;
const int Scenario_Intersection::kPositionFieldNumber;
const int Scenario_Intersection::kVectorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario_Intersection::Scenario_Intersection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Intersection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Scenario.Intersection)
}
Scenario_Intersection::Scenario_Intersection(const Scenario_Intersection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      phases_(from.phases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vector_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vector_id().size() > 0) {
    vector_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vector_id_);
  }
  if (from.has_position()) {
    position_ = new ::metamoto::types::Vector3(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&starting_phase_index_, &from.starting_phase_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&starting_duration_offset_) -
    reinterpret_cast<char*>(&starting_phase_index_)) + sizeof(starting_duration_offset_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Scenario.Intersection)
}

void Scenario_Intersection::SharedCtor() {
  vector_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&starting_duration_offset_) -
      reinterpret_cast<char*>(&position_)) + sizeof(starting_duration_offset_));
}

Scenario_Intersection::~Scenario_Intersection() {
  // @@protoc_insertion_point(destructor:metamoto.types.Scenario.Intersection)
  SharedDtor();
}

void Scenario_Intersection::SharedDtor() {
  vector_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
}

void Scenario_Intersection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scenario_Intersection::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenario_Intersection& Scenario_Intersection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario_Intersection.base);
  return *internal_default_instance();
}


void Scenario_Intersection::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Scenario.Intersection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phases_.Clear();
  vector_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  ::memset(&starting_phase_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&starting_duration_offset_) -
      reinterpret_cast<char*>(&starting_phase_index_)) + sizeof(starting_duration_offset_));
  _internal_metadata_.Clear();
}

bool Scenario_Intersection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Scenario.Intersection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metamoto.types.Scenario.Intersection.Phase phases = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_phases()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 starting_phase_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starting_phase_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float starting_duration_offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &starting_duration_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vector_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vector_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vector_id().data(), static_cast<int>(this->vector_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.Intersection.vector_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Scenario.Intersection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Scenario.Intersection)
  return false;
#undef DO_
}

void Scenario_Intersection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Scenario.Intersection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.Scenario.Intersection.Phase phases = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->phases_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->phases(static_cast<int>(i)),
      output);
  }

  // int32 starting_phase_index = 2;
  if (this->starting_phase_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->starting_phase_index(), output);
  }

  // float starting_duration_offset = 3;
  if (this->starting_duration_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->starting_duration_offset(), output);
  }

  // .metamoto.types.Vector3 position = 4;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_position(), output);
  }

  // string vector_id = 5;
  if (this->vector_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vector_id().data(), static_cast<int>(this->vector_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.Intersection.vector_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->vector_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Scenario.Intersection)
}

::google::protobuf::uint8* Scenario_Intersection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Scenario.Intersection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.Scenario.Intersection.Phase phases = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->phases_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->phases(static_cast<int>(i)), deterministic, target);
  }

  // int32 starting_phase_index = 2;
  if (this->starting_phase_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->starting_phase_index(), target);
  }

  // float starting_duration_offset = 3;
  if (this->starting_duration_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->starting_duration_offset(), target);
  }

  // .metamoto.types.Vector3 position = 4;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_position(), deterministic, target);
  }

  // string vector_id = 5;
  if (this->vector_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vector_id().data(), static_cast<int>(this->vector_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.Intersection.vector_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->vector_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Scenario.Intersection)
  return target;
}

size_t Scenario_Intersection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Scenario.Intersection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.Scenario.Intersection.Phase phases = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->phases_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->phases(static_cast<int>(i)));
    }
  }

  // string vector_id = 5;
  if (this->vector_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vector_id());
  }

  // .metamoto.types.Vector3 position = 4;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 starting_phase_index = 2;
  if (this->starting_phase_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->starting_phase_index());
  }

  // float starting_duration_offset = 3;
  if (this->starting_duration_offset() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scenario_Intersection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Scenario.Intersection)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario_Intersection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario_Intersection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Scenario.Intersection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Scenario.Intersection)
    MergeFrom(*source);
  }
}

void Scenario_Intersection::MergeFrom(const Scenario_Intersection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Scenario.Intersection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phases_.MergeFrom(from.phases_);
  if (from.vector_id().size() > 0) {

    vector_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vector_id_);
  }
  if (from.has_position()) {
    mutable_position()->::metamoto::types::Vector3::MergeFrom(from.position());
  }
  if (from.starting_phase_index() != 0) {
    set_starting_phase_index(from.starting_phase_index());
  }
  if (from.starting_duration_offset() != 0) {
    set_starting_duration_offset(from.starting_duration_offset());
  }
}

void Scenario_Intersection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Scenario.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario_Intersection::CopyFrom(const Scenario_Intersection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Scenario.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario_Intersection::IsInitialized() const {
  return true;
}

void Scenario_Intersection::Swap(Scenario_Intersection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario_Intersection::InternalSwap(Scenario_Intersection* other) {
  using std::swap;
  CastToBase(&phases_)->InternalSwap(CastToBase(&other->phases_));
  vector_id_.Swap(&other->vector_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(starting_phase_index_, other->starting_phase_index_);
  swap(starting_duration_offset_, other->starting_duration_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scenario_Intersection::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Scenario_IntersectionsEntry_DoNotUse::Scenario_IntersectionsEntry_DoNotUse() {}
Scenario_IntersectionsEntry_DoNotUse::Scenario_IntersectionsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Scenario_IntersectionsEntry_DoNotUse::MergeFrom(const Scenario_IntersectionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Scenario_IntersectionsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[25];
}
void Scenario_IntersectionsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

Scenario_RangesEntry_DoNotUse::Scenario_RangesEntry_DoNotUse() {}
Scenario_RangesEntry_DoNotUse::Scenario_RangesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Scenario_RangesEntry_DoNotUse::MergeFrom(const Scenario_RangesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Scenario_RangesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[26];
}
void Scenario_RangesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Scenario::InitAsDefaultInstance() {
  ::metamoto::types::_Scenario_default_instance_._instance.get_mutable()->version_ = const_cast< ::metamoto::types::Version*>(
      ::metamoto::types::Version::internal_default_instance());
  ::metamoto::types::_Scenario_default_instance_._instance.get_mutable()->system_ = const_cast< ::metamoto::types::Scenario_System*>(
      ::metamoto::types::Scenario_System::internal_default_instance());
  ::metamoto::types::_Scenario_default_instance_._instance.get_mutable()->objectives_ = const_cast< ::metamoto::types::Scenario_Objectives*>(
      ::metamoto::types::Scenario_Objectives::internal_default_instance());
  ::metamoto::types::_Scenario_default_instance_._instance.get_mutable()->environment_ = const_cast< ::metamoto::types::Environment*>(
      ::metamoto::types::Environment::internal_default_instance());
  ::metamoto::types::_Scenario_default_instance_._instance.get_mutable()->ego_vehicle_ = const_cast< ::metamoto::types::Scenario_EgoVehicle*>(
      ::metamoto::types::Scenario_EgoVehicle::internal_default_instance());
  ::metamoto::types::_Scenario_default_instance_._instance.get_mutable()->traffic_ = const_cast< ::metamoto::types::Scenario_Traffic*>(
      ::metamoto::types::Scenario_Traffic::internal_default_instance());
  ::metamoto::types::_Scenario_default_instance_._instance.get_mutable()->pedestrians_ = const_cast< ::metamoto::types::Scenario_Pedestrians*>(
      ::metamoto::types::Scenario_Pedestrians::internal_default_instance());
}
void Scenario::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
}
void Scenario::clear_environment() {
  if (GetArenaNoVirtual() == NULL && environment_ != NULL) {
    delete environment_;
  }
  environment_ = NULL;
}
void Scenario::clear_assets() {
  assets_.Clear();
}
void Scenario::clear_ranges() {
  ranges_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario::kIdFieldNumber;
const int Scenario::kNameFieldNumber;
const int Scenario::kSceneFieldNumber;
const int Scenario::kDescriptionFieldNumber;
const int Scenario::kReadOnlyFieldNumber;
const int Scenario::kVersionFieldNumber;
const int Scenario::kSystemFieldNumber;
const int Scenario::kObjectivesFieldNumber;
const int Scenario::kEnvironmentFieldNumber;
const int Scenario::kEgoVehicleFieldNumber;
const int Scenario::kTrafficFieldNumber;
const int Scenario::kPedestriansFieldNumber;
const int Scenario::kTrafficLightsFieldNumber;
const int Scenario::kEventsFieldNumber;
const int Scenario::kAssetsFieldNumber;
const int Scenario::kEgoVehiclesFieldNumber;
const int Scenario::kIntersectionsFieldNumber;
const int Scenario::kRangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario::Scenario()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Scenario)
}
Scenario::Scenario(const Scenario& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      events_(from.events_),
      assets_(from.assets_),
      ego_vehicles_(from.ego_vehicles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  traffic_lights_.MergeFrom(from.traffic_lights_);
  intersections_.MergeFrom(from.intersections_);
  ranges_.MergeFrom(from.ranges_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  scene_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.scene().size() > 0) {
    scene_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_system()) {
    system_ = new ::metamoto::types::Scenario_System(*from.system_);
  } else {
    system_ = NULL;
  }
  if (from.has_objectives()) {
    objectives_ = new ::metamoto::types::Scenario_Objectives(*from.objectives_);
  } else {
    objectives_ = NULL;
  }
  if (from.has_environment()) {
    environment_ = new ::metamoto::types::Environment(*from.environment_);
  } else {
    environment_ = NULL;
  }
  if (from.has_ego_vehicle()) {
    ego_vehicle_ = new ::metamoto::types::Scenario_EgoVehicle(*from.ego_vehicle_);
  } else {
    ego_vehicle_ = NULL;
  }
  if (from.has_traffic()) {
    traffic_ = new ::metamoto::types::Scenario_Traffic(*from.traffic_);
  } else {
    traffic_ = NULL;
  }
  if (from.has_pedestrians()) {
    pedestrians_ = new ::metamoto::types::Scenario_Pedestrians(*from.pedestrians_);
  } else {
    pedestrians_ = NULL;
  }
  if (from.has_version()) {
    version_ = new ::metamoto::types::Version(*from.version_);
  } else {
    version_ = NULL;
  }
  read_only_ = from.read_only_;
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Scenario)
}

void Scenario::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&system_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_only_) -
      reinterpret_cast<char*>(&system_)) + sizeof(read_only_));
}

Scenario::~Scenario() {
  // @@protoc_insertion_point(destructor:metamoto.types.Scenario)
  SharedDtor();
}

void Scenario::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete system_;
  if (this != internal_default_instance()) delete objectives_;
  if (this != internal_default_instance()) delete environment_;
  if (this != internal_default_instance()) delete ego_vehicle_;
  if (this != internal_default_instance()) delete traffic_;
  if (this != internal_default_instance()) delete pedestrians_;
  if (this != internal_default_instance()) delete version_;
}

void Scenario::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scenario::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenario& Scenario::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Scenario.base);
  return *internal_default_instance();
}


void Scenario::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Scenario)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traffic_lights_.Clear();
  events_.Clear();
  assets_.Clear();
  ego_vehicles_.Clear();
  intersections_.Clear();
  ranges_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && system_ != NULL) {
    delete system_;
  }
  system_ = NULL;
  if (GetArenaNoVirtual() == NULL && objectives_ != NULL) {
    delete objectives_;
  }
  objectives_ = NULL;
  if (GetArenaNoVirtual() == NULL && environment_ != NULL) {
    delete environment_;
  }
  environment_ = NULL;
  if (GetArenaNoVirtual() == NULL && ego_vehicle_ != NULL) {
    delete ego_vehicle_;
  }
  ego_vehicle_ = NULL;
  if (GetArenaNoVirtual() == NULL && traffic_ != NULL) {
    delete traffic_;
  }
  traffic_ = NULL;
  if (GetArenaNoVirtual() == NULL && pedestrians_ != NULL) {
    delete pedestrians_;
  }
  pedestrians_ = NULL;
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
  read_only_ = false;
  _internal_metadata_.Clear();
}

bool Scenario::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Scenario)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string scene = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scene().data(), static_cast<int>(this->scene().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.scene"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool read_only = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Scenario.System system = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_system()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Scenario.Objectives objectives = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_objectives()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Environment environment = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_environment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Scenario.EgoVehicle ego_vehicle = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ego_vehicle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Scenario.Traffic traffic = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Scenario.Pedestrians pedestrians = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pedestrians()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .metamoto.types.Scenario.TrafficLight> traffic_lights = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          Scenario_TrafficLightsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Scenario_TrafficLightsEntry_DoNotUse,
              ::std::string, ::metamoto::types::Scenario_TrafficLight,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_TrafficLight > > parser(&traffic_lights_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.TrafficLightsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Event events = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Asset assets = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_assets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Scenario.EgoVehicle ego_vehicles = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ego_vehicles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .metamoto.types.Scenario.Intersection> intersections = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          Scenario_IntersectionsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Scenario_IntersectionsEntry_DoNotUse,
              ::std::string, ::metamoto::types::Scenario_Intersection,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_Intersection > > parser(&intersections_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.IntersectionsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Version version = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .metamoto.types.Range> ranges = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          Scenario_RangesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Scenario_RangesEntry_DoNotUse,
              ::std::string, ::metamoto::types::Range,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::metamoto::types::Range > > parser(&ranges_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Scenario.RangesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Scenario)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Scenario)
  return false;
#undef DO_
}

void Scenario::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Scenario)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string scene = 3;
  if (this->scene().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scene().data(), static_cast<int>(this->scene().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.scene");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->scene(), output);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // bool read_only = 5;
  if (this->read_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->read_only(), output);
  }

  // .metamoto.types.Scenario.System system = 6;
  if (this->has_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_system(), output);
  }

  // .metamoto.types.Scenario.Objectives objectives = 7;
  if (this->has_objectives()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_objectives(), output);
  }

  // .metamoto.types.Environment environment = 8;
  if (this->has_environment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_environment(), output);
  }

  // .metamoto.types.Scenario.EgoVehicle ego_vehicle = 9;
  if (this->has_ego_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_ego_vehicle(), output);
  }

  // .metamoto.types.Scenario.Traffic traffic = 10;
  if (this->has_traffic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_traffic(), output);
  }

  // .metamoto.types.Scenario.Pedestrians pedestrians = 11;
  if (this->has_pedestrians()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_pedestrians(), output);
  }

  // map<string, .metamoto.types.Scenario.TrafficLight> traffic_lights = 12;
  if (!this->traffic_lights().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_TrafficLight >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.TrafficLightsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->traffic_lights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->traffic_lights().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_TrafficLight >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_TrafficLight >::const_iterator
          it = this->traffic_lights().begin();
          it != this->traffic_lights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_TrafficLightsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(traffic_lights_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_TrafficLightsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_TrafficLight >::const_iterator
          it = this->traffic_lights().begin();
          it != this->traffic_lights().end(); ++it) {
        entry.reset(traffic_lights_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .metamoto.types.Event events = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->events(static_cast<int>(i)),
      output);
  }

  // repeated .metamoto.types.Asset assets = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->assets(static_cast<int>(i)),
      output);
  }

  // repeated .metamoto.types.Scenario.EgoVehicle ego_vehicles = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ego_vehicles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->ego_vehicles(static_cast<int>(i)),
      output);
  }

  // map<string, .metamoto.types.Scenario.Intersection> intersections = 16;
  if (!this->intersections().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_Intersection >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.IntersectionsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->intersections().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->intersections().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_Intersection >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_Intersection >::const_iterator
          it = this->intersections().begin();
          it != this->intersections().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_IntersectionsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(intersections_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            16, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_IntersectionsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_Intersection >::const_iterator
          it = this->intersections().begin();
          it != this->intersections().end(); ++it) {
        entry.reset(intersections_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            16, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .metamoto.types.Version version = 17;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_version(), output);
  }

  // map<string, .metamoto.types.Range> ranges = 100;
  if (!this->ranges().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.RangesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ranges().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ranges().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_RangesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ranges_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            100, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_RangesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it) {
        entry.reset(ranges_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            100, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Scenario)
}

::google::protobuf::uint8* Scenario::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Scenario)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string scene = 3;
  if (this->scene().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scene().data(), static_cast<int>(this->scene().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.scene");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->scene(), target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Scenario.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // bool read_only = 5;
  if (this->read_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->read_only(), target);
  }

  // .metamoto.types.Scenario.System system = 6;
  if (this->has_system()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_system(), deterministic, target);
  }

  // .metamoto.types.Scenario.Objectives objectives = 7;
  if (this->has_objectives()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_objectives(), deterministic, target);
  }

  // .metamoto.types.Environment environment = 8;
  if (this->has_environment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_environment(), deterministic, target);
  }

  // .metamoto.types.Scenario.EgoVehicle ego_vehicle = 9;
  if (this->has_ego_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_ego_vehicle(), deterministic, target);
  }

  // .metamoto.types.Scenario.Traffic traffic = 10;
  if (this->has_traffic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_traffic(), deterministic, target);
  }

  // .metamoto.types.Scenario.Pedestrians pedestrians = 11;
  if (this->has_pedestrians()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_pedestrians(), deterministic, target);
  }

  // map<string, .metamoto.types.Scenario.TrafficLight> traffic_lights = 12;
  if (!this->traffic_lights().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_TrafficLight >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.TrafficLightsEntry.key");
      }
    };

    if (deterministic &&
        this->traffic_lights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->traffic_lights().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_TrafficLight >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_TrafficLight >::const_iterator
          it = this->traffic_lights().begin();
          it != this->traffic_lights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_TrafficLightsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(traffic_lights_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_TrafficLightsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_TrafficLight >::const_iterator
          it = this->traffic_lights().begin();
          it != this->traffic_lights().end(); ++it) {
        entry.reset(traffic_lights_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .metamoto.types.Event events = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->events(static_cast<int>(i)), deterministic, target);
  }

  // repeated .metamoto.types.Asset assets = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->assets(static_cast<int>(i)), deterministic, target);
  }

  // repeated .metamoto.types.Scenario.EgoVehicle ego_vehicles = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ego_vehicles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->ego_vehicles(static_cast<int>(i)), deterministic, target);
  }

  // map<string, .metamoto.types.Scenario.Intersection> intersections = 16;
  if (!this->intersections().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_Intersection >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.IntersectionsEntry.key");
      }
    };

    if (deterministic &&
        this->intersections().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->intersections().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_Intersection >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_Intersection >::const_iterator
          it = this->intersections().begin();
          it != this->intersections().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_IntersectionsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(intersections_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       16, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_IntersectionsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_Intersection >::const_iterator
          it = this->intersections().begin();
          it != this->intersections().end(); ++it) {
        entry.reset(intersections_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       16, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .metamoto.types.Version version = 17;
  if (this->has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_version(), deterministic, target);
  }

  // map<string, .metamoto.types.Range> ranges = 100;
  if (!this->ranges().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Scenario.RangesEntry.key");
      }
    };

    if (deterministic &&
        this->ranges().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ranges().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Scenario_RangesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ranges_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       100, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Scenario_RangesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it) {
        entry.reset(ranges_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       100, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Scenario)
  return target;
}

size_t Scenario::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Scenario)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .metamoto.types.Scenario.TrafficLight> traffic_lights = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->traffic_lights_size());
  {
    ::std::unique_ptr<Scenario_TrafficLightsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_TrafficLight >::const_iterator
        it = this->traffic_lights().begin();
        it != this->traffic_lights().end(); ++it) {
      entry.reset(traffic_lights_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .metamoto.types.Event events = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  // repeated .metamoto.types.Asset assets = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->assets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->assets(static_cast<int>(i)));
    }
  }

  // repeated .metamoto.types.Scenario.EgoVehicle ego_vehicles = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->ego_vehicles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ego_vehicles(static_cast<int>(i)));
    }
  }

  // map<string, .metamoto.types.Scenario.Intersection> intersections = 16;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->intersections_size());
  {
    ::std::unique_ptr<Scenario_IntersectionsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::metamoto::types::Scenario_Intersection >::const_iterator
        it = this->intersections().begin();
        it != this->intersections().end(); ++it) {
      entry.reset(intersections_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .metamoto.types.Range> ranges = 100;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->ranges_size());
  {
    ::std::unique_ptr<Scenario_RangesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
        it = this->ranges().begin();
        it != this->ranges().end(); ++it) {
      entry.reset(ranges_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string scene = 3;
  if (this->scene().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scene());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .metamoto.types.Scenario.System system = 6;
  if (this->has_system()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *system_);
  }

  // .metamoto.types.Scenario.Objectives objectives = 7;
  if (this->has_objectives()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *objectives_);
  }

  // .metamoto.types.Environment environment = 8;
  if (this->has_environment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *environment_);
  }

  // .metamoto.types.Scenario.EgoVehicle ego_vehicle = 9;
  if (this->has_ego_vehicle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ego_vehicle_);
  }

  // .metamoto.types.Scenario.Traffic traffic = 10;
  if (this->has_traffic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *traffic_);
  }

  // .metamoto.types.Scenario.Pedestrians pedestrians = 11;
  if (this->has_pedestrians()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pedestrians_);
  }

  // .metamoto.types.Version version = 17;
  if (this->has_version()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // bool read_only = 5;
  if (this->read_only() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scenario::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Scenario)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Scenario)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Scenario)
    MergeFrom(*source);
  }
}

void Scenario::MergeFrom(const Scenario& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Scenario)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traffic_lights_.MergeFrom(from.traffic_lights_);
  events_.MergeFrom(from.events_);
  assets_.MergeFrom(from.assets_);
  ego_vehicles_.MergeFrom(from.ego_vehicles_);
  intersections_.MergeFrom(from.intersections_);
  ranges_.MergeFrom(from.ranges_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.scene().size() > 0) {

    scene_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_system()) {
    mutable_system()->::metamoto::types::Scenario_System::MergeFrom(from.system());
  }
  if (from.has_objectives()) {
    mutable_objectives()->::metamoto::types::Scenario_Objectives::MergeFrom(from.objectives());
  }
  if (from.has_environment()) {
    mutable_environment()->::metamoto::types::Environment::MergeFrom(from.environment());
  }
  if (from.has_ego_vehicle()) {
    mutable_ego_vehicle()->::metamoto::types::Scenario_EgoVehicle::MergeFrom(from.ego_vehicle());
  }
  if (from.has_traffic()) {
    mutable_traffic()->::metamoto::types::Scenario_Traffic::MergeFrom(from.traffic());
  }
  if (from.has_pedestrians()) {
    mutable_pedestrians()->::metamoto::types::Scenario_Pedestrians::MergeFrom(from.pedestrians());
  }
  if (from.has_version()) {
    mutable_version()->::metamoto::types::Version::MergeFrom(from.version());
  }
  if (from.read_only() != 0) {
    set_read_only(from.read_only());
  }
}

void Scenario::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Scenario)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario::CopyFrom(const Scenario& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Scenario)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario::IsInitialized() const {
  return true;
}

void Scenario::Swap(Scenario* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario::InternalSwap(Scenario* other) {
  using std::swap;
  traffic_lights_.Swap(&other->traffic_lights_);
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
  CastToBase(&assets_)->InternalSwap(CastToBase(&other->assets_));
  CastToBase(&ego_vehicles_)->InternalSwap(CastToBase(&other->ego_vehicles_));
  intersections_.Swap(&other->intersections_);
  ranges_.Swap(&other->ranges_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  scene_.Swap(&other->scene_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(system_, other->system_);
  swap(objectives_, other->objectives_);
  swap(environment_, other->environment_);
  swap(ego_vehicle_, other->ego_vehicle_);
  swap(traffic_, other->traffic_);
  swap(pedestrians_, other->pedestrians_);
  swap(version_, other->version_);
  swap(read_only_, other->read_only_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scenario::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Infraction::InitAsDefaultInstance() {
  ::metamoto::types::_Infraction_default_instance_._instance.get_mutable()->fail_value_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::metamoto::types::_Infraction_default_instance_._instance.get_mutable()->stop_value_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
}
void Infraction::clear_fail_value() {
  if (GetArenaNoVirtual() == NULL && fail_value_ != NULL) {
    delete fail_value_;
  }
  fail_value_ = NULL;
}
void Infraction::clear_stop_value() {
  if (GetArenaNoVirtual() == NULL && stop_value_ != NULL) {
    delete stop_value_;
  }
  stop_value_ = NULL;
}
void Infraction::clear_other_values() {
  other_values_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Infraction::kTypeFieldNumber;
const int Infraction::kFailValueFieldNumber;
const int Infraction::kStopValueFieldNumber;
const int Infraction::kOtherValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Infraction::Infraction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Infraction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Infraction)
}
Infraction::Infraction(const Infraction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      other_values_(from.other_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fail_value()) {
    fail_value_ = new ::google::protobuf::FloatValue(*from.fail_value_);
  } else {
    fail_value_ = NULL;
  }
  if (from.has_stop_value()) {
    stop_value_ = new ::google::protobuf::FloatValue(*from.stop_value_);
  } else {
    stop_value_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Infraction)
}

void Infraction::SharedCtor() {
  ::memset(&fail_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&fail_value_)) + sizeof(type_));
}

Infraction::~Infraction() {
  // @@protoc_insertion_point(destructor:metamoto.types.Infraction)
  SharedDtor();
}

void Infraction::SharedDtor() {
  if (this != internal_default_instance()) delete fail_value_;
  if (this != internal_default_instance()) delete stop_value_;
}

void Infraction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Infraction::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Infraction& Infraction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Infraction.base);
  return *internal_default_instance();
}


void Infraction::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Infraction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  other_values_.Clear();
  if (GetArenaNoVirtual() == NULL && fail_value_ != NULL) {
    delete fail_value_;
  }
  fail_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && stop_value_ != NULL) {
    delete stop_value_;
  }
  stop_value_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Infraction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Infraction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.Infraction.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::metamoto::types::Infraction_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue fail_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fail_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue stop_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.FloatValue other_values = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_other_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Infraction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Infraction)
  return false;
#undef DO_
}

void Infraction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Infraction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Infraction.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .google.protobuf.FloatValue fail_value = 2;
  if (this->has_fail_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_fail_value(), output);
  }

  // .google.protobuf.FloatValue stop_value = 3;
  if (this->has_stop_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_stop_value(), output);
  }

  // repeated .google.protobuf.FloatValue other_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->other_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->other_values(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Infraction)
}

::google::protobuf::uint8* Infraction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Infraction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Infraction.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .google.protobuf.FloatValue fail_value = 2;
  if (this->has_fail_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_fail_value(), deterministic, target);
  }

  // .google.protobuf.FloatValue stop_value = 3;
  if (this->has_stop_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_stop_value(), deterministic, target);
  }

  // repeated .google.protobuf.FloatValue other_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->other_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->other_values(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Infraction)
  return target;
}

size_t Infraction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Infraction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.FloatValue other_values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->other_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->other_values(static_cast<int>(i)));
    }
  }

  // .google.protobuf.FloatValue fail_value = 2;
  if (this->has_fail_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fail_value_);
  }

  // .google.protobuf.FloatValue stop_value = 3;
  if (this->has_stop_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stop_value_);
  }

  // .metamoto.types.Infraction.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Infraction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Infraction)
  GOOGLE_DCHECK_NE(&from, this);
  const Infraction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Infraction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Infraction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Infraction)
    MergeFrom(*source);
  }
}

void Infraction::MergeFrom(const Infraction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Infraction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  other_values_.MergeFrom(from.other_values_);
  if (from.has_fail_value()) {
    mutable_fail_value()->::google::protobuf::FloatValue::MergeFrom(from.fail_value());
  }
  if (from.has_stop_value()) {
    mutable_stop_value()->::google::protobuf::FloatValue::MergeFrom(from.stop_value());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Infraction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Infraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Infraction::CopyFrom(const Infraction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Infraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Infraction::IsInitialized() const {
  return true;
}

void Infraction::Swap(Infraction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Infraction::InternalSwap(Infraction* other) {
  using std::swap;
  CastToBase(&other_values_)->InternalSwap(CastToBase(&other->other_values_));
  swap(fail_value_, other->fail_value_);
  swap(stop_value_, other->stop_value_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Infraction::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DriverModel_BrakingBehavior::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriverModel_BrakingBehavior::kCoastDecelerationThresholdFieldNumber;
const int DriverModel_BrakingBehavior::kCoastSpeedThresholdFieldNumber;
const int DriverModel_BrakingBehavior::kMinBrakeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriverModel_BrakingBehavior::DriverModel_BrakingBehavior()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_DriverModel_BrakingBehavior.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.DriverModel.BrakingBehavior)
}
DriverModel_BrakingBehavior::DriverModel_BrakingBehavior(const DriverModel_BrakingBehavior& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&coast_speed_threshold_, &from.coast_speed_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&coast_deceleration_threshold_) -
    reinterpret_cast<char*>(&coast_speed_threshold_)) + sizeof(coast_deceleration_threshold_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.DriverModel.BrakingBehavior)
}

void DriverModel_BrakingBehavior::SharedCtor() {
  ::memset(&coast_speed_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coast_deceleration_threshold_) -
      reinterpret_cast<char*>(&coast_speed_threshold_)) + sizeof(coast_deceleration_threshold_));
}

DriverModel_BrakingBehavior::~DriverModel_BrakingBehavior() {
  // @@protoc_insertion_point(destructor:metamoto.types.DriverModel.BrakingBehavior)
  SharedDtor();
}

void DriverModel_BrakingBehavior::SharedDtor() {
}

void DriverModel_BrakingBehavior::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DriverModel_BrakingBehavior::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DriverModel_BrakingBehavior& DriverModel_BrakingBehavior::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_DriverModel_BrakingBehavior.base);
  return *internal_default_instance();
}


void DriverModel_BrakingBehavior::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.DriverModel.BrakingBehavior)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&coast_speed_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coast_deceleration_threshold_) -
      reinterpret_cast<char*>(&coast_speed_threshold_)) + sizeof(coast_deceleration_threshold_));
  _internal_metadata_.Clear();
}

bool DriverModel_BrakingBehavior::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.DriverModel.BrakingBehavior)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float coast_speed_threshold = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coast_speed_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_brake = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float coast_deceleration_threshold = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coast_deceleration_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.DriverModel.BrakingBehavior)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.DriverModel.BrakingBehavior)
  return false;
#undef DO_
}

void DriverModel_BrakingBehavior::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.DriverModel.BrakingBehavior)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float coast_speed_threshold = 1;
  if (this->coast_speed_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->coast_speed_threshold(), output);
  }

  // float min_brake = 2;
  if (this->min_brake() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_brake(), output);
  }

  // float coast_deceleration_threshold = 7;
  if (this->coast_deceleration_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->coast_deceleration_threshold(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.DriverModel.BrakingBehavior)
}

::google::protobuf::uint8* DriverModel_BrakingBehavior::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.DriverModel.BrakingBehavior)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float coast_speed_threshold = 1;
  if (this->coast_speed_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->coast_speed_threshold(), target);
  }

  // float min_brake = 2;
  if (this->min_brake() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_brake(), target);
  }

  // float coast_deceleration_threshold = 7;
  if (this->coast_deceleration_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->coast_deceleration_threshold(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.DriverModel.BrakingBehavior)
  return target;
}

size_t DriverModel_BrakingBehavior::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.DriverModel.BrakingBehavior)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float coast_speed_threshold = 1;
  if (this->coast_speed_threshold() != 0) {
    total_size += 1 + 4;
  }

  // float min_brake = 2;
  if (this->min_brake() != 0) {
    total_size += 1 + 4;
  }

  // float coast_deceleration_threshold = 7;
  if (this->coast_deceleration_threshold() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DriverModel_BrakingBehavior::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.DriverModel.BrakingBehavior)
  GOOGLE_DCHECK_NE(&from, this);
  const DriverModel_BrakingBehavior* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DriverModel_BrakingBehavior>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.DriverModel.BrakingBehavior)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.DriverModel.BrakingBehavior)
    MergeFrom(*source);
  }
}

void DriverModel_BrakingBehavior::MergeFrom(const DriverModel_BrakingBehavior& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.DriverModel.BrakingBehavior)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.coast_speed_threshold() != 0) {
    set_coast_speed_threshold(from.coast_speed_threshold());
  }
  if (from.min_brake() != 0) {
    set_min_brake(from.min_brake());
  }
  if (from.coast_deceleration_threshold() != 0) {
    set_coast_deceleration_threshold(from.coast_deceleration_threshold());
  }
}

void DriverModel_BrakingBehavior::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.DriverModel.BrakingBehavior)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DriverModel_BrakingBehavior::CopyFrom(const DriverModel_BrakingBehavior& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.DriverModel.BrakingBehavior)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriverModel_BrakingBehavior::IsInitialized() const {
  return true;
}

void DriverModel_BrakingBehavior::Swap(DriverModel_BrakingBehavior* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriverModel_BrakingBehavior::InternalSwap(DriverModel_BrakingBehavior* other) {
  using std::swap;
  swap(coast_speed_threshold_, other->coast_speed_threshold_);
  swap(min_brake_, other->min_brake_);
  swap(coast_deceleration_threshold_, other->coast_deceleration_threshold_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DriverModel_BrakingBehavior::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DriverModel::InitAsDefaultInstance() {
  ::metamoto::types::_DriverModel_default_instance_._instance.get_mutable()->braking_behavior_ = const_cast< ::metamoto::types::DriverModel_BrakingBehavior*>(
      ::metamoto::types::DriverModel_BrakingBehavior::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriverModel::kCollisionAvoidanceFieldNumber;
const int DriverModel::kSpeedCoefficientFieldNumber;
const int DriverModel::kObeysLightsFieldNumber;
const int DriverModel::kRandomPathFieldNumber;
const int DriverModel::kLaneChangeOptimizationFieldNumber;
const int DriverModel::kLaneCenterDeviationFieldNumber;
const int DriverModel::kTimegapMultiplierFieldNumber;
const int DriverModel::kBrakingBehaviorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriverModel::DriverModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_DriverModel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.DriverModel)
}
DriverModel::DriverModel(const DriverModel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_braking_behavior()) {
    braking_behavior_ = new ::metamoto::types::DriverModel_BrakingBehavior(*from.braking_behavior_);
  } else {
    braking_behavior_ = NULL;
  }
  ::memcpy(&collision_avoidance_, &from.collision_avoidance_,
    static_cast<size_t>(reinterpret_cast<char*>(&timegap_multiplier_) -
    reinterpret_cast<char*>(&collision_avoidance_)) + sizeof(timegap_multiplier_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.DriverModel)
}

void DriverModel::SharedCtor() {
  ::memset(&braking_behavior_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timegap_multiplier_) -
      reinterpret_cast<char*>(&braking_behavior_)) + sizeof(timegap_multiplier_));
}

DriverModel::~DriverModel() {
  // @@protoc_insertion_point(destructor:metamoto.types.DriverModel)
  SharedDtor();
}

void DriverModel::SharedDtor() {
  if (this != internal_default_instance()) delete braking_behavior_;
}

void DriverModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DriverModel::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DriverModel& DriverModel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_DriverModel.base);
  return *internal_default_instance();
}


void DriverModel::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.DriverModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && braking_behavior_ != NULL) {
    delete braking_behavior_;
  }
  braking_behavior_ = NULL;
  ::memset(&collision_avoidance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timegap_multiplier_) -
      reinterpret_cast<char*>(&collision_avoidance_)) + sizeof(timegap_multiplier_));
  _internal_metadata_.Clear();
}

bool DriverModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.DriverModel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float collision_avoidance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collision_avoidance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_coefficient = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_coefficient_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool obeys_lights = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obeys_lights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool random_path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &random_path_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lane_change_optimization = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lane_change_optimization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lane_center_deviation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lane_center_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float timegap_multiplier = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timegap_multiplier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.DriverModel.BrakingBehavior braking_behavior = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_braking_behavior()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.DriverModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.DriverModel)
  return false;
#undef DO_
}

void DriverModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.DriverModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float collision_avoidance = 1;
  if (this->collision_avoidance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->collision_avoidance(), output);
  }

  // float speed_coefficient = 2;
  if (this->speed_coefficient() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->speed_coefficient(), output);
  }

  // bool obeys_lights = 3;
  if (this->obeys_lights() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->obeys_lights(), output);
  }

  // bool random_path = 4;
  if (this->random_path() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->random_path(), output);
  }

  // float lane_change_optimization = 5;
  if (this->lane_change_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->lane_change_optimization(), output);
  }

  // float lane_center_deviation = 6;
  if (this->lane_center_deviation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->lane_center_deviation(), output);
  }

  // float timegap_multiplier = 7;
  if (this->timegap_multiplier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->timegap_multiplier(), output);
  }

  // .metamoto.types.DriverModel.BrakingBehavior braking_behavior = 9;
  if (this->has_braking_behavior()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_braking_behavior(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.DriverModel)
}

::google::protobuf::uint8* DriverModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.DriverModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float collision_avoidance = 1;
  if (this->collision_avoidance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->collision_avoidance(), target);
  }

  // float speed_coefficient = 2;
  if (this->speed_coefficient() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->speed_coefficient(), target);
  }

  // bool obeys_lights = 3;
  if (this->obeys_lights() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->obeys_lights(), target);
  }

  // bool random_path = 4;
  if (this->random_path() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->random_path(), target);
  }

  // float lane_change_optimization = 5;
  if (this->lane_change_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->lane_change_optimization(), target);
  }

  // float lane_center_deviation = 6;
  if (this->lane_center_deviation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->lane_center_deviation(), target);
  }

  // float timegap_multiplier = 7;
  if (this->timegap_multiplier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->timegap_multiplier(), target);
  }

  // .metamoto.types.DriverModel.BrakingBehavior braking_behavior = 9;
  if (this->has_braking_behavior()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_braking_behavior(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.DriverModel)
  return target;
}

size_t DriverModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.DriverModel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.DriverModel.BrakingBehavior braking_behavior = 9;
  if (this->has_braking_behavior()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *braking_behavior_);
  }

  // float collision_avoidance = 1;
  if (this->collision_avoidance() != 0) {
    total_size += 1 + 4;
  }

  // float speed_coefficient = 2;
  if (this->speed_coefficient() != 0) {
    total_size += 1 + 4;
  }

  // bool obeys_lights = 3;
  if (this->obeys_lights() != 0) {
    total_size += 1 + 1;
  }

  // bool random_path = 4;
  if (this->random_path() != 0) {
    total_size += 1 + 1;
  }

  // float lane_change_optimization = 5;
  if (this->lane_change_optimization() != 0) {
    total_size += 1 + 4;
  }

  // float lane_center_deviation = 6;
  if (this->lane_center_deviation() != 0) {
    total_size += 1 + 4;
  }

  // float timegap_multiplier = 7;
  if (this->timegap_multiplier() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DriverModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.DriverModel)
  GOOGLE_DCHECK_NE(&from, this);
  const DriverModel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DriverModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.DriverModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.DriverModel)
    MergeFrom(*source);
  }
}

void DriverModel::MergeFrom(const DriverModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.DriverModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_braking_behavior()) {
    mutable_braking_behavior()->::metamoto::types::DriverModel_BrakingBehavior::MergeFrom(from.braking_behavior());
  }
  if (from.collision_avoidance() != 0) {
    set_collision_avoidance(from.collision_avoidance());
  }
  if (from.speed_coefficient() != 0) {
    set_speed_coefficient(from.speed_coefficient());
  }
  if (from.obeys_lights() != 0) {
    set_obeys_lights(from.obeys_lights());
  }
  if (from.random_path() != 0) {
    set_random_path(from.random_path());
  }
  if (from.lane_change_optimization() != 0) {
    set_lane_change_optimization(from.lane_change_optimization());
  }
  if (from.lane_center_deviation() != 0) {
    set_lane_center_deviation(from.lane_center_deviation());
  }
  if (from.timegap_multiplier() != 0) {
    set_timegap_multiplier(from.timegap_multiplier());
  }
}

void DriverModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.DriverModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DriverModel::CopyFrom(const DriverModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.DriverModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriverModel::IsInitialized() const {
  return true;
}

void DriverModel::Swap(DriverModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriverModel::InternalSwap(DriverModel* other) {
  using std::swap;
  swap(braking_behavior_, other->braking_behavior_);
  swap(collision_avoidance_, other->collision_avoidance_);
  swap(speed_coefficient_, other->speed_coefficient_);
  swap(obeys_lights_, other->obeys_lights_);
  swap(random_path_, other->random_path_);
  swap(lane_change_optimization_, other->lane_change_optimization_);
  swap(lane_center_deviation_, other->lane_center_deviation_);
  swap(timegap_multiplier_, other->timegap_multiplier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DriverModel::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficFlow_LaneSpan::InitAsDefaultInstance() {
}
void TrafficFlow_LaneSpan::clear_positions() {
  positions_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficFlow_LaneSpan::kRoadIdFieldNumber;
const int TrafficFlow_LaneSpan::kSFieldNumber;
const int TrafficFlow_LaneSpan::kLanesFieldNumber;
const int TrafficFlow_LaneSpan::kPositionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficFlow_LaneSpan::TrafficFlow_LaneSpan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_TrafficFlow_LaneSpan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.TrafficFlow.LaneSpan)
}
TrafficFlow_LaneSpan::TrafficFlow_LaneSpan(const TrafficFlow_LaneSpan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lanes_(from.lanes_),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  road_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.road_id().size() > 0) {
    road_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.road_id_);
  }
  s_ = from.s_;
  // @@protoc_insertion_point(copy_constructor:metamoto.types.TrafficFlow.LaneSpan)
}

void TrafficFlow_LaneSpan::SharedCtor() {
  road_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_ = 0;
}

TrafficFlow_LaneSpan::~TrafficFlow_LaneSpan() {
  // @@protoc_insertion_point(destructor:metamoto.types.TrafficFlow.LaneSpan)
  SharedDtor();
}

void TrafficFlow_LaneSpan::SharedDtor() {
  road_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrafficFlow_LaneSpan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficFlow_LaneSpan::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficFlow_LaneSpan& TrafficFlow_LaneSpan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_TrafficFlow_LaneSpan.base);
  return *internal_default_instance();
}


void TrafficFlow_LaneSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.TrafficFlow.LaneSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lanes_.Clear();
  positions_.Clear();
  road_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_ = 0;
  _internal_metadata_.Clear();
}

bool TrafficFlow_LaneSpan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.TrafficFlow.LaneSpan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string road_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_road_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->road_id().data(), static_cast<int>(this->road_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.TrafficFlow.LaneSpan.road_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 lanes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lanes())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_lanes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Vector3 positions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_positions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.TrafficFlow.LaneSpan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.TrafficFlow.LaneSpan)
  return false;
#undef DO_
}

void TrafficFlow_LaneSpan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.TrafficFlow.LaneSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string road_id = 1;
  if (this->road_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->road_id().data(), static_cast<int>(this->road_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.TrafficFlow.LaneSpan.road_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->road_id(), output);
  }

  // float s = 2;
  if (this->s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->s(), output);
  }

  // repeated int32 lanes = 3;
  if (this->lanes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _lanes_cached_byte_size_));
  }
  for (int i = 0, n = this->lanes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->lanes(i), output);
  }

  // repeated .metamoto.types.Vector3 positions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->positions(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.TrafficFlow.LaneSpan)
}

::google::protobuf::uint8* TrafficFlow_LaneSpan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.TrafficFlow.LaneSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string road_id = 1;
  if (this->road_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->road_id().data(), static_cast<int>(this->road_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.TrafficFlow.LaneSpan.road_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->road_id(), target);
  }

  // float s = 2;
  if (this->s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->s(), target);
  }

  // repeated int32 lanes = 3;
  if (this->lanes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _lanes_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->lanes_, target);
  }

  // repeated .metamoto.types.Vector3 positions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->positions(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.TrafficFlow.LaneSpan)
  return target;
}

size_t TrafficFlow_LaneSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.TrafficFlow.LaneSpan)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 lanes = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->lanes_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _lanes_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .metamoto.types.Vector3 positions = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->positions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->positions(static_cast<int>(i)));
    }
  }

  // string road_id = 1;
  if (this->road_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->road_id());
  }

  // float s = 2;
  if (this->s() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficFlow_LaneSpan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.TrafficFlow.LaneSpan)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficFlow_LaneSpan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficFlow_LaneSpan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.TrafficFlow.LaneSpan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.TrafficFlow.LaneSpan)
    MergeFrom(*source);
  }
}

void TrafficFlow_LaneSpan::MergeFrom(const TrafficFlow_LaneSpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.TrafficFlow.LaneSpan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lanes_.MergeFrom(from.lanes_);
  positions_.MergeFrom(from.positions_);
  if (from.road_id().size() > 0) {

    road_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.road_id_);
  }
  if (from.s() != 0) {
    set_s(from.s());
  }
}

void TrafficFlow_LaneSpan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.TrafficFlow.LaneSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficFlow_LaneSpan::CopyFrom(const TrafficFlow_LaneSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.TrafficFlow.LaneSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficFlow_LaneSpan::IsInitialized() const {
  return true;
}

void TrafficFlow_LaneSpan::Swap(TrafficFlow_LaneSpan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficFlow_LaneSpan::InternalSwap(TrafficFlow_LaneSpan* other) {
  using std::swap;
  lanes_.InternalSwap(&other->lanes_);
  CastToBase(&positions_)->InternalSwap(CastToBase(&other->positions_));
  road_id_.Swap(&other->road_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(s_, other->s_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficFlow_LaneSpan::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficFlow::InitAsDefaultInstance() {
  ::metamoto::types::_TrafficFlow_default_instance_._instance.get_mutable()->source_ = const_cast< ::metamoto::types::TrafficFlow_LaneSpan*>(
      ::metamoto::types::TrafficFlow_LaneSpan::internal_default_instance());
  ::metamoto::types::_TrafficFlow_default_instance_._instance.get_mutable()->generation_rate_ = const_cast< ::metamoto::types::NormalDistribution*>(
      ::metamoto::types::NormalDistribution::internal_default_instance());
}
void TrafficFlow::clear_generation_rate() {
  if (GetArenaNoVirtual() == NULL && generation_rate_ != NULL) {
    delete generation_rate_;
  }
  generation_rate_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficFlow::kIdFieldNumber;
const int TrafficFlow::kSourceFieldNumber;
const int TrafficFlow::kSinksFieldNumber;
const int TrafficFlow::kGenerationRateFieldNumber;
const int TrafficFlow::kSpeedFieldNumber;
const int TrafficFlow::kPopulateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficFlow::TrafficFlow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_TrafficFlow.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.TrafficFlow)
}
TrafficFlow::TrafficFlow(const TrafficFlow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sinks_(from.sinks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_source()) {
    source_ = new ::metamoto::types::TrafficFlow_LaneSpan(*from.source_);
  } else {
    source_ = NULL;
  }
  if (from.has_generation_rate()) {
    generation_rate_ = new ::metamoto::types::NormalDistribution(*from.generation_rate_);
  } else {
    generation_rate_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&populate_) -
    reinterpret_cast<char*>(&id_)) + sizeof(populate_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.TrafficFlow)
}

void TrafficFlow::SharedCtor() {
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&populate_) -
      reinterpret_cast<char*>(&source_)) + sizeof(populate_));
}

TrafficFlow::~TrafficFlow() {
  // @@protoc_insertion_point(destructor:metamoto.types.TrafficFlow)
  SharedDtor();
}

void TrafficFlow::SharedDtor() {
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete generation_rate_;
}

void TrafficFlow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficFlow::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficFlow& TrafficFlow::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_TrafficFlow.base);
  return *internal_default_instance();
}


void TrafficFlow::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.TrafficFlow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sinks_.Clear();
  if (GetArenaNoVirtual() == NULL && source_ != NULL) {
    delete source_;
  }
  source_ = NULL;
  if (GetArenaNoVirtual() == NULL && generation_rate_ != NULL) {
    delete generation_rate_;
  }
  generation_rate_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&populate_) -
      reinterpret_cast<char*>(&id_)) + sizeof(populate_));
  _internal_metadata_.Clear();
}

bool TrafficFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.TrafficFlow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.TrafficFlow.LaneSpan source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.TrafficFlow.LaneSpan sinks = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sinks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.NormalDistribution generation_rate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_generation_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool populate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &populate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.TrafficFlow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.TrafficFlow)
  return false;
#undef DO_
}

void TrafficFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.TrafficFlow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // .metamoto.types.TrafficFlow.LaneSpan source = 2;
  if (this->has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_source(), output);
  }

  // repeated .metamoto.types.TrafficFlow.LaneSpan sinks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sinks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->sinks(static_cast<int>(i)),
      output);
  }

  // .metamoto.types.NormalDistribution generation_rate = 4;
  if (this->has_generation_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_generation_rate(), output);
  }

  // float speed = 5;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed(), output);
  }

  // bool populate = 6;
  if (this->populate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->populate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.TrafficFlow)
}

::google::protobuf::uint8* TrafficFlow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.TrafficFlow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // .metamoto.types.TrafficFlow.LaneSpan source = 2;
  if (this->has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_source(), deterministic, target);
  }

  // repeated .metamoto.types.TrafficFlow.LaneSpan sinks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sinks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->sinks(static_cast<int>(i)), deterministic, target);
  }

  // .metamoto.types.NormalDistribution generation_rate = 4;
  if (this->has_generation_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_generation_rate(), deterministic, target);
  }

  // float speed = 5;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed(), target);
  }

  // bool populate = 6;
  if (this->populate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->populate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.TrafficFlow)
  return target;
}

size_t TrafficFlow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.TrafficFlow)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.TrafficFlow.LaneSpan sinks = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->sinks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sinks(static_cast<int>(i)));
    }
  }

  // .metamoto.types.TrafficFlow.LaneSpan source = 2;
  if (this->has_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .metamoto.types.NormalDistribution generation_rate = 4;
  if (this->has_generation_rate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *generation_rate_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // float speed = 5;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // bool populate = 6;
  if (this->populate() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficFlow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.TrafficFlow)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficFlow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficFlow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.TrafficFlow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.TrafficFlow)
    MergeFrom(*source);
  }
}

void TrafficFlow::MergeFrom(const TrafficFlow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.TrafficFlow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sinks_.MergeFrom(from.sinks_);
  if (from.has_source()) {
    mutable_source()->::metamoto::types::TrafficFlow_LaneSpan::MergeFrom(from.source());
  }
  if (from.has_generation_rate()) {
    mutable_generation_rate()->::metamoto::types::NormalDistribution::MergeFrom(from.generation_rate());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.populate() != 0) {
    set_populate(from.populate());
  }
}

void TrafficFlow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.TrafficFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficFlow::CopyFrom(const TrafficFlow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.TrafficFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficFlow::IsInitialized() const {
  return true;
}

void TrafficFlow::Swap(TrafficFlow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficFlow::InternalSwap(TrafficFlow* other) {
  using std::swap;
  CastToBase(&sinks_)->InternalSwap(CastToBase(&other->sinks_));
  swap(source_, other->source_);
  swap(generation_rate_, other->generation_rate_);
  swap(id_, other->id_);
  swap(speed_, other->speed_);
  swap(populate_, other->populate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficFlow::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficVehicle::InitAsDefaultInstance() {
  ::metamoto::types::_TrafficVehicle_default_instance_._instance.get_mutable()->instance_ = const_cast< ::metamoto::types::VehicleInstance*>(
      ::metamoto::types::VehicleInstance::internal_default_instance());
  ::metamoto::types::_TrafficVehicle_default_instance_._instance.get_mutable()->driver_model_ = const_cast< ::metamoto::types::DriverModel*>(
      ::metamoto::types::DriverModel::internal_default_instance());
}
void TrafficVehicle::clear_instance() {
  if (GetArenaNoVirtual() == NULL && instance_ != NULL) {
    delete instance_;
  }
  instance_ = NULL;
}
void TrafficVehicle::clear_path() {
  path_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficVehicle::kDisplayNameFieldNumber;
const int TrafficVehicle::kInstanceFieldNumber;
const int TrafficVehicle::kPathFieldNumber;
const int TrafficVehicle::kDriverModelFieldNumber;
const int TrafficVehicle::kFlowIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficVehicle::TrafficVehicle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_TrafficVehicle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.TrafficVehicle)
}
TrafficVehicle::TrafficVehicle(const TrafficVehicle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      path_(from.path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.has_instance()) {
    instance_ = new ::metamoto::types::VehicleInstance(*from.instance_);
  } else {
    instance_ = NULL;
  }
  if (from.has_driver_model()) {
    driver_model_ = new ::metamoto::types::DriverModel(*from.driver_model_);
  } else {
    driver_model_ = NULL;
  }
  flow_id_ = from.flow_id_;
  // @@protoc_insertion_point(copy_constructor:metamoto.types.TrafficVehicle)
}

void TrafficVehicle::SharedCtor() {
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&instance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flow_id_) -
      reinterpret_cast<char*>(&instance_)) + sizeof(flow_id_));
}

TrafficVehicle::~TrafficVehicle() {
  // @@protoc_insertion_point(destructor:metamoto.types.TrafficVehicle)
  SharedDtor();
}

void TrafficVehicle::SharedDtor() {
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete instance_;
  if (this != internal_default_instance()) delete driver_model_;
}

void TrafficVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficVehicle::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficVehicle& TrafficVehicle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_TrafficVehicle.base);
  return *internal_default_instance();
}


void TrafficVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.TrafficVehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && instance_ != NULL) {
    delete instance_;
  }
  instance_ = NULL;
  if (GetArenaNoVirtual() == NULL && driver_model_ != NULL) {
    delete driver_model_;
  }
  driver_model_ = NULL;
  flow_id_ = 0;
  _internal_metadata_.Clear();
}

bool TrafficVehicle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.TrafficVehicle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string display_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.TrafficVehicle.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.VehicleInstance instance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_instance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Waypoint path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.DriverModel driver_model = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_driver_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 flow_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flow_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.TrafficVehicle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.TrafficVehicle)
  return false;
#undef DO_
}

void TrafficVehicle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.TrafficVehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.TrafficVehicle.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->display_name(), output);
  }

  // .metamoto.types.VehicleInstance instance = 2;
  if (this->has_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_instance(), output);
  }

  // repeated .metamoto.types.Waypoint path = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->path(static_cast<int>(i)),
      output);
  }

  // .metamoto.types.DriverModel driver_model = 4;
  if (this->has_driver_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_driver_model(), output);
  }

  // int32 flow_id = 5;
  if (this->flow_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flow_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.TrafficVehicle)
}

::google::protobuf::uint8* TrafficVehicle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.TrafficVehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.TrafficVehicle.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->display_name(), target);
  }

  // .metamoto.types.VehicleInstance instance = 2;
  if (this->has_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_instance(), deterministic, target);
  }

  // repeated .metamoto.types.Waypoint path = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->path(static_cast<int>(i)), deterministic, target);
  }

  // .metamoto.types.DriverModel driver_model = 4;
  if (this->has_driver_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_driver_model(), deterministic, target);
  }

  // int32 flow_id = 5;
  if (this->flow_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flow_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.TrafficVehicle)
  return target;
}

size_t TrafficVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.TrafficVehicle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.Waypoint path = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->path_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->path(static_cast<int>(i)));
    }
  }

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // .metamoto.types.VehicleInstance instance = 2;
  if (this->has_instance()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *instance_);
  }

  // .metamoto.types.DriverModel driver_model = 4;
  if (this->has_driver_model()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *driver_model_);
  }

  // int32 flow_id = 5;
  if (this->flow_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flow_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficVehicle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.TrafficVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficVehicle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficVehicle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.TrafficVehicle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.TrafficVehicle)
    MergeFrom(*source);
  }
}

void TrafficVehicle::MergeFrom(const TrafficVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.TrafficVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.has_instance()) {
    mutable_instance()->::metamoto::types::VehicleInstance::MergeFrom(from.instance());
  }
  if (from.has_driver_model()) {
    mutable_driver_model()->::metamoto::types::DriverModel::MergeFrom(from.driver_model());
  }
  if (from.flow_id() != 0) {
    set_flow_id(from.flow_id());
  }
}

void TrafficVehicle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.TrafficVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficVehicle::CopyFrom(const TrafficVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.TrafficVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficVehicle::IsInitialized() const {
  return true;
}

void TrafficVehicle::Swap(TrafficVehicle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficVehicle::InternalSwap(TrafficVehicle* other) {
  using std::swap;
  CastToBase(&path_)->InternalSwap(CastToBase(&other->path_));
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(instance_, other->instance_);
  swap(driver_model_, other->driver_model_);
  swap(flow_id_, other->flow_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficVehicle::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParkedVehicle::InitAsDefaultInstance() {
  ::metamoto::types::_ParkedVehicle_default_instance_._instance.get_mutable()->instance_ = const_cast< ::metamoto::types::VehicleInstance*>(
      ::metamoto::types::VehicleInstance::internal_default_instance());
  ::metamoto::types::_ParkedVehicle_default_instance_.world_point_ = const_cast< ::metamoto::types::Pose*>(
      ::metamoto::types::Pose::internal_default_instance());
  ::metamoto::types::_ParkedVehicle_default_instance_.road_point_ = const_cast< ::metamoto::types::RoadPoint*>(
      ::metamoto::types::RoadPoint::internal_default_instance());
}
void ParkedVehicle::clear_instance() {
  if (GetArenaNoVirtual() == NULL && instance_ != NULL) {
    delete instance_;
  }
  instance_ = NULL;
}
void ParkedVehicle::set_allocated_world_point(::metamoto::types::Pose* world_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_point_oneof();
  if (world_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      world_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, world_point, submessage_arena);
    }
    set_has_world_point();
    point_oneof_.world_point_ = world_point;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.ParkedVehicle.world_point)
}
void ParkedVehicle::clear_world_point() {
  if (has_world_point()) {
    delete point_oneof_.world_point_;
    clear_has_point_oneof();
  }
}
void ParkedVehicle::set_allocated_road_point(::metamoto::types::RoadPoint* road_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_point_oneof();
  if (road_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      road_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, road_point, submessage_arena);
    }
    set_has_road_point();
    point_oneof_.road_point_ = road_point;
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.ParkedVehicle.road_point)
}
void ParkedVehicle::clear_road_point() {
  if (has_road_point()) {
    delete point_oneof_.road_point_;
    clear_has_point_oneof();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParkedVehicle::kDisplayNameFieldNumber;
const int ParkedVehicle::kInstanceFieldNumber;
const int ParkedVehicle::kWorldPointFieldNumber;
const int ParkedVehicle::kRoadPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParkedVehicle::ParkedVehicle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_ParkedVehicle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.ParkedVehicle)
}
ParkedVehicle::ParkedVehicle(const ParkedVehicle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.has_instance()) {
    instance_ = new ::metamoto::types::VehicleInstance(*from.instance_);
  } else {
    instance_ = NULL;
  }
  clear_has_point_oneof();
  switch (from.point_oneof_case()) {
    case kWorldPoint: {
      mutable_world_point()->::metamoto::types::Pose::MergeFrom(from.world_point());
      break;
    }
    case kRoadPoint: {
      mutable_road_point()->::metamoto::types::RoadPoint::MergeFrom(from.road_point());
      break;
    }
    case POINT_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.types.ParkedVehicle)
}

void ParkedVehicle::SharedCtor() {
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_ = NULL;
  clear_has_point_oneof();
}

ParkedVehicle::~ParkedVehicle() {
  // @@protoc_insertion_point(destructor:metamoto.types.ParkedVehicle)
  SharedDtor();
}

void ParkedVehicle::SharedDtor() {
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete instance_;
  if (has_point_oneof()) {
    clear_point_oneof();
  }
}

void ParkedVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ParkedVehicle::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParkedVehicle& ParkedVehicle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_ParkedVehicle.base);
  return *internal_default_instance();
}


void ParkedVehicle::clear_point_oneof() {
// @@protoc_insertion_point(one_of_clear_start:metamoto.types.ParkedVehicle)
  switch (point_oneof_case()) {
    case kWorldPoint: {
      delete point_oneof_.world_point_;
      break;
    }
    case kRoadPoint: {
      delete point_oneof_.road_point_;
      break;
    }
    case POINT_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = POINT_ONEOF_NOT_SET;
}


void ParkedVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.ParkedVehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && instance_ != NULL) {
    delete instance_;
  }
  instance_ = NULL;
  clear_point_oneof();
  _internal_metadata_.Clear();
}

bool ParkedVehicle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.ParkedVehicle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string display_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.ParkedVehicle.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.VehicleInstance instance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_instance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Pose world_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_world_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.RoadPoint road_point = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_road_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.ParkedVehicle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.ParkedVehicle)
  return false;
#undef DO_
}

void ParkedVehicle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.ParkedVehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.ParkedVehicle.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->display_name(), output);
  }

  // .metamoto.types.VehicleInstance instance = 2;
  if (this->has_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_instance(), output);
  }

  // .metamoto.types.Pose world_point = 3;
  if (has_world_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_world_point(), output);
  }

  // .metamoto.types.RoadPoint road_point = 4;
  if (has_road_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_road_point(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.ParkedVehicle)
}

::google::protobuf::uint8* ParkedVehicle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.ParkedVehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.ParkedVehicle.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->display_name(), target);
  }

  // .metamoto.types.VehicleInstance instance = 2;
  if (this->has_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_instance(), deterministic, target);
  }

  // .metamoto.types.Pose world_point = 3;
  if (has_world_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_world_point(), deterministic, target);
  }

  // .metamoto.types.RoadPoint road_point = 4;
  if (has_road_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_road_point(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.ParkedVehicle)
  return target;
}

size_t ParkedVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.ParkedVehicle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string display_name = 1;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // .metamoto.types.VehicleInstance instance = 2;
  if (this->has_instance()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *instance_);
  }

  switch (point_oneof_case()) {
    // .metamoto.types.Pose world_point = 3;
    case kWorldPoint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *point_oneof_.world_point_);
      break;
    }
    // .metamoto.types.RoadPoint road_point = 4;
    case kRoadPoint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *point_oneof_.road_point_);
      break;
    }
    case POINT_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkedVehicle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.ParkedVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkedVehicle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParkedVehicle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.ParkedVehicle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.ParkedVehicle)
    MergeFrom(*source);
  }
}

void ParkedVehicle::MergeFrom(const ParkedVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.ParkedVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.has_instance()) {
    mutable_instance()->::metamoto::types::VehicleInstance::MergeFrom(from.instance());
  }
  switch (from.point_oneof_case()) {
    case kWorldPoint: {
      mutable_world_point()->::metamoto::types::Pose::MergeFrom(from.world_point());
      break;
    }
    case kRoadPoint: {
      mutable_road_point()->::metamoto::types::RoadPoint::MergeFrom(from.road_point());
      break;
    }
    case POINT_ONEOF_NOT_SET: {
      break;
    }
  }
}

void ParkedVehicle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.ParkedVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkedVehicle::CopyFrom(const ParkedVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.ParkedVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkedVehicle::IsInitialized() const {
  return true;
}

void ParkedVehicle::Swap(ParkedVehicle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParkedVehicle::InternalSwap(ParkedVehicle* other) {
  using std::swap;
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(instance_, other->instance_);
  swap(point_oneof_, other->point_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ParkedVehicle::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PedestrianConfiguration_PathPoint::InitAsDefaultInstance() {
  ::metamoto::types::_PedestrianConfiguration_PathPoint_default_instance_._instance.get_mutable()->target_point_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
}
void PedestrianConfiguration_PathPoint::clear_target_point() {
  if (GetArenaNoVirtual() == NULL && target_point_ != NULL) {
    delete target_point_;
  }
  target_point_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PedestrianConfiguration_PathPoint::kStateFieldNumber;
const int PedestrianConfiguration_PathPoint::kStateVariantFieldNumber;
const int PedestrianConfiguration_PathPoint::kTargetPointFieldNumber;
const int PedestrianConfiguration_PathPoint::kWaitTimeFieldNumber;
const int PedestrianConfiguration_PathPoint::kPathingBehaviourFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PedestrianConfiguration_PathPoint::PedestrianConfiguration_PathPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_PedestrianConfiguration_PathPoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.PedestrianConfiguration.PathPoint)
}
PedestrianConfiguration_PathPoint::PedestrianConfiguration_PathPoint(const PedestrianConfiguration_PathPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target_point()) {
    target_point_ = new ::metamoto::types::Vector3(*from.target_point_);
  } else {
    target_point_ = NULL;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&pathing_behaviour_) -
    reinterpret_cast<char*>(&state_)) + sizeof(pathing_behaviour_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.PedestrianConfiguration.PathPoint)
}

void PedestrianConfiguration_PathPoint::SharedCtor() {
  ::memset(&target_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pathing_behaviour_) -
      reinterpret_cast<char*>(&target_point_)) + sizeof(pathing_behaviour_));
}

PedestrianConfiguration_PathPoint::~PedestrianConfiguration_PathPoint() {
  // @@protoc_insertion_point(destructor:metamoto.types.PedestrianConfiguration.PathPoint)
  SharedDtor();
}

void PedestrianConfiguration_PathPoint::SharedDtor() {
  if (this != internal_default_instance()) delete target_point_;
}

void PedestrianConfiguration_PathPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PedestrianConfiguration_PathPoint::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PedestrianConfiguration_PathPoint& PedestrianConfiguration_PathPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_PedestrianConfiguration_PathPoint.base);
  return *internal_default_instance();
}


void PedestrianConfiguration_PathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.PedestrianConfiguration.PathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && target_point_ != NULL) {
    delete target_point_;
  }
  target_point_ = NULL;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pathing_behaviour_) -
      reinterpret_cast<char*>(&state_)) + sizeof(pathing_behaviour_));
  _internal_metadata_.Clear();
}

bool PedestrianConfiguration_PathPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.PedestrianConfiguration.PathPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.PedestrianConfiguration.State state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::metamoto::types::PedestrianConfiguration_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 state_variant = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_variant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 target_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float wait_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wait_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.PedestrianConfiguration.PathingBehaviour pathing_behaviour = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pathing_behaviour(static_cast< ::metamoto::types::PedestrianConfiguration_PathingBehaviour >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.PedestrianConfiguration.PathPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.PedestrianConfiguration.PathPoint)
  return false;
#undef DO_
}

void PedestrianConfiguration_PathPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.PedestrianConfiguration.PathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.PedestrianConfiguration.State state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // uint32 state_variant = 2;
  if (this->state_variant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state_variant(), output);
  }

  // .metamoto.types.Vector3 target_point = 3;
  if (this->has_target_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_target_point(), output);
  }

  // float wait_time = 4;
  if (this->wait_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->wait_time(), output);
  }

  // .metamoto.types.PedestrianConfiguration.PathingBehaviour pathing_behaviour = 5;
  if (this->pathing_behaviour() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->pathing_behaviour(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.PedestrianConfiguration.PathPoint)
}

::google::protobuf::uint8* PedestrianConfiguration_PathPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.PedestrianConfiguration.PathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.PedestrianConfiguration.State state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // uint32 state_variant = 2;
  if (this->state_variant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state_variant(), target);
  }

  // .metamoto.types.Vector3 target_point = 3;
  if (this->has_target_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_target_point(), deterministic, target);
  }

  // float wait_time = 4;
  if (this->wait_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->wait_time(), target);
  }

  // .metamoto.types.PedestrianConfiguration.PathingBehaviour pathing_behaviour = 5;
  if (this->pathing_behaviour() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->pathing_behaviour(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.PedestrianConfiguration.PathPoint)
  return target;
}

size_t PedestrianConfiguration_PathPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.PedestrianConfiguration.PathPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.Vector3 target_point = 3;
  if (this->has_target_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *target_point_);
  }

  // .metamoto.types.PedestrianConfiguration.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // uint32 state_variant = 2;
  if (this->state_variant() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state_variant());
  }

  // float wait_time = 4;
  if (this->wait_time() != 0) {
    total_size += 1 + 4;
  }

  // .metamoto.types.PedestrianConfiguration.PathingBehaviour pathing_behaviour = 5;
  if (this->pathing_behaviour() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pathing_behaviour());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PedestrianConfiguration_PathPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.PedestrianConfiguration.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PedestrianConfiguration_PathPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PedestrianConfiguration_PathPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.PedestrianConfiguration.PathPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.PedestrianConfiguration.PathPoint)
    MergeFrom(*source);
  }
}

void PedestrianConfiguration_PathPoint::MergeFrom(const PedestrianConfiguration_PathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.PedestrianConfiguration.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target_point()) {
    mutable_target_point()->::metamoto::types::Vector3::MergeFrom(from.target_point());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.state_variant() != 0) {
    set_state_variant(from.state_variant());
  }
  if (from.wait_time() != 0) {
    set_wait_time(from.wait_time());
  }
  if (from.pathing_behaviour() != 0) {
    set_pathing_behaviour(from.pathing_behaviour());
  }
}

void PedestrianConfiguration_PathPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.PedestrianConfiguration.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PedestrianConfiguration_PathPoint::CopyFrom(const PedestrianConfiguration_PathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.PedestrianConfiguration.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PedestrianConfiguration_PathPoint::IsInitialized() const {
  return true;
}

void PedestrianConfiguration_PathPoint::Swap(PedestrianConfiguration_PathPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PedestrianConfiguration_PathPoint::InternalSwap(PedestrianConfiguration_PathPoint* other) {
  using std::swap;
  swap(target_point_, other->target_point_);
  swap(state_, other->state_);
  swap(state_variant_, other->state_variant_);
  swap(wait_time_, other->wait_time_);
  swap(pathing_behaviour_, other->pathing_behaviour_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PedestrianConfiguration_PathPoint::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PedestrianConfiguration::InitAsDefaultInstance() {
  ::metamoto::types::_PedestrianConfiguration_default_instance_.name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::metamoto::types::_PedestrianConfiguration_default_instance_.type_ = 0;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PedestrianConfiguration::kDisplayNameFieldNumber;
const int PedestrianConfiguration::kNameFieldNumber;
const int PedestrianConfiguration::kTypeFieldNumber;
const int PedestrianConfiguration::kPathFieldNumber;
const int PedestrianConfiguration::kRandomPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PedestrianConfiguration::PedestrianConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_PedestrianConfiguration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.PedestrianConfiguration)
}
PedestrianConfiguration::PedestrianConfiguration(const PedestrianConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      path_(from.path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  random_path_ = from.random_path_;
  clear_has_instance_oneof();
  switch (from.instance_oneof_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case kType: {
      set_type(from.type());
      break;
    }
    case INSTANCE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.types.PedestrianConfiguration)
}

void PedestrianConfiguration::SharedCtor() {
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_path_ = false;
  clear_has_instance_oneof();
}

PedestrianConfiguration::~PedestrianConfiguration() {
  // @@protoc_insertion_point(destructor:metamoto.types.PedestrianConfiguration)
  SharedDtor();
}

void PedestrianConfiguration::SharedDtor() {
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_instance_oneof()) {
    clear_instance_oneof();
  }
}

void PedestrianConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PedestrianConfiguration::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PedestrianConfiguration& PedestrianConfiguration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_PedestrianConfiguration.base);
  return *internal_default_instance();
}


void PedestrianConfiguration::clear_instance_oneof() {
// @@protoc_insertion_point(one_of_clear_start:metamoto.types.PedestrianConfiguration)
  switch (instance_oneof_case()) {
    case kName: {
      instance_oneof_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kType: {
      // No need to clear
      break;
    }
    case INSTANCE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INSTANCE_ONEOF_NOT_SET;
}


void PedestrianConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.PedestrianConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_path_ = false;
  clear_instance_oneof();
  _internal_metadata_.Clear();
}

bool PedestrianConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.PedestrianConfiguration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string display_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.PedestrianConfiguration.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.PedestrianConfiguration.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Pedestrian.Type type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::metamoto::types::Pedestrian_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.PedestrianConfiguration.PathPoint path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool random_path = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &random_path_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.PedestrianConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.PedestrianConfiguration)
  return false;
#undef DO_
}

void PedestrianConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.PedestrianConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.PedestrianConfiguration.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->display_name(), output);
  }

  // string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.PedestrianConfiguration.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .metamoto.types.Pedestrian.Type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .metamoto.types.PedestrianConfiguration.PathPoint path = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->path(static_cast<int>(i)),
      output);
  }

  // bool random_path = 5;
  if (this->random_path() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->random_path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.PedestrianConfiguration)
}

::google::protobuf::uint8* PedestrianConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.PedestrianConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.PedestrianConfiguration.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->display_name(), target);
  }

  // string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.PedestrianConfiguration.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .metamoto.types.Pedestrian.Type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .metamoto.types.PedestrianConfiguration.PathPoint path = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->path(static_cast<int>(i)), deterministic, target);
  }

  // bool random_path = 5;
  if (this->random_path() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->random_path(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.PedestrianConfiguration)
  return target;
}

size_t PedestrianConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.PedestrianConfiguration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.PedestrianConfiguration.PathPoint path = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->path_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->path(static_cast<int>(i)));
    }
  }

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // bool random_path = 5;
  if (this->random_path() != 0) {
    total_size += 1 + 1;
  }

  switch (instance_oneof_case()) {
    // string name = 2;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    // .metamoto.types.Pedestrian.Type type = 3;
    case kType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
      break;
    }
    case INSTANCE_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PedestrianConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.PedestrianConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const PedestrianConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PedestrianConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.PedestrianConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.PedestrianConfiguration)
    MergeFrom(*source);
  }
}

void PedestrianConfiguration::MergeFrom(const PedestrianConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.PedestrianConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.random_path() != 0) {
    set_random_path(from.random_path());
  }
  switch (from.instance_oneof_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case kType: {
      set_type(from.type());
      break;
    }
    case INSTANCE_ONEOF_NOT_SET: {
      break;
    }
  }
}

void PedestrianConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.PedestrianConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PedestrianConfiguration::CopyFrom(const PedestrianConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.PedestrianConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PedestrianConfiguration::IsInitialized() const {
  return true;
}

void PedestrianConfiguration::Swap(PedestrianConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PedestrianConfiguration::InternalSwap(PedestrianConfiguration* other) {
  using std::swap;
  CastToBase(&path_)->InternalSwap(CastToBase(&other->path_));
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(random_path_, other->random_path_);
  swap(instance_oneof_, other->instance_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PedestrianConfiguration::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Event_ProximityTrigger::InitAsDefaultInstance() {
  ::metamoto::types::_Event_ProximityTrigger_default_instance_._instance.get_mutable()->location_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
}
void Event_ProximityTrigger::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event_ProximityTrigger::kLocationFieldNumber;
const int Event_ProximityTrigger::kRadiusFieldNumber;
const int Event_ProximityTrigger::kEgoVehicleIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event_ProximityTrigger::Event_ProximityTrigger()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Event_ProximityTrigger.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Event.ProximityTrigger)
}
Event_ProximityTrigger::Event_ProximityTrigger(const Event_ProximityTrigger& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::metamoto::types::Vector3(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&ego_vehicle_index_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(ego_vehicle_index_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Event.ProximityTrigger)
}

void Event_ProximityTrigger::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ego_vehicle_index_) -
      reinterpret_cast<char*>(&location_)) + sizeof(ego_vehicle_index_));
}

Event_ProximityTrigger::~Event_ProximityTrigger() {
  // @@protoc_insertion_point(destructor:metamoto.types.Event.ProximityTrigger)
  SharedDtor();
}

void Event_ProximityTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void Event_ProximityTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Event_ProximityTrigger::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Event_ProximityTrigger& Event_ProximityTrigger::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Event_ProximityTrigger.base);
  return *internal_default_instance();
}


void Event_ProximityTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Event.ProximityTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  ::memset(&radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ego_vehicle_index_) -
      reinterpret_cast<char*>(&radius_)) + sizeof(ego_vehicle_index_));
  _internal_metadata_.Clear();
}

bool Event_ProximityTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Event.ProximityTrigger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.Vector3 location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float radius = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ego_vehicle_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ego_vehicle_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Event.ProximityTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Event.ProximityTrigger)
  return false;
#undef DO_
}

void Event_ProximityTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Event.ProximityTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Vector3 location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_location(), output);
  }

  // float radius = 2;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->radius(), output);
  }

  // int32 ego_vehicle_index = 3;
  if (this->ego_vehicle_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ego_vehicle_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Event.ProximityTrigger)
}

::google::protobuf::uint8* Event_ProximityTrigger::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Event.ProximityTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Vector3 location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_location(), deterministic, target);
  }

  // float radius = 2;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->radius(), target);
  }

  // int32 ego_vehicle_index = 3;
  if (this->ego_vehicle_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ego_vehicle_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Event.ProximityTrigger)
  return target;
}

size_t Event_ProximityTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Event.ProximityTrigger)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.Vector3 location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // float radius = 2;
  if (this->radius() != 0) {
    total_size += 1 + 4;
  }

  // int32 ego_vehicle_index = 3;
  if (this->ego_vehicle_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ego_vehicle_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_ProximityTrigger::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Event.ProximityTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_ProximityTrigger* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Event_ProximityTrigger>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Event.ProximityTrigger)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Event.ProximityTrigger)
    MergeFrom(*source);
  }
}

void Event_ProximityTrigger::MergeFrom(const Event_ProximityTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Event.ProximityTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::metamoto::types::Vector3::MergeFrom(from.location());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.ego_vehicle_index() != 0) {
    set_ego_vehicle_index(from.ego_vehicle_index());
  }
}

void Event_ProximityTrigger::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Event.ProximityTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_ProximityTrigger::CopyFrom(const Event_ProximityTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Event.ProximityTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_ProximityTrigger::IsInitialized() const {
  return true;
}

void Event_ProximityTrigger::Swap(Event_ProximityTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event_ProximityTrigger::InternalSwap(Event_ProximityTrigger* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(radius_, other->radius_);
  swap(ego_vehicle_index_, other->ego_vehicle_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Event_ProximityTrigger::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Event::InitAsDefaultInstance() {
  ::metamoto::types::_Event_default_instance_._instance.get_mutable()->trigger_ = const_cast< ::metamoto::types::Event_ProximityTrigger*>(
      ::metamoto::types::Event_ProximityTrigger::internal_default_instance());
}
void Event::clear_waypoints() {
  waypoints_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kObjectTypeFieldNumber;
const int Event::kActionFieldNumber;
const int Event::kTimeFieldNumber;
const int Event::kTriggerFieldNumber;
const int Event::kIdFieldNumber;
const int Event::kSecondaryIdFieldNumber;
const int Event::kPayloadStringFieldNumber;
const int Event::kPayloadFloatFieldNumber;
const int Event::kWaypointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Event.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Event)
}
Event::Event(const Event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      payload_string_(from.payload_string_),
      payload_float_(from.payload_float_),
      waypoints_(from.waypoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  secondary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.secondary_id().size() > 0) {
    secondary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_id_);
  }
  if (from.has_trigger()) {
    trigger_ = new ::metamoto::types::Event_ProximityTrigger(*from.trigger_);
  } else {
    trigger_ = NULL;
  }
  ::memcpy(&object_type_, &from.object_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&object_type_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Event)
}

void Event::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trigger_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&trigger_)) + sizeof(time_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:metamoto.types.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trigger_;
}

void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  ::protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Event& Event::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fscenario_2eproto::scc_info_Event.base);
  return *internal_default_instance();
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_string_.Clear();
  payload_float_.Clear();
  waypoints_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && trigger_ != NULL) {
    delete trigger_;
  }
  trigger_ = NULL;
  ::memset(&object_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&object_type_)) + sizeof(time_));
  _internal_metadata_.Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Event)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.Event.ObjectType object_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_object_type(static_cast< ::metamoto::types::Event_ObjectType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Event.Action action = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::metamoto::types::Event_Action >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Event.ProximityTrigger trigger = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Event.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string secondary_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondary_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secondary_id().data(), static_cast<int>(this->secondary_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Event.secondary_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string payload_string = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_payload_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->payload_string(this->payload_string_size() - 1).data(),
            static_cast<int>(this->payload_string(this->payload_string_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Event.payload_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float payload_float = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_payload_float())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 66u, input, this->mutable_payload_float())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Waypoint waypoints = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_waypoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Event.ObjectType object_type = 1;
  if (this->object_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->object_type(), output);
  }

  // .metamoto.types.Event.Action action = 2;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  // double time = 3;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  // .metamoto.types.Event.ProximityTrigger trigger = 4;
  if (this->has_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_trigger(), output);
  }

  // string id = 5;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Event.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->id(), output);
  }

  // string secondary_id = 6;
  if (this->secondary_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secondary_id().data(), static_cast<int>(this->secondary_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Event.secondary_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->secondary_id(), output);
  }

  // repeated string payload_string = 7;
  for (int i = 0, n = this->payload_string_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload_string(i).data(), static_cast<int>(this->payload_string(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Event.payload_string");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->payload_string(i), output);
  }

  // repeated float payload_float = 8;
  if (this->payload_float_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _payload_float_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->payload_float().data(), this->payload_float_size(), output);
  }

  // repeated .metamoto.types.Waypoint waypoints = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waypoints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->waypoints(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Event)
}

::google::protobuf::uint8* Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Event.ObjectType object_type = 1;
  if (this->object_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->object_type(), target);
  }

  // .metamoto.types.Event.Action action = 2;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  // double time = 3;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  // .metamoto.types.Event.ProximityTrigger trigger = 4;
  if (this->has_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_trigger(), deterministic, target);
  }

  // string id = 5;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Event.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->id(), target);
  }

  // string secondary_id = 6;
  if (this->secondary_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secondary_id().data(), static_cast<int>(this->secondary_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Event.secondary_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->secondary_id(), target);
  }

  // repeated string payload_string = 7;
  for (int i = 0, n = this->payload_string_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload_string(i).data(), static_cast<int>(this->payload_string(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Event.payload_string");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->payload_string(i), target);
  }

  // repeated float payload_float = 8;
  if (this->payload_float_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _payload_float_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->payload_float_, target);
  }

  // repeated .metamoto.types.Waypoint waypoints = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waypoints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->waypoints(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Event)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string payload_string = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->payload_string_size());
  for (int i = 0, n = this->payload_string_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->payload_string(i));
  }

  // repeated float payload_float = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->payload_float_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _payload_float_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .metamoto.types.Waypoint waypoints = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->waypoints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->waypoints(static_cast<int>(i)));
    }
  }

  // string id = 5;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string secondary_id = 6;
  if (this->secondary_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secondary_id());
  }

  // .metamoto.types.Event.ProximityTrigger trigger = 4;
  if (this->has_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trigger_);
  }

  // .metamoto.types.Event.ObjectType object_type = 1;
  if (this->object_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->object_type());
  }

  // .metamoto.types.Event.Action action = 2;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  // double time = 3;
  if (this->time() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  payload_string_.MergeFrom(from.payload_string_);
  payload_float_.MergeFrom(from.payload_float_);
  waypoints_.MergeFrom(from.waypoints_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.secondary_id().size() > 0) {

    secondary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_id_);
  }
  if (from.has_trigger()) {
    mutable_trigger()->::metamoto::types::Event_ProximityTrigger::MergeFrom(from.trigger());
  }
  if (from.object_type() != 0) {
    set_object_type(from.object_type());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  using std::swap;
  payload_string_.InternalSwap(CastToBase(&other->payload_string_));
  payload_float_.InternalSwap(&other->payload_float_);
  CastToBase(&waypoints_)->InternalSwap(CastToBase(&other->waypoints_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secondary_id_.Swap(&other->secondary_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trigger_, other->trigger_);
  swap(object_type_, other->object_type_);
  swap(action_, other->action_);
  swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fscenario_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fscenario_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_System_Encoder* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_System_Encoder >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_System_Encoder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_System_Logger* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_System_Logger >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_System_Logger >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_System_RayTracer* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_System_RayTracer >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_System_RayTracer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_System_Service* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_System_Service >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_System_Service >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_System_ServicesEntry_DoNotUse* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_System_ServicesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_System_ServicesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_System* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_System >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_System >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_Objectives* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_Objectives >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_Objectives >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_EgoVehicle* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_EgoVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_EgoVehicle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_Traffic_Distribution_ModelWeightsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_Traffic_Distribution_TypeWeightsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_Traffic_Distribution_PaintWeightsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_Traffic_Distribution* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_Traffic_Distribution >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_Traffic_Distribution >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_Traffic* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_Traffic >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_Traffic >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_Pedestrians_Distribution_NameWeightsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_Pedestrians_Distribution_TypeWeightsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_Pedestrians_Distribution_StateWeightsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_Pedestrians_Distribution* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_Pedestrians_Distribution >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_Pedestrians_Distribution >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_Pedestrians* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_Pedestrians >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_Pedestrians >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_TrafficLight_Direction* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_TrafficLight_Direction >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_TrafficLight_Direction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_TrafficLight* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_TrafficLight >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_TrafficLight >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_TrafficLightsEntry_DoNotUse* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_TrafficLightsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_TrafficLightsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_Intersection_SignalState* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_Intersection_SignalState >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_Intersection_SignalState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_Intersection_IntersectionState* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_Intersection_IntersectionState >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_Intersection_IntersectionState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_Intersection_Phase* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_Intersection_Phase >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_Intersection_Phase >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_Intersection* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_Intersection >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_Intersection >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_IntersectionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_IntersectionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_IntersectionsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario_RangesEntry_DoNotUse* Arena::CreateMaybeMessage< ::metamoto::types::Scenario_RangesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario_RangesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Scenario* Arena::CreateMaybeMessage< ::metamoto::types::Scenario >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Scenario >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Infraction* Arena::CreateMaybeMessage< ::metamoto::types::Infraction >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Infraction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::DriverModel_BrakingBehavior* Arena::CreateMaybeMessage< ::metamoto::types::DriverModel_BrakingBehavior >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::DriverModel_BrakingBehavior >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::DriverModel* Arena::CreateMaybeMessage< ::metamoto::types::DriverModel >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::DriverModel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::TrafficFlow_LaneSpan* Arena::CreateMaybeMessage< ::metamoto::types::TrafficFlow_LaneSpan >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::TrafficFlow_LaneSpan >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::TrafficFlow* Arena::CreateMaybeMessage< ::metamoto::types::TrafficFlow >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::TrafficFlow >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::TrafficVehicle* Arena::CreateMaybeMessage< ::metamoto::types::TrafficVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::TrafficVehicle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::ParkedVehicle* Arena::CreateMaybeMessage< ::metamoto::types::ParkedVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::ParkedVehicle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::PedestrianConfiguration_PathPoint* Arena::CreateMaybeMessage< ::metamoto::types::PedestrianConfiguration_PathPoint >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::PedestrianConfiguration_PathPoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::PedestrianConfiguration* Arena::CreateMaybeMessage< ::metamoto::types::PedestrianConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::PedestrianConfiguration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Event_ProximityTrigger* Arena::CreateMaybeMessage< ::metamoto::types::Event_ProximityTrigger >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Event_ProximityTrigger >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Event* Arena::CreateMaybeMessage< ::metamoto::types::Event >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Event >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
