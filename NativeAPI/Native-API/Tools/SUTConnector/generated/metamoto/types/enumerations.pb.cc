// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/enumerations.proto

#include "metamoto/types/enumerations.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace metamoto {
namespace types {
}  // namespace types
}  // namespace metamoto
namespace protobuf_metamoto_2ftypes_2fenumerations_2eproto {
void InitDefaults() {
}

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/types/enumerations.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!metamoto/types/enumerations.proto\022\016met"
      "amoto.types*\260\004\n\nObjectType\022\022\n\016OBJECT_UNK"
      "NOWN\020\000\022\020\n\014OBJECT_OTHER\020\001\022\016\n\nOBJECT_CAR\020\002"
      "\022\020\n\014OBJECT_TRUCK\020\003\022\016\n\nOBJECT_BUS\020\004\022\025\n\021OB"
      "JECT_MOTORCYCLE\020\005\022\022\n\016OBJECT_BICYCLE\020\006\022\020\n"
      "\014OBJECT_TRAIN\020\007\022\025\n\021OBJECT_PEDESTRIAN\020\010\022\021"
      "\n\rOBJECT_ANIMAL\020\t\022\030\n\024OBJECT_TRAFFIC_LIGH"
      "T\020\n\022\027\n\023OBJECT_TRAFFIC_SIGN\020\013\022\032\n\026OBJECT_T"
      "RAFFIC_BARRIER\020\014\022\027\n\023OBJECT_TRAFFIC_CONE\020"
      "\r\022\021\n\rOBJECT_GROUND\020\016\022\017\n\013OBJECT_ROAD\020\017\022\025\n"
      "\021OBJECT_RAIL_TRACK\020\020\022\023\n\017OBJECT_SIDEWALK\020"
      "\021\022\017\n\013OBJECT_CURB\020\022\022\030\n\024OBJECT_STATIC_OBJE"
      "CT\020\023\022\017\n\013OBJECT_SIGN\020\024\022\017\n\013OBJECT_POLE\020\025\022\023"
      "\n\017OBJECT_BUILDING\020\026\022\017\n\013OBJECT_WALL\020\027\022\020\n\014"
      "OBJECT_FENCE\020\030\022\017\n\013OBJECT_TREE\020\031\022\025\n\021OBJEC"
      "T_VEGETATION\020\032*\275\005\n\014MaterialType\022\024\n\020MATER"
      "IAL_UNKNOWN\020\000\022\022\n\016MATERIAL_OTHER\020\001\022\024\n\020MAT"
      "ERIAL_ASPHALT\020\002\022\023\n\017MATERIAL_GRAVEL\020\003\022\021\n\r"
      "MATERIAL_ROCK\020\004\022\021\n\rMATERIAL_SOIL\020\005\022\021\n\rMA"
      "TERIAL_SAND\020\006\022\022\n\016MATERIAL_GRASS\020\007\022\022\n\016MAT"
      "ERIAL_WATER\020\010\022\021\n\rMATERIAL_SNOW\020\t\022\025\n\021MATE"
      "RIAL_CONCRETE\020\n\022\023\n\017MATERIAL_STUCCO\020\013\022\022\n\016"
      "MATERIAL_STONE\020\014\022\022\n\016MATERIAL_BRICK\020\r\022\021\n\r"
      "MATERIAL_WOOD\020\016\022\022\n\016MATERIAL_GLASS\020\017\022\023\n\017M"
      "ATERIAL_MIRROR\020\020\022\024\n\020MATERIAL_CERAMIC\020\021\022\022"
      "\n\016MATERIAL_METAL\020\022\022\031\n\025MATERIAL_CARBON_FI"
      "BER\020\023\022\024\n\020MATERIAL_LEATHER\020\024\022\024\n\020MATERIAL_"
      "PLASTIC\020\025\022\023\n\017MATERIAL_RUBBER\020\026\022\022\n\016MATERI"
      "AL_PAPER\020\027\022\021\n\rMATERIAL_LEAF\020\030\022\021\n\rMATERIA"
      "L_SKIN\020\031\022\023\n\017MATERIAL_FABRIC\020\032\022\033\n\027MATERIA"
      "L_RETROREFLECTOR\020\033\022\020\n\014MATERIAL_TAR\020\034\022\"\n\036"
      "MATERIAL_RETROREFLECTIVE_PAINT\020\035\022\027\n\023MATE"
      "RIAL_FIBERGLASS\020\036\022\023\n\017MATERIAL_CHROME\020\037*\234"
      "\001\n\016ReferenceFrame\022\033\n\027REFERENCE_FRAME_UNK"
      "NOWN\020\000\022\031\n\025REFERENCE_FRAME_OTHER\020\001\022\031\n\025REF"
      "ERENCE_FRAME_WORLD\020\002\022\033\n\027REFERENCE_FRAME_"
      "VEHICLE\020\003\022\032\n\026REFERENCE_FRAME_SENSOR\020\004*`\n"
      "\006Action\022\022\n\016ACTION_UNKNOWN\020\000\022\017\n\013ACTION_PA"
      "SS\020\001\022\017\n\013ACTION_WARN\020\002\022\017\n\013ACTION_FAIL\020\003\022\017"
      "\n\013ACTION_STOP\020\004B\021\252\002\016Metamoto.Typesb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1602);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/types/enumerations.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2ftypes_2fenumerations_2eproto
namespace metamoto {
namespace types {
const ::google::protobuf::EnumDescriptor* ObjectType_descriptor() {
  protobuf_metamoto_2ftypes_2fenumerations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2fenumerations_2eproto::file_level_enum_descriptors[0];
}
bool ObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MaterialType_descriptor() {
  protobuf_metamoto_2ftypes_2fenumerations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2fenumerations_2eproto::file_level_enum_descriptors[1];
}
bool MaterialType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReferenceFrame_descriptor() {
  protobuf_metamoto_2ftypes_2fenumerations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2fenumerations_2eproto::file_level_enum_descriptors[2];
}
bool ReferenceFrame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Action_descriptor() {
  protobuf_metamoto_2ftypes_2fenumerations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2fenumerations_2eproto::file_level_enum_descriptors[3];
}
bool Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
