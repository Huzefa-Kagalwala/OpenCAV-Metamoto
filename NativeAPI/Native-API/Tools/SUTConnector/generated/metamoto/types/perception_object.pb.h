// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/perception_object.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2fperception_5fobject_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2fperception_5fobject_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/enumerations.pb.h"
#include "metamoto/types/pose.pb.h"
#include "metamoto/types/shape.pb.h"
#include "metamoto/types/velocity.pb.h"
#include "metamoto/types/acceleration.pb.h"
#include "metamoto/types/vehicle.pb.h"
#include "metamoto/types/signal_configuration.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fperception_5fobject_2eproto 

namespace protobuf_metamoto_2ftypes_2fperception_5fobject_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2fperception_5fobject_2eproto
namespace metamoto {
namespace types {
class GlobalFrame;
class GlobalFrameDefaultTypeInternal;
extern GlobalFrameDefaultTypeInternal _GlobalFrame_default_instance_;
class LocalFrame;
class LocalFrameDefaultTypeInternal;
extern LocalFrameDefaultTypeInternal _LocalFrame_default_instance_;
class PerceptionObject;
class PerceptionObjectDefaultTypeInternal;
extern PerceptionObjectDefaultTypeInternal _PerceptionObject_default_instance_;
class PerceptionObject_TrafficLightBulb;
class PerceptionObject_TrafficLightBulbDefaultTypeInternal;
extern PerceptionObject_TrafficLightBulbDefaultTypeInternal _PerceptionObject_TrafficLightBulb_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::GlobalFrame* Arena::CreateMaybeMessage<::metamoto::types::GlobalFrame>(Arena*);
template<> ::metamoto::types::LocalFrame* Arena::CreateMaybeMessage<::metamoto::types::LocalFrame>(Arena*);
template<> ::metamoto::types::PerceptionObject* Arena::CreateMaybeMessage<::metamoto::types::PerceptionObject>(Arena*);
template<> ::metamoto::types::PerceptionObject_TrafficLightBulb* Arena::CreateMaybeMessage<::metamoto::types::PerceptionObject_TrafficLightBulb>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

// ===================================================================

class PerceptionObject_TrafficLightBulb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.PerceptionObject.TrafficLightBulb) */ {
 public:
  PerceptionObject_TrafficLightBulb();
  virtual ~PerceptionObject_TrafficLightBulb();

  PerceptionObject_TrafficLightBulb(const PerceptionObject_TrafficLightBulb& from);

  inline PerceptionObject_TrafficLightBulb& operator=(const PerceptionObject_TrafficLightBulb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PerceptionObject_TrafficLightBulb(PerceptionObject_TrafficLightBulb&& from) noexcept
    : PerceptionObject_TrafficLightBulb() {
    *this = ::std::move(from);
  }

  inline PerceptionObject_TrafficLightBulb& operator=(PerceptionObject_TrafficLightBulb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PerceptionObject_TrafficLightBulb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerceptionObject_TrafficLightBulb* internal_default_instance() {
    return reinterpret_cast<const PerceptionObject_TrafficLightBulb*>(
               &_PerceptionObject_TrafficLightBulb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PerceptionObject_TrafficLightBulb* other);
  friend void swap(PerceptionObject_TrafficLightBulb& a, PerceptionObject_TrafficLightBulb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerceptionObject_TrafficLightBulb* New() const final {
    return CreateMaybeMessage<PerceptionObject_TrafficLightBulb>(NULL);
  }

  PerceptionObject_TrafficLightBulb* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PerceptionObject_TrafficLightBulb>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PerceptionObject_TrafficLightBulb& from);
  void MergeFrom(const PerceptionObject_TrafficLightBulb& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerceptionObject_TrafficLightBulb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.types.SignalConfiguration.Signal.BulbType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  private:
  const ::metamoto::types::SignalConfiguration_Signal_BulbType& _internal_type() const;
  public:
  const ::metamoto::types::SignalConfiguration_Signal_BulbType& type() const;
  ::metamoto::types::SignalConfiguration_Signal_BulbType* release_type();
  ::metamoto::types::SignalConfiguration_Signal_BulbType* mutable_type();
  void set_allocated_type(::metamoto::types::SignalConfiguration_Signal_BulbType* type);

  // .metamoto.types.SignalConfiguration.Signal.BulbState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  private:
  const ::metamoto::types::SignalConfiguration_Signal_BulbState& _internal_state() const;
  public:
  const ::metamoto::types::SignalConfiguration_Signal_BulbState& state() const;
  ::metamoto::types::SignalConfiguration_Signal_BulbState* release_state();
  ::metamoto::types::SignalConfiguration_Signal_BulbState* mutable_state();
  void set_allocated_state(::metamoto::types::SignalConfiguration_Signal_BulbState* state);

  // @@protoc_insertion_point(class_scope:metamoto.types.PerceptionObject.TrafficLightBulb)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::types::SignalConfiguration_Signal_BulbType* type_;
  ::metamoto::types::SignalConfiguration_Signal_BulbState* state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fperception_5fobject_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PerceptionObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.PerceptionObject) */ {
 public:
  PerceptionObject();
  virtual ~PerceptionObject();

  PerceptionObject(const PerceptionObject& from);

  inline PerceptionObject& operator=(const PerceptionObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PerceptionObject(PerceptionObject&& from) noexcept
    : PerceptionObject() {
    *this = ::std::move(from);
  }

  inline PerceptionObject& operator=(PerceptionObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PerceptionObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerceptionObject* internal_default_instance() {
    return reinterpret_cast<const PerceptionObject*>(
               &_PerceptionObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PerceptionObject* other);
  friend void swap(PerceptionObject& a, PerceptionObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerceptionObject* New() const final {
    return CreateMaybeMessage<PerceptionObject>(NULL);
  }

  PerceptionObject* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PerceptionObject>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PerceptionObject& from);
  void MergeFrom(const PerceptionObject& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerceptionObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PerceptionObject_TrafficLightBulb TrafficLightBulb;

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.PerceptionObject.TrafficLightBulb traffic_light_bulbs = 14;
  int traffic_light_bulbs_size() const;
  void clear_traffic_light_bulbs();
  static const int kTrafficLightBulbsFieldNumber = 14;
  ::metamoto::types::PerceptionObject_TrafficLightBulb* mutable_traffic_light_bulbs(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::PerceptionObject_TrafficLightBulb >*
      mutable_traffic_light_bulbs();
  const ::metamoto::types::PerceptionObject_TrafficLightBulb& traffic_light_bulbs(int index) const;
  ::metamoto::types::PerceptionObject_TrafficLightBulb* add_traffic_light_bulbs();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::PerceptionObject_TrafficLightBulb >&
      traffic_light_bulbs() const;

  // .metamoto.types.Shape shape = 3;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 3;
  private:
  const ::metamoto::types::Shape& _internal_shape() const;
  public:
  const ::metamoto::types::Shape& shape() const;
  ::metamoto::types::Shape* release_shape();
  ::metamoto::types::Shape* mutable_shape();
  void set_allocated_shape(::metamoto::types::Shape* shape);

  // .metamoto.types.GlobalFrame global_frame = 5;
  bool has_global_frame() const;
  void clear_global_frame();
  static const int kGlobalFrameFieldNumber = 5;
  private:
  const ::metamoto::types::GlobalFrame& _internal_global_frame() const;
  public:
  const ::metamoto::types::GlobalFrame& global_frame() const;
  ::metamoto::types::GlobalFrame* release_global_frame();
  ::metamoto::types::GlobalFrame* mutable_global_frame();
  void set_allocated_global_frame(::metamoto::types::GlobalFrame* global_frame);

  // .metamoto.types.LocalFrame local_frame = 6;
  bool has_local_frame() const;
  void clear_local_frame();
  static const int kLocalFrameFieldNumber = 6;
  private:
  const ::metamoto::types::LocalFrame& _internal_local_frame() const;
  public:
  const ::metamoto::types::LocalFrame& local_frame() const;
  ::metamoto::types::LocalFrame* release_local_frame();
  ::metamoto::types::LocalFrame* mutable_local_frame();
  void set_allocated_local_frame(::metamoto::types::LocalFrame* local_frame);

  // uint32 object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  ::google::protobuf::uint32 object_id() const;
  void set_object_id(::google::protobuf::uint32 value);

  // .metamoto.types.ObjectType object_type = 2;
  void clear_object_type();
  static const int kObjectTypeFieldNumber = 2;
  ::metamoto::types::ObjectType object_type() const;
  void set_object_type(::metamoto::types::ObjectType value);

  // double tracking_time = 4;
  void clear_tracking_time();
  static const int kTrackingTimeFieldNumber = 4;
  double tracking_time() const;
  void set_tracking_time(double value);

  // .metamoto.types.Vehicle.LightState head_lights = 10;
  void clear_head_lights();
  static const int kHeadLightsFieldNumber = 10;
  ::metamoto::types::Vehicle_LightState head_lights() const;
  void set_head_lights(::metamoto::types::Vehicle_LightState value);

  // .metamoto.types.Vehicle.LightState reverse_lights = 11;
  void clear_reverse_lights();
  static const int kReverseLightsFieldNumber = 11;
  ::metamoto::types::Vehicle_LightState reverse_lights() const;
  void set_reverse_lights(::metamoto::types::Vehicle_LightState value);

  // .metamoto.types.Vehicle.LightState brake_lights = 12;
  void clear_brake_lights();
  static const int kBrakeLightsFieldNumber = 12;
  ::metamoto::types::Vehicle_LightState brake_lights() const;
  void set_brake_lights(::metamoto::types::Vehicle_LightState value);

  // .metamoto.types.Vehicle.SignalLightState signal_lights = 13;
  void clear_signal_lights();
  static const int kSignalLightsFieldNumber = 13;
  ::metamoto::types::Vehicle_SignalLightState signal_lights() const;
  void set_signal_lights(::metamoto::types::Vehicle_SignalLightState value);

  // @@protoc_insertion_point(class_scope:metamoto.types.PerceptionObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::PerceptionObject_TrafficLightBulb > traffic_light_bulbs_;
  ::metamoto::types::Shape* shape_;
  ::metamoto::types::GlobalFrame* global_frame_;
  ::metamoto::types::LocalFrame* local_frame_;
  ::google::protobuf::uint32 object_id_;
  int object_type_;
  double tracking_time_;
  int head_lights_;
  int reverse_lights_;
  int brake_lights_;
  int signal_lights_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fperception_5fobject_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LocalFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.LocalFrame) */ {
 public:
  LocalFrame();
  virtual ~LocalFrame();

  LocalFrame(const LocalFrame& from);

  inline LocalFrame& operator=(const LocalFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocalFrame(LocalFrame&& from) noexcept
    : LocalFrame() {
    *this = ::std::move(from);
  }

  inline LocalFrame& operator=(LocalFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocalFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalFrame* internal_default_instance() {
    return reinterpret_cast<const LocalFrame*>(
               &_LocalFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LocalFrame* other);
  friend void swap(LocalFrame& a, LocalFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocalFrame* New() const final {
    return CreateMaybeMessage<LocalFrame>(NULL);
  }

  LocalFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LocalFrame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LocalFrame& from);
  void MergeFrom(const LocalFrame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float range = 1;
  void clear_range();
  static const int kRangeFieldNumber = 1;
  float range() const;
  void set_range(float value);

  // float azimuth_angle = 2;
  void clear_azimuth_angle();
  static const int kAzimuthAngleFieldNumber = 2;
  float azimuth_angle() const;
  void set_azimuth_angle(float value);

  // float elevation_angle = 3;
  void clear_elevation_angle();
  static const int kElevationAngleFieldNumber = 3;
  float elevation_angle() const;
  void set_elevation_angle(float value);

  // float radial_speed = 4;
  void clear_radial_speed();
  static const int kRadialSpeedFieldNumber = 4;
  float radial_speed() const;
  void set_radial_speed(float value);

  // float cross_speed = 5;
  void clear_cross_speed();
  static const int kCrossSpeedFieldNumber = 5;
  float cross_speed() const;
  void set_cross_speed(float value);

  // @@protoc_insertion_point(class_scope:metamoto.types.LocalFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float range_;
  float azimuth_angle_;
  float elevation_angle_;
  float radial_speed_;
  float cross_speed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fperception_5fobject_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GlobalFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.GlobalFrame) */ {
 public:
  GlobalFrame();
  virtual ~GlobalFrame();

  GlobalFrame(const GlobalFrame& from);

  inline GlobalFrame& operator=(const GlobalFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlobalFrame(GlobalFrame&& from) noexcept
    : GlobalFrame() {
    *this = ::std::move(from);
  }

  inline GlobalFrame& operator=(GlobalFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalFrame* internal_default_instance() {
    return reinterpret_cast<const GlobalFrame*>(
               &_GlobalFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GlobalFrame* other);
  friend void swap(GlobalFrame& a, GlobalFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalFrame* New() const final {
    return CreateMaybeMessage<GlobalFrame>(NULL);
  }

  GlobalFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GlobalFrame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GlobalFrame& from);
  void MergeFrom(const GlobalFrame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.types.Pose pose = 1;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 1;
  private:
  const ::metamoto::types::Pose& _internal_pose() const;
  public:
  const ::metamoto::types::Pose& pose() const;
  ::metamoto::types::Pose* release_pose();
  ::metamoto::types::Pose* mutable_pose();
  void set_allocated_pose(::metamoto::types::Pose* pose);

  // .metamoto.types.Velocity velocity = 2;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  private:
  const ::metamoto::types::Velocity& _internal_velocity() const;
  public:
  const ::metamoto::types::Velocity& velocity() const;
  ::metamoto::types::Velocity* release_velocity();
  ::metamoto::types::Velocity* mutable_velocity();
  void set_allocated_velocity(::metamoto::types::Velocity* velocity);

  // .metamoto.types.Acceleration acceleration = 3;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 3;
  private:
  const ::metamoto::types::Acceleration& _internal_acceleration() const;
  public:
  const ::metamoto::types::Acceleration& acceleration() const;
  ::metamoto::types::Acceleration* release_acceleration();
  ::metamoto::types::Acceleration* mutable_acceleration();
  void set_allocated_acceleration(::metamoto::types::Acceleration* acceleration);

  // @@protoc_insertion_point(class_scope:metamoto.types.GlobalFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::types::Pose* pose_;
  ::metamoto::types::Velocity* velocity_;
  ::metamoto::types::Acceleration* acceleration_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fperception_5fobject_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerceptionObject_TrafficLightBulb

// .metamoto.types.SignalConfiguration.Signal.BulbType type = 1;
inline bool PerceptionObject_TrafficLightBulb::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
inline const ::metamoto::types::SignalConfiguration_Signal_BulbType& PerceptionObject_TrafficLightBulb::_internal_type() const {
  return *type_;
}
inline const ::metamoto::types::SignalConfiguration_Signal_BulbType& PerceptionObject_TrafficLightBulb::type() const {
  const ::metamoto::types::SignalConfiguration_Signal_BulbType* p = type_;
  // @@protoc_insertion_point(field_get:metamoto.types.PerceptionObject.TrafficLightBulb.type)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::SignalConfiguration_Signal_BulbType*>(
      &::metamoto::types::_SignalConfiguration_Signal_BulbType_default_instance_);
}
inline ::metamoto::types::SignalConfiguration_Signal_BulbType* PerceptionObject_TrafficLightBulb::release_type() {
  // @@protoc_insertion_point(field_release:metamoto.types.PerceptionObject.TrafficLightBulb.type)
  
  ::metamoto::types::SignalConfiguration_Signal_BulbType* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::metamoto::types::SignalConfiguration_Signal_BulbType* PerceptionObject_TrafficLightBulb::mutable_type() {
  
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::SignalConfiguration_Signal_BulbType>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.PerceptionObject.TrafficLightBulb.type)
  return type_;
}
inline void PerceptionObject_TrafficLightBulb::set_allocated_type(::metamoto::types::SignalConfiguration_Signal_BulbType* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.PerceptionObject.TrafficLightBulb.type)
}

// .metamoto.types.SignalConfiguration.Signal.BulbState state = 2;
inline bool PerceptionObject_TrafficLightBulb::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline const ::metamoto::types::SignalConfiguration_Signal_BulbState& PerceptionObject_TrafficLightBulb::_internal_state() const {
  return *state_;
}
inline const ::metamoto::types::SignalConfiguration_Signal_BulbState& PerceptionObject_TrafficLightBulb::state() const {
  const ::metamoto::types::SignalConfiguration_Signal_BulbState* p = state_;
  // @@protoc_insertion_point(field_get:metamoto.types.PerceptionObject.TrafficLightBulb.state)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::SignalConfiguration_Signal_BulbState*>(
      &::metamoto::types::_SignalConfiguration_Signal_BulbState_default_instance_);
}
inline ::metamoto::types::SignalConfiguration_Signal_BulbState* PerceptionObject_TrafficLightBulb::release_state() {
  // @@protoc_insertion_point(field_release:metamoto.types.PerceptionObject.TrafficLightBulb.state)
  
  ::metamoto::types::SignalConfiguration_Signal_BulbState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::metamoto::types::SignalConfiguration_Signal_BulbState* PerceptionObject_TrafficLightBulb::mutable_state() {
  
  if (state_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::SignalConfiguration_Signal_BulbState>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.PerceptionObject.TrafficLightBulb.state)
  return state_;
}
inline void PerceptionObject_TrafficLightBulb::set_allocated_state(::metamoto::types::SignalConfiguration_Signal_BulbState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(state_);
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.PerceptionObject.TrafficLightBulb.state)
}

// -------------------------------------------------------------------

// PerceptionObject

// uint32 object_id = 1;
inline void PerceptionObject::clear_object_id() {
  object_id_ = 0u;
}
inline ::google::protobuf::uint32 PerceptionObject::object_id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.PerceptionObject.object_id)
  return object_id_;
}
inline void PerceptionObject::set_object_id(::google::protobuf::uint32 value) {
  
  object_id_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.PerceptionObject.object_id)
}

// .metamoto.types.ObjectType object_type = 2;
inline void PerceptionObject::clear_object_type() {
  object_type_ = 0;
}
inline ::metamoto::types::ObjectType PerceptionObject::object_type() const {
  // @@protoc_insertion_point(field_get:metamoto.types.PerceptionObject.object_type)
  return static_cast< ::metamoto::types::ObjectType >(object_type_);
}
inline void PerceptionObject::set_object_type(::metamoto::types::ObjectType value) {
  
  object_type_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.PerceptionObject.object_type)
}

// .metamoto.types.Shape shape = 3;
inline bool PerceptionObject::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline const ::metamoto::types::Shape& PerceptionObject::_internal_shape() const {
  return *shape_;
}
inline const ::metamoto::types::Shape& PerceptionObject::shape() const {
  const ::metamoto::types::Shape* p = shape_;
  // @@protoc_insertion_point(field_get:metamoto.types.PerceptionObject.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Shape*>(
      &::metamoto::types::_Shape_default_instance_);
}
inline ::metamoto::types::Shape* PerceptionObject::release_shape() {
  // @@protoc_insertion_point(field_release:metamoto.types.PerceptionObject.shape)
  
  ::metamoto::types::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline ::metamoto::types::Shape* PerceptionObject::mutable_shape() {
  
  if (shape_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Shape>(GetArenaNoVirtual());
    shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.PerceptionObject.shape)
  return shape_;
}
inline void PerceptionObject::set_allocated_shape(::metamoto::types::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(shape_);
  }
  if (shape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.PerceptionObject.shape)
}

// double tracking_time = 4;
inline void PerceptionObject::clear_tracking_time() {
  tracking_time_ = 0;
}
inline double PerceptionObject::tracking_time() const {
  // @@protoc_insertion_point(field_get:metamoto.types.PerceptionObject.tracking_time)
  return tracking_time_;
}
inline void PerceptionObject::set_tracking_time(double value) {
  
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.PerceptionObject.tracking_time)
}

// .metamoto.types.GlobalFrame global_frame = 5;
inline bool PerceptionObject::has_global_frame() const {
  return this != internal_default_instance() && global_frame_ != NULL;
}
inline void PerceptionObject::clear_global_frame() {
  if (GetArenaNoVirtual() == NULL && global_frame_ != NULL) {
    delete global_frame_;
  }
  global_frame_ = NULL;
}
inline const ::metamoto::types::GlobalFrame& PerceptionObject::_internal_global_frame() const {
  return *global_frame_;
}
inline const ::metamoto::types::GlobalFrame& PerceptionObject::global_frame() const {
  const ::metamoto::types::GlobalFrame* p = global_frame_;
  // @@protoc_insertion_point(field_get:metamoto.types.PerceptionObject.global_frame)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::GlobalFrame*>(
      &::metamoto::types::_GlobalFrame_default_instance_);
}
inline ::metamoto::types::GlobalFrame* PerceptionObject::release_global_frame() {
  // @@protoc_insertion_point(field_release:metamoto.types.PerceptionObject.global_frame)
  
  ::metamoto::types::GlobalFrame* temp = global_frame_;
  global_frame_ = NULL;
  return temp;
}
inline ::metamoto::types::GlobalFrame* PerceptionObject::mutable_global_frame() {
  
  if (global_frame_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::GlobalFrame>(GetArenaNoVirtual());
    global_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.PerceptionObject.global_frame)
  return global_frame_;
}
inline void PerceptionObject::set_allocated_global_frame(::metamoto::types::GlobalFrame* global_frame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete global_frame_;
  }
  if (global_frame) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      global_frame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, global_frame, submessage_arena);
    }
    
  } else {
    
  }
  global_frame_ = global_frame;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.PerceptionObject.global_frame)
}

// .metamoto.types.LocalFrame local_frame = 6;
inline bool PerceptionObject::has_local_frame() const {
  return this != internal_default_instance() && local_frame_ != NULL;
}
inline void PerceptionObject::clear_local_frame() {
  if (GetArenaNoVirtual() == NULL && local_frame_ != NULL) {
    delete local_frame_;
  }
  local_frame_ = NULL;
}
inline const ::metamoto::types::LocalFrame& PerceptionObject::_internal_local_frame() const {
  return *local_frame_;
}
inline const ::metamoto::types::LocalFrame& PerceptionObject::local_frame() const {
  const ::metamoto::types::LocalFrame* p = local_frame_;
  // @@protoc_insertion_point(field_get:metamoto.types.PerceptionObject.local_frame)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::LocalFrame*>(
      &::metamoto::types::_LocalFrame_default_instance_);
}
inline ::metamoto::types::LocalFrame* PerceptionObject::release_local_frame() {
  // @@protoc_insertion_point(field_release:metamoto.types.PerceptionObject.local_frame)
  
  ::metamoto::types::LocalFrame* temp = local_frame_;
  local_frame_ = NULL;
  return temp;
}
inline ::metamoto::types::LocalFrame* PerceptionObject::mutable_local_frame() {
  
  if (local_frame_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::LocalFrame>(GetArenaNoVirtual());
    local_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.PerceptionObject.local_frame)
  return local_frame_;
}
inline void PerceptionObject::set_allocated_local_frame(::metamoto::types::LocalFrame* local_frame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete local_frame_;
  }
  if (local_frame) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      local_frame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, local_frame, submessage_arena);
    }
    
  } else {
    
  }
  local_frame_ = local_frame;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.PerceptionObject.local_frame)
}

// .metamoto.types.Vehicle.LightState head_lights = 10;
inline void PerceptionObject::clear_head_lights() {
  head_lights_ = 0;
}
inline ::metamoto::types::Vehicle_LightState PerceptionObject::head_lights() const {
  // @@protoc_insertion_point(field_get:metamoto.types.PerceptionObject.head_lights)
  return static_cast< ::metamoto::types::Vehicle_LightState >(head_lights_);
}
inline void PerceptionObject::set_head_lights(::metamoto::types::Vehicle_LightState value) {
  
  head_lights_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.PerceptionObject.head_lights)
}

// .metamoto.types.Vehicle.LightState reverse_lights = 11;
inline void PerceptionObject::clear_reverse_lights() {
  reverse_lights_ = 0;
}
inline ::metamoto::types::Vehicle_LightState PerceptionObject::reverse_lights() const {
  // @@protoc_insertion_point(field_get:metamoto.types.PerceptionObject.reverse_lights)
  return static_cast< ::metamoto::types::Vehicle_LightState >(reverse_lights_);
}
inline void PerceptionObject::set_reverse_lights(::metamoto::types::Vehicle_LightState value) {
  
  reverse_lights_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.PerceptionObject.reverse_lights)
}

// .metamoto.types.Vehicle.LightState brake_lights = 12;
inline void PerceptionObject::clear_brake_lights() {
  brake_lights_ = 0;
}
inline ::metamoto::types::Vehicle_LightState PerceptionObject::brake_lights() const {
  // @@protoc_insertion_point(field_get:metamoto.types.PerceptionObject.brake_lights)
  return static_cast< ::metamoto::types::Vehicle_LightState >(brake_lights_);
}
inline void PerceptionObject::set_brake_lights(::metamoto::types::Vehicle_LightState value) {
  
  brake_lights_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.PerceptionObject.brake_lights)
}

// .metamoto.types.Vehicle.SignalLightState signal_lights = 13;
inline void PerceptionObject::clear_signal_lights() {
  signal_lights_ = 0;
}
inline ::metamoto::types::Vehicle_SignalLightState PerceptionObject::signal_lights() const {
  // @@protoc_insertion_point(field_get:metamoto.types.PerceptionObject.signal_lights)
  return static_cast< ::metamoto::types::Vehicle_SignalLightState >(signal_lights_);
}
inline void PerceptionObject::set_signal_lights(::metamoto::types::Vehicle_SignalLightState value) {
  
  signal_lights_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.PerceptionObject.signal_lights)
}

// repeated .metamoto.types.PerceptionObject.TrafficLightBulb traffic_light_bulbs = 14;
inline int PerceptionObject::traffic_light_bulbs_size() const {
  return traffic_light_bulbs_.size();
}
inline void PerceptionObject::clear_traffic_light_bulbs() {
  traffic_light_bulbs_.Clear();
}
inline ::metamoto::types::PerceptionObject_TrafficLightBulb* PerceptionObject::mutable_traffic_light_bulbs(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.PerceptionObject.traffic_light_bulbs)
  return traffic_light_bulbs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::PerceptionObject_TrafficLightBulb >*
PerceptionObject::mutable_traffic_light_bulbs() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.PerceptionObject.traffic_light_bulbs)
  return &traffic_light_bulbs_;
}
inline const ::metamoto::types::PerceptionObject_TrafficLightBulb& PerceptionObject::traffic_light_bulbs(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.PerceptionObject.traffic_light_bulbs)
  return traffic_light_bulbs_.Get(index);
}
inline ::metamoto::types::PerceptionObject_TrafficLightBulb* PerceptionObject::add_traffic_light_bulbs() {
  // @@protoc_insertion_point(field_add:metamoto.types.PerceptionObject.traffic_light_bulbs)
  return traffic_light_bulbs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::PerceptionObject_TrafficLightBulb >&
PerceptionObject::traffic_light_bulbs() const {
  // @@protoc_insertion_point(field_list:metamoto.types.PerceptionObject.traffic_light_bulbs)
  return traffic_light_bulbs_;
}

// -------------------------------------------------------------------

// LocalFrame

// float range = 1;
inline void LocalFrame::clear_range() {
  range_ = 0;
}
inline float LocalFrame::range() const {
  // @@protoc_insertion_point(field_get:metamoto.types.LocalFrame.range)
  return range_;
}
inline void LocalFrame::set_range(float value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.LocalFrame.range)
}

// float azimuth_angle = 2;
inline void LocalFrame::clear_azimuth_angle() {
  azimuth_angle_ = 0;
}
inline float LocalFrame::azimuth_angle() const {
  // @@protoc_insertion_point(field_get:metamoto.types.LocalFrame.azimuth_angle)
  return azimuth_angle_;
}
inline void LocalFrame::set_azimuth_angle(float value) {
  
  azimuth_angle_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.LocalFrame.azimuth_angle)
}

// float elevation_angle = 3;
inline void LocalFrame::clear_elevation_angle() {
  elevation_angle_ = 0;
}
inline float LocalFrame::elevation_angle() const {
  // @@protoc_insertion_point(field_get:metamoto.types.LocalFrame.elevation_angle)
  return elevation_angle_;
}
inline void LocalFrame::set_elevation_angle(float value) {
  
  elevation_angle_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.LocalFrame.elevation_angle)
}

// float radial_speed = 4;
inline void LocalFrame::clear_radial_speed() {
  radial_speed_ = 0;
}
inline float LocalFrame::radial_speed() const {
  // @@protoc_insertion_point(field_get:metamoto.types.LocalFrame.radial_speed)
  return radial_speed_;
}
inline void LocalFrame::set_radial_speed(float value) {
  
  radial_speed_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.LocalFrame.radial_speed)
}

// float cross_speed = 5;
inline void LocalFrame::clear_cross_speed() {
  cross_speed_ = 0;
}
inline float LocalFrame::cross_speed() const {
  // @@protoc_insertion_point(field_get:metamoto.types.LocalFrame.cross_speed)
  return cross_speed_;
}
inline void LocalFrame::set_cross_speed(float value) {
  
  cross_speed_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.LocalFrame.cross_speed)
}

// -------------------------------------------------------------------

// GlobalFrame

// .metamoto.types.Pose pose = 1;
inline bool GlobalFrame::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::metamoto::types::Pose& GlobalFrame::_internal_pose() const {
  return *pose_;
}
inline const ::metamoto::types::Pose& GlobalFrame::pose() const {
  const ::metamoto::types::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:metamoto.types.GlobalFrame.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Pose*>(
      &::metamoto::types::_Pose_default_instance_);
}
inline ::metamoto::types::Pose* GlobalFrame::release_pose() {
  // @@protoc_insertion_point(field_release:metamoto.types.GlobalFrame.pose)
  
  ::metamoto::types::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::metamoto::types::Pose* GlobalFrame::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.GlobalFrame.pose)
  return pose_;
}
inline void GlobalFrame::set_allocated_pose(::metamoto::types::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.GlobalFrame.pose)
}

// .metamoto.types.Velocity velocity = 2;
inline bool GlobalFrame::has_velocity() const {
  return this != internal_default_instance() && velocity_ != NULL;
}
inline const ::metamoto::types::Velocity& GlobalFrame::_internal_velocity() const {
  return *velocity_;
}
inline const ::metamoto::types::Velocity& GlobalFrame::velocity() const {
  const ::metamoto::types::Velocity* p = velocity_;
  // @@protoc_insertion_point(field_get:metamoto.types.GlobalFrame.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Velocity*>(
      &::metamoto::types::_Velocity_default_instance_);
}
inline ::metamoto::types::Velocity* GlobalFrame::release_velocity() {
  // @@protoc_insertion_point(field_release:metamoto.types.GlobalFrame.velocity)
  
  ::metamoto::types::Velocity* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline ::metamoto::types::Velocity* GlobalFrame::mutable_velocity() {
  
  if (velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Velocity>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.GlobalFrame.velocity)
  return velocity_;
}
inline void GlobalFrame::set_allocated_velocity(::metamoto::types::Velocity* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.GlobalFrame.velocity)
}

// .metamoto.types.Acceleration acceleration = 3;
inline bool GlobalFrame::has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != NULL;
}
inline const ::metamoto::types::Acceleration& GlobalFrame::_internal_acceleration() const {
  return *acceleration_;
}
inline const ::metamoto::types::Acceleration& GlobalFrame::acceleration() const {
  const ::metamoto::types::Acceleration* p = acceleration_;
  // @@protoc_insertion_point(field_get:metamoto.types.GlobalFrame.acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Acceleration*>(
      &::metamoto::types::_Acceleration_default_instance_);
}
inline ::metamoto::types::Acceleration* GlobalFrame::release_acceleration() {
  // @@protoc_insertion_point(field_release:metamoto.types.GlobalFrame.acceleration)
  
  ::metamoto::types::Acceleration* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
inline ::metamoto::types::Acceleration* GlobalFrame::mutable_acceleration() {
  
  if (acceleration_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Acceleration>(GetArenaNoVirtual());
    acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.GlobalFrame.acceleration)
  return acceleration_;
}
inline void GlobalFrame::set_allocated_acceleration(::metamoto::types::Acceleration* acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(acceleration_);
  }
  if (acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.GlobalFrame.acceleration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2fperception_5fobject_2eproto
