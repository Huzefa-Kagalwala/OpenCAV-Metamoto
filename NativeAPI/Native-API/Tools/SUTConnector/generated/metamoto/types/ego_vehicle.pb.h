// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/ego_vehicle.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2fego_5fvehicle_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2fego_5fvehicle_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
#include "metamoto/types/asset.pb.h"
#include "metamoto/types/normal_distribution.pb.h"
#include "metamoto/types/pose.pb.h"
#include "metamoto/types/range.pb.h"
#include "metamoto/types/vehicle_instance.pb.h"
#include "metamoto/types/version.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto 

namespace protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[15];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto
namespace metamoto {
namespace types {
class Controller;
class ControllerDefaultTypeInternal;
extern ControllerDefaultTypeInternal _Controller_default_instance_;
class Controller_RangesEntry_DoNotUse;
class Controller_RangesEntry_DoNotUseDefaultTypeInternal;
extern Controller_RangesEntry_DoNotUseDefaultTypeInternal _Controller_RangesEntry_DoNotUse_default_instance_;
class EgoVehicle;
class EgoVehicleDefaultTypeInternal;
extern EgoVehicleDefaultTypeInternal _EgoVehicle_default_instance_;
class EgoVehicle_RangesEntry_DoNotUse;
class EgoVehicle_RangesEntry_DoNotUseDefaultTypeInternal;
extern EgoVehicle_RangesEntry_DoNotUseDefaultTypeInternal _EgoVehicle_RangesEntry_DoNotUse_default_instance_;
class Sensor;
class SensorDefaultTypeInternal;
extern SensorDefaultTypeInternal _Sensor_default_instance_;
class SensorMount;
class SensorMountDefaultTypeInternal;
extern SensorMountDefaultTypeInternal _SensorMount_default_instance_;
class SensorMount_MountPoint;
class SensorMount_MountPointDefaultTypeInternal;
extern SensorMount_MountPointDefaultTypeInternal _SensorMount_MountPoint_default_instance_;
class SensorMount_RangesEntry_DoNotUse;
class SensorMount_RangesEntry_DoNotUseDefaultTypeInternal;
extern SensorMount_RangesEntry_DoNotUseDefaultTypeInternal _SensorMount_RangesEntry_DoNotUse_default_instance_;
class Sensor_RangesEntry_DoNotUse;
class Sensor_RangesEntry_DoNotUseDefaultTypeInternal;
extern Sensor_RangesEntry_DoNotUseDefaultTypeInternal _Sensor_RangesEntry_DoNotUse_default_instance_;
class SystemUnderTest;
class SystemUnderTestDefaultTypeInternal;
extern SystemUnderTestDefaultTypeInternal _SystemUnderTest_default_instance_;
class SystemUnderTest_Container;
class SystemUnderTest_ContainerDefaultTypeInternal;
extern SystemUnderTest_ContainerDefaultTypeInternal _SystemUnderTest_Container_default_instance_;
class VehicleDynamics;
class VehicleDynamicsDefaultTypeInternal;
extern VehicleDynamicsDefaultTypeInternal _VehicleDynamics_default_instance_;
class VehicleDynamics_ContactPatch;
class VehicleDynamics_ContactPatchDefaultTypeInternal;
extern VehicleDynamics_ContactPatchDefaultTypeInternal _VehicleDynamics_ContactPatch_default_instance_;
class VehicleDynamics_RangesEntry_DoNotUse;
class VehicleDynamics_RangesEntry_DoNotUseDefaultTypeInternal;
extern VehicleDynamics_RangesEntry_DoNotUseDefaultTypeInternal _VehicleDynamics_RangesEntry_DoNotUse_default_instance_;
class VehicleDynamics_Skeleton;
class VehicleDynamics_SkeletonDefaultTypeInternal;
extern VehicleDynamics_SkeletonDefaultTypeInternal _VehicleDynamics_Skeleton_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::Controller* Arena::CreateMaybeMessage<::metamoto::types::Controller>(Arena*);
template<> ::metamoto::types::Controller_RangesEntry_DoNotUse* Arena::CreateMaybeMessage<::metamoto::types::Controller_RangesEntry_DoNotUse>(Arena*);
template<> ::metamoto::types::EgoVehicle* Arena::CreateMaybeMessage<::metamoto::types::EgoVehicle>(Arena*);
template<> ::metamoto::types::EgoVehicle_RangesEntry_DoNotUse* Arena::CreateMaybeMessage<::metamoto::types::EgoVehicle_RangesEntry_DoNotUse>(Arena*);
template<> ::metamoto::types::Sensor* Arena::CreateMaybeMessage<::metamoto::types::Sensor>(Arena*);
template<> ::metamoto::types::SensorMount* Arena::CreateMaybeMessage<::metamoto::types::SensorMount>(Arena*);
template<> ::metamoto::types::SensorMount_MountPoint* Arena::CreateMaybeMessage<::metamoto::types::SensorMount_MountPoint>(Arena*);
template<> ::metamoto::types::SensorMount_RangesEntry_DoNotUse* Arena::CreateMaybeMessage<::metamoto::types::SensorMount_RangesEntry_DoNotUse>(Arena*);
template<> ::metamoto::types::Sensor_RangesEntry_DoNotUse* Arena::CreateMaybeMessage<::metamoto::types::Sensor_RangesEntry_DoNotUse>(Arena*);
template<> ::metamoto::types::SystemUnderTest* Arena::CreateMaybeMessage<::metamoto::types::SystemUnderTest>(Arena*);
template<> ::metamoto::types::SystemUnderTest_Container* Arena::CreateMaybeMessage<::metamoto::types::SystemUnderTest_Container>(Arena*);
template<> ::metamoto::types::VehicleDynamics* Arena::CreateMaybeMessage<::metamoto::types::VehicleDynamics>(Arena*);
template<> ::metamoto::types::VehicleDynamics_ContactPatch* Arena::CreateMaybeMessage<::metamoto::types::VehicleDynamics_ContactPatch>(Arena*);
template<> ::metamoto::types::VehicleDynamics_RangesEntry_DoNotUse* Arena::CreateMaybeMessage<::metamoto::types::VehicleDynamics_RangesEntry_DoNotUse>(Arena*);
template<> ::metamoto::types::VehicleDynamics_Skeleton* Arena::CreateMaybeMessage<::metamoto::types::VehicleDynamics_Skeleton>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

enum SensorMount_MountPoint_Type {
  SensorMount_MountPoint_Type_UNKNOWN = 0,
  SensorMount_MountPoint_Type_OTHER = 1,
  SensorMount_MountPoint_Type_CAMERA = 2,
  SensorMount_MountPoint_Type_LIDAR = 3,
  SensorMount_MountPoint_Type_RADAR = 4,
  SensorMount_MountPoint_Type_SensorMount_MountPoint_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SensorMount_MountPoint_Type_SensorMount_MountPoint_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SensorMount_MountPoint_Type_IsValid(int value);
const SensorMount_MountPoint_Type SensorMount_MountPoint_Type_Type_MIN = SensorMount_MountPoint_Type_UNKNOWN;
const SensorMount_MountPoint_Type SensorMount_MountPoint_Type_Type_MAX = SensorMount_MountPoint_Type_RADAR;
const int SensorMount_MountPoint_Type_Type_ARRAYSIZE = SensorMount_MountPoint_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* SensorMount_MountPoint_Type_descriptor();
inline const ::std::string& SensorMount_MountPoint_Type_Name(SensorMount_MountPoint_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SensorMount_MountPoint_Type_descriptor(), value);
}
inline bool SensorMount_MountPoint_Type_Parse(
    const ::std::string& name, SensorMount_MountPoint_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SensorMount_MountPoint_Type>(
    SensorMount_MountPoint_Type_descriptor(), name, value);
}
enum VehicleDynamics_ContactPatch_Shape {
  VehicleDynamics_ContactPatch_Shape_RECTANGLE = 0,
  VehicleDynamics_ContactPatch_Shape_ELLIPSE = 1,
  VehicleDynamics_ContactPatch_Shape_VehicleDynamics_ContactPatch_Shape_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VehicleDynamics_ContactPatch_Shape_VehicleDynamics_ContactPatch_Shape_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VehicleDynamics_ContactPatch_Shape_IsValid(int value);
const VehicleDynamics_ContactPatch_Shape VehicleDynamics_ContactPatch_Shape_Shape_MIN = VehicleDynamics_ContactPatch_Shape_RECTANGLE;
const VehicleDynamics_ContactPatch_Shape VehicleDynamics_ContactPatch_Shape_Shape_MAX = VehicleDynamics_ContactPatch_Shape_ELLIPSE;
const int VehicleDynamics_ContactPatch_Shape_Shape_ARRAYSIZE = VehicleDynamics_ContactPatch_Shape_Shape_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehicleDynamics_ContactPatch_Shape_descriptor();
inline const ::std::string& VehicleDynamics_ContactPatch_Shape_Name(VehicleDynamics_ContactPatch_Shape value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehicleDynamics_ContactPatch_Shape_descriptor(), value);
}
inline bool VehicleDynamics_ContactPatch_Shape_Parse(
    const ::std::string& name, VehicleDynamics_ContactPatch_Shape* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleDynamics_ContactPatch_Shape>(
    VehicleDynamics_ContactPatch_Shape_descriptor(), name, value);
}
// ===================================================================

class SystemUnderTest_Container : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.SystemUnderTest.Container) */ {
 public:
  SystemUnderTest_Container();
  virtual ~SystemUnderTest_Container();

  SystemUnderTest_Container(const SystemUnderTest_Container& from);

  inline SystemUnderTest_Container& operator=(const SystemUnderTest_Container& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SystemUnderTest_Container(SystemUnderTest_Container&& from) noexcept
    : SystemUnderTest_Container() {
    *this = ::std::move(from);
  }

  inline SystemUnderTest_Container& operator=(SystemUnderTest_Container&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemUnderTest_Container& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemUnderTest_Container* internal_default_instance() {
    return reinterpret_cast<const SystemUnderTest_Container*>(
               &_SystemUnderTest_Container_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SystemUnderTest_Container* other);
  friend void swap(SystemUnderTest_Container& a, SystemUnderTest_Container& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SystemUnderTest_Container* New() const final {
    return CreateMaybeMessage<SystemUnderTest_Container>(NULL);
  }

  SystemUnderTest_Container* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SystemUnderTest_Container>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SystemUnderTest_Container& from);
  void MergeFrom(const SystemUnderTest_Container& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemUnderTest_Container* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string command = 2;
  int command_size() const;
  void clear_command();
  static const int kCommandFieldNumber = 2;
  const ::std::string& command(int index) const;
  ::std::string* mutable_command(int index);
  void set_command(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_command(int index, ::std::string&& value);
  #endif
  void set_command(int index, const char* value);
  void set_command(int index, const char* value, size_t size);
  ::std::string* add_command();
  void add_command(const ::std::string& value);
  #if LANG_CXX11
  void add_command(::std::string&& value);
  #endif
  void add_command(const char* value);
  void add_command(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& command() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_command();

  // string image = 1;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // @@protoc_insertion_point(class_scope:metamoto.types.SystemUnderTest.Container)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> command_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SystemUnderTest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.SystemUnderTest) */ {
 public:
  SystemUnderTest();
  virtual ~SystemUnderTest();

  SystemUnderTest(const SystemUnderTest& from);

  inline SystemUnderTest& operator=(const SystemUnderTest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SystemUnderTest(SystemUnderTest&& from) noexcept
    : SystemUnderTest() {
    *this = ::std::move(from);
  }

  inline SystemUnderTest& operator=(SystemUnderTest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemUnderTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemUnderTest* internal_default_instance() {
    return reinterpret_cast<const SystemUnderTest*>(
               &_SystemUnderTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SystemUnderTest* other);
  friend void swap(SystemUnderTest& a, SystemUnderTest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SystemUnderTest* New() const final {
    return CreateMaybeMessage<SystemUnderTest>(NULL);
  }

  SystemUnderTest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SystemUnderTest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SystemUnderTest& from);
  void MergeFrom(const SystemUnderTest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemUnderTest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SystemUnderTest_Container Container;

  // accessors -------------------------------------------------------

  // repeated string command = 4;
  int command_size() const;
  void clear_command();
  static const int kCommandFieldNumber = 4;
  const ::std::string& command(int index) const;
  ::std::string* mutable_command(int index);
  void set_command(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_command(int index, ::std::string&& value);
  #endif
  void set_command(int index, const char* value);
  void set_command(int index, const char* value, size_t size);
  ::std::string* add_command();
  void add_command(const ::std::string& value);
  #if LANG_CXX11
  void add_command(::std::string&& value);
  #endif
  void add_command(const char* value);
  void add_command(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& command() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_command();

  // repeated string hosts = 5;
  int hosts_size() const;
  void clear_hosts();
  static const int kHostsFieldNumber = 5;
  const ::std::string& hosts(int index) const;
  ::std::string* mutable_hosts(int index);
  void set_hosts(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_hosts(int index, ::std::string&& value);
  #endif
  void set_hosts(int index, const char* value);
  void set_hosts(int index, const char* value, size_t size);
  ::std::string* add_hosts();
  void add_hosts(const ::std::string& value);
  #if LANG_CXX11
  void add_hosts(::std::string&& value);
  #endif
  void add_hosts(const char* value);
  void add_hosts(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& hosts() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_hosts();

  // repeated int32 ports = 6;
  int ports_size() const;
  void clear_ports();
  static const int kPortsFieldNumber = 6;
  ::google::protobuf::int32 ports(int index) const;
  void set_ports(int index, ::google::protobuf::int32 value);
  void add_ports(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ports() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ports();

  // repeated .metamoto.types.SystemUnderTest.Container containers = 7;
  int containers_size() const;
  void clear_containers();
  static const int kContainersFieldNumber = 7;
  ::metamoto::types::SystemUnderTest_Container* mutable_containers(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::SystemUnderTest_Container >*
      mutable_containers();
  const ::metamoto::types::SystemUnderTest_Container& containers(int index) const;
  ::metamoto::types::SystemUnderTest_Container* add_containers();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::SystemUnderTest_Container >&
      containers() const;

  // string host = 1;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string image = 3;
  void clear_image();
  static const int kImageFieldNumber = 3;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // int32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:metamoto.types.SystemUnderTest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> command_;
  ::google::protobuf::RepeatedPtrField< ::std::string> hosts_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ports_;
  mutable int _ports_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::SystemUnderTest_Container > containers_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Controller_RangesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Controller_RangesEntry_DoNotUse, 
    ::std::string, ::metamoto::types::Range,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Controller_RangesEntry_DoNotUse, 
    ::std::string, ::metamoto::types::Range,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Controller_RangesEntry_DoNotUse();
  Controller_RangesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Controller_RangesEntry_DoNotUse& other);
  static const Controller_RangesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Controller_RangesEntry_DoNotUse*>(&_Controller_RangesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Controller : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.Controller) */ {
 public:
  Controller();
  virtual ~Controller();

  Controller(const Controller& from);

  inline Controller& operator=(const Controller& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Controller(Controller&& from) noexcept
    : Controller() {
    *this = ::std::move(from);
  }

  inline Controller& operator=(Controller&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Controller& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Controller* internal_default_instance() {
    return reinterpret_cast<const Controller*>(
               &_Controller_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Controller* other);
  friend void swap(Controller& a, Controller& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Controller* New() const final {
    return CreateMaybeMessage<Controller>(NULL);
  }

  Controller* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Controller>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Controller& from);
  void MergeFrom(const Controller& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Controller* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string publish_topics = 8;
  int publish_topics_size() const;
  void clear_publish_topics();
  static const int kPublishTopicsFieldNumber = 8;
  const ::std::string& publish_topics(int index) const;
  ::std::string* mutable_publish_topics(int index);
  void set_publish_topics(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_publish_topics(int index, ::std::string&& value);
  #endif
  void set_publish_topics(int index, const char* value);
  void set_publish_topics(int index, const char* value, size_t size);
  ::std::string* add_publish_topics();
  void add_publish_topics(const ::std::string& value);
  #if LANG_CXX11
  void add_publish_topics(::std::string&& value);
  #endif
  void add_publish_topics(const char* value);
  void add_publish_topics(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& publish_topics() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_publish_topics();

  // map<string, .metamoto.types.Range> ranges = 100;
  int ranges_size() const;
  void clear_ranges();
  static const int kRangesFieldNumber = 100;
  const ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >&
      ranges() const;
  ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >*
      mutable_ranges();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string internal_name = 3;
  void clear_internal_name();
  static const int kInternalNameFieldNumber = 3;
  const ::std::string& internal_name() const;
  void set_internal_name(const ::std::string& value);
  #if LANG_CXX11
  void set_internal_name(::std::string&& value);
  #endif
  void set_internal_name(const char* value);
  void set_internal_name(const char* value, size_t size);
  ::std::string* mutable_internal_name();
  ::std::string* release_internal_name();
  void set_allocated_internal_name(::std::string* internal_name);

  // .metamoto.types.Version version = 5;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  private:
  const ::metamoto::types::Version& _internal_version() const;
  public:
  const ::metamoto::types::Version& version() const;
  ::metamoto::types::Version* release_version();
  ::metamoto::types::Version* mutable_version();
  void set_allocated_version(::metamoto::types::Version* version);

  // .metamoto.types.SystemUnderTest sut = 7;
  bool has_sut() const;
  void clear_sut();
  static const int kSutFieldNumber = 7;
  private:
  const ::metamoto::types::SystemUnderTest& _internal_sut() const;
  public:
  const ::metamoto::types::SystemUnderTest& sut() const;
  ::metamoto::types::SystemUnderTest* release_sut();
  ::metamoto::types::SystemUnderTest* mutable_sut();
  void set_allocated_sut(::metamoto::types::SystemUnderTest* sut);

  // .metamoto.types.NormalDistribution data_latency = 9;
  bool has_data_latency() const;
  void clear_data_latency();
  static const int kDataLatencyFieldNumber = 9;
  private:
  const ::metamoto::types::NormalDistribution& _internal_data_latency() const;
  public:
  const ::metamoto::types::NormalDistribution& data_latency() const;
  ::metamoto::types::NormalDistribution* release_data_latency();
  ::metamoto::types::NormalDistribution* mutable_data_latency();
  void set_allocated_data_latency(::metamoto::types::NormalDistribution* data_latency);

  // .google.protobuf.Struct parameters = 10;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 10;
  private:
  const ::google::protobuf::Struct& _internal_parameters() const;
  public:
  const ::google::protobuf::Struct& parameters() const;
  ::google::protobuf::Struct* release_parameters();
  ::google::protobuf::Struct* mutable_parameters();
  void set_allocated_parameters(::google::protobuf::Struct* parameters);

  // bool read_only = 4;
  void clear_read_only();
  static const int kReadOnlyFieldNumber = 4;
  bool read_only() const;
  void set_read_only(bool value);

  // bool disabled = 6;
  void clear_disabled();
  static const int kDisabledFieldNumber = 6;
  bool disabled() const;
  void set_disabled(bool value);

  // @@protoc_insertion_point(class_scope:metamoto.types.Controller)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> publish_topics_;
  ::google::protobuf::internal::MapField<
      Controller_RangesEntry_DoNotUse,
      ::std::string, ::metamoto::types::Range,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > ranges_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr internal_name_;
  ::metamoto::types::Version* version_;
  ::metamoto::types::SystemUnderTest* sut_;
  ::metamoto::types::NormalDistribution* data_latency_;
  ::google::protobuf::Struct* parameters_;
  bool read_only_;
  bool disabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Sensor_RangesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Sensor_RangesEntry_DoNotUse, 
    ::std::string, ::metamoto::types::Range,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Sensor_RangesEntry_DoNotUse, 
    ::std::string, ::metamoto::types::Range,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Sensor_RangesEntry_DoNotUse();
  Sensor_RangesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Sensor_RangesEntry_DoNotUse& other);
  static const Sensor_RangesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Sensor_RangesEntry_DoNotUse*>(&_Sensor_RangesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Sensor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.Sensor) */ {
 public:
  Sensor();
  virtual ~Sensor();

  Sensor(const Sensor& from);

  inline Sensor& operator=(const Sensor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Sensor(Sensor&& from) noexcept
    : Sensor() {
    *this = ::std::move(from);
  }

  inline Sensor& operator=(Sensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Sensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sensor* internal_default_instance() {
    return reinterpret_cast<const Sensor*>(
               &_Sensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Sensor* other);
  friend void swap(Sensor& a, Sensor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Sensor* New() const final {
    return CreateMaybeMessage<Sensor>(NULL);
  }

  Sensor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Sensor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Sensor& from);
  void MergeFrom(const Sensor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sensor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string publish_topics = 12;
  int publish_topics_size() const;
  void clear_publish_topics();
  static const int kPublishTopicsFieldNumber = 12;
  const ::std::string& publish_topics(int index) const;
  ::std::string* mutable_publish_topics(int index);
  void set_publish_topics(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_publish_topics(int index, ::std::string&& value);
  #endif
  void set_publish_topics(int index, const char* value);
  void set_publish_topics(int index, const char* value, size_t size);
  ::std::string* add_publish_topics();
  void add_publish_topics(const ::std::string& value);
  #if LANG_CXX11
  void add_publish_topics(::std::string&& value);
  #endif
  void add_publish_topics(const char* value);
  void add_publish_topics(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& publish_topics() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_publish_topics();

  // map<string, .metamoto.types.Range> ranges = 100;
  int ranges_size() const;
  void clear_ranges();
  static const int kRangesFieldNumber = 100;
  const ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >&
      ranges() const;
  ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >*
      mutable_ranges();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string internal_name = 3;
  void clear_internal_name();
  static const int kInternalNameFieldNumber = 3;
  const ::std::string& internal_name() const;
  void set_internal_name(const ::std::string& value);
  #if LANG_CXX11
  void set_internal_name(::std::string&& value);
  #endif
  void set_internal_name(const char* value);
  void set_internal_name(const char* value, size_t size);
  ::std::string* mutable_internal_name();
  ::std::string* release_internal_name();
  void set_allocated_internal_name(::std::string* internal_name);

  // string prefab_name = 4;
  void clear_prefab_name();
  static const int kPrefabNameFieldNumber = 4;
  const ::std::string& prefab_name() const;
  void set_prefab_name(const ::std::string& value);
  #if LANG_CXX11
  void set_prefab_name(::std::string&& value);
  #endif
  void set_prefab_name(const char* value);
  void set_prefab_name(const char* value, size_t size);
  ::std::string* mutable_prefab_name();
  ::std::string* release_prefab_name();
  void set_allocated_prefab_name(::std::string* prefab_name);

  // string sensor_mount_id = 9;
  void clear_sensor_mount_id();
  static const int kSensorMountIdFieldNumber = 9;
  const ::std::string& sensor_mount_id() const;
  void set_sensor_mount_id(const ::std::string& value);
  #if LANG_CXX11
  void set_sensor_mount_id(::std::string&& value);
  #endif
  void set_sensor_mount_id(const char* value);
  void set_sensor_mount_id(const char* value, size_t size);
  ::std::string* mutable_sensor_mount_id();
  ::std::string* release_sensor_mount_id();
  void set_allocated_sensor_mount_id(::std::string* sensor_mount_id);

  // string mount_point_id = 10;
  void clear_mount_point_id();
  static const int kMountPointIdFieldNumber = 10;
  const ::std::string& mount_point_id() const;
  void set_mount_point_id(const ::std::string& value);
  #if LANG_CXX11
  void set_mount_point_id(::std::string&& value);
  #endif
  void set_mount_point_id(const char* value);
  void set_mount_point_id(const char* value, size_t size);
  ::std::string* mutable_mount_point_id();
  ::std::string* release_mount_point_id();
  void set_allocated_mount_point_id(::std::string* mount_point_id);

  // string model_name = 17;
  void clear_model_name();
  static const int kModelNameFieldNumber = 17;
  const ::std::string& model_name() const;
  void set_model_name(const ::std::string& value);
  #if LANG_CXX11
  void set_model_name(::std::string&& value);
  #endif
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  ::std::string* mutable_model_name();
  ::std::string* release_model_name();
  void set_allocated_model_name(::std::string* model_name);

  // .metamoto.types.Version version = 6;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 6;
  private:
  const ::metamoto::types::Version& _internal_version() const;
  public:
  const ::metamoto::types::Version& version() const;
  ::metamoto::types::Version* release_version();
  ::metamoto::types::Version* mutable_version();
  void set_allocated_version(::metamoto::types::Version* version);

  // .metamoto.types.Pose pose = 8;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 8;
  private:
  const ::metamoto::types::Pose& _internal_pose() const;
  public:
  const ::metamoto::types::Pose& pose() const;
  ::metamoto::types::Pose* release_pose();
  ::metamoto::types::Pose* mutable_pose();
  void set_allocated_pose(::metamoto::types::Pose* pose);

  // .metamoto.types.SystemUnderTest sut = 11;
  bool has_sut() const;
  void clear_sut();
  static const int kSutFieldNumber = 11;
  private:
  const ::metamoto::types::SystemUnderTest& _internal_sut() const;
  public:
  const ::metamoto::types::SystemUnderTest& sut() const;
  ::metamoto::types::SystemUnderTest* release_sut();
  ::metamoto::types::SystemUnderTest* mutable_sut();
  void set_allocated_sut(::metamoto::types::SystemUnderTest* sut);

  // .metamoto.types.NormalDistribution data_latency = 13;
  bool has_data_latency() const;
  void clear_data_latency();
  static const int kDataLatencyFieldNumber = 13;
  private:
  const ::metamoto::types::NormalDistribution& _internal_data_latency() const;
  public:
  const ::metamoto::types::NormalDistribution& data_latency() const;
  ::metamoto::types::NormalDistribution* release_data_latency();
  ::metamoto::types::NormalDistribution* mutable_data_latency();
  void set_allocated_data_latency(::metamoto::types::NormalDistribution* data_latency);

  // .google.protobuf.Struct parameters = 14;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 14;
  private:
  const ::google::protobuf::Struct& _internal_parameters() const;
  public:
  const ::google::protobuf::Struct& parameters() const;
  ::google::protobuf::Struct* release_parameters();
  ::google::protobuf::Struct* mutable_parameters();
  void set_allocated_parameters(::google::protobuf::Struct* parameters);

  // bool read_only = 5;
  void clear_read_only();
  static const int kReadOnlyFieldNumber = 5;
  bool read_only() const;
  void set_read_only(bool value);

  // bool disabled = 7;
  void clear_disabled();
  static const int kDisabledFieldNumber = 7;
  bool disabled() const;
  void set_disabled(bool value);

  // bool save_data = 16;
  void clear_save_data();
  static const int kSaveDataFieldNumber = 16;
  bool save_data() const;
  void set_save_data(bool value);

  // uint32 priority = 15;
  void clear_priority();
  static const int kPriorityFieldNumber = 15;
  ::google::protobuf::uint32 priority() const;
  void set_priority(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:metamoto.types.Sensor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> publish_topics_;
  ::google::protobuf::internal::MapField<
      Sensor_RangesEntry_DoNotUse,
      ::std::string, ::metamoto::types::Range,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > ranges_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr internal_name_;
  ::google::protobuf::internal::ArenaStringPtr prefab_name_;
  ::google::protobuf::internal::ArenaStringPtr sensor_mount_id_;
  ::google::protobuf::internal::ArenaStringPtr mount_point_id_;
  ::google::protobuf::internal::ArenaStringPtr model_name_;
  ::metamoto::types::Version* version_;
  ::metamoto::types::Pose* pose_;
  ::metamoto::types::SystemUnderTest* sut_;
  ::metamoto::types::NormalDistribution* data_latency_;
  ::google::protobuf::Struct* parameters_;
  bool read_only_;
  bool disabled_;
  bool save_data_;
  ::google::protobuf::uint32 priority_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SensorMount_MountPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.SensorMount.MountPoint) */ {
 public:
  SensorMount_MountPoint();
  virtual ~SensorMount_MountPoint();

  SensorMount_MountPoint(const SensorMount_MountPoint& from);

  inline SensorMount_MountPoint& operator=(const SensorMount_MountPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorMount_MountPoint(SensorMount_MountPoint&& from) noexcept
    : SensorMount_MountPoint() {
    *this = ::std::move(from);
  }

  inline SensorMount_MountPoint& operator=(SensorMount_MountPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorMount_MountPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorMount_MountPoint* internal_default_instance() {
    return reinterpret_cast<const SensorMount_MountPoint*>(
               &_SensorMount_MountPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SensorMount_MountPoint* other);
  friend void swap(SensorMount_MountPoint& a, SensorMount_MountPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorMount_MountPoint* New() const final {
    return CreateMaybeMessage<SensorMount_MountPoint>(NULL);
  }

  SensorMount_MountPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorMount_MountPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorMount_MountPoint& from);
  void MergeFrom(const SensorMount_MountPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorMount_MountPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SensorMount_MountPoint_Type Type;
  static const Type UNKNOWN =
    SensorMount_MountPoint_Type_UNKNOWN;
  static const Type OTHER =
    SensorMount_MountPoint_Type_OTHER;
  static const Type CAMERA =
    SensorMount_MountPoint_Type_CAMERA;
  static const Type LIDAR =
    SensorMount_MountPoint_Type_LIDAR;
  static const Type RADAR =
    SensorMount_MountPoint_Type_RADAR;
  static inline bool Type_IsValid(int value) {
    return SensorMount_MountPoint_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SensorMount_MountPoint_Type_Type_MIN;
  static const Type Type_MAX =
    SensorMount_MountPoint_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SensorMount_MountPoint_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SensorMount_MountPoint_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SensorMount_MountPoint_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SensorMount_MountPoint_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .metamoto.types.Pose pose = 3;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 3;
  private:
  const ::metamoto::types::Pose& _internal_pose() const;
  public:
  const ::metamoto::types::Pose& pose() const;
  ::metamoto::types::Pose* release_pose();
  ::metamoto::types::Pose* mutable_pose();
  void set_allocated_pose(::metamoto::types::Pose* pose);

  // .metamoto.types.SensorMount.MountPoint.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::metamoto::types::SensorMount_MountPoint_Type type() const;
  void set_type(::metamoto::types::SensorMount_MountPoint_Type value);

  // @@protoc_insertion_point(class_scope:metamoto.types.SensorMount.MountPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::metamoto::types::Pose* pose_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SensorMount_RangesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SensorMount_RangesEntry_DoNotUse, 
    ::std::string, ::metamoto::types::Range,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SensorMount_RangesEntry_DoNotUse, 
    ::std::string, ::metamoto::types::Range,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SensorMount_RangesEntry_DoNotUse();
  SensorMount_RangesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SensorMount_RangesEntry_DoNotUse& other);
  static const SensorMount_RangesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SensorMount_RangesEntry_DoNotUse*>(&_SensorMount_RangesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SensorMount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.SensorMount) */ {
 public:
  SensorMount();
  virtual ~SensorMount();

  SensorMount(const SensorMount& from);

  inline SensorMount& operator=(const SensorMount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorMount(SensorMount&& from) noexcept
    : SensorMount() {
    *this = ::std::move(from);
  }

  inline SensorMount& operator=(SensorMount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorMount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorMount* internal_default_instance() {
    return reinterpret_cast<const SensorMount*>(
               &_SensorMount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SensorMount* other);
  friend void swap(SensorMount& a, SensorMount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorMount* New() const final {
    return CreateMaybeMessage<SensorMount>(NULL);
  }

  SensorMount* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorMount>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorMount& from);
  void MergeFrom(const SensorMount& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorMount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SensorMount_MountPoint MountPoint;

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.SensorMount.MountPoint mount_points = 5;
  int mount_points_size() const;
  void clear_mount_points();
  static const int kMountPointsFieldNumber = 5;
  ::metamoto::types::SensorMount_MountPoint* mutable_mount_points(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::SensorMount_MountPoint >*
      mutable_mount_points();
  const ::metamoto::types::SensorMount_MountPoint& mount_points(int index) const;
  ::metamoto::types::SensorMount_MountPoint* add_mount_points();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::SensorMount_MountPoint >&
      mount_points() const;

  // map<string, .metamoto.types.Range> ranges = 100;
  int ranges_size() const;
  void clear_ranges();
  static const int kRangesFieldNumber = 100;
  const ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >&
      ranges() const;
  ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >*
      mutable_ranges();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string prefab_name = 3;
  void clear_prefab_name();
  static const int kPrefabNameFieldNumber = 3;
  const ::std::string& prefab_name() const;
  void set_prefab_name(const ::std::string& value);
  #if LANG_CXX11
  void set_prefab_name(::std::string&& value);
  #endif
  void set_prefab_name(const char* value);
  void set_prefab_name(const char* value, size_t size);
  ::std::string* mutable_prefab_name();
  ::std::string* release_prefab_name();
  void set_allocated_prefab_name(::std::string* prefab_name);

  // .metamoto.types.Pose pose = 6;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 6;
  private:
  const ::metamoto::types::Pose& _internal_pose() const;
  public:
  const ::metamoto::types::Pose& pose() const;
  ::metamoto::types::Pose* release_pose();
  ::metamoto::types::Pose* mutable_pose();
  void set_allocated_pose(::metamoto::types::Pose* pose);

  // bool read_only = 4;
  void clear_read_only();
  static const int kReadOnlyFieldNumber = 4;
  bool read_only() const;
  void set_read_only(bool value);

  // @@protoc_insertion_point(class_scope:metamoto.types.SensorMount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::SensorMount_MountPoint > mount_points_;
  ::google::protobuf::internal::MapField<
      SensorMount_RangesEntry_DoNotUse,
      ::std::string, ::metamoto::types::Range,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > ranges_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr prefab_name_;
  ::metamoto::types::Pose* pose_;
  bool read_only_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleDynamics_ContactPatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.VehicleDynamics.ContactPatch) */ {
 public:
  VehicleDynamics_ContactPatch();
  virtual ~VehicleDynamics_ContactPatch();

  VehicleDynamics_ContactPatch(const VehicleDynamics_ContactPatch& from);

  inline VehicleDynamics_ContactPatch& operator=(const VehicleDynamics_ContactPatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleDynamics_ContactPatch(VehicleDynamics_ContactPatch&& from) noexcept
    : VehicleDynamics_ContactPatch() {
    *this = ::std::move(from);
  }

  inline VehicleDynamics_ContactPatch& operator=(VehicleDynamics_ContactPatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleDynamics_ContactPatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleDynamics_ContactPatch* internal_default_instance() {
    return reinterpret_cast<const VehicleDynamics_ContactPatch*>(
               &_VehicleDynamics_ContactPatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(VehicleDynamics_ContactPatch* other);
  friend void swap(VehicleDynamics_ContactPatch& a, VehicleDynamics_ContactPatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleDynamics_ContactPatch* New() const final {
    return CreateMaybeMessage<VehicleDynamics_ContactPatch>(NULL);
  }

  VehicleDynamics_ContactPatch* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleDynamics_ContactPatch>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleDynamics_ContactPatch& from);
  void MergeFrom(const VehicleDynamics_ContactPatch& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleDynamics_ContactPatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VehicleDynamics_ContactPatch_Shape Shape;
  static const Shape RECTANGLE =
    VehicleDynamics_ContactPatch_Shape_RECTANGLE;
  static const Shape ELLIPSE =
    VehicleDynamics_ContactPatch_Shape_ELLIPSE;
  static inline bool Shape_IsValid(int value) {
    return VehicleDynamics_ContactPatch_Shape_IsValid(value);
  }
  static const Shape Shape_MIN =
    VehicleDynamics_ContactPatch_Shape_Shape_MIN;
  static const Shape Shape_MAX =
    VehicleDynamics_ContactPatch_Shape_Shape_MAX;
  static const int Shape_ARRAYSIZE =
    VehicleDynamics_ContactPatch_Shape_Shape_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Shape_descriptor() {
    return VehicleDynamics_ContactPatch_Shape_descriptor();
  }
  static inline const ::std::string& Shape_Name(Shape value) {
    return VehicleDynamics_ContactPatch_Shape_Name(value);
  }
  static inline bool Shape_Parse(const ::std::string& name,
      Shape* value) {
    return VehicleDynamics_ContactPatch_Shape_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .metamoto.types.VehicleDynamics.ContactPatch.Shape shape = 1;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  ::metamoto::types::VehicleDynamics_ContactPatch_Shape shape() const;
  void set_shape(::metamoto::types::VehicleDynamics_ContactPatch_Shape value);

  // float length = 2;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  float length() const;
  void set_length(float value);

  // float width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  float width() const;
  void set_width(float value);

  // int32 sampling_points = 4;
  void clear_sampling_points();
  static const int kSamplingPointsFieldNumber = 4;
  ::google::protobuf::int32 sampling_points() const;
  void set_sampling_points(::google::protobuf::int32 value);

  // float edge_points_weight = 5;
  void clear_edge_points_weight();
  static const int kEdgePointsWeightFieldNumber = 5;
  float edge_points_weight() const;
  void set_edge_points_weight(float value);

  // @@protoc_insertion_point(class_scope:metamoto.types.VehicleDynamics.ContactPatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int shape_;
  float length_;
  float width_;
  ::google::protobuf::int32 sampling_points_;
  float edge_points_weight_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleDynamics_Skeleton : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.VehicleDynamics.Skeleton) */ {
 public:
  VehicleDynamics_Skeleton();
  virtual ~VehicleDynamics_Skeleton();

  VehicleDynamics_Skeleton(const VehicleDynamics_Skeleton& from);

  inline VehicleDynamics_Skeleton& operator=(const VehicleDynamics_Skeleton& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleDynamics_Skeleton(VehicleDynamics_Skeleton&& from) noexcept
    : VehicleDynamics_Skeleton() {
    *this = ::std::move(from);
  }

  inline VehicleDynamics_Skeleton& operator=(VehicleDynamics_Skeleton&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleDynamics_Skeleton& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleDynamics_Skeleton* internal_default_instance() {
    return reinterpret_cast<const VehicleDynamics_Skeleton*>(
               &_VehicleDynamics_Skeleton_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(VehicleDynamics_Skeleton* other);
  friend void swap(VehicleDynamics_Skeleton& a, VehicleDynamics_Skeleton& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleDynamics_Skeleton* New() const final {
    return CreateMaybeMessage<VehicleDynamics_Skeleton>(NULL);
  }

  VehicleDynamics_Skeleton* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleDynamics_Skeleton>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleDynamics_Skeleton& from);
  void MergeFrom(const VehicleDynamics_Skeleton& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleDynamics_Skeleton* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float axles_offset = 4;
  int axles_offset_size() const;
  void clear_axles_offset();
  static const int kAxlesOffsetFieldNumber = 4;
  float axles_offset(int index) const;
  void set_axles_offset(int index, float value);
  void add_axles_offset(float value);
  const ::google::protobuf::RepeatedField< float >&
      axles_offset() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_axles_offset();

  // repeated float axle_wheels_diameters = 5;
  int axle_wheels_diameters_size() const;
  void clear_axle_wheels_diameters();
  static const int kAxleWheelsDiametersFieldNumber = 5;
  float axle_wheels_diameters(int index) const;
  void set_axle_wheels_diameters(int index, float value);
  void add_axle_wheels_diameters(float value);
  const ::google::protobuf::RepeatedField< float >&
      axle_wheels_diameters() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_axle_wheels_diameters();

  // float length = 1;
  void clear_length();
  static const int kLengthFieldNumber = 1;
  float length() const;
  void set_length(float value);

  // float width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  float width() const;
  void set_width(float value);

  // float height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  float height() const;
  void set_height(float value);

  // @@protoc_insertion_point(class_scope:metamoto.types.VehicleDynamics.Skeleton)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > axles_offset_;
  mutable int _axles_offset_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > axle_wheels_diameters_;
  mutable int _axle_wheels_diameters_cached_byte_size_;
  float length_;
  float width_;
  float height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleDynamics_RangesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<VehicleDynamics_RangesEntry_DoNotUse, 
    ::std::string, ::metamoto::types::Range,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<VehicleDynamics_RangesEntry_DoNotUse, 
    ::std::string, ::metamoto::types::Range,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  VehicleDynamics_RangesEntry_DoNotUse();
  VehicleDynamics_RangesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const VehicleDynamics_RangesEntry_DoNotUse& other);
  static const VehicleDynamics_RangesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VehicleDynamics_RangesEntry_DoNotUse*>(&_VehicleDynamics_RangesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class VehicleDynamics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.VehicleDynamics) */ {
 public:
  VehicleDynamics();
  virtual ~VehicleDynamics();

  VehicleDynamics(const VehicleDynamics& from);

  inline VehicleDynamics& operator=(const VehicleDynamics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleDynamics(VehicleDynamics&& from) noexcept
    : VehicleDynamics() {
    *this = ::std::move(from);
  }

  inline VehicleDynamics& operator=(VehicleDynamics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleDynamics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleDynamics* internal_default_instance() {
    return reinterpret_cast<const VehicleDynamics*>(
               &_VehicleDynamics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(VehicleDynamics* other);
  friend void swap(VehicleDynamics& a, VehicleDynamics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleDynamics* New() const final {
    return CreateMaybeMessage<VehicleDynamics>(NULL);
  }

  VehicleDynamics* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleDynamics>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleDynamics& from);
  void MergeFrom(const VehicleDynamics& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleDynamics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VehicleDynamics_ContactPatch ContactPatch;
  typedef VehicleDynamics_Skeleton Skeleton;

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.VehicleDynamics.Skeleton skeletons = 10;
  int skeletons_size() const;
  void clear_skeletons();
  static const int kSkeletonsFieldNumber = 10;
  ::metamoto::types::VehicleDynamics_Skeleton* mutable_skeletons(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::VehicleDynamics_Skeleton >*
      mutable_skeletons();
  const ::metamoto::types::VehicleDynamics_Skeleton& skeletons(int index) const;
  ::metamoto::types::VehicleDynamics_Skeleton* add_skeletons();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::VehicleDynamics_Skeleton >&
      skeletons() const;

  // map<string, .metamoto.types.Range> ranges = 100;
  int ranges_size() const;
  void clear_ranges();
  static const int kRangesFieldNumber = 100;
  const ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >&
      ranges() const;
  ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >*
      mutable_ranges();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string internal_name = 3;
  void clear_internal_name();
  static const int kInternalNameFieldNumber = 3;
  const ::std::string& internal_name() const;
  void set_internal_name(const ::std::string& value);
  #if LANG_CXX11
  void set_internal_name(::std::string&& value);
  #endif
  void set_internal_name(const char* value);
  void set_internal_name(const char* value, size_t size);
  ::std::string* mutable_internal_name();
  ::std::string* release_internal_name();
  void set_allocated_internal_name(::std::string* internal_name);

  // .metamoto.types.Version version = 5;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  private:
  const ::metamoto::types::Version& _internal_version() const;
  public:
  const ::metamoto::types::Version& version() const;
  ::metamoto::types::Version* release_version();
  ::metamoto::types::Version* mutable_version();
  void set_allocated_version(::metamoto::types::Version* version);

  // .metamoto.types.SystemUnderTest sut = 7;
  bool has_sut() const;
  void clear_sut();
  static const int kSutFieldNumber = 7;
  private:
  const ::metamoto::types::SystemUnderTest& _internal_sut() const;
  public:
  const ::metamoto::types::SystemUnderTest& sut() const;
  ::metamoto::types::SystemUnderTest* release_sut();
  ::metamoto::types::SystemUnderTest* mutable_sut();
  void set_allocated_sut(::metamoto::types::SystemUnderTest* sut);

  // .google.protobuf.Struct parameters = 8;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 8;
  private:
  const ::google::protobuf::Struct& _internal_parameters() const;
  public:
  const ::google::protobuf::Struct& parameters() const;
  ::google::protobuf::Struct* release_parameters();
  ::google::protobuf::Struct* mutable_parameters();
  void set_allocated_parameters(::google::protobuf::Struct* parameters);

  // .metamoto.types.VehicleDynamics.ContactPatch contact_patch = 9;
  bool has_contact_patch() const;
  void clear_contact_patch();
  static const int kContactPatchFieldNumber = 9;
  private:
  const ::metamoto::types::VehicleDynamics_ContactPatch& _internal_contact_patch() const;
  public:
  const ::metamoto::types::VehicleDynamics_ContactPatch& contact_patch() const;
  ::metamoto::types::VehicleDynamics_ContactPatch* release_contact_patch();
  ::metamoto::types::VehicleDynamics_ContactPatch* mutable_contact_patch();
  void set_allocated_contact_patch(::metamoto::types::VehicleDynamics_ContactPatch* contact_patch);

  // bool read_only = 4;
  void clear_read_only();
  static const int kReadOnlyFieldNumber = 4;
  bool read_only() const;
  void set_read_only(bool value);

  // bool disabled = 6;
  void clear_disabled();
  static const int kDisabledFieldNumber = 6;
  bool disabled() const;
  void set_disabled(bool value);

  // @@protoc_insertion_point(class_scope:metamoto.types.VehicleDynamics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::VehicleDynamics_Skeleton > skeletons_;
  ::google::protobuf::internal::MapField<
      VehicleDynamics_RangesEntry_DoNotUse,
      ::std::string, ::metamoto::types::Range,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > ranges_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr internal_name_;
  ::metamoto::types::Version* version_;
  ::metamoto::types::SystemUnderTest* sut_;
  ::google::protobuf::Struct* parameters_;
  ::metamoto::types::VehicleDynamics_ContactPatch* contact_patch_;
  bool read_only_;
  bool disabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EgoVehicle_RangesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<EgoVehicle_RangesEntry_DoNotUse, 
    ::std::string, ::metamoto::types::Range,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<EgoVehicle_RangesEntry_DoNotUse, 
    ::std::string, ::metamoto::types::Range,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  EgoVehicle_RangesEntry_DoNotUse();
  EgoVehicle_RangesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const EgoVehicle_RangesEntry_DoNotUse& other);
  static const EgoVehicle_RangesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EgoVehicle_RangesEntry_DoNotUse*>(&_EgoVehicle_RangesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class EgoVehicle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.EgoVehicle) */ {
 public:
  EgoVehicle();
  virtual ~EgoVehicle();

  EgoVehicle(const EgoVehicle& from);

  inline EgoVehicle& operator=(const EgoVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EgoVehicle(EgoVehicle&& from) noexcept
    : EgoVehicle() {
    *this = ::std::move(from);
  }

  inline EgoVehicle& operator=(EgoVehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EgoVehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EgoVehicle* internal_default_instance() {
    return reinterpret_cast<const EgoVehicle*>(
               &_EgoVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(EgoVehicle* other);
  friend void swap(EgoVehicle& a, EgoVehicle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EgoVehicle* New() const final {
    return CreateMaybeMessage<EgoVehicle>(NULL);
  }

  EgoVehicle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EgoVehicle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EgoVehicle& from);
  void MergeFrom(const EgoVehicle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EgoVehicle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .metamoto.types.Controller controllers = 6;
  int controllers_size() const;
  void clear_controllers();
  static const int kControllersFieldNumber = 6;
  ::metamoto::types::Controller* mutable_controllers(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Controller >*
      mutable_controllers();
  const ::metamoto::types::Controller& controllers(int index) const;
  ::metamoto::types::Controller* add_controllers();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Controller >&
      controllers() const;

  // repeated .metamoto.types.Sensor sensors = 7;
  int sensors_size() const;
  void clear_sensors();
  static const int kSensorsFieldNumber = 7;
  ::metamoto::types::Sensor* mutable_sensors(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Sensor >*
      mutable_sensors();
  const ::metamoto::types::Sensor& sensors(int index) const;
  ::metamoto::types::Sensor* add_sensors();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Sensor >&
      sensors() const;

  // repeated .metamoto.types.SensorMount sensor_mounts = 8;
  int sensor_mounts_size() const;
  void clear_sensor_mounts();
  static const int kSensorMountsFieldNumber = 8;
  ::metamoto::types::SensorMount* mutable_sensor_mounts(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::SensorMount >*
      mutable_sensor_mounts();
  const ::metamoto::types::SensorMount& sensor_mounts(int index) const;
  ::metamoto::types::SensorMount* add_sensor_mounts();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::SensorMount >&
      sensor_mounts() const;

  // repeated .metamoto.types.Asset assets = 10;
  int assets_size() const;
  void clear_assets();
  static const int kAssetsFieldNumber = 10;
  ::metamoto::types::Asset* mutable_assets(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Asset >*
      mutable_assets();
  const ::metamoto::types::Asset& assets(int index) const;
  ::metamoto::types::Asset* add_assets();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Asset >&
      assets() const;

  // map<string, .metamoto.types.Range> ranges = 100;
  int ranges_size() const;
  void clear_ranges();
  static const int kRangesFieldNumber = 100;
  const ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >&
      ranges() const;
  ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >*
      mutable_ranges();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string model_name = 3;
  void clear_model_name();
  static const int kModelNameFieldNumber = 3;
  const ::std::string& model_name() const;
  void set_model_name(const ::std::string& value);
  #if LANG_CXX11
  void set_model_name(::std::string&& value);
  #endif
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  ::std::string* mutable_model_name();
  ::std::string* release_model_name();
  void set_allocated_model_name(::std::string* model_name);

  // .metamoto.types.VehicleInstance.Body body = 5;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 5;
  private:
  const ::metamoto::types::VehicleInstance_Body& _internal_body() const;
  public:
  const ::metamoto::types::VehicleInstance_Body& body() const;
  ::metamoto::types::VehicleInstance_Body* release_body();
  ::metamoto::types::VehicleInstance_Body* mutable_body();
  void set_allocated_body(::metamoto::types::VehicleInstance_Body* body);

  // .metamoto.types.VehicleDynamics vehicle_dynamics = 9;
  bool has_vehicle_dynamics() const;
  void clear_vehicle_dynamics();
  static const int kVehicleDynamicsFieldNumber = 9;
  private:
  const ::metamoto::types::VehicleDynamics& _internal_vehicle_dynamics() const;
  public:
  const ::metamoto::types::VehicleDynamics& vehicle_dynamics() const;
  ::metamoto::types::VehicleDynamics* release_vehicle_dynamics();
  ::metamoto::types::VehicleDynamics* mutable_vehicle_dynamics();
  void set_allocated_vehicle_dynamics(::metamoto::types::VehicleDynamics* vehicle_dynamics);

  // .metamoto.types.Version version = 11;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 11;
  private:
  const ::metamoto::types::Version& _internal_version() const;
  public:
  const ::metamoto::types::Version& version() const;
  ::metamoto::types::Version* release_version();
  ::metamoto::types::Version* mutable_version();
  void set_allocated_version(::metamoto::types::Version* version);

  // bool read_only = 4;
  void clear_read_only();
  static const int kReadOnlyFieldNumber = 4;
  bool read_only() const;
  void set_read_only(bool value);

  // @@protoc_insertion_point(class_scope:metamoto.types.EgoVehicle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Controller > controllers_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Sensor > sensors_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::SensorMount > sensor_mounts_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Asset > assets_;
  ::google::protobuf::internal::MapField<
      EgoVehicle_RangesEntry_DoNotUse,
      ::std::string, ::metamoto::types::Range,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > ranges_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr model_name_;
  ::metamoto::types::VehicleInstance_Body* body_;
  ::metamoto::types::VehicleDynamics* vehicle_dynamics_;
  ::metamoto::types::Version* version_;
  bool read_only_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SystemUnderTest_Container

// string image = 1;
inline void SystemUnderTest_Container::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemUnderTest_Container::image() const {
  // @@protoc_insertion_point(field_get:metamoto.types.SystemUnderTest.Container.image)
  return image_.GetNoArena();
}
inline void SystemUnderTest_Container::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.SystemUnderTest.Container.image)
}
#if LANG_CXX11
inline void SystemUnderTest_Container::set_image(::std::string&& value) {
  
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.SystemUnderTest.Container.image)
}
#endif
inline void SystemUnderTest_Container::set_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.SystemUnderTest.Container.image)
}
inline void SystemUnderTest_Container::set_image(const char* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.SystemUnderTest.Container.image)
}
inline ::std::string* SystemUnderTest_Container::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.SystemUnderTest.Container.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemUnderTest_Container::release_image() {
  // @@protoc_insertion_point(field_release:metamoto.types.SystemUnderTest.Container.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemUnderTest_Container::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.SystemUnderTest.Container.image)
}

// repeated string command = 2;
inline int SystemUnderTest_Container::command_size() const {
  return command_.size();
}
inline void SystemUnderTest_Container::clear_command() {
  command_.Clear();
}
inline const ::std::string& SystemUnderTest_Container::command(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.SystemUnderTest.Container.command)
  return command_.Get(index);
}
inline ::std::string* SystemUnderTest_Container::mutable_command(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.SystemUnderTest.Container.command)
  return command_.Mutable(index);
}
inline void SystemUnderTest_Container::set_command(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:metamoto.types.SystemUnderTest.Container.command)
  command_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SystemUnderTest_Container::set_command(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:metamoto.types.SystemUnderTest.Container.command)
  command_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SystemUnderTest_Container::set_command(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  command_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:metamoto.types.SystemUnderTest.Container.command)
}
inline void SystemUnderTest_Container::set_command(int index, const char* value, size_t size) {
  command_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.SystemUnderTest.Container.command)
}
inline ::std::string* SystemUnderTest_Container::add_command() {
  // @@protoc_insertion_point(field_add_mutable:metamoto.types.SystemUnderTest.Container.command)
  return command_.Add();
}
inline void SystemUnderTest_Container::add_command(const ::std::string& value) {
  command_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:metamoto.types.SystemUnderTest.Container.command)
}
#if LANG_CXX11
inline void SystemUnderTest_Container::add_command(::std::string&& value) {
  command_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:metamoto.types.SystemUnderTest.Container.command)
}
#endif
inline void SystemUnderTest_Container::add_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  command_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:metamoto.types.SystemUnderTest.Container.command)
}
inline void SystemUnderTest_Container::add_command(const char* value, size_t size) {
  command_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:metamoto.types.SystemUnderTest.Container.command)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SystemUnderTest_Container::command() const {
  // @@protoc_insertion_point(field_list:metamoto.types.SystemUnderTest.Container.command)
  return command_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SystemUnderTest_Container::mutable_command() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.SystemUnderTest.Container.command)
  return &command_;
}

// -------------------------------------------------------------------

// SystemUnderTest

// string host = 1;
inline void SystemUnderTest::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemUnderTest::host() const {
  // @@protoc_insertion_point(field_get:metamoto.types.SystemUnderTest.host)
  return host_.GetNoArena();
}
inline void SystemUnderTest::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.SystemUnderTest.host)
}
#if LANG_CXX11
inline void SystemUnderTest::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.SystemUnderTest.host)
}
#endif
inline void SystemUnderTest::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.SystemUnderTest.host)
}
inline void SystemUnderTest::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.SystemUnderTest.host)
}
inline ::std::string* SystemUnderTest::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.SystemUnderTest.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemUnderTest::release_host() {
  // @@protoc_insertion_point(field_release:metamoto.types.SystemUnderTest.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemUnderTest::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.SystemUnderTest.host)
}

// int32 port = 2;
inline void SystemUnderTest::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 SystemUnderTest::port() const {
  // @@protoc_insertion_point(field_get:metamoto.types.SystemUnderTest.port)
  return port_;
}
inline void SystemUnderTest::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.SystemUnderTest.port)
}

// string image = 3;
inline void SystemUnderTest::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemUnderTest::image() const {
  // @@protoc_insertion_point(field_get:metamoto.types.SystemUnderTest.image)
  return image_.GetNoArena();
}
inline void SystemUnderTest::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.SystemUnderTest.image)
}
#if LANG_CXX11
inline void SystemUnderTest::set_image(::std::string&& value) {
  
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.SystemUnderTest.image)
}
#endif
inline void SystemUnderTest::set_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.SystemUnderTest.image)
}
inline void SystemUnderTest::set_image(const char* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.SystemUnderTest.image)
}
inline ::std::string* SystemUnderTest::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.SystemUnderTest.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemUnderTest::release_image() {
  // @@protoc_insertion_point(field_release:metamoto.types.SystemUnderTest.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemUnderTest::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.SystemUnderTest.image)
}

// repeated string command = 4;
inline int SystemUnderTest::command_size() const {
  return command_.size();
}
inline void SystemUnderTest::clear_command() {
  command_.Clear();
}
inline const ::std::string& SystemUnderTest::command(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.SystemUnderTest.command)
  return command_.Get(index);
}
inline ::std::string* SystemUnderTest::mutable_command(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.SystemUnderTest.command)
  return command_.Mutable(index);
}
inline void SystemUnderTest::set_command(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:metamoto.types.SystemUnderTest.command)
  command_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SystemUnderTest::set_command(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:metamoto.types.SystemUnderTest.command)
  command_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SystemUnderTest::set_command(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  command_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:metamoto.types.SystemUnderTest.command)
}
inline void SystemUnderTest::set_command(int index, const char* value, size_t size) {
  command_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.SystemUnderTest.command)
}
inline ::std::string* SystemUnderTest::add_command() {
  // @@protoc_insertion_point(field_add_mutable:metamoto.types.SystemUnderTest.command)
  return command_.Add();
}
inline void SystemUnderTest::add_command(const ::std::string& value) {
  command_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:metamoto.types.SystemUnderTest.command)
}
#if LANG_CXX11
inline void SystemUnderTest::add_command(::std::string&& value) {
  command_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:metamoto.types.SystemUnderTest.command)
}
#endif
inline void SystemUnderTest::add_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  command_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:metamoto.types.SystemUnderTest.command)
}
inline void SystemUnderTest::add_command(const char* value, size_t size) {
  command_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:metamoto.types.SystemUnderTest.command)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SystemUnderTest::command() const {
  // @@protoc_insertion_point(field_list:metamoto.types.SystemUnderTest.command)
  return command_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SystemUnderTest::mutable_command() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.SystemUnderTest.command)
  return &command_;
}

// repeated string hosts = 5;
inline int SystemUnderTest::hosts_size() const {
  return hosts_.size();
}
inline void SystemUnderTest::clear_hosts() {
  hosts_.Clear();
}
inline const ::std::string& SystemUnderTest::hosts(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.SystemUnderTest.hosts)
  return hosts_.Get(index);
}
inline ::std::string* SystemUnderTest::mutable_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.SystemUnderTest.hosts)
  return hosts_.Mutable(index);
}
inline void SystemUnderTest::set_hosts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:metamoto.types.SystemUnderTest.hosts)
  hosts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SystemUnderTest::set_hosts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:metamoto.types.SystemUnderTest.hosts)
  hosts_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SystemUnderTest::set_hosts(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hosts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:metamoto.types.SystemUnderTest.hosts)
}
inline void SystemUnderTest::set_hosts(int index, const char* value, size_t size) {
  hosts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.SystemUnderTest.hosts)
}
inline ::std::string* SystemUnderTest::add_hosts() {
  // @@protoc_insertion_point(field_add_mutable:metamoto.types.SystemUnderTest.hosts)
  return hosts_.Add();
}
inline void SystemUnderTest::add_hosts(const ::std::string& value) {
  hosts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:metamoto.types.SystemUnderTest.hosts)
}
#if LANG_CXX11
inline void SystemUnderTest::add_hosts(::std::string&& value) {
  hosts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:metamoto.types.SystemUnderTest.hosts)
}
#endif
inline void SystemUnderTest::add_hosts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hosts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:metamoto.types.SystemUnderTest.hosts)
}
inline void SystemUnderTest::add_hosts(const char* value, size_t size) {
  hosts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:metamoto.types.SystemUnderTest.hosts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SystemUnderTest::hosts() const {
  // @@protoc_insertion_point(field_list:metamoto.types.SystemUnderTest.hosts)
  return hosts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SystemUnderTest::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.SystemUnderTest.hosts)
  return &hosts_;
}

// repeated int32 ports = 6;
inline int SystemUnderTest::ports_size() const {
  return ports_.size();
}
inline void SystemUnderTest::clear_ports() {
  ports_.Clear();
}
inline ::google::protobuf::int32 SystemUnderTest::ports(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.SystemUnderTest.ports)
  return ports_.Get(index);
}
inline void SystemUnderTest::set_ports(int index, ::google::protobuf::int32 value) {
  ports_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.types.SystemUnderTest.ports)
}
inline void SystemUnderTest::add_ports(::google::protobuf::int32 value) {
  ports_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.types.SystemUnderTest.ports)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SystemUnderTest::ports() const {
  // @@protoc_insertion_point(field_list:metamoto.types.SystemUnderTest.ports)
  return ports_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SystemUnderTest::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.SystemUnderTest.ports)
  return &ports_;
}

// repeated .metamoto.types.SystemUnderTest.Container containers = 7;
inline int SystemUnderTest::containers_size() const {
  return containers_.size();
}
inline void SystemUnderTest::clear_containers() {
  containers_.Clear();
}
inline ::metamoto::types::SystemUnderTest_Container* SystemUnderTest::mutable_containers(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.SystemUnderTest.containers)
  return containers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::SystemUnderTest_Container >*
SystemUnderTest::mutable_containers() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.SystemUnderTest.containers)
  return &containers_;
}
inline const ::metamoto::types::SystemUnderTest_Container& SystemUnderTest::containers(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.SystemUnderTest.containers)
  return containers_.Get(index);
}
inline ::metamoto::types::SystemUnderTest_Container* SystemUnderTest::add_containers() {
  // @@protoc_insertion_point(field_add:metamoto.types.SystemUnderTest.containers)
  return containers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::SystemUnderTest_Container >&
SystemUnderTest::containers() const {
  // @@protoc_insertion_point(field_list:metamoto.types.SystemUnderTest.containers)
  return containers_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Controller

// string id = 1;
inline void Controller::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Controller::id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Controller.id)
  return id_.GetNoArena();
}
inline void Controller::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.Controller.id)
}
#if LANG_CXX11
inline void Controller::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.Controller.id)
}
#endif
inline void Controller::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.Controller.id)
}
inline void Controller::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Controller.id)
}
inline ::std::string* Controller::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.Controller.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Controller::release_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.Controller.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Controller::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Controller.id)
}

// string display_name = 2;
inline void Controller::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Controller::display_name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Controller.display_name)
  return display_name_.GetNoArena();
}
inline void Controller::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.Controller.display_name)
}
#if LANG_CXX11
inline void Controller::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.Controller.display_name)
}
#endif
inline void Controller::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.Controller.display_name)
}
inline void Controller::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Controller.display_name)
}
inline ::std::string* Controller::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.Controller.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Controller::release_display_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.Controller.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Controller::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Controller.display_name)
}

// string internal_name = 3;
inline void Controller::clear_internal_name() {
  internal_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Controller::internal_name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Controller.internal_name)
  return internal_name_.GetNoArena();
}
inline void Controller::set_internal_name(const ::std::string& value) {
  
  internal_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.Controller.internal_name)
}
#if LANG_CXX11
inline void Controller::set_internal_name(::std::string&& value) {
  
  internal_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.Controller.internal_name)
}
#endif
inline void Controller::set_internal_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  internal_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.Controller.internal_name)
}
inline void Controller::set_internal_name(const char* value, size_t size) {
  
  internal_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Controller.internal_name)
}
inline ::std::string* Controller::mutable_internal_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.Controller.internal_name)
  return internal_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Controller::release_internal_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.Controller.internal_name)
  
  return internal_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Controller::set_allocated_internal_name(::std::string* internal_name) {
  if (internal_name != NULL) {
    
  } else {
    
  }
  internal_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), internal_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Controller.internal_name)
}

// bool read_only = 4;
inline void Controller::clear_read_only() {
  read_only_ = false;
}
inline bool Controller::read_only() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Controller.read_only)
  return read_only_;
}
inline void Controller::set_read_only(bool value) {
  
  read_only_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Controller.read_only)
}

// .metamoto.types.Version version = 5;
inline bool Controller::has_version() const {
  return this != internal_default_instance() && version_ != NULL;
}
inline const ::metamoto::types::Version& Controller::_internal_version() const {
  return *version_;
}
inline const ::metamoto::types::Version& Controller::version() const {
  const ::metamoto::types::Version* p = version_;
  // @@protoc_insertion_point(field_get:metamoto.types.Controller.version)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Version*>(
      &::metamoto::types::_Version_default_instance_);
}
inline ::metamoto::types::Version* Controller::release_version() {
  // @@protoc_insertion_point(field_release:metamoto.types.Controller.version)
  
  ::metamoto::types::Version* temp = version_;
  version_ = NULL;
  return temp;
}
inline ::metamoto::types::Version* Controller::mutable_version() {
  
  if (version_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Version>(GetArenaNoVirtual());
    version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Controller.version)
  return version_;
}
inline void Controller::set_allocated_version(::metamoto::types::Version* version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(version_);
  }
  if (version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Controller.version)
}

// bool disabled = 6;
inline void Controller::clear_disabled() {
  disabled_ = false;
}
inline bool Controller::disabled() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Controller.disabled)
  return disabled_;
}
inline void Controller::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Controller.disabled)
}

// .metamoto.types.SystemUnderTest sut = 7;
inline bool Controller::has_sut() const {
  return this != internal_default_instance() && sut_ != NULL;
}
inline void Controller::clear_sut() {
  if (GetArenaNoVirtual() == NULL && sut_ != NULL) {
    delete sut_;
  }
  sut_ = NULL;
}
inline const ::metamoto::types::SystemUnderTest& Controller::_internal_sut() const {
  return *sut_;
}
inline const ::metamoto::types::SystemUnderTest& Controller::sut() const {
  const ::metamoto::types::SystemUnderTest* p = sut_;
  // @@protoc_insertion_point(field_get:metamoto.types.Controller.sut)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::SystemUnderTest*>(
      &::metamoto::types::_SystemUnderTest_default_instance_);
}
inline ::metamoto::types::SystemUnderTest* Controller::release_sut() {
  // @@protoc_insertion_point(field_release:metamoto.types.Controller.sut)
  
  ::metamoto::types::SystemUnderTest* temp = sut_;
  sut_ = NULL;
  return temp;
}
inline ::metamoto::types::SystemUnderTest* Controller::mutable_sut() {
  
  if (sut_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::SystemUnderTest>(GetArenaNoVirtual());
    sut_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Controller.sut)
  return sut_;
}
inline void Controller::set_allocated_sut(::metamoto::types::SystemUnderTest* sut) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sut_;
  }
  if (sut) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sut = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sut, submessage_arena);
    }
    
  } else {
    
  }
  sut_ = sut;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Controller.sut)
}

// repeated string publish_topics = 8;
inline int Controller::publish_topics_size() const {
  return publish_topics_.size();
}
inline void Controller::clear_publish_topics() {
  publish_topics_.Clear();
}
inline const ::std::string& Controller::publish_topics(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.Controller.publish_topics)
  return publish_topics_.Get(index);
}
inline ::std::string* Controller::mutable_publish_topics(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.Controller.publish_topics)
  return publish_topics_.Mutable(index);
}
inline void Controller::set_publish_topics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:metamoto.types.Controller.publish_topics)
  publish_topics_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Controller::set_publish_topics(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:metamoto.types.Controller.publish_topics)
  publish_topics_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Controller::set_publish_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  publish_topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:metamoto.types.Controller.publish_topics)
}
inline void Controller::set_publish_topics(int index, const char* value, size_t size) {
  publish_topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Controller.publish_topics)
}
inline ::std::string* Controller::add_publish_topics() {
  // @@protoc_insertion_point(field_add_mutable:metamoto.types.Controller.publish_topics)
  return publish_topics_.Add();
}
inline void Controller::add_publish_topics(const ::std::string& value) {
  publish_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:metamoto.types.Controller.publish_topics)
}
#if LANG_CXX11
inline void Controller::add_publish_topics(::std::string&& value) {
  publish_topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:metamoto.types.Controller.publish_topics)
}
#endif
inline void Controller::add_publish_topics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  publish_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:metamoto.types.Controller.publish_topics)
}
inline void Controller::add_publish_topics(const char* value, size_t size) {
  publish_topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:metamoto.types.Controller.publish_topics)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Controller::publish_topics() const {
  // @@protoc_insertion_point(field_list:metamoto.types.Controller.publish_topics)
  return publish_topics_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Controller::mutable_publish_topics() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.Controller.publish_topics)
  return &publish_topics_;
}

// .metamoto.types.NormalDistribution data_latency = 9;
inline bool Controller::has_data_latency() const {
  return this != internal_default_instance() && data_latency_ != NULL;
}
inline const ::metamoto::types::NormalDistribution& Controller::_internal_data_latency() const {
  return *data_latency_;
}
inline const ::metamoto::types::NormalDistribution& Controller::data_latency() const {
  const ::metamoto::types::NormalDistribution* p = data_latency_;
  // @@protoc_insertion_point(field_get:metamoto.types.Controller.data_latency)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::NormalDistribution*>(
      &::metamoto::types::_NormalDistribution_default_instance_);
}
inline ::metamoto::types::NormalDistribution* Controller::release_data_latency() {
  // @@protoc_insertion_point(field_release:metamoto.types.Controller.data_latency)
  
  ::metamoto::types::NormalDistribution* temp = data_latency_;
  data_latency_ = NULL;
  return temp;
}
inline ::metamoto::types::NormalDistribution* Controller::mutable_data_latency() {
  
  if (data_latency_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::NormalDistribution>(GetArenaNoVirtual());
    data_latency_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Controller.data_latency)
  return data_latency_;
}
inline void Controller::set_allocated_data_latency(::metamoto::types::NormalDistribution* data_latency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_latency_);
  }
  if (data_latency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_latency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_latency, submessage_arena);
    }
    
  } else {
    
  }
  data_latency_ = data_latency;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Controller.data_latency)
}

// .google.protobuf.Struct parameters = 10;
inline bool Controller::has_parameters() const {
  return this != internal_default_instance() && parameters_ != NULL;
}
inline const ::google::protobuf::Struct& Controller::_internal_parameters() const {
  return *parameters_;
}
inline const ::google::protobuf::Struct& Controller::parameters() const {
  const ::google::protobuf::Struct* p = parameters_;
  // @@protoc_insertion_point(field_get:metamoto.types.Controller.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* Controller::release_parameters() {
  // @@protoc_insertion_point(field_release:metamoto.types.Controller.parameters)
  
  ::google::protobuf::Struct* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* Controller::mutable_parameters() {
  
  if (parameters_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Controller.parameters)
  return parameters_;
}
inline void Controller::set_allocated_parameters(::google::protobuf::Struct* parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parameters_);
  }
  if (parameters) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(parameters)->GetArena();
    if (message_arena != submessage_arena) {
      parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Controller.parameters)
}

// map<string, .metamoto.types.Range> ranges = 100;
inline int Controller::ranges_size() const {
  return ranges_.size();
}
inline const ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >&
Controller::ranges() const {
  // @@protoc_insertion_point(field_map:metamoto.types.Controller.ranges)
  return ranges_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >*
Controller::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_map:metamoto.types.Controller.ranges)
  return ranges_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Sensor

// string id = 1;
inline void Sensor::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Sensor::id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Sensor.id)
  return id_.GetNoArena();
}
inline void Sensor::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.Sensor.id)
}
#if LANG_CXX11
inline void Sensor::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.Sensor.id)
}
#endif
inline void Sensor::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.Sensor.id)
}
inline void Sensor::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Sensor.id)
}
inline ::std::string* Sensor::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.Sensor.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sensor::release_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.Sensor.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sensor::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Sensor.id)
}

// string display_name = 2;
inline void Sensor::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Sensor::display_name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Sensor.display_name)
  return display_name_.GetNoArena();
}
inline void Sensor::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.Sensor.display_name)
}
#if LANG_CXX11
inline void Sensor::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.Sensor.display_name)
}
#endif
inline void Sensor::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.Sensor.display_name)
}
inline void Sensor::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Sensor.display_name)
}
inline ::std::string* Sensor::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.Sensor.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sensor::release_display_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.Sensor.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sensor::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Sensor.display_name)
}

// string internal_name = 3;
inline void Sensor::clear_internal_name() {
  internal_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Sensor::internal_name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Sensor.internal_name)
  return internal_name_.GetNoArena();
}
inline void Sensor::set_internal_name(const ::std::string& value) {
  
  internal_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.Sensor.internal_name)
}
#if LANG_CXX11
inline void Sensor::set_internal_name(::std::string&& value) {
  
  internal_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.Sensor.internal_name)
}
#endif
inline void Sensor::set_internal_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  internal_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.Sensor.internal_name)
}
inline void Sensor::set_internal_name(const char* value, size_t size) {
  
  internal_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Sensor.internal_name)
}
inline ::std::string* Sensor::mutable_internal_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.Sensor.internal_name)
  return internal_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sensor::release_internal_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.Sensor.internal_name)
  
  return internal_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sensor::set_allocated_internal_name(::std::string* internal_name) {
  if (internal_name != NULL) {
    
  } else {
    
  }
  internal_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), internal_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Sensor.internal_name)
}

// string prefab_name = 4;
inline void Sensor::clear_prefab_name() {
  prefab_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Sensor::prefab_name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Sensor.prefab_name)
  return prefab_name_.GetNoArena();
}
inline void Sensor::set_prefab_name(const ::std::string& value) {
  
  prefab_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.Sensor.prefab_name)
}
#if LANG_CXX11
inline void Sensor::set_prefab_name(::std::string&& value) {
  
  prefab_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.Sensor.prefab_name)
}
#endif
inline void Sensor::set_prefab_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prefab_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.Sensor.prefab_name)
}
inline void Sensor::set_prefab_name(const char* value, size_t size) {
  
  prefab_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Sensor.prefab_name)
}
inline ::std::string* Sensor::mutable_prefab_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.Sensor.prefab_name)
  return prefab_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sensor::release_prefab_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.Sensor.prefab_name)
  
  return prefab_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sensor::set_allocated_prefab_name(::std::string* prefab_name) {
  if (prefab_name != NULL) {
    
  } else {
    
  }
  prefab_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefab_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Sensor.prefab_name)
}

// string model_name = 17;
inline void Sensor::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Sensor::model_name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Sensor.model_name)
  return model_name_.GetNoArena();
}
inline void Sensor::set_model_name(const ::std::string& value) {
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.Sensor.model_name)
}
#if LANG_CXX11
inline void Sensor::set_model_name(::std::string&& value) {
  
  model_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.Sensor.model_name)
}
#endif
inline void Sensor::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.Sensor.model_name)
}
inline void Sensor::set_model_name(const char* value, size_t size) {
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Sensor.model_name)
}
inline ::std::string* Sensor::mutable_model_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.Sensor.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sensor::release_model_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.Sensor.model_name)
  
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sensor::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    
  } else {
    
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Sensor.model_name)
}

// bool read_only = 5;
inline void Sensor::clear_read_only() {
  read_only_ = false;
}
inline bool Sensor::read_only() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Sensor.read_only)
  return read_only_;
}
inline void Sensor::set_read_only(bool value) {
  
  read_only_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Sensor.read_only)
}

// .metamoto.types.Version version = 6;
inline bool Sensor::has_version() const {
  return this != internal_default_instance() && version_ != NULL;
}
inline const ::metamoto::types::Version& Sensor::_internal_version() const {
  return *version_;
}
inline const ::metamoto::types::Version& Sensor::version() const {
  const ::metamoto::types::Version* p = version_;
  // @@protoc_insertion_point(field_get:metamoto.types.Sensor.version)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Version*>(
      &::metamoto::types::_Version_default_instance_);
}
inline ::metamoto::types::Version* Sensor::release_version() {
  // @@protoc_insertion_point(field_release:metamoto.types.Sensor.version)
  
  ::metamoto::types::Version* temp = version_;
  version_ = NULL;
  return temp;
}
inline ::metamoto::types::Version* Sensor::mutable_version() {
  
  if (version_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Version>(GetArenaNoVirtual());
    version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Sensor.version)
  return version_;
}
inline void Sensor::set_allocated_version(::metamoto::types::Version* version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(version_);
  }
  if (version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Sensor.version)
}

// bool disabled = 7;
inline void Sensor::clear_disabled() {
  disabled_ = false;
}
inline bool Sensor::disabled() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Sensor.disabled)
  return disabled_;
}
inline void Sensor::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Sensor.disabled)
}

// .metamoto.types.Pose pose = 8;
inline bool Sensor::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::metamoto::types::Pose& Sensor::_internal_pose() const {
  return *pose_;
}
inline const ::metamoto::types::Pose& Sensor::pose() const {
  const ::metamoto::types::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:metamoto.types.Sensor.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Pose*>(
      &::metamoto::types::_Pose_default_instance_);
}
inline ::metamoto::types::Pose* Sensor::release_pose() {
  // @@protoc_insertion_point(field_release:metamoto.types.Sensor.pose)
  
  ::metamoto::types::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::metamoto::types::Pose* Sensor::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Sensor.pose)
  return pose_;
}
inline void Sensor::set_allocated_pose(::metamoto::types::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Sensor.pose)
}

// string sensor_mount_id = 9;
inline void Sensor::clear_sensor_mount_id() {
  sensor_mount_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Sensor::sensor_mount_id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Sensor.sensor_mount_id)
  return sensor_mount_id_.GetNoArena();
}
inline void Sensor::set_sensor_mount_id(const ::std::string& value) {
  
  sensor_mount_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.Sensor.sensor_mount_id)
}
#if LANG_CXX11
inline void Sensor::set_sensor_mount_id(::std::string&& value) {
  
  sensor_mount_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.Sensor.sensor_mount_id)
}
#endif
inline void Sensor::set_sensor_mount_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sensor_mount_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.Sensor.sensor_mount_id)
}
inline void Sensor::set_sensor_mount_id(const char* value, size_t size) {
  
  sensor_mount_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Sensor.sensor_mount_id)
}
inline ::std::string* Sensor::mutable_sensor_mount_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.Sensor.sensor_mount_id)
  return sensor_mount_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sensor::release_sensor_mount_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.Sensor.sensor_mount_id)
  
  return sensor_mount_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sensor::set_allocated_sensor_mount_id(::std::string* sensor_mount_id) {
  if (sensor_mount_id != NULL) {
    
  } else {
    
  }
  sensor_mount_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_mount_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Sensor.sensor_mount_id)
}

// string mount_point_id = 10;
inline void Sensor::clear_mount_point_id() {
  mount_point_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Sensor::mount_point_id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Sensor.mount_point_id)
  return mount_point_id_.GetNoArena();
}
inline void Sensor::set_mount_point_id(const ::std::string& value) {
  
  mount_point_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.Sensor.mount_point_id)
}
#if LANG_CXX11
inline void Sensor::set_mount_point_id(::std::string&& value) {
  
  mount_point_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.Sensor.mount_point_id)
}
#endif
inline void Sensor::set_mount_point_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mount_point_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.Sensor.mount_point_id)
}
inline void Sensor::set_mount_point_id(const char* value, size_t size) {
  
  mount_point_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Sensor.mount_point_id)
}
inline ::std::string* Sensor::mutable_mount_point_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.Sensor.mount_point_id)
  return mount_point_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sensor::release_mount_point_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.Sensor.mount_point_id)
  
  return mount_point_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sensor::set_allocated_mount_point_id(::std::string* mount_point_id) {
  if (mount_point_id != NULL) {
    
  } else {
    
  }
  mount_point_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mount_point_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Sensor.mount_point_id)
}

// .metamoto.types.SystemUnderTest sut = 11;
inline bool Sensor::has_sut() const {
  return this != internal_default_instance() && sut_ != NULL;
}
inline void Sensor::clear_sut() {
  if (GetArenaNoVirtual() == NULL && sut_ != NULL) {
    delete sut_;
  }
  sut_ = NULL;
}
inline const ::metamoto::types::SystemUnderTest& Sensor::_internal_sut() const {
  return *sut_;
}
inline const ::metamoto::types::SystemUnderTest& Sensor::sut() const {
  const ::metamoto::types::SystemUnderTest* p = sut_;
  // @@protoc_insertion_point(field_get:metamoto.types.Sensor.sut)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::SystemUnderTest*>(
      &::metamoto::types::_SystemUnderTest_default_instance_);
}
inline ::metamoto::types::SystemUnderTest* Sensor::release_sut() {
  // @@protoc_insertion_point(field_release:metamoto.types.Sensor.sut)
  
  ::metamoto::types::SystemUnderTest* temp = sut_;
  sut_ = NULL;
  return temp;
}
inline ::metamoto::types::SystemUnderTest* Sensor::mutable_sut() {
  
  if (sut_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::SystemUnderTest>(GetArenaNoVirtual());
    sut_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Sensor.sut)
  return sut_;
}
inline void Sensor::set_allocated_sut(::metamoto::types::SystemUnderTest* sut) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sut_;
  }
  if (sut) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sut = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sut, submessage_arena);
    }
    
  } else {
    
  }
  sut_ = sut;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Sensor.sut)
}

// repeated string publish_topics = 12;
inline int Sensor::publish_topics_size() const {
  return publish_topics_.size();
}
inline void Sensor::clear_publish_topics() {
  publish_topics_.Clear();
}
inline const ::std::string& Sensor::publish_topics(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.Sensor.publish_topics)
  return publish_topics_.Get(index);
}
inline ::std::string* Sensor::mutable_publish_topics(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.Sensor.publish_topics)
  return publish_topics_.Mutable(index);
}
inline void Sensor::set_publish_topics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:metamoto.types.Sensor.publish_topics)
  publish_topics_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Sensor::set_publish_topics(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:metamoto.types.Sensor.publish_topics)
  publish_topics_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Sensor::set_publish_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  publish_topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:metamoto.types.Sensor.publish_topics)
}
inline void Sensor::set_publish_topics(int index, const char* value, size_t size) {
  publish_topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Sensor.publish_topics)
}
inline ::std::string* Sensor::add_publish_topics() {
  // @@protoc_insertion_point(field_add_mutable:metamoto.types.Sensor.publish_topics)
  return publish_topics_.Add();
}
inline void Sensor::add_publish_topics(const ::std::string& value) {
  publish_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:metamoto.types.Sensor.publish_topics)
}
#if LANG_CXX11
inline void Sensor::add_publish_topics(::std::string&& value) {
  publish_topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:metamoto.types.Sensor.publish_topics)
}
#endif
inline void Sensor::add_publish_topics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  publish_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:metamoto.types.Sensor.publish_topics)
}
inline void Sensor::add_publish_topics(const char* value, size_t size) {
  publish_topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:metamoto.types.Sensor.publish_topics)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Sensor::publish_topics() const {
  // @@protoc_insertion_point(field_list:metamoto.types.Sensor.publish_topics)
  return publish_topics_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Sensor::mutable_publish_topics() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.Sensor.publish_topics)
  return &publish_topics_;
}

// .metamoto.types.NormalDistribution data_latency = 13;
inline bool Sensor::has_data_latency() const {
  return this != internal_default_instance() && data_latency_ != NULL;
}
inline const ::metamoto::types::NormalDistribution& Sensor::_internal_data_latency() const {
  return *data_latency_;
}
inline const ::metamoto::types::NormalDistribution& Sensor::data_latency() const {
  const ::metamoto::types::NormalDistribution* p = data_latency_;
  // @@protoc_insertion_point(field_get:metamoto.types.Sensor.data_latency)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::NormalDistribution*>(
      &::metamoto::types::_NormalDistribution_default_instance_);
}
inline ::metamoto::types::NormalDistribution* Sensor::release_data_latency() {
  // @@protoc_insertion_point(field_release:metamoto.types.Sensor.data_latency)
  
  ::metamoto::types::NormalDistribution* temp = data_latency_;
  data_latency_ = NULL;
  return temp;
}
inline ::metamoto::types::NormalDistribution* Sensor::mutable_data_latency() {
  
  if (data_latency_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::NormalDistribution>(GetArenaNoVirtual());
    data_latency_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Sensor.data_latency)
  return data_latency_;
}
inline void Sensor::set_allocated_data_latency(::metamoto::types::NormalDistribution* data_latency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_latency_);
  }
  if (data_latency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_latency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_latency, submessage_arena);
    }
    
  } else {
    
  }
  data_latency_ = data_latency;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Sensor.data_latency)
}

// .google.protobuf.Struct parameters = 14;
inline bool Sensor::has_parameters() const {
  return this != internal_default_instance() && parameters_ != NULL;
}
inline const ::google::protobuf::Struct& Sensor::_internal_parameters() const {
  return *parameters_;
}
inline const ::google::protobuf::Struct& Sensor::parameters() const {
  const ::google::protobuf::Struct* p = parameters_;
  // @@protoc_insertion_point(field_get:metamoto.types.Sensor.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* Sensor::release_parameters() {
  // @@protoc_insertion_point(field_release:metamoto.types.Sensor.parameters)
  
  ::google::protobuf::Struct* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* Sensor::mutable_parameters() {
  
  if (parameters_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Sensor.parameters)
  return parameters_;
}
inline void Sensor::set_allocated_parameters(::google::protobuf::Struct* parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parameters_);
  }
  if (parameters) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(parameters)->GetArena();
    if (message_arena != submessage_arena) {
      parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Sensor.parameters)
}

// uint32 priority = 15;
inline void Sensor::clear_priority() {
  priority_ = 0u;
}
inline ::google::protobuf::uint32 Sensor::priority() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Sensor.priority)
  return priority_;
}
inline void Sensor::set_priority(::google::protobuf::uint32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Sensor.priority)
}

// bool save_data = 16;
inline void Sensor::clear_save_data() {
  save_data_ = false;
}
inline bool Sensor::save_data() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Sensor.save_data)
  return save_data_;
}
inline void Sensor::set_save_data(bool value) {
  
  save_data_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Sensor.save_data)
}

// map<string, .metamoto.types.Range> ranges = 100;
inline int Sensor::ranges_size() const {
  return ranges_.size();
}
inline const ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >&
Sensor::ranges() const {
  // @@protoc_insertion_point(field_map:metamoto.types.Sensor.ranges)
  return ranges_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >*
Sensor::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_map:metamoto.types.Sensor.ranges)
  return ranges_.MutableMap();
}

// -------------------------------------------------------------------

// SensorMount_MountPoint

// string id = 1;
inline void SensorMount_MountPoint::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorMount_MountPoint::id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.SensorMount.MountPoint.id)
  return id_.GetNoArena();
}
inline void SensorMount_MountPoint::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.SensorMount.MountPoint.id)
}
#if LANG_CXX11
inline void SensorMount_MountPoint::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.SensorMount.MountPoint.id)
}
#endif
inline void SensorMount_MountPoint::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.SensorMount.MountPoint.id)
}
inline void SensorMount_MountPoint::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.SensorMount.MountPoint.id)
}
inline ::std::string* SensorMount_MountPoint::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.SensorMount.MountPoint.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorMount_MountPoint::release_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.SensorMount.MountPoint.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorMount_MountPoint::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.SensorMount.MountPoint.id)
}

// .metamoto.types.SensorMount.MountPoint.Type type = 2;
inline void SensorMount_MountPoint::clear_type() {
  type_ = 0;
}
inline ::metamoto::types::SensorMount_MountPoint_Type SensorMount_MountPoint::type() const {
  // @@protoc_insertion_point(field_get:metamoto.types.SensorMount.MountPoint.type)
  return static_cast< ::metamoto::types::SensorMount_MountPoint_Type >(type_);
}
inline void SensorMount_MountPoint::set_type(::metamoto::types::SensorMount_MountPoint_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.SensorMount.MountPoint.type)
}

// .metamoto.types.Pose pose = 3;
inline bool SensorMount_MountPoint::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::metamoto::types::Pose& SensorMount_MountPoint::_internal_pose() const {
  return *pose_;
}
inline const ::metamoto::types::Pose& SensorMount_MountPoint::pose() const {
  const ::metamoto::types::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:metamoto.types.SensorMount.MountPoint.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Pose*>(
      &::metamoto::types::_Pose_default_instance_);
}
inline ::metamoto::types::Pose* SensorMount_MountPoint::release_pose() {
  // @@protoc_insertion_point(field_release:metamoto.types.SensorMount.MountPoint.pose)
  
  ::metamoto::types::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::metamoto::types::Pose* SensorMount_MountPoint::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.SensorMount.MountPoint.pose)
  return pose_;
}
inline void SensorMount_MountPoint::set_allocated_pose(::metamoto::types::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.SensorMount.MountPoint.pose)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SensorMount

// string id = 1;
inline void SensorMount::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorMount::id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.SensorMount.id)
  return id_.GetNoArena();
}
inline void SensorMount::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.SensorMount.id)
}
#if LANG_CXX11
inline void SensorMount::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.SensorMount.id)
}
#endif
inline void SensorMount::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.SensorMount.id)
}
inline void SensorMount::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.SensorMount.id)
}
inline ::std::string* SensorMount::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.SensorMount.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorMount::release_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.SensorMount.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorMount::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.SensorMount.id)
}

// string display_name = 2;
inline void SensorMount::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorMount::display_name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.SensorMount.display_name)
  return display_name_.GetNoArena();
}
inline void SensorMount::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.SensorMount.display_name)
}
#if LANG_CXX11
inline void SensorMount::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.SensorMount.display_name)
}
#endif
inline void SensorMount::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.SensorMount.display_name)
}
inline void SensorMount::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.SensorMount.display_name)
}
inline ::std::string* SensorMount::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.SensorMount.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorMount::release_display_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.SensorMount.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorMount::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.SensorMount.display_name)
}

// string prefab_name = 3;
inline void SensorMount::clear_prefab_name() {
  prefab_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorMount::prefab_name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.SensorMount.prefab_name)
  return prefab_name_.GetNoArena();
}
inline void SensorMount::set_prefab_name(const ::std::string& value) {
  
  prefab_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.SensorMount.prefab_name)
}
#if LANG_CXX11
inline void SensorMount::set_prefab_name(::std::string&& value) {
  
  prefab_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.SensorMount.prefab_name)
}
#endif
inline void SensorMount::set_prefab_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prefab_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.SensorMount.prefab_name)
}
inline void SensorMount::set_prefab_name(const char* value, size_t size) {
  
  prefab_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.SensorMount.prefab_name)
}
inline ::std::string* SensorMount::mutable_prefab_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.SensorMount.prefab_name)
  return prefab_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorMount::release_prefab_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.SensorMount.prefab_name)
  
  return prefab_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorMount::set_allocated_prefab_name(::std::string* prefab_name) {
  if (prefab_name != NULL) {
    
  } else {
    
  }
  prefab_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefab_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.SensorMount.prefab_name)
}

// bool read_only = 4;
inline void SensorMount::clear_read_only() {
  read_only_ = false;
}
inline bool SensorMount::read_only() const {
  // @@protoc_insertion_point(field_get:metamoto.types.SensorMount.read_only)
  return read_only_;
}
inline void SensorMount::set_read_only(bool value) {
  
  read_only_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.SensorMount.read_only)
}

// repeated .metamoto.types.SensorMount.MountPoint mount_points = 5;
inline int SensorMount::mount_points_size() const {
  return mount_points_.size();
}
inline void SensorMount::clear_mount_points() {
  mount_points_.Clear();
}
inline ::metamoto::types::SensorMount_MountPoint* SensorMount::mutable_mount_points(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.SensorMount.mount_points)
  return mount_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::SensorMount_MountPoint >*
SensorMount::mutable_mount_points() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.SensorMount.mount_points)
  return &mount_points_;
}
inline const ::metamoto::types::SensorMount_MountPoint& SensorMount::mount_points(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.SensorMount.mount_points)
  return mount_points_.Get(index);
}
inline ::metamoto::types::SensorMount_MountPoint* SensorMount::add_mount_points() {
  // @@protoc_insertion_point(field_add:metamoto.types.SensorMount.mount_points)
  return mount_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::SensorMount_MountPoint >&
SensorMount::mount_points() const {
  // @@protoc_insertion_point(field_list:metamoto.types.SensorMount.mount_points)
  return mount_points_;
}

// .metamoto.types.Pose pose = 6;
inline bool SensorMount::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::metamoto::types::Pose& SensorMount::_internal_pose() const {
  return *pose_;
}
inline const ::metamoto::types::Pose& SensorMount::pose() const {
  const ::metamoto::types::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:metamoto.types.SensorMount.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Pose*>(
      &::metamoto::types::_Pose_default_instance_);
}
inline ::metamoto::types::Pose* SensorMount::release_pose() {
  // @@protoc_insertion_point(field_release:metamoto.types.SensorMount.pose)
  
  ::metamoto::types::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::metamoto::types::Pose* SensorMount::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.SensorMount.pose)
  return pose_;
}
inline void SensorMount::set_allocated_pose(::metamoto::types::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.SensorMount.pose)
}

// map<string, .metamoto.types.Range> ranges = 100;
inline int SensorMount::ranges_size() const {
  return ranges_.size();
}
inline const ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >&
SensorMount::ranges() const {
  // @@protoc_insertion_point(field_map:metamoto.types.SensorMount.ranges)
  return ranges_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >*
SensorMount::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_map:metamoto.types.SensorMount.ranges)
  return ranges_.MutableMap();
}

// -------------------------------------------------------------------

// VehicleDynamics_ContactPatch

// .metamoto.types.VehicleDynamics.ContactPatch.Shape shape = 1;
inline void VehicleDynamics_ContactPatch::clear_shape() {
  shape_ = 0;
}
inline ::metamoto::types::VehicleDynamics_ContactPatch_Shape VehicleDynamics_ContactPatch::shape() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.ContactPatch.shape)
  return static_cast< ::metamoto::types::VehicleDynamics_ContactPatch_Shape >(shape_);
}
inline void VehicleDynamics_ContactPatch::set_shape(::metamoto::types::VehicleDynamics_ContactPatch_Shape value) {
  
  shape_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleDynamics.ContactPatch.shape)
}

// float length = 2;
inline void VehicleDynamics_ContactPatch::clear_length() {
  length_ = 0;
}
inline float VehicleDynamics_ContactPatch::length() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.ContactPatch.length)
  return length_;
}
inline void VehicleDynamics_ContactPatch::set_length(float value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleDynamics.ContactPatch.length)
}

// float width = 3;
inline void VehicleDynamics_ContactPatch::clear_width() {
  width_ = 0;
}
inline float VehicleDynamics_ContactPatch::width() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.ContactPatch.width)
  return width_;
}
inline void VehicleDynamics_ContactPatch::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleDynamics.ContactPatch.width)
}

// int32 sampling_points = 4;
inline void VehicleDynamics_ContactPatch::clear_sampling_points() {
  sampling_points_ = 0;
}
inline ::google::protobuf::int32 VehicleDynamics_ContactPatch::sampling_points() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.ContactPatch.sampling_points)
  return sampling_points_;
}
inline void VehicleDynamics_ContactPatch::set_sampling_points(::google::protobuf::int32 value) {
  
  sampling_points_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleDynamics.ContactPatch.sampling_points)
}

// float edge_points_weight = 5;
inline void VehicleDynamics_ContactPatch::clear_edge_points_weight() {
  edge_points_weight_ = 0;
}
inline float VehicleDynamics_ContactPatch::edge_points_weight() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.ContactPatch.edge_points_weight)
  return edge_points_weight_;
}
inline void VehicleDynamics_ContactPatch::set_edge_points_weight(float value) {
  
  edge_points_weight_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleDynamics.ContactPatch.edge_points_weight)
}

// -------------------------------------------------------------------

// VehicleDynamics_Skeleton

// float length = 1;
inline void VehicleDynamics_Skeleton::clear_length() {
  length_ = 0;
}
inline float VehicleDynamics_Skeleton::length() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.Skeleton.length)
  return length_;
}
inline void VehicleDynamics_Skeleton::set_length(float value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleDynamics.Skeleton.length)
}

// float width = 2;
inline void VehicleDynamics_Skeleton::clear_width() {
  width_ = 0;
}
inline float VehicleDynamics_Skeleton::width() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.Skeleton.width)
  return width_;
}
inline void VehicleDynamics_Skeleton::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleDynamics.Skeleton.width)
}

// float height = 3;
inline void VehicleDynamics_Skeleton::clear_height() {
  height_ = 0;
}
inline float VehicleDynamics_Skeleton::height() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.Skeleton.height)
  return height_;
}
inline void VehicleDynamics_Skeleton::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleDynamics.Skeleton.height)
}

// repeated float axles_offset = 4;
inline int VehicleDynamics_Skeleton::axles_offset_size() const {
  return axles_offset_.size();
}
inline void VehicleDynamics_Skeleton::clear_axles_offset() {
  axles_offset_.Clear();
}
inline float VehicleDynamics_Skeleton::axles_offset(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.Skeleton.axles_offset)
  return axles_offset_.Get(index);
}
inline void VehicleDynamics_Skeleton::set_axles_offset(int index, float value) {
  axles_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleDynamics.Skeleton.axles_offset)
}
inline void VehicleDynamics_Skeleton::add_axles_offset(float value) {
  axles_offset_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.types.VehicleDynamics.Skeleton.axles_offset)
}
inline const ::google::protobuf::RepeatedField< float >&
VehicleDynamics_Skeleton::axles_offset() const {
  // @@protoc_insertion_point(field_list:metamoto.types.VehicleDynamics.Skeleton.axles_offset)
  return axles_offset_;
}
inline ::google::protobuf::RepeatedField< float >*
VehicleDynamics_Skeleton::mutable_axles_offset() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.VehicleDynamics.Skeleton.axles_offset)
  return &axles_offset_;
}

// repeated float axle_wheels_diameters = 5;
inline int VehicleDynamics_Skeleton::axle_wheels_diameters_size() const {
  return axle_wheels_diameters_.size();
}
inline void VehicleDynamics_Skeleton::clear_axle_wheels_diameters() {
  axle_wheels_diameters_.Clear();
}
inline float VehicleDynamics_Skeleton::axle_wheels_diameters(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.Skeleton.axle_wheels_diameters)
  return axle_wheels_diameters_.Get(index);
}
inline void VehicleDynamics_Skeleton::set_axle_wheels_diameters(int index, float value) {
  axle_wheels_diameters_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleDynamics.Skeleton.axle_wheels_diameters)
}
inline void VehicleDynamics_Skeleton::add_axle_wheels_diameters(float value) {
  axle_wheels_diameters_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.types.VehicleDynamics.Skeleton.axle_wheels_diameters)
}
inline const ::google::protobuf::RepeatedField< float >&
VehicleDynamics_Skeleton::axle_wheels_diameters() const {
  // @@protoc_insertion_point(field_list:metamoto.types.VehicleDynamics.Skeleton.axle_wheels_diameters)
  return axle_wheels_diameters_;
}
inline ::google::protobuf::RepeatedField< float >*
VehicleDynamics_Skeleton::mutable_axle_wheels_diameters() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.VehicleDynamics.Skeleton.axle_wheels_diameters)
  return &axle_wheels_diameters_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VehicleDynamics

// string id = 1;
inline void VehicleDynamics::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleDynamics::id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.id)
  return id_.GetNoArena();
}
inline void VehicleDynamics::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleDynamics.id)
}
#if LANG_CXX11
inline void VehicleDynamics::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.VehicleDynamics.id)
}
#endif
inline void VehicleDynamics::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.VehicleDynamics.id)
}
inline void VehicleDynamics::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.VehicleDynamics.id)
}
inline ::std::string* VehicleDynamics::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.VehicleDynamics.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleDynamics::release_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.VehicleDynamics.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleDynamics::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.VehicleDynamics.id)
}

// string display_name = 2;
inline void VehicleDynamics::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleDynamics::display_name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.display_name)
  return display_name_.GetNoArena();
}
inline void VehicleDynamics::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleDynamics.display_name)
}
#if LANG_CXX11
inline void VehicleDynamics::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.VehicleDynamics.display_name)
}
#endif
inline void VehicleDynamics::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.VehicleDynamics.display_name)
}
inline void VehicleDynamics::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.VehicleDynamics.display_name)
}
inline ::std::string* VehicleDynamics::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.VehicleDynamics.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleDynamics::release_display_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.VehicleDynamics.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleDynamics::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.VehicleDynamics.display_name)
}

// string internal_name = 3;
inline void VehicleDynamics::clear_internal_name() {
  internal_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleDynamics::internal_name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.internal_name)
  return internal_name_.GetNoArena();
}
inline void VehicleDynamics::set_internal_name(const ::std::string& value) {
  
  internal_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleDynamics.internal_name)
}
#if LANG_CXX11
inline void VehicleDynamics::set_internal_name(::std::string&& value) {
  
  internal_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.VehicleDynamics.internal_name)
}
#endif
inline void VehicleDynamics::set_internal_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  internal_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.VehicleDynamics.internal_name)
}
inline void VehicleDynamics::set_internal_name(const char* value, size_t size) {
  
  internal_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.VehicleDynamics.internal_name)
}
inline ::std::string* VehicleDynamics::mutable_internal_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.VehicleDynamics.internal_name)
  return internal_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleDynamics::release_internal_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.VehicleDynamics.internal_name)
  
  return internal_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleDynamics::set_allocated_internal_name(::std::string* internal_name) {
  if (internal_name != NULL) {
    
  } else {
    
  }
  internal_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), internal_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.VehicleDynamics.internal_name)
}

// bool read_only = 4;
inline void VehicleDynamics::clear_read_only() {
  read_only_ = false;
}
inline bool VehicleDynamics::read_only() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.read_only)
  return read_only_;
}
inline void VehicleDynamics::set_read_only(bool value) {
  
  read_only_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleDynamics.read_only)
}

// .metamoto.types.Version version = 5;
inline bool VehicleDynamics::has_version() const {
  return this != internal_default_instance() && version_ != NULL;
}
inline const ::metamoto::types::Version& VehicleDynamics::_internal_version() const {
  return *version_;
}
inline const ::metamoto::types::Version& VehicleDynamics::version() const {
  const ::metamoto::types::Version* p = version_;
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.version)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Version*>(
      &::metamoto::types::_Version_default_instance_);
}
inline ::metamoto::types::Version* VehicleDynamics::release_version() {
  // @@protoc_insertion_point(field_release:metamoto.types.VehicleDynamics.version)
  
  ::metamoto::types::Version* temp = version_;
  version_ = NULL;
  return temp;
}
inline ::metamoto::types::Version* VehicleDynamics::mutable_version() {
  
  if (version_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Version>(GetArenaNoVirtual());
    version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.VehicleDynamics.version)
  return version_;
}
inline void VehicleDynamics::set_allocated_version(::metamoto::types::Version* version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(version_);
  }
  if (version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.VehicleDynamics.version)
}

// bool disabled = 6;
inline void VehicleDynamics::clear_disabled() {
  disabled_ = false;
}
inline bool VehicleDynamics::disabled() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.disabled)
  return disabled_;
}
inline void VehicleDynamics::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleDynamics.disabled)
}

// .metamoto.types.SystemUnderTest sut = 7;
inline bool VehicleDynamics::has_sut() const {
  return this != internal_default_instance() && sut_ != NULL;
}
inline void VehicleDynamics::clear_sut() {
  if (GetArenaNoVirtual() == NULL && sut_ != NULL) {
    delete sut_;
  }
  sut_ = NULL;
}
inline const ::metamoto::types::SystemUnderTest& VehicleDynamics::_internal_sut() const {
  return *sut_;
}
inline const ::metamoto::types::SystemUnderTest& VehicleDynamics::sut() const {
  const ::metamoto::types::SystemUnderTest* p = sut_;
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.sut)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::SystemUnderTest*>(
      &::metamoto::types::_SystemUnderTest_default_instance_);
}
inline ::metamoto::types::SystemUnderTest* VehicleDynamics::release_sut() {
  // @@protoc_insertion_point(field_release:metamoto.types.VehicleDynamics.sut)
  
  ::metamoto::types::SystemUnderTest* temp = sut_;
  sut_ = NULL;
  return temp;
}
inline ::metamoto::types::SystemUnderTest* VehicleDynamics::mutable_sut() {
  
  if (sut_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::SystemUnderTest>(GetArenaNoVirtual());
    sut_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.VehicleDynamics.sut)
  return sut_;
}
inline void VehicleDynamics::set_allocated_sut(::metamoto::types::SystemUnderTest* sut) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sut_;
  }
  if (sut) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sut = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sut, submessage_arena);
    }
    
  } else {
    
  }
  sut_ = sut;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.VehicleDynamics.sut)
}

// .google.protobuf.Struct parameters = 8;
inline bool VehicleDynamics::has_parameters() const {
  return this != internal_default_instance() && parameters_ != NULL;
}
inline const ::google::protobuf::Struct& VehicleDynamics::_internal_parameters() const {
  return *parameters_;
}
inline const ::google::protobuf::Struct& VehicleDynamics::parameters() const {
  const ::google::protobuf::Struct* p = parameters_;
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* VehicleDynamics::release_parameters() {
  // @@protoc_insertion_point(field_release:metamoto.types.VehicleDynamics.parameters)
  
  ::google::protobuf::Struct* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* VehicleDynamics::mutable_parameters() {
  
  if (parameters_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.VehicleDynamics.parameters)
  return parameters_;
}
inline void VehicleDynamics::set_allocated_parameters(::google::protobuf::Struct* parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parameters_);
  }
  if (parameters) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(parameters)->GetArena();
    if (message_arena != submessage_arena) {
      parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.VehicleDynamics.parameters)
}

// .metamoto.types.VehicleDynamics.ContactPatch contact_patch = 9;
inline bool VehicleDynamics::has_contact_patch() const {
  return this != internal_default_instance() && contact_patch_ != NULL;
}
inline void VehicleDynamics::clear_contact_patch() {
  if (GetArenaNoVirtual() == NULL && contact_patch_ != NULL) {
    delete contact_patch_;
  }
  contact_patch_ = NULL;
}
inline const ::metamoto::types::VehicleDynamics_ContactPatch& VehicleDynamics::_internal_contact_patch() const {
  return *contact_patch_;
}
inline const ::metamoto::types::VehicleDynamics_ContactPatch& VehicleDynamics::contact_patch() const {
  const ::metamoto::types::VehicleDynamics_ContactPatch* p = contact_patch_;
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.contact_patch)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::VehicleDynamics_ContactPatch*>(
      &::metamoto::types::_VehicleDynamics_ContactPatch_default_instance_);
}
inline ::metamoto::types::VehicleDynamics_ContactPatch* VehicleDynamics::release_contact_patch() {
  // @@protoc_insertion_point(field_release:metamoto.types.VehicleDynamics.contact_patch)
  
  ::metamoto::types::VehicleDynamics_ContactPatch* temp = contact_patch_;
  contact_patch_ = NULL;
  return temp;
}
inline ::metamoto::types::VehicleDynamics_ContactPatch* VehicleDynamics::mutable_contact_patch() {
  
  if (contact_patch_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::VehicleDynamics_ContactPatch>(GetArenaNoVirtual());
    contact_patch_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.VehicleDynamics.contact_patch)
  return contact_patch_;
}
inline void VehicleDynamics::set_allocated_contact_patch(::metamoto::types::VehicleDynamics_ContactPatch* contact_patch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete contact_patch_;
  }
  if (contact_patch) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      contact_patch = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, contact_patch, submessage_arena);
    }
    
  } else {
    
  }
  contact_patch_ = contact_patch;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.VehicleDynamics.contact_patch)
}

// repeated .metamoto.types.VehicleDynamics.Skeleton skeletons = 10;
inline int VehicleDynamics::skeletons_size() const {
  return skeletons_.size();
}
inline void VehicleDynamics::clear_skeletons() {
  skeletons_.Clear();
}
inline ::metamoto::types::VehicleDynamics_Skeleton* VehicleDynamics::mutable_skeletons(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.VehicleDynamics.skeletons)
  return skeletons_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::VehicleDynamics_Skeleton >*
VehicleDynamics::mutable_skeletons() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.VehicleDynamics.skeletons)
  return &skeletons_;
}
inline const ::metamoto::types::VehicleDynamics_Skeleton& VehicleDynamics::skeletons(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleDynamics.skeletons)
  return skeletons_.Get(index);
}
inline ::metamoto::types::VehicleDynamics_Skeleton* VehicleDynamics::add_skeletons() {
  // @@protoc_insertion_point(field_add:metamoto.types.VehicleDynamics.skeletons)
  return skeletons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::VehicleDynamics_Skeleton >&
VehicleDynamics::skeletons() const {
  // @@protoc_insertion_point(field_list:metamoto.types.VehicleDynamics.skeletons)
  return skeletons_;
}

// map<string, .metamoto.types.Range> ranges = 100;
inline int VehicleDynamics::ranges_size() const {
  return ranges_.size();
}
inline const ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >&
VehicleDynamics::ranges() const {
  // @@protoc_insertion_point(field_map:metamoto.types.VehicleDynamics.ranges)
  return ranges_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >*
VehicleDynamics::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_map:metamoto.types.VehicleDynamics.ranges)
  return ranges_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EgoVehicle

// string id = 1;
inline void EgoVehicle::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EgoVehicle::id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.EgoVehicle.id)
  return id_.GetNoArena();
}
inline void EgoVehicle::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.EgoVehicle.id)
}
#if LANG_CXX11
inline void EgoVehicle::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.EgoVehicle.id)
}
#endif
inline void EgoVehicle::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.EgoVehicle.id)
}
inline void EgoVehicle::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.EgoVehicle.id)
}
inline ::std::string* EgoVehicle::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.EgoVehicle.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EgoVehicle::release_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.EgoVehicle.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EgoVehicle::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.EgoVehicle.id)
}

// string display_name = 2;
inline void EgoVehicle::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EgoVehicle::display_name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.EgoVehicle.display_name)
  return display_name_.GetNoArena();
}
inline void EgoVehicle::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.EgoVehicle.display_name)
}
#if LANG_CXX11
inline void EgoVehicle::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.EgoVehicle.display_name)
}
#endif
inline void EgoVehicle::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.EgoVehicle.display_name)
}
inline void EgoVehicle::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.EgoVehicle.display_name)
}
inline ::std::string* EgoVehicle::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.EgoVehicle.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EgoVehicle::release_display_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.EgoVehicle.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EgoVehicle::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.EgoVehicle.display_name)
}

// string model_name = 3;
inline void EgoVehicle::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EgoVehicle::model_name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.EgoVehicle.model_name)
  return model_name_.GetNoArena();
}
inline void EgoVehicle::set_model_name(const ::std::string& value) {
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.EgoVehicle.model_name)
}
#if LANG_CXX11
inline void EgoVehicle::set_model_name(::std::string&& value) {
  
  model_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.EgoVehicle.model_name)
}
#endif
inline void EgoVehicle::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.EgoVehicle.model_name)
}
inline void EgoVehicle::set_model_name(const char* value, size_t size) {
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.EgoVehicle.model_name)
}
inline ::std::string* EgoVehicle::mutable_model_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.EgoVehicle.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EgoVehicle::release_model_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.EgoVehicle.model_name)
  
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EgoVehicle::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    
  } else {
    
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.EgoVehicle.model_name)
}

// bool read_only = 4;
inline void EgoVehicle::clear_read_only() {
  read_only_ = false;
}
inline bool EgoVehicle::read_only() const {
  // @@protoc_insertion_point(field_get:metamoto.types.EgoVehicle.read_only)
  return read_only_;
}
inline void EgoVehicle::set_read_only(bool value) {
  
  read_only_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.EgoVehicle.read_only)
}

// .metamoto.types.Version version = 11;
inline bool EgoVehicle::has_version() const {
  return this != internal_default_instance() && version_ != NULL;
}
inline const ::metamoto::types::Version& EgoVehicle::_internal_version() const {
  return *version_;
}
inline const ::metamoto::types::Version& EgoVehicle::version() const {
  const ::metamoto::types::Version* p = version_;
  // @@protoc_insertion_point(field_get:metamoto.types.EgoVehicle.version)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Version*>(
      &::metamoto::types::_Version_default_instance_);
}
inline ::metamoto::types::Version* EgoVehicle::release_version() {
  // @@protoc_insertion_point(field_release:metamoto.types.EgoVehicle.version)
  
  ::metamoto::types::Version* temp = version_;
  version_ = NULL;
  return temp;
}
inline ::metamoto::types::Version* EgoVehicle::mutable_version() {
  
  if (version_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Version>(GetArenaNoVirtual());
    version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.EgoVehicle.version)
  return version_;
}
inline void EgoVehicle::set_allocated_version(::metamoto::types::Version* version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(version_);
  }
  if (version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.EgoVehicle.version)
}

// .metamoto.types.VehicleInstance.Body body = 5;
inline bool EgoVehicle::has_body() const {
  return this != internal_default_instance() && body_ != NULL;
}
inline const ::metamoto::types::VehicleInstance_Body& EgoVehicle::_internal_body() const {
  return *body_;
}
inline const ::metamoto::types::VehicleInstance_Body& EgoVehicle::body() const {
  const ::metamoto::types::VehicleInstance_Body* p = body_;
  // @@protoc_insertion_point(field_get:metamoto.types.EgoVehicle.body)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::VehicleInstance_Body*>(
      &::metamoto::types::_VehicleInstance_Body_default_instance_);
}
inline ::metamoto::types::VehicleInstance_Body* EgoVehicle::release_body() {
  // @@protoc_insertion_point(field_release:metamoto.types.EgoVehicle.body)
  
  ::metamoto::types::VehicleInstance_Body* temp = body_;
  body_ = NULL;
  return temp;
}
inline ::metamoto::types::VehicleInstance_Body* EgoVehicle::mutable_body() {
  
  if (body_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::VehicleInstance_Body>(GetArenaNoVirtual());
    body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.EgoVehicle.body)
  return body_;
}
inline void EgoVehicle::set_allocated_body(::metamoto::types::VehicleInstance_Body* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(body_);
  }
  if (body) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.EgoVehicle.body)
}

// repeated .metamoto.types.Controller controllers = 6;
inline int EgoVehicle::controllers_size() const {
  return controllers_.size();
}
inline void EgoVehicle::clear_controllers() {
  controllers_.Clear();
}
inline ::metamoto::types::Controller* EgoVehicle::mutable_controllers(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.EgoVehicle.controllers)
  return controllers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::Controller >*
EgoVehicle::mutable_controllers() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.EgoVehicle.controllers)
  return &controllers_;
}
inline const ::metamoto::types::Controller& EgoVehicle::controllers(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.EgoVehicle.controllers)
  return controllers_.Get(index);
}
inline ::metamoto::types::Controller* EgoVehicle::add_controllers() {
  // @@protoc_insertion_point(field_add:metamoto.types.EgoVehicle.controllers)
  return controllers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Controller >&
EgoVehicle::controllers() const {
  // @@protoc_insertion_point(field_list:metamoto.types.EgoVehicle.controllers)
  return controllers_;
}

// repeated .metamoto.types.Sensor sensors = 7;
inline int EgoVehicle::sensors_size() const {
  return sensors_.size();
}
inline void EgoVehicle::clear_sensors() {
  sensors_.Clear();
}
inline ::metamoto::types::Sensor* EgoVehicle::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.EgoVehicle.sensors)
  return sensors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::Sensor >*
EgoVehicle::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.EgoVehicle.sensors)
  return &sensors_;
}
inline const ::metamoto::types::Sensor& EgoVehicle::sensors(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.EgoVehicle.sensors)
  return sensors_.Get(index);
}
inline ::metamoto::types::Sensor* EgoVehicle::add_sensors() {
  // @@protoc_insertion_point(field_add:metamoto.types.EgoVehicle.sensors)
  return sensors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Sensor >&
EgoVehicle::sensors() const {
  // @@protoc_insertion_point(field_list:metamoto.types.EgoVehicle.sensors)
  return sensors_;
}

// repeated .metamoto.types.SensorMount sensor_mounts = 8;
inline int EgoVehicle::sensor_mounts_size() const {
  return sensor_mounts_.size();
}
inline void EgoVehicle::clear_sensor_mounts() {
  sensor_mounts_.Clear();
}
inline ::metamoto::types::SensorMount* EgoVehicle::mutable_sensor_mounts(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.EgoVehicle.sensor_mounts)
  return sensor_mounts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::SensorMount >*
EgoVehicle::mutable_sensor_mounts() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.EgoVehicle.sensor_mounts)
  return &sensor_mounts_;
}
inline const ::metamoto::types::SensorMount& EgoVehicle::sensor_mounts(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.EgoVehicle.sensor_mounts)
  return sensor_mounts_.Get(index);
}
inline ::metamoto::types::SensorMount* EgoVehicle::add_sensor_mounts() {
  // @@protoc_insertion_point(field_add:metamoto.types.EgoVehicle.sensor_mounts)
  return sensor_mounts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::SensorMount >&
EgoVehicle::sensor_mounts() const {
  // @@protoc_insertion_point(field_list:metamoto.types.EgoVehicle.sensor_mounts)
  return sensor_mounts_;
}

// .metamoto.types.VehicleDynamics vehicle_dynamics = 9;
inline bool EgoVehicle::has_vehicle_dynamics() const {
  return this != internal_default_instance() && vehicle_dynamics_ != NULL;
}
inline void EgoVehicle::clear_vehicle_dynamics() {
  if (GetArenaNoVirtual() == NULL && vehicle_dynamics_ != NULL) {
    delete vehicle_dynamics_;
  }
  vehicle_dynamics_ = NULL;
}
inline const ::metamoto::types::VehicleDynamics& EgoVehicle::_internal_vehicle_dynamics() const {
  return *vehicle_dynamics_;
}
inline const ::metamoto::types::VehicleDynamics& EgoVehicle::vehicle_dynamics() const {
  const ::metamoto::types::VehicleDynamics* p = vehicle_dynamics_;
  // @@protoc_insertion_point(field_get:metamoto.types.EgoVehicle.vehicle_dynamics)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::VehicleDynamics*>(
      &::metamoto::types::_VehicleDynamics_default_instance_);
}
inline ::metamoto::types::VehicleDynamics* EgoVehicle::release_vehicle_dynamics() {
  // @@protoc_insertion_point(field_release:metamoto.types.EgoVehicle.vehicle_dynamics)
  
  ::metamoto::types::VehicleDynamics* temp = vehicle_dynamics_;
  vehicle_dynamics_ = NULL;
  return temp;
}
inline ::metamoto::types::VehicleDynamics* EgoVehicle::mutable_vehicle_dynamics() {
  
  if (vehicle_dynamics_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::VehicleDynamics>(GetArenaNoVirtual());
    vehicle_dynamics_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.EgoVehicle.vehicle_dynamics)
  return vehicle_dynamics_;
}
inline void EgoVehicle::set_allocated_vehicle_dynamics(::metamoto::types::VehicleDynamics* vehicle_dynamics) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vehicle_dynamics_;
  }
  if (vehicle_dynamics) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vehicle_dynamics = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vehicle_dynamics, submessage_arena);
    }
    
  } else {
    
  }
  vehicle_dynamics_ = vehicle_dynamics;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.EgoVehicle.vehicle_dynamics)
}

// repeated .metamoto.types.Asset assets = 10;
inline int EgoVehicle::assets_size() const {
  return assets_.size();
}
inline ::metamoto::types::Asset* EgoVehicle::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.EgoVehicle.assets)
  return assets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::Asset >*
EgoVehicle::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.EgoVehicle.assets)
  return &assets_;
}
inline const ::metamoto::types::Asset& EgoVehicle::assets(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.EgoVehicle.assets)
  return assets_.Get(index);
}
inline ::metamoto::types::Asset* EgoVehicle::add_assets() {
  // @@protoc_insertion_point(field_add:metamoto.types.EgoVehicle.assets)
  return assets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Asset >&
EgoVehicle::assets() const {
  // @@protoc_insertion_point(field_list:metamoto.types.EgoVehicle.assets)
  return assets_;
}

// map<string, .metamoto.types.Range> ranges = 100;
inline int EgoVehicle::ranges_size() const {
  return ranges_.size();
}
inline const ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >&
EgoVehicle::ranges() const {
  // @@protoc_insertion_point(field_map:metamoto.types.EgoVehicle.ranges)
  return ranges_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >*
EgoVehicle::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_map:metamoto.types.EgoVehicle.ranges)
  return ranges_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::metamoto::types::SensorMount_MountPoint_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metamoto::types::SensorMount_MountPoint_Type>() {
  return ::metamoto::types::SensorMount_MountPoint_Type_descriptor();
}
template <> struct is_proto_enum< ::metamoto::types::VehicleDynamics_ContactPatch_Shape> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metamoto::types::VehicleDynamics_ContactPatch_Shape>() {
  return ::metamoto::types::VehicleDynamics_ContactPatch_Shape_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2fego_5fvehicle_2eproto
