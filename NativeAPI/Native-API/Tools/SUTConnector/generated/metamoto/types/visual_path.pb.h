// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/visual_path.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2fvisual_5fpath_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2fvisual_5fpath_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/vector3.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto 

namespace protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto
namespace metamoto {
namespace types {
class VisualPath;
class VisualPathDefaultTypeInternal;
extern VisualPathDefaultTypeInternal _VisualPath_default_instance_;
class VisualPathPoint;
class VisualPathPointDefaultTypeInternal;
extern VisualPathPointDefaultTypeInternal _VisualPathPoint_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::VisualPath* Arena::CreateMaybeMessage<::metamoto::types::VisualPath>(Arena*);
template<> ::metamoto::types::VisualPathPoint* Arena::CreateMaybeMessage<::metamoto::types::VisualPathPoint>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

// ===================================================================

class VisualPathPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.VisualPathPoint) */ {
 public:
  VisualPathPoint();
  virtual ~VisualPathPoint();

  VisualPathPoint(const VisualPathPoint& from);

  inline VisualPathPoint& operator=(const VisualPathPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VisualPathPoint(VisualPathPoint&& from) noexcept
    : VisualPathPoint() {
    *this = ::std::move(from);
  }

  inline VisualPathPoint& operator=(VisualPathPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VisualPathPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisualPathPoint* internal_default_instance() {
    return reinterpret_cast<const VisualPathPoint*>(
               &_VisualPathPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VisualPathPoint* other);
  friend void swap(VisualPathPoint& a, VisualPathPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VisualPathPoint* New() const final {
    return CreateMaybeMessage<VisualPathPoint>(NULL);
  }

  VisualPathPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VisualPathPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VisualPathPoint& from);
  void MergeFrom(const VisualPathPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisualPathPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string color = 6;
  void clear_color();
  static const int kColorFieldNumber = 6;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  #if LANG_CXX11
  void set_color(::std::string&& value);
  #endif
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // .metamoto.types.Vector3 position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  private:
  const ::metamoto::types::Vector3& _internal_position() const;
  public:
  const ::metamoto::types::Vector3& position() const;
  ::metamoto::types::Vector3* release_position();
  ::metamoto::types::Vector3* mutable_position();
  void set_allocated_position(::metamoto::types::Vector3* position);

  // .metamoto.types.Vector3 normal = 2;
  bool has_normal() const;
  void clear_normal();
  static const int kNormalFieldNumber = 2;
  private:
  const ::metamoto::types::Vector3& _internal_normal() const;
  public:
  const ::metamoto::types::Vector3& normal() const;
  ::metamoto::types::Vector3* release_normal();
  ::metamoto::types::Vector3* mutable_normal();
  void set_allocated_normal(::metamoto::types::Vector3* normal);

  // uint32 smoothness = 3;
  void clear_smoothness();
  static const int kSmoothnessFieldNumber = 3;
  ::google::protobuf::uint32 smoothness() const;
  void set_smoothness(::google::protobuf::uint32 value);

  // bool glue = 4;
  void clear_glue();
  static const int kGlueFieldNumber = 4;
  bool glue() const;
  void set_glue(bool value);

  // float width = 5;
  void clear_width();
  static const int kWidthFieldNumber = 5;
  float width() const;
  void set_width(float value);

  // float transparency = 7;
  void clear_transparency();
  static const int kTransparencyFieldNumber = 7;
  float transparency() const;
  void set_transparency(float value);

  // @@protoc_insertion_point(class_scope:metamoto.types.VisualPathPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  ::metamoto::types::Vector3* position_;
  ::metamoto::types::Vector3* normal_;
  ::google::protobuf::uint32 smoothness_;
  bool glue_;
  float width_;
  float transparency_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VisualPath : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.VisualPath) */ {
 public:
  VisualPath();
  virtual ~VisualPath();

  VisualPath(const VisualPath& from);

  inline VisualPath& operator=(const VisualPath& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VisualPath(VisualPath&& from) noexcept
    : VisualPath() {
    *this = ::std::move(from);
  }

  inline VisualPath& operator=(VisualPath&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VisualPath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisualPath* internal_default_instance() {
    return reinterpret_cast<const VisualPath*>(
               &_VisualPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(VisualPath* other);
  friend void swap(VisualPath& a, VisualPath& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VisualPath* New() const final {
    return CreateMaybeMessage<VisualPath>(NULL);
  }

  VisualPath* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VisualPath>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VisualPath& from);
  void MergeFrom(const VisualPath& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisualPath* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.VisualPathPoint path_points = 1;
  int path_points_size() const;
  void clear_path_points();
  static const int kPathPointsFieldNumber = 1;
  ::metamoto::types::VisualPathPoint* mutable_path_points(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::VisualPathPoint >*
      mutable_path_points();
  const ::metamoto::types::VisualPathPoint& path_points(int index) const;
  ::metamoto::types::VisualPathPoint* add_path_points();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::VisualPathPoint >&
      path_points() const;

  // @@protoc_insertion_point(class_scope:metamoto.types.VisualPath)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::VisualPathPoint > path_points_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VisualPathPoint

// .metamoto.types.Vector3 position = 1;
inline bool VisualPathPoint::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::metamoto::types::Vector3& VisualPathPoint::_internal_position() const {
  return *position_;
}
inline const ::metamoto::types::Vector3& VisualPathPoint::position() const {
  const ::metamoto::types::Vector3* p = position_;
  // @@protoc_insertion_point(field_get:metamoto.types.VisualPathPoint.position)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* VisualPathPoint::release_position() {
  // @@protoc_insertion_point(field_release:metamoto.types.VisualPathPoint.position)
  
  ::metamoto::types::Vector3* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* VisualPathPoint::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.VisualPathPoint.position)
  return position_;
}
inline void VisualPathPoint::set_allocated_position(::metamoto::types::Vector3* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.VisualPathPoint.position)
}

// .metamoto.types.Vector3 normal = 2;
inline bool VisualPathPoint::has_normal() const {
  return this != internal_default_instance() && normal_ != NULL;
}
inline const ::metamoto::types::Vector3& VisualPathPoint::_internal_normal() const {
  return *normal_;
}
inline const ::metamoto::types::Vector3& VisualPathPoint::normal() const {
  const ::metamoto::types::Vector3* p = normal_;
  // @@protoc_insertion_point(field_get:metamoto.types.VisualPathPoint.normal)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* VisualPathPoint::release_normal() {
  // @@protoc_insertion_point(field_release:metamoto.types.VisualPathPoint.normal)
  
  ::metamoto::types::Vector3* temp = normal_;
  normal_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* VisualPathPoint::mutable_normal() {
  
  if (normal_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    normal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.VisualPathPoint.normal)
  return normal_;
}
inline void VisualPathPoint::set_allocated_normal(::metamoto::types::Vector3* normal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(normal_);
  }
  if (normal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      normal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, normal, submessage_arena);
    }
    
  } else {
    
  }
  normal_ = normal;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.VisualPathPoint.normal)
}

// uint32 smoothness = 3;
inline void VisualPathPoint::clear_smoothness() {
  smoothness_ = 0u;
}
inline ::google::protobuf::uint32 VisualPathPoint::smoothness() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VisualPathPoint.smoothness)
  return smoothness_;
}
inline void VisualPathPoint::set_smoothness(::google::protobuf::uint32 value) {
  
  smoothness_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.VisualPathPoint.smoothness)
}

// bool glue = 4;
inline void VisualPathPoint::clear_glue() {
  glue_ = false;
}
inline bool VisualPathPoint::glue() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VisualPathPoint.glue)
  return glue_;
}
inline void VisualPathPoint::set_glue(bool value) {
  
  glue_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.VisualPathPoint.glue)
}

// float width = 5;
inline void VisualPathPoint::clear_width() {
  width_ = 0;
}
inline float VisualPathPoint::width() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VisualPathPoint.width)
  return width_;
}
inline void VisualPathPoint::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.VisualPathPoint.width)
}

// string color = 6;
inline void VisualPathPoint::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VisualPathPoint::color() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VisualPathPoint.color)
  return color_.GetNoArena();
}
inline void VisualPathPoint::set_color(const ::std::string& value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.VisualPathPoint.color)
}
#if LANG_CXX11
inline void VisualPathPoint::set_color(::std::string&& value) {
  
  color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.VisualPathPoint.color)
}
#endif
inline void VisualPathPoint::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.VisualPathPoint.color)
}
inline void VisualPathPoint::set_color(const char* value, size_t size) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.VisualPathPoint.color)
}
inline ::std::string* VisualPathPoint::mutable_color() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.VisualPathPoint.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VisualPathPoint::release_color() {
  // @@protoc_insertion_point(field_release:metamoto.types.VisualPathPoint.color)
  
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisualPathPoint::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    
  } else {
    
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.VisualPathPoint.color)
}

// float transparency = 7;
inline void VisualPathPoint::clear_transparency() {
  transparency_ = 0;
}
inline float VisualPathPoint::transparency() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VisualPathPoint.transparency)
  return transparency_;
}
inline void VisualPathPoint::set_transparency(float value) {
  
  transparency_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.VisualPathPoint.transparency)
}

// -------------------------------------------------------------------

// VisualPath

// repeated .metamoto.types.VisualPathPoint path_points = 1;
inline int VisualPath::path_points_size() const {
  return path_points_.size();
}
inline void VisualPath::clear_path_points() {
  path_points_.Clear();
}
inline ::metamoto::types::VisualPathPoint* VisualPath::mutable_path_points(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.VisualPath.path_points)
  return path_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::VisualPathPoint >*
VisualPath::mutable_path_points() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.VisualPath.path_points)
  return &path_points_;
}
inline const ::metamoto::types::VisualPathPoint& VisualPath::path_points(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.VisualPath.path_points)
  return path_points_.Get(index);
}
inline ::metamoto::types::VisualPathPoint* VisualPath::add_path_points() {
  // @@protoc_insertion_point(field_add:metamoto.types.VisualPath.path_points)
  return path_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::VisualPathPoint >&
VisualPath::path_points() const {
  // @@protoc_insertion_point(field_list:metamoto.types.VisualPath.path_points)
  return path_points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2fvisual_5fpath_2eproto
