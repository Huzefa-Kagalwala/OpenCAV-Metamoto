// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/rigid_body.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2frigid_5fbody_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2frigid_5fbody_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/pose.pb.h"
#include "metamoto/types/velocity.pb.h"
#include "metamoto/types/vector3.pb.h"
#include "metamoto/types/enumerations.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2frigid_5fbody_2eproto 

namespace protobuf_metamoto_2ftypes_2frigid_5fbody_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2frigid_5fbody_2eproto
namespace metamoto {
namespace types {
class RigidBody;
class RigidBodyDefaultTypeInternal;
extern RigidBodyDefaultTypeInternal _RigidBody_default_instance_;
class TireContact;
class TireContactDefaultTypeInternal;
extern TireContactDefaultTypeInternal _TireContact_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::RigidBody* Arena::CreateMaybeMessage<::metamoto::types::RigidBody>(Arena*);
template<> ::metamoto::types::TireContact* Arena::CreateMaybeMessage<::metamoto::types::TireContact>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

// ===================================================================

class TireContact : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.TireContact) */ {
 public:
  TireContact();
  virtual ~TireContact();

  TireContact(const TireContact& from);

  inline TireContact& operator=(const TireContact& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TireContact(TireContact&& from) noexcept
    : TireContact() {
    *this = ::std::move(from);
  }

  inline TireContact& operator=(TireContact&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TireContact& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TireContact* internal_default_instance() {
    return reinterpret_cast<const TireContact*>(
               &_TireContact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TireContact* other);
  friend void swap(TireContact& a, TireContact& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TireContact* New() const final {
    return CreateMaybeMessage<TireContact>(NULL);
  }

  TireContact* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TireContact>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TireContact& from);
  void MergeFrom(const TireContact& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TireContact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.types.Vector3 center = 1;
  bool has_center() const;
  void clear_center();
  static const int kCenterFieldNumber = 1;
  private:
  const ::metamoto::types::Vector3& _internal_center() const;
  public:
  const ::metamoto::types::Vector3& center() const;
  ::metamoto::types::Vector3* release_center();
  ::metamoto::types::Vector3* mutable_center();
  void set_allocated_center(::metamoto::types::Vector3* center);

  // .metamoto.types.Vector3 normal = 2;
  bool has_normal() const;
  void clear_normal();
  static const int kNormalFieldNumber = 2;
  private:
  const ::metamoto::types::Vector3& _internal_normal() const;
  public:
  const ::metamoto::types::Vector3& normal() const;
  ::metamoto::types::Vector3* release_normal();
  ::metamoto::types::Vector3* mutable_normal();
  void set_allocated_normal(::metamoto::types::Vector3* normal);

  // .metamoto.types.MaterialType material = 3;
  void clear_material();
  static const int kMaterialFieldNumber = 3;
  ::metamoto::types::MaterialType material() const;
  void set_material(::metamoto::types::MaterialType value);

  // float wetness = 4;
  void clear_wetness();
  static const int kWetnessFieldNumber = 4;
  float wetness() const;
  void set_wetness(float value);

  // float puddle = 5;
  void clear_puddle();
  static const int kPuddleFieldNumber = 5;
  float puddle() const;
  void set_puddle(float value);

  // @@protoc_insertion_point(class_scope:metamoto.types.TireContact)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::types::Vector3* center_;
  ::metamoto::types::Vector3* normal_;
  int material_;
  float wetness_;
  float puddle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2frigid_5fbody_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RigidBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.RigidBody) */ {
 public:
  RigidBody();
  virtual ~RigidBody();

  RigidBody(const RigidBody& from);

  inline RigidBody& operator=(const RigidBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RigidBody(RigidBody&& from) noexcept
    : RigidBody() {
    *this = ::std::move(from);
  }

  inline RigidBody& operator=(RigidBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RigidBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RigidBody* internal_default_instance() {
    return reinterpret_cast<const RigidBody*>(
               &_RigidBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RigidBody* other);
  friend void swap(RigidBody& a, RigidBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RigidBody* New() const final {
    return CreateMaybeMessage<RigidBody>(NULL);
  }

  RigidBody* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RigidBody>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RigidBody& from);
  void MergeFrom(const RigidBody& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RigidBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.Pose wheels_pose = 2;
  int wheels_pose_size() const;
  void clear_wheels_pose();
  static const int kWheelsPoseFieldNumber = 2;
  ::metamoto::types::Pose* mutable_wheels_pose(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Pose >*
      mutable_wheels_pose();
  const ::metamoto::types::Pose& wheels_pose(int index) const;
  ::metamoto::types::Pose* add_wheels_pose();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Pose >&
      wheels_pose() const;

  // .metamoto.types.Pose pose = 1;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 1;
  private:
  const ::metamoto::types::Pose& _internal_pose() const;
  public:
  const ::metamoto::types::Pose& pose() const;
  ::metamoto::types::Pose* release_pose();
  ::metamoto::types::Pose* mutable_pose();
  void set_allocated_pose(::metamoto::types::Pose* pose);

  // .metamoto.types.Velocity velocity = 3;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 3;
  private:
  const ::metamoto::types::Velocity& _internal_velocity() const;
  public:
  const ::metamoto::types::Velocity& velocity() const;
  ::metamoto::types::Velocity* release_velocity();
  ::metamoto::types::Velocity* mutable_velocity();
  void set_allocated_velocity(::metamoto::types::Velocity* velocity);

  // @@protoc_insertion_point(class_scope:metamoto.types.RigidBody)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Pose > wheels_pose_;
  ::metamoto::types::Pose* pose_;
  ::metamoto::types::Velocity* velocity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2frigid_5fbody_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TireContact

// .metamoto.types.Vector3 center = 1;
inline bool TireContact::has_center() const {
  return this != internal_default_instance() && center_ != NULL;
}
inline const ::metamoto::types::Vector3& TireContact::_internal_center() const {
  return *center_;
}
inline const ::metamoto::types::Vector3& TireContact::center() const {
  const ::metamoto::types::Vector3* p = center_;
  // @@protoc_insertion_point(field_get:metamoto.types.TireContact.center)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* TireContact::release_center() {
  // @@protoc_insertion_point(field_release:metamoto.types.TireContact.center)
  
  ::metamoto::types::Vector3* temp = center_;
  center_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* TireContact::mutable_center() {
  
  if (center_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    center_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.TireContact.center)
  return center_;
}
inline void TireContact::set_allocated_center(::metamoto::types::Vector3* center) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(center_);
  }
  if (center) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      center = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TireContact.center)
}

// .metamoto.types.Vector3 normal = 2;
inline bool TireContact::has_normal() const {
  return this != internal_default_instance() && normal_ != NULL;
}
inline const ::metamoto::types::Vector3& TireContact::_internal_normal() const {
  return *normal_;
}
inline const ::metamoto::types::Vector3& TireContact::normal() const {
  const ::metamoto::types::Vector3* p = normal_;
  // @@protoc_insertion_point(field_get:metamoto.types.TireContact.normal)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* TireContact::release_normal() {
  // @@protoc_insertion_point(field_release:metamoto.types.TireContact.normal)
  
  ::metamoto::types::Vector3* temp = normal_;
  normal_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* TireContact::mutable_normal() {
  
  if (normal_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    normal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.TireContact.normal)
  return normal_;
}
inline void TireContact::set_allocated_normal(::metamoto::types::Vector3* normal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(normal_);
  }
  if (normal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      normal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, normal, submessage_arena);
    }
    
  } else {
    
  }
  normal_ = normal;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TireContact.normal)
}

// .metamoto.types.MaterialType material = 3;
inline void TireContact::clear_material() {
  material_ = 0;
}
inline ::metamoto::types::MaterialType TireContact::material() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TireContact.material)
  return static_cast< ::metamoto::types::MaterialType >(material_);
}
inline void TireContact::set_material(::metamoto::types::MaterialType value) {
  
  material_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TireContact.material)
}

// float wetness = 4;
inline void TireContact::clear_wetness() {
  wetness_ = 0;
}
inline float TireContact::wetness() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TireContact.wetness)
  return wetness_;
}
inline void TireContact::set_wetness(float value) {
  
  wetness_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TireContact.wetness)
}

// float puddle = 5;
inline void TireContact::clear_puddle() {
  puddle_ = 0;
}
inline float TireContact::puddle() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TireContact.puddle)
  return puddle_;
}
inline void TireContact::set_puddle(float value) {
  
  puddle_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TireContact.puddle)
}

// -------------------------------------------------------------------

// RigidBody

// .metamoto.types.Pose pose = 1;
inline bool RigidBody::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::metamoto::types::Pose& RigidBody::_internal_pose() const {
  return *pose_;
}
inline const ::metamoto::types::Pose& RigidBody::pose() const {
  const ::metamoto::types::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:metamoto.types.RigidBody.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Pose*>(
      &::metamoto::types::_Pose_default_instance_);
}
inline ::metamoto::types::Pose* RigidBody::release_pose() {
  // @@protoc_insertion_point(field_release:metamoto.types.RigidBody.pose)
  
  ::metamoto::types::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::metamoto::types::Pose* RigidBody::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.RigidBody.pose)
  return pose_;
}
inline void RigidBody::set_allocated_pose(::metamoto::types::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.RigidBody.pose)
}

// repeated .metamoto.types.Pose wheels_pose = 2;
inline int RigidBody::wheels_pose_size() const {
  return wheels_pose_.size();
}
inline ::metamoto::types::Pose* RigidBody::mutable_wheels_pose(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.RigidBody.wheels_pose)
  return wheels_pose_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::Pose >*
RigidBody::mutable_wheels_pose() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.RigidBody.wheels_pose)
  return &wheels_pose_;
}
inline const ::metamoto::types::Pose& RigidBody::wheels_pose(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.RigidBody.wheels_pose)
  return wheels_pose_.Get(index);
}
inline ::metamoto::types::Pose* RigidBody::add_wheels_pose() {
  // @@protoc_insertion_point(field_add:metamoto.types.RigidBody.wheels_pose)
  return wheels_pose_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Pose >&
RigidBody::wheels_pose() const {
  // @@protoc_insertion_point(field_list:metamoto.types.RigidBody.wheels_pose)
  return wheels_pose_;
}

// .metamoto.types.Velocity velocity = 3;
inline bool RigidBody::has_velocity() const {
  return this != internal_default_instance() && velocity_ != NULL;
}
inline const ::metamoto::types::Velocity& RigidBody::_internal_velocity() const {
  return *velocity_;
}
inline const ::metamoto::types::Velocity& RigidBody::velocity() const {
  const ::metamoto::types::Velocity* p = velocity_;
  // @@protoc_insertion_point(field_get:metamoto.types.RigidBody.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Velocity*>(
      &::metamoto::types::_Velocity_default_instance_);
}
inline ::metamoto::types::Velocity* RigidBody::release_velocity() {
  // @@protoc_insertion_point(field_release:metamoto.types.RigidBody.velocity)
  
  ::metamoto::types::Velocity* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline ::metamoto::types::Velocity* RigidBody::mutable_velocity() {
  
  if (velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Velocity>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.RigidBody.velocity)
  return velocity_;
}
inline void RigidBody::set_allocated_velocity(::metamoto::types::Velocity* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.RigidBody.velocity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2frigid_5fbody_2eproto
