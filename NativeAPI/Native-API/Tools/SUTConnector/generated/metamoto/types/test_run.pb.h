// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/test_run.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2ftest_5frun_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2ftest_5frun_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/test_result.pb.h"
#include "metamoto/types/test_job.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2ftest_5frun_2eproto 

namespace protobuf_metamoto_2ftypes_2ftest_5frun_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2ftest_5frun_2eproto
namespace metamoto {
namespace types {
class TestRun;
class TestRunDefaultTypeInternal;
extern TestRunDefaultTypeInternal _TestRun_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::TestRun* Arena::CreateMaybeMessage<::metamoto::types::TestRun>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

// ===================================================================

class TestRun : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.TestRun) */ {
 public:
  TestRun();
  virtual ~TestRun();

  TestRun(const TestRun& from);

  inline TestRun& operator=(const TestRun& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestRun(TestRun&& from) noexcept
    : TestRun() {
    *this = ::std::move(from);
  }

  inline TestRun& operator=(TestRun&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestRun& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestRun* internal_default_instance() {
    return reinterpret_cast<const TestRun*>(
               &_TestRun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TestRun* other);
  friend void swap(TestRun& a, TestRun& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestRun* New() const final {
    return CreateMaybeMessage<TestRun>(NULL);
  }

  TestRun* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestRun>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestRun& from);
  void MergeFrom(const TestRun& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRun* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.TestJob test_jobs = 17;
  int test_jobs_size() const;
  void clear_test_jobs();
  static const int kTestJobsFieldNumber = 17;
  ::metamoto::types::TestJob* mutable_test_jobs(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestJob >*
      mutable_test_jobs();
  const ::metamoto::types::TestJob& test_jobs(int index) const;
  ::metamoto::types::TestJob* add_test_jobs();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestJob >&
      test_jobs() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string test_suite_id = 2;
  void clear_test_suite_id();
  static const int kTestSuiteIdFieldNumber = 2;
  const ::std::string& test_suite_id() const;
  void set_test_suite_id(const ::std::string& value);
  #if LANG_CXX11
  void set_test_suite_id(::std::string&& value);
  #endif
  void set_test_suite_id(const char* value);
  void set_test_suite_id(const char* value, size_t size);
  ::std::string* mutable_test_suite_id();
  ::std::string* release_test_suite_id();
  void set_allocated_test_suite_id(::std::string* test_suite_id);

  // string test_suite_name = 3;
  void clear_test_suite_name();
  static const int kTestSuiteNameFieldNumber = 3;
  const ::std::string& test_suite_name() const;
  void set_test_suite_name(const ::std::string& value);
  #if LANG_CXX11
  void set_test_suite_name(::std::string&& value);
  #endif
  void set_test_suite_name(const char* value);
  void set_test_suite_name(const char* value, size_t size);
  ::std::string* mutable_test_suite_name();
  ::std::string* release_test_suite_name();
  void set_allocated_test_suite_name(::std::string* test_suite_name);

  // string start_time = 4;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  const ::std::string& start_time() const;
  void set_start_time(const ::std::string& value);
  #if LANG_CXX11
  void set_start_time(::std::string&& value);
  #endif
  void set_start_time(const char* value);
  void set_start_time(const char* value, size_t size);
  ::std::string* mutable_start_time();
  ::std::string* release_start_time();
  void set_allocated_start_time(::std::string* start_time);

  // string end_time = 5;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 5;
  const ::std::string& end_time() const;
  void set_end_time(const ::std::string& value);
  #if LANG_CXX11
  void set_end_time(::std::string&& value);
  #endif
  void set_end_time(const char* value);
  void set_end_time(const char* value, size_t size);
  ::std::string* mutable_end_time();
  ::std::string* release_end_time();
  void set_allocated_end_time(::std::string* end_time);

  // string result_text = 7;
  void clear_result_text();
  static const int kResultTextFieldNumber = 7;
  const ::std::string& result_text() const;
  void set_result_text(const ::std::string& value);
  #if LANG_CXX11
  void set_result_text(::std::string&& value);
  #endif
  void set_result_text(const char* value);
  void set_result_text(const char* value, size_t size);
  ::std::string* mutable_result_text();
  ::std::string* release_result_text();
  void set_allocated_result_text(::std::string* result_text);

  // string started_by = 15;
  void clear_started_by();
  static const int kStartedByFieldNumber = 15;
  const ::std::string& started_by() const;
  void set_started_by(const ::std::string& value);
  #if LANG_CXX11
  void set_started_by(::std::string&& value);
  #endif
  void set_started_by(const char* value);
  void set_started_by(const char* value, size_t size);
  ::std::string* mutable_started_by();
  ::std::string* release_started_by();
  void set_allocated_started_by(::std::string* started_by);

  // .metamoto.types.TestResult.Status status = 6;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  ::metamoto::types::TestResult_Status status() const;
  void set_status(::metamoto::types::TestResult_Status value);

  // int32 num_passed = 8;
  void clear_num_passed();
  static const int kNumPassedFieldNumber = 8;
  ::google::protobuf::int32 num_passed() const;
  void set_num_passed(::google::protobuf::int32 value);

  // int32 num_failed = 9;
  void clear_num_failed();
  static const int kNumFailedFieldNumber = 9;
  ::google::protobuf::int32 num_failed() const;
  void set_num_failed(::google::protobuf::int32 value);

  // int32 num_stopped = 10;
  void clear_num_stopped();
  static const int kNumStoppedFieldNumber = 10;
  ::google::protobuf::int32 num_stopped() const;
  void set_num_stopped(::google::protobuf::int32 value);

  // int32 num_errored = 11;
  void clear_num_errored();
  static const int kNumErroredFieldNumber = 11;
  ::google::protobuf::int32 num_errored() const;
  void set_num_errored(::google::protobuf::int32 value);

  // int32 num_running = 12;
  void clear_num_running();
  static const int kNumRunningFieldNumber = 12;
  ::google::protobuf::int32 num_running() const;
  void set_num_running(::google::protobuf::int32 value);

  // int32 num_pending = 13;
  void clear_num_pending();
  static const int kNumPendingFieldNumber = 13;
  ::google::protobuf::int32 num_pending() const;
  void set_num_pending(::google::protobuf::int32 value);

  // float compute_time = 14;
  void clear_compute_time();
  static const int kComputeTimeFieldNumber = 14;
  float compute_time() const;
  void set_compute_time(float value);

  // float progress = 16;
  void clear_progress();
  static const int kProgressFieldNumber = 16;
  float progress() const;
  void set_progress(float value);

  // @@protoc_insertion_point(class_scope:metamoto.types.TestRun)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestJob > test_jobs_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr test_suite_id_;
  ::google::protobuf::internal::ArenaStringPtr test_suite_name_;
  ::google::protobuf::internal::ArenaStringPtr start_time_;
  ::google::protobuf::internal::ArenaStringPtr end_time_;
  ::google::protobuf::internal::ArenaStringPtr result_text_;
  ::google::protobuf::internal::ArenaStringPtr started_by_;
  int status_;
  ::google::protobuf::int32 num_passed_;
  ::google::protobuf::int32 num_failed_;
  ::google::protobuf::int32 num_stopped_;
  ::google::protobuf::int32 num_errored_;
  ::google::protobuf::int32 num_running_;
  ::google::protobuf::int32 num_pending_;
  float compute_time_;
  float progress_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2ftest_5frun_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestRun

// string id = 1;
inline void TestRun::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestRun::id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestRun.id)
  return id_.GetNoArena();
}
inline void TestRun::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestRun.id)
}
#if LANG_CXX11
inline void TestRun::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestRun.id)
}
#endif
inline void TestRun::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestRun.id)
}
inline void TestRun::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestRun.id)
}
inline ::std::string* TestRun::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestRun.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestRun::release_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestRun.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestRun::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestRun.id)
}

// string test_suite_id = 2;
inline void TestRun::clear_test_suite_id() {
  test_suite_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestRun::test_suite_id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestRun.test_suite_id)
  return test_suite_id_.GetNoArena();
}
inline void TestRun::set_test_suite_id(const ::std::string& value) {
  
  test_suite_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestRun.test_suite_id)
}
#if LANG_CXX11
inline void TestRun::set_test_suite_id(::std::string&& value) {
  
  test_suite_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestRun.test_suite_id)
}
#endif
inline void TestRun::set_test_suite_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_suite_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestRun.test_suite_id)
}
inline void TestRun::set_test_suite_id(const char* value, size_t size) {
  
  test_suite_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestRun.test_suite_id)
}
inline ::std::string* TestRun::mutable_test_suite_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestRun.test_suite_id)
  return test_suite_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestRun::release_test_suite_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestRun.test_suite_id)
  
  return test_suite_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestRun::set_allocated_test_suite_id(::std::string* test_suite_id) {
  if (test_suite_id != NULL) {
    
  } else {
    
  }
  test_suite_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_suite_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestRun.test_suite_id)
}

// string test_suite_name = 3;
inline void TestRun::clear_test_suite_name() {
  test_suite_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestRun::test_suite_name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestRun.test_suite_name)
  return test_suite_name_.GetNoArena();
}
inline void TestRun::set_test_suite_name(const ::std::string& value) {
  
  test_suite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestRun.test_suite_name)
}
#if LANG_CXX11
inline void TestRun::set_test_suite_name(::std::string&& value) {
  
  test_suite_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestRun.test_suite_name)
}
#endif
inline void TestRun::set_test_suite_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_suite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestRun.test_suite_name)
}
inline void TestRun::set_test_suite_name(const char* value, size_t size) {
  
  test_suite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestRun.test_suite_name)
}
inline ::std::string* TestRun::mutable_test_suite_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestRun.test_suite_name)
  return test_suite_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestRun::release_test_suite_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestRun.test_suite_name)
  
  return test_suite_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestRun::set_allocated_test_suite_name(::std::string* test_suite_name) {
  if (test_suite_name != NULL) {
    
  } else {
    
  }
  test_suite_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_suite_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestRun.test_suite_name)
}

// string start_time = 4;
inline void TestRun::clear_start_time() {
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestRun::start_time() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestRun.start_time)
  return start_time_.GetNoArena();
}
inline void TestRun::set_start_time(const ::std::string& value) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestRun.start_time)
}
#if LANG_CXX11
inline void TestRun::set_start_time(::std::string&& value) {
  
  start_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestRun.start_time)
}
#endif
inline void TestRun::set_start_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestRun.start_time)
}
inline void TestRun::set_start_time(const char* value, size_t size) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestRun.start_time)
}
inline ::std::string* TestRun::mutable_start_time() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestRun.start_time)
  return start_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestRun::release_start_time() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestRun.start_time)
  
  return start_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestRun::set_allocated_start_time(::std::string* start_time) {
  if (start_time != NULL) {
    
  } else {
    
  }
  start_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_time);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestRun.start_time)
}

// string end_time = 5;
inline void TestRun::clear_end_time() {
  end_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestRun::end_time() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestRun.end_time)
  return end_time_.GetNoArena();
}
inline void TestRun::set_end_time(const ::std::string& value) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestRun.end_time)
}
#if LANG_CXX11
inline void TestRun::set_end_time(::std::string&& value) {
  
  end_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestRun.end_time)
}
#endif
inline void TestRun::set_end_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestRun.end_time)
}
inline void TestRun::set_end_time(const char* value, size_t size) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestRun.end_time)
}
inline ::std::string* TestRun::mutable_end_time() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestRun.end_time)
  return end_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestRun::release_end_time() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestRun.end_time)
  
  return end_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestRun::set_allocated_end_time(::std::string* end_time) {
  if (end_time != NULL) {
    
  } else {
    
  }
  end_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_time);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestRun.end_time)
}

// .metamoto.types.TestResult.Status status = 6;
inline void TestRun::clear_status() {
  status_ = 0;
}
inline ::metamoto::types::TestResult_Status TestRun::status() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestRun.status)
  return static_cast< ::metamoto::types::TestResult_Status >(status_);
}
inline void TestRun::set_status(::metamoto::types::TestResult_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestRun.status)
}

// string result_text = 7;
inline void TestRun::clear_result_text() {
  result_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestRun::result_text() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestRun.result_text)
  return result_text_.GetNoArena();
}
inline void TestRun::set_result_text(const ::std::string& value) {
  
  result_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestRun.result_text)
}
#if LANG_CXX11
inline void TestRun::set_result_text(::std::string&& value) {
  
  result_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestRun.result_text)
}
#endif
inline void TestRun::set_result_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  result_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestRun.result_text)
}
inline void TestRun::set_result_text(const char* value, size_t size) {
  
  result_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestRun.result_text)
}
inline ::std::string* TestRun::mutable_result_text() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestRun.result_text)
  return result_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestRun::release_result_text() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestRun.result_text)
  
  return result_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestRun::set_allocated_result_text(::std::string* result_text) {
  if (result_text != NULL) {
    
  } else {
    
  }
  result_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result_text);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestRun.result_text)
}

// int32 num_passed = 8;
inline void TestRun::clear_num_passed() {
  num_passed_ = 0;
}
inline ::google::protobuf::int32 TestRun::num_passed() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestRun.num_passed)
  return num_passed_;
}
inline void TestRun::set_num_passed(::google::protobuf::int32 value) {
  
  num_passed_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestRun.num_passed)
}

// int32 num_failed = 9;
inline void TestRun::clear_num_failed() {
  num_failed_ = 0;
}
inline ::google::protobuf::int32 TestRun::num_failed() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestRun.num_failed)
  return num_failed_;
}
inline void TestRun::set_num_failed(::google::protobuf::int32 value) {
  
  num_failed_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestRun.num_failed)
}

// int32 num_stopped = 10;
inline void TestRun::clear_num_stopped() {
  num_stopped_ = 0;
}
inline ::google::protobuf::int32 TestRun::num_stopped() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestRun.num_stopped)
  return num_stopped_;
}
inline void TestRun::set_num_stopped(::google::protobuf::int32 value) {
  
  num_stopped_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestRun.num_stopped)
}

// int32 num_errored = 11;
inline void TestRun::clear_num_errored() {
  num_errored_ = 0;
}
inline ::google::protobuf::int32 TestRun::num_errored() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestRun.num_errored)
  return num_errored_;
}
inline void TestRun::set_num_errored(::google::protobuf::int32 value) {
  
  num_errored_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestRun.num_errored)
}

// int32 num_running = 12;
inline void TestRun::clear_num_running() {
  num_running_ = 0;
}
inline ::google::protobuf::int32 TestRun::num_running() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestRun.num_running)
  return num_running_;
}
inline void TestRun::set_num_running(::google::protobuf::int32 value) {
  
  num_running_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestRun.num_running)
}

// int32 num_pending = 13;
inline void TestRun::clear_num_pending() {
  num_pending_ = 0;
}
inline ::google::protobuf::int32 TestRun::num_pending() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestRun.num_pending)
  return num_pending_;
}
inline void TestRun::set_num_pending(::google::protobuf::int32 value) {
  
  num_pending_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestRun.num_pending)
}

// float compute_time = 14;
inline void TestRun::clear_compute_time() {
  compute_time_ = 0;
}
inline float TestRun::compute_time() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestRun.compute_time)
  return compute_time_;
}
inline void TestRun::set_compute_time(float value) {
  
  compute_time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestRun.compute_time)
}

// string started_by = 15;
inline void TestRun::clear_started_by() {
  started_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestRun::started_by() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestRun.started_by)
  return started_by_.GetNoArena();
}
inline void TestRun::set_started_by(const ::std::string& value) {
  
  started_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestRun.started_by)
}
#if LANG_CXX11
inline void TestRun::set_started_by(::std::string&& value) {
  
  started_by_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestRun.started_by)
}
#endif
inline void TestRun::set_started_by(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  started_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestRun.started_by)
}
inline void TestRun::set_started_by(const char* value, size_t size) {
  
  started_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestRun.started_by)
}
inline ::std::string* TestRun::mutable_started_by() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestRun.started_by)
  return started_by_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestRun::release_started_by() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestRun.started_by)
  
  return started_by_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestRun::set_allocated_started_by(::std::string* started_by) {
  if (started_by != NULL) {
    
  } else {
    
  }
  started_by_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), started_by);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestRun.started_by)
}

// float progress = 16;
inline void TestRun::clear_progress() {
  progress_ = 0;
}
inline float TestRun::progress() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestRun.progress)
  return progress_;
}
inline void TestRun::set_progress(float value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestRun.progress)
}

// repeated .metamoto.types.TestJob test_jobs = 17;
inline int TestRun::test_jobs_size() const {
  return test_jobs_.size();
}
inline ::metamoto::types::TestJob* TestRun::mutable_test_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestRun.test_jobs)
  return test_jobs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestJob >*
TestRun::mutable_test_jobs() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.TestRun.test_jobs)
  return &test_jobs_;
}
inline const ::metamoto::types::TestJob& TestRun::test_jobs(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestRun.test_jobs)
  return test_jobs_.Get(index);
}
inline ::metamoto::types::TestJob* TestRun::add_test_jobs() {
  // @@protoc_insertion_point(field_add:metamoto.types.TestRun.test_jobs)
  return test_jobs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestJob >&
TestRun::test_jobs() const {
  // @@protoc_insertion_point(field_list:metamoto.types.TestRun.test_jobs)
  return test_jobs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2ftest_5frun_2eproto
