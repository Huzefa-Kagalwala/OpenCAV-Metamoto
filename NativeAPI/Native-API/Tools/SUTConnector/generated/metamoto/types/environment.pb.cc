// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/environment.proto

#include "metamoto/types/environment.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_metamoto_2ftypes_2fenvironment_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fenvironment_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Environment_Lighting;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fenvironment_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Environment_RoadConditions;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fenvironment_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Environment_Weather;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fenvironment_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EnvironmentObjectLibrary_EnvironmentObjectTemplate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fenvironment_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Environment_EnvironmentObject;
}  // namespace protobuf_metamoto_2ftypes_2fenvironment_2eproto
namespace protobuf_metamoto_2ftypes_2fpose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fpose_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Pose;
}  // namespace protobuf_metamoto_2ftypes_2fpose_2eproto
namespace protobuf_metamoto_2ftypes_2fvector3_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fvector3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3;
}  // namespace protobuf_metamoto_2ftypes_2fvector3_2eproto
namespace metamoto {
namespace types {
class Environment_WeatherDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Environment_Weather>
      _instance;
} _Environment_Weather_default_instance_;
class Environment_RoadConditionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Environment_RoadConditions>
      _instance;
} _Environment_RoadConditions_default_instance_;
class Environment_LightingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Environment_Lighting>
      _instance;
} _Environment_Lighting_default_instance_;
class Environment_EnvironmentObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Environment_EnvironmentObject>
      _instance;
} _Environment_EnvironmentObject_default_instance_;
class EnvironmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Environment>
      _instance;
} _Environment_default_instance_;
class EnvironmentObjectLibrary_EnvironmentObjectTemplateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnvironmentObjectLibrary_EnvironmentObjectTemplate>
      _instance;
} _EnvironmentObjectLibrary_EnvironmentObjectTemplate_default_instance_;
class EnvironmentObjectLibraryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnvironmentObjectLibrary>
      _instance;
} _EnvironmentObjectLibrary_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace protobuf_metamoto_2ftypes_2fenvironment_2eproto {
static void InitDefaultsEnvironment_Weather() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Environment_Weather_default_instance_;
    new (ptr) ::metamoto::types::Environment_Weather();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Environment_Weather::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Environment_Weather =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEnvironment_Weather}, {}};

static void InitDefaultsEnvironment_RoadConditions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Environment_RoadConditions_default_instance_;
    new (ptr) ::metamoto::types::Environment_RoadConditions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Environment_RoadConditions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Environment_RoadConditions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEnvironment_RoadConditions}, {}};

static void InitDefaultsEnvironment_Lighting() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Environment_Lighting_default_instance_;
    new (ptr) ::metamoto::types::Environment_Lighting();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Environment_Lighting::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Environment_Lighting =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEnvironment_Lighting}, {}};

static void InitDefaultsEnvironment_EnvironmentObject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Environment_EnvironmentObject_default_instance_;
    new (ptr) ::metamoto::types::Environment_EnvironmentObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Environment_EnvironmentObject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Environment_EnvironmentObject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEnvironment_EnvironmentObject}, {
      &protobuf_metamoto_2ftypes_2fpose_2eproto::scc_info_Pose.base,
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsEnvironment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Environment_default_instance_;
    new (ptr) ::metamoto::types::Environment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Environment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Environment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsEnvironment}, {
      &protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_Environment_Weather.base,
      &protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_Environment_RoadConditions.base,
      &protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_Environment_Lighting.base,
      &protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_Environment_EnvironmentObject.base,}};

static void InitDefaultsEnvironmentObjectLibrary_EnvironmentObjectTemplate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_EnvironmentObjectLibrary_EnvironmentObjectTemplate_default_instance_;
    new (ptr) ::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EnvironmentObjectLibrary_EnvironmentObjectTemplate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEnvironmentObjectLibrary_EnvironmentObjectTemplate}, {
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsEnvironmentObjectLibrary() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_EnvironmentObjectLibrary_default_instance_;
    new (ptr) ::metamoto::types::EnvironmentObjectLibrary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::EnvironmentObjectLibrary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EnvironmentObjectLibrary =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEnvironmentObjectLibrary}, {
      &protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_EnvironmentObjectLibrary_EnvironmentObjectTemplate.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Environment_Weather.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Environment_RoadConditions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Environment_Lighting.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Environment_EnvironmentObject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Environment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EnvironmentObjectLibrary_EnvironmentObjectTemplate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EnvironmentObjectLibrary.base);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_Weather, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_Weather, clouds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_Weather, overcast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_Weather, wind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_Weather, rain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_Weather, snow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_Weather, hail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_Weather, fog_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_Weather, temperature_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_RoadConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_RoadConditions, road_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_RoadConditions, lane_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_RoadConditions, s_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_RoadConditions, s_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_RoadConditions, wetness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_RoadConditions, puddles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_RoadConditions, surface_weathering_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_RoadConditions, surface_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_RoadConditions, markings_deterioration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_RoadConditions, cracks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_RoadConditions, stains_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_RoadConditions, tar_snakes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_RoadConditions, pot_holes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_RoadConditions, manholes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_RoadConditions, drains_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_RoadConditions, patches_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_Lighting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_Lighting, buildings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_EnvironmentObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_EnvironmentObject, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_EnvironmentObject, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_EnvironmentObject, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_EnvironmentObject, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_EnvironmentObject, scale_limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment_EnvironmentObject, speed_reduction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment, weather_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment, time_of_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment, road_conditions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment, lighting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Environment, environment_objects_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate, prefab_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate, bundle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate, scale_limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate, speed_reduction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EnvironmentObjectLibrary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EnvironmentObjectLibrary, objects_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::types::Environment_Weather)},
  { 13, -1, sizeof(::metamoto::types::Environment_RoadConditions)},
  { 34, -1, sizeof(::metamoto::types::Environment_Lighting)},
  { 40, -1, sizeof(::metamoto::types::Environment_EnvironmentObject)},
  { 51, -1, sizeof(::metamoto::types::Environment)},
  { 61, -1, sizeof(::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate)},
  { 73, -1, sizeof(::metamoto::types::EnvironmentObjectLibrary)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Environment_Weather_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Environment_RoadConditions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Environment_Lighting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Environment_EnvironmentObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Environment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_EnvironmentObjectLibrary_EnvironmentObjectTemplate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_EnvironmentObjectLibrary_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/types/environment.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n metamoto/types/environment.proto\022\016meta"
      "moto.types\032\031metamoto/types/pose.proto\032\034m"
      "etamoto/types/vector3.proto\"\336\007\n\013Environm"
      "ent\0224\n\007weather\030\001 \001(\0132#.metamoto.types.En"
      "vironment.Weather\022\023\n\013time_of_day\030\002 \001(\002\022C"
      "\n\017road_conditions\030\003 \003(\0132*.metamoto.types"
      ".Environment.RoadConditions\0226\n\010lighting\030"
      "\004 \001(\0132$.metamoto.types.Environment.Light"
      "ing\022J\n\023environment_objects\030\005 \003(\0132-.metam"
      "oto.types.Environment.EnvironmentObject\032"
      "\205\001\n\007Weather\022\016\n\006clouds\030\001 \001(\002\022\020\n\010overcast\030"
      "\002 \001(\002\022\014\n\004wind\030\003 \001(\002\022\014\n\004rain\030\004 \001(\002\022\014\n\004sno"
      "w\030\005 \001(\002\022\014\n\004hail\030\006 \001(\002\022\013\n\003fog\030\007 \001(\002\022\023\n\013te"
      "mperature\030\010 \001(\002\032\305\002\n\016RoadConditions\022\017\n\007ro"
      "ad_id\030\001 \001(\t\022\022\n\nlane_index\030\002 \001(\005\022\r\n\005s_min"
      "\030\003 \001(\002\022\r\n\005s_max\030\004 \001(\002\022\017\n\007wetness\030\005 \001(\002\022\017"
      "\n\007puddles\030\006 \001(\002\022\032\n\022surface_weathering\030\013 "
      "\001(\002\022\030\n\020surface_features\030\014 \001(\002\022\036\n\026marking"
      "s_deterioration\030\007 \001(\002\022\016\n\006cracks\030\010 \001(\002\022\016\n"
      "\006stains\030\r \001(\002\022\022\n\ntar_snakes\030\t \001(\002\022\021\n\tpot"
      "_holes\030\n \001(\002\022\020\n\010manholes\030\016 \001(\002\022\016\n\006drains"
      "\030\017 \001(\002\022\017\n\007patches\030\020 \001(\002\032\035\n\010Lighting\022\021\n\tb"
      "uildings\030\001 \001(\002\032\313\001\n\021EnvironmentObject\022\014\n\004"
      "name\030\001 \001(\t\022\024\n\014display_name\030\002 \001(\t\022\"\n\004pose"
      "\030\003 \001(\0132\024.metamoto.types.Pose\022&\n\005scale\030\004 "
      "\001(\0132\027.metamoto.types.Vector3\022-\n\014scale_li"
      "mits\030\005 \001(\0132\027.metamoto.types.Vector3\022\027\n\017s"
      "peed_reduction\030\006 \001(\002\"\247\002\n\030EnvironmentObje"
      "ctLibrary\022S\n\007objects\030\001 \003(\0132B.metamoto.ty"
      "pes.EnvironmentObjectLibrary.Environment"
      "ObjectTemplate\032\265\001\n\031EnvironmentObjectTemp"
      "late\022\014\n\004name\030\001 \001(\t\022\016\n\006prefab\030\002 \001(\t\022\023\n\013de"
      "scription\030\003 \001(\t\022\016\n\006bundle\030\004 \001(\t\022-\n\014scale"
      "_limits\030\005 \001(\0132\027.metamoto.types.Vector3\022\r"
      "\n\005image\030\006 \001(\t\022\027\n\017speed_reduction\030\007 \001(\002B\021"
      "\252\002\016Metamoto.Typesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1425);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/types/environment.proto", &protobuf_RegisterTypes);
  ::protobuf_metamoto_2ftypes_2fpose_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fvector3_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2ftypes_2fenvironment_2eproto
namespace metamoto {
namespace types {

// ===================================================================

void Environment_Weather::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Environment_Weather::kCloudsFieldNumber;
const int Environment_Weather::kOvercastFieldNumber;
const int Environment_Weather::kWindFieldNumber;
const int Environment_Weather::kRainFieldNumber;
const int Environment_Weather::kSnowFieldNumber;
const int Environment_Weather::kHailFieldNumber;
const int Environment_Weather::kFogFieldNumber;
const int Environment_Weather::kTemperatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Environment_Weather::Environment_Weather()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_Environment_Weather.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Environment.Weather)
}
Environment_Weather::Environment_Weather(const Environment_Weather& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&clouds_, &from.clouds_,
    static_cast<size_t>(reinterpret_cast<char*>(&temperature_) -
    reinterpret_cast<char*>(&clouds_)) + sizeof(temperature_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Environment.Weather)
}

void Environment_Weather::SharedCtor() {
  ::memset(&clouds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temperature_) -
      reinterpret_cast<char*>(&clouds_)) + sizeof(temperature_));
}

Environment_Weather::~Environment_Weather() {
  // @@protoc_insertion_point(destructor:metamoto.types.Environment.Weather)
  SharedDtor();
}

void Environment_Weather::SharedDtor() {
}

void Environment_Weather::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Environment_Weather::descriptor() {
  ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Environment_Weather& Environment_Weather::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_Environment_Weather.base);
  return *internal_default_instance();
}


void Environment_Weather::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Environment.Weather)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&clouds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temperature_) -
      reinterpret_cast<char*>(&clouds_)) + sizeof(temperature_));
  _internal_metadata_.Clear();
}

bool Environment_Weather::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Environment.Weather)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float clouds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clouds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float overcast = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overcast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float wind = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rain = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float snow = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &snow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float hail = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fog = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fog_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float temperature = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Environment.Weather)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Environment.Weather)
  return false;
#undef DO_
}

void Environment_Weather::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Environment.Weather)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float clouds = 1;
  if (this->clouds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->clouds(), output);
  }

  // float overcast = 2;
  if (this->overcast() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->overcast(), output);
  }

  // float wind = 3;
  if (this->wind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->wind(), output);
  }

  // float rain = 4;
  if (this->rain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->rain(), output);
  }

  // float snow = 5;
  if (this->snow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->snow(), output);
  }

  // float hail = 6;
  if (this->hail() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->hail(), output);
  }

  // float fog = 7;
  if (this->fog() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fog(), output);
  }

  // float temperature = 8;
  if (this->temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->temperature(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Environment.Weather)
}

::google::protobuf::uint8* Environment_Weather::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Environment.Weather)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float clouds = 1;
  if (this->clouds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->clouds(), target);
  }

  // float overcast = 2;
  if (this->overcast() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->overcast(), target);
  }

  // float wind = 3;
  if (this->wind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->wind(), target);
  }

  // float rain = 4;
  if (this->rain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->rain(), target);
  }

  // float snow = 5;
  if (this->snow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->snow(), target);
  }

  // float hail = 6;
  if (this->hail() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->hail(), target);
  }

  // float fog = 7;
  if (this->fog() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fog(), target);
  }

  // float temperature = 8;
  if (this->temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->temperature(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Environment.Weather)
  return target;
}

size_t Environment_Weather::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Environment.Weather)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float clouds = 1;
  if (this->clouds() != 0) {
    total_size += 1 + 4;
  }

  // float overcast = 2;
  if (this->overcast() != 0) {
    total_size += 1 + 4;
  }

  // float wind = 3;
  if (this->wind() != 0) {
    total_size += 1 + 4;
  }

  // float rain = 4;
  if (this->rain() != 0) {
    total_size += 1 + 4;
  }

  // float snow = 5;
  if (this->snow() != 0) {
    total_size += 1 + 4;
  }

  // float hail = 6;
  if (this->hail() != 0) {
    total_size += 1 + 4;
  }

  // float fog = 7;
  if (this->fog() != 0) {
    total_size += 1 + 4;
  }

  // float temperature = 8;
  if (this->temperature() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Environment_Weather::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Environment.Weather)
  GOOGLE_DCHECK_NE(&from, this);
  const Environment_Weather* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Environment_Weather>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Environment.Weather)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Environment.Weather)
    MergeFrom(*source);
  }
}

void Environment_Weather::MergeFrom(const Environment_Weather& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Environment.Weather)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clouds() != 0) {
    set_clouds(from.clouds());
  }
  if (from.overcast() != 0) {
    set_overcast(from.overcast());
  }
  if (from.wind() != 0) {
    set_wind(from.wind());
  }
  if (from.rain() != 0) {
    set_rain(from.rain());
  }
  if (from.snow() != 0) {
    set_snow(from.snow());
  }
  if (from.hail() != 0) {
    set_hail(from.hail());
  }
  if (from.fog() != 0) {
    set_fog(from.fog());
  }
  if (from.temperature() != 0) {
    set_temperature(from.temperature());
  }
}

void Environment_Weather::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Environment.Weather)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Environment_Weather::CopyFrom(const Environment_Weather& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Environment.Weather)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Environment_Weather::IsInitialized() const {
  return true;
}

void Environment_Weather::Swap(Environment_Weather* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Environment_Weather::InternalSwap(Environment_Weather* other) {
  using std::swap;
  swap(clouds_, other->clouds_);
  swap(overcast_, other->overcast_);
  swap(wind_, other->wind_);
  swap(rain_, other->rain_);
  swap(snow_, other->snow_);
  swap(hail_, other->hail_);
  swap(fog_, other->fog_);
  swap(temperature_, other->temperature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Environment_Weather::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Environment_RoadConditions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Environment_RoadConditions::kRoadIdFieldNumber;
const int Environment_RoadConditions::kLaneIndexFieldNumber;
const int Environment_RoadConditions::kSMinFieldNumber;
const int Environment_RoadConditions::kSMaxFieldNumber;
const int Environment_RoadConditions::kWetnessFieldNumber;
const int Environment_RoadConditions::kPuddlesFieldNumber;
const int Environment_RoadConditions::kSurfaceWeatheringFieldNumber;
const int Environment_RoadConditions::kSurfaceFeaturesFieldNumber;
const int Environment_RoadConditions::kMarkingsDeteriorationFieldNumber;
const int Environment_RoadConditions::kCracksFieldNumber;
const int Environment_RoadConditions::kStainsFieldNumber;
const int Environment_RoadConditions::kTarSnakesFieldNumber;
const int Environment_RoadConditions::kPotHolesFieldNumber;
const int Environment_RoadConditions::kManholesFieldNumber;
const int Environment_RoadConditions::kDrainsFieldNumber;
const int Environment_RoadConditions::kPatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Environment_RoadConditions::Environment_RoadConditions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_Environment_RoadConditions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Environment.RoadConditions)
}
Environment_RoadConditions::Environment_RoadConditions(const Environment_RoadConditions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  road_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.road_id().size() > 0) {
    road_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.road_id_);
  }
  ::memcpy(&lane_index_, &from.lane_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&patches_) -
    reinterpret_cast<char*>(&lane_index_)) + sizeof(patches_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Environment.RoadConditions)
}

void Environment_RoadConditions::SharedCtor() {
  road_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lane_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patches_) -
      reinterpret_cast<char*>(&lane_index_)) + sizeof(patches_));
}

Environment_RoadConditions::~Environment_RoadConditions() {
  // @@protoc_insertion_point(destructor:metamoto.types.Environment.RoadConditions)
  SharedDtor();
}

void Environment_RoadConditions::SharedDtor() {
  road_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Environment_RoadConditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Environment_RoadConditions::descriptor() {
  ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Environment_RoadConditions& Environment_RoadConditions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_Environment_RoadConditions.base);
  return *internal_default_instance();
}


void Environment_RoadConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Environment.RoadConditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lane_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patches_) -
      reinterpret_cast<char*>(&lane_index_)) + sizeof(patches_));
  _internal_metadata_.Clear();
}

bool Environment_RoadConditions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Environment.RoadConditions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string road_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_road_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->road_id().data(), static_cast<int>(this->road_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Environment.RoadConditions.road_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s_min = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s_max = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float wetness = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wetness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float puddles = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &puddles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float markings_deterioration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &markings_deterioration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cracks = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cracks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tar_snakes = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tar_snakes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pot_holes = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pot_holes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float surface_weathering = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &surface_weathering_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float surface_features = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &surface_features_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float stains = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stains_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float manholes = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &manholes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float drains = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &drains_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float patches = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &patches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Environment.RoadConditions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Environment.RoadConditions)
  return false;
#undef DO_
}

void Environment_RoadConditions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Environment.RoadConditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string road_id = 1;
  if (this->road_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->road_id().data(), static_cast<int>(this->road_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Environment.RoadConditions.road_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->road_id(), output);
  }

  // int32 lane_index = 2;
  if (this->lane_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lane_index(), output);
  }

  // float s_min = 3;
  if (this->s_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->s_min(), output);
  }

  // float s_max = 4;
  if (this->s_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->s_max(), output);
  }

  // float wetness = 5;
  if (this->wetness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->wetness(), output);
  }

  // float puddles = 6;
  if (this->puddles() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->puddles(), output);
  }

  // float markings_deterioration = 7;
  if (this->markings_deterioration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->markings_deterioration(), output);
  }

  // float cracks = 8;
  if (this->cracks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->cracks(), output);
  }

  // float tar_snakes = 9;
  if (this->tar_snakes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->tar_snakes(), output);
  }

  // float pot_holes = 10;
  if (this->pot_holes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->pot_holes(), output);
  }

  // float surface_weathering = 11;
  if (this->surface_weathering() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->surface_weathering(), output);
  }

  // float surface_features = 12;
  if (this->surface_features() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->surface_features(), output);
  }

  // float stains = 13;
  if (this->stains() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->stains(), output);
  }

  // float manholes = 14;
  if (this->manholes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->manholes(), output);
  }

  // float drains = 15;
  if (this->drains() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->drains(), output);
  }

  // float patches = 16;
  if (this->patches() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->patches(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Environment.RoadConditions)
}

::google::protobuf::uint8* Environment_RoadConditions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Environment.RoadConditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string road_id = 1;
  if (this->road_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->road_id().data(), static_cast<int>(this->road_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Environment.RoadConditions.road_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->road_id(), target);
  }

  // int32 lane_index = 2;
  if (this->lane_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lane_index(), target);
  }

  // float s_min = 3;
  if (this->s_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->s_min(), target);
  }

  // float s_max = 4;
  if (this->s_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->s_max(), target);
  }

  // float wetness = 5;
  if (this->wetness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->wetness(), target);
  }

  // float puddles = 6;
  if (this->puddles() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->puddles(), target);
  }

  // float markings_deterioration = 7;
  if (this->markings_deterioration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->markings_deterioration(), target);
  }

  // float cracks = 8;
  if (this->cracks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->cracks(), target);
  }

  // float tar_snakes = 9;
  if (this->tar_snakes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->tar_snakes(), target);
  }

  // float pot_holes = 10;
  if (this->pot_holes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->pot_holes(), target);
  }

  // float surface_weathering = 11;
  if (this->surface_weathering() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->surface_weathering(), target);
  }

  // float surface_features = 12;
  if (this->surface_features() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->surface_features(), target);
  }

  // float stains = 13;
  if (this->stains() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->stains(), target);
  }

  // float manholes = 14;
  if (this->manholes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->manholes(), target);
  }

  // float drains = 15;
  if (this->drains() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->drains(), target);
  }

  // float patches = 16;
  if (this->patches() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->patches(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Environment.RoadConditions)
  return target;
}

size_t Environment_RoadConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Environment.RoadConditions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string road_id = 1;
  if (this->road_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->road_id());
  }

  // int32 lane_index = 2;
  if (this->lane_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_index());
  }

  // float s_min = 3;
  if (this->s_min() != 0) {
    total_size += 1 + 4;
  }

  // float s_max = 4;
  if (this->s_max() != 0) {
    total_size += 1 + 4;
  }

  // float wetness = 5;
  if (this->wetness() != 0) {
    total_size += 1 + 4;
  }

  // float puddles = 6;
  if (this->puddles() != 0) {
    total_size += 1 + 4;
  }

  // float markings_deterioration = 7;
  if (this->markings_deterioration() != 0) {
    total_size += 1 + 4;
  }

  // float cracks = 8;
  if (this->cracks() != 0) {
    total_size += 1 + 4;
  }

  // float tar_snakes = 9;
  if (this->tar_snakes() != 0) {
    total_size += 1 + 4;
  }

  // float pot_holes = 10;
  if (this->pot_holes() != 0) {
    total_size += 1 + 4;
  }

  // float surface_weathering = 11;
  if (this->surface_weathering() != 0) {
    total_size += 1 + 4;
  }

  // float surface_features = 12;
  if (this->surface_features() != 0) {
    total_size += 1 + 4;
  }

  // float stains = 13;
  if (this->stains() != 0) {
    total_size += 1 + 4;
  }

  // float manholes = 14;
  if (this->manholes() != 0) {
    total_size += 1 + 4;
  }

  // float drains = 15;
  if (this->drains() != 0) {
    total_size += 1 + 4;
  }

  // float patches = 16;
  if (this->patches() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Environment_RoadConditions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Environment.RoadConditions)
  GOOGLE_DCHECK_NE(&from, this);
  const Environment_RoadConditions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Environment_RoadConditions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Environment.RoadConditions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Environment.RoadConditions)
    MergeFrom(*source);
  }
}

void Environment_RoadConditions::MergeFrom(const Environment_RoadConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Environment.RoadConditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.road_id().size() > 0) {

    road_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.road_id_);
  }
  if (from.lane_index() != 0) {
    set_lane_index(from.lane_index());
  }
  if (from.s_min() != 0) {
    set_s_min(from.s_min());
  }
  if (from.s_max() != 0) {
    set_s_max(from.s_max());
  }
  if (from.wetness() != 0) {
    set_wetness(from.wetness());
  }
  if (from.puddles() != 0) {
    set_puddles(from.puddles());
  }
  if (from.markings_deterioration() != 0) {
    set_markings_deterioration(from.markings_deterioration());
  }
  if (from.cracks() != 0) {
    set_cracks(from.cracks());
  }
  if (from.tar_snakes() != 0) {
    set_tar_snakes(from.tar_snakes());
  }
  if (from.pot_holes() != 0) {
    set_pot_holes(from.pot_holes());
  }
  if (from.surface_weathering() != 0) {
    set_surface_weathering(from.surface_weathering());
  }
  if (from.surface_features() != 0) {
    set_surface_features(from.surface_features());
  }
  if (from.stains() != 0) {
    set_stains(from.stains());
  }
  if (from.manholes() != 0) {
    set_manholes(from.manholes());
  }
  if (from.drains() != 0) {
    set_drains(from.drains());
  }
  if (from.patches() != 0) {
    set_patches(from.patches());
  }
}

void Environment_RoadConditions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Environment.RoadConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Environment_RoadConditions::CopyFrom(const Environment_RoadConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Environment.RoadConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Environment_RoadConditions::IsInitialized() const {
  return true;
}

void Environment_RoadConditions::Swap(Environment_RoadConditions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Environment_RoadConditions::InternalSwap(Environment_RoadConditions* other) {
  using std::swap;
  road_id_.Swap(&other->road_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lane_index_, other->lane_index_);
  swap(s_min_, other->s_min_);
  swap(s_max_, other->s_max_);
  swap(wetness_, other->wetness_);
  swap(puddles_, other->puddles_);
  swap(markings_deterioration_, other->markings_deterioration_);
  swap(cracks_, other->cracks_);
  swap(tar_snakes_, other->tar_snakes_);
  swap(pot_holes_, other->pot_holes_);
  swap(surface_weathering_, other->surface_weathering_);
  swap(surface_features_, other->surface_features_);
  swap(stains_, other->stains_);
  swap(manholes_, other->manholes_);
  swap(drains_, other->drains_);
  swap(patches_, other->patches_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Environment_RoadConditions::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Environment_Lighting::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Environment_Lighting::kBuildingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Environment_Lighting::Environment_Lighting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_Environment_Lighting.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Environment.Lighting)
}
Environment_Lighting::Environment_Lighting(const Environment_Lighting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buildings_ = from.buildings_;
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Environment.Lighting)
}

void Environment_Lighting::SharedCtor() {
  buildings_ = 0;
}

Environment_Lighting::~Environment_Lighting() {
  // @@protoc_insertion_point(destructor:metamoto.types.Environment.Lighting)
  SharedDtor();
}

void Environment_Lighting::SharedDtor() {
}

void Environment_Lighting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Environment_Lighting::descriptor() {
  ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Environment_Lighting& Environment_Lighting::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_Environment_Lighting.base);
  return *internal_default_instance();
}


void Environment_Lighting::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Environment.Lighting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buildings_ = 0;
  _internal_metadata_.Clear();
}

bool Environment_Lighting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Environment.Lighting)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float buildings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &buildings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Environment.Lighting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Environment.Lighting)
  return false;
#undef DO_
}

void Environment_Lighting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Environment.Lighting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float buildings = 1;
  if (this->buildings() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->buildings(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Environment.Lighting)
}

::google::protobuf::uint8* Environment_Lighting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Environment.Lighting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float buildings = 1;
  if (this->buildings() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->buildings(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Environment.Lighting)
  return target;
}

size_t Environment_Lighting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Environment.Lighting)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float buildings = 1;
  if (this->buildings() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Environment_Lighting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Environment.Lighting)
  GOOGLE_DCHECK_NE(&from, this);
  const Environment_Lighting* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Environment_Lighting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Environment.Lighting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Environment.Lighting)
    MergeFrom(*source);
  }
}

void Environment_Lighting::MergeFrom(const Environment_Lighting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Environment.Lighting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buildings() != 0) {
    set_buildings(from.buildings());
  }
}

void Environment_Lighting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Environment.Lighting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Environment_Lighting::CopyFrom(const Environment_Lighting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Environment.Lighting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Environment_Lighting::IsInitialized() const {
  return true;
}

void Environment_Lighting::Swap(Environment_Lighting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Environment_Lighting::InternalSwap(Environment_Lighting* other) {
  using std::swap;
  swap(buildings_, other->buildings_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Environment_Lighting::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Environment_EnvironmentObject::InitAsDefaultInstance() {
  ::metamoto::types::_Environment_EnvironmentObject_default_instance_._instance.get_mutable()->pose_ = const_cast< ::metamoto::types::Pose*>(
      ::metamoto::types::Pose::internal_default_instance());
  ::metamoto::types::_Environment_EnvironmentObject_default_instance_._instance.get_mutable()->scale_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
  ::metamoto::types::_Environment_EnvironmentObject_default_instance_._instance.get_mutable()->scale_limits_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
}
void Environment_EnvironmentObject::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
void Environment_EnvironmentObject::clear_scale() {
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) {
    delete scale_;
  }
  scale_ = NULL;
}
void Environment_EnvironmentObject::clear_scale_limits() {
  if (GetArenaNoVirtual() == NULL && scale_limits_ != NULL) {
    delete scale_limits_;
  }
  scale_limits_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Environment_EnvironmentObject::kNameFieldNumber;
const int Environment_EnvironmentObject::kDisplayNameFieldNumber;
const int Environment_EnvironmentObject::kPoseFieldNumber;
const int Environment_EnvironmentObject::kScaleFieldNumber;
const int Environment_EnvironmentObject::kScaleLimitsFieldNumber;
const int Environment_EnvironmentObject::kSpeedReductionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Environment_EnvironmentObject::Environment_EnvironmentObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_Environment_EnvironmentObject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Environment.EnvironmentObject)
}
Environment_EnvironmentObject::Environment_EnvironmentObject(const Environment_EnvironmentObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.has_pose()) {
    pose_ = new ::metamoto::types::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_scale()) {
    scale_ = new ::metamoto::types::Vector3(*from.scale_);
  } else {
    scale_ = NULL;
  }
  if (from.has_scale_limits()) {
    scale_limits_ = new ::metamoto::types::Vector3(*from.scale_limits_);
  } else {
    scale_limits_ = NULL;
  }
  speed_reduction_ = from.speed_reduction_;
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Environment.EnvironmentObject)
}

void Environment_EnvironmentObject::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_reduction_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(speed_reduction_));
}

Environment_EnvironmentObject::~Environment_EnvironmentObject() {
  // @@protoc_insertion_point(destructor:metamoto.types.Environment.EnvironmentObject)
  SharedDtor();
}

void Environment_EnvironmentObject::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete scale_;
  if (this != internal_default_instance()) delete scale_limits_;
}

void Environment_EnvironmentObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Environment_EnvironmentObject::descriptor() {
  ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Environment_EnvironmentObject& Environment_EnvironmentObject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_Environment_EnvironmentObject.base);
  return *internal_default_instance();
}


void Environment_EnvironmentObject::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Environment.EnvironmentObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) {
    delete scale_;
  }
  scale_ = NULL;
  if (GetArenaNoVirtual() == NULL && scale_limits_ != NULL) {
    delete scale_limits_;
  }
  scale_limits_ = NULL;
  speed_reduction_ = 0;
  _internal_metadata_.Clear();
}

bool Environment_EnvironmentObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Environment.EnvironmentObject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Environment.EnvironmentObject.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Environment.EnvironmentObject.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Pose pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 scale = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 scale_limits = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scale_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_reduction = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_reduction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Environment.EnvironmentObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Environment.EnvironmentObject)
  return false;
#undef DO_
}

void Environment_EnvironmentObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Environment.EnvironmentObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Environment.EnvironmentObject.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Environment.EnvironmentObject.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // .metamoto.types.Pose pose = 3;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_pose(), output);
  }

  // .metamoto.types.Vector3 scale = 4;
  if (this->has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_scale(), output);
  }

  // .metamoto.types.Vector3 scale_limits = 5;
  if (this->has_scale_limits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_scale_limits(), output);
  }

  // float speed_reduction = 6;
  if (this->speed_reduction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->speed_reduction(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Environment.EnvironmentObject)
}

::google::protobuf::uint8* Environment_EnvironmentObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Environment.EnvironmentObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Environment.EnvironmentObject.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Environment.EnvironmentObject.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // .metamoto.types.Pose pose = 3;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_pose(), deterministic, target);
  }

  // .metamoto.types.Vector3 scale = 4;
  if (this->has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_scale(), deterministic, target);
  }

  // .metamoto.types.Vector3 scale_limits = 5;
  if (this->has_scale_limits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_scale_limits(), deterministic, target);
  }

  // float speed_reduction = 6;
  if (this->speed_reduction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->speed_reduction(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Environment.EnvironmentObject)
  return target;
}

size_t Environment_EnvironmentObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Environment.EnvironmentObject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // .metamoto.types.Pose pose = 3;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .metamoto.types.Vector3 scale = 4;
  if (this->has_scale()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *scale_);
  }

  // .metamoto.types.Vector3 scale_limits = 5;
  if (this->has_scale_limits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *scale_limits_);
  }

  // float speed_reduction = 6;
  if (this->speed_reduction() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Environment_EnvironmentObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Environment.EnvironmentObject)
  GOOGLE_DCHECK_NE(&from, this);
  const Environment_EnvironmentObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Environment_EnvironmentObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Environment.EnvironmentObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Environment.EnvironmentObject)
    MergeFrom(*source);
  }
}

void Environment_EnvironmentObject::MergeFrom(const Environment_EnvironmentObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Environment.EnvironmentObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.has_pose()) {
    mutable_pose()->::metamoto::types::Pose::MergeFrom(from.pose());
  }
  if (from.has_scale()) {
    mutable_scale()->::metamoto::types::Vector3::MergeFrom(from.scale());
  }
  if (from.has_scale_limits()) {
    mutable_scale_limits()->::metamoto::types::Vector3::MergeFrom(from.scale_limits());
  }
  if (from.speed_reduction() != 0) {
    set_speed_reduction(from.speed_reduction());
  }
}

void Environment_EnvironmentObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Environment.EnvironmentObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Environment_EnvironmentObject::CopyFrom(const Environment_EnvironmentObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Environment.EnvironmentObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Environment_EnvironmentObject::IsInitialized() const {
  return true;
}

void Environment_EnvironmentObject::Swap(Environment_EnvironmentObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Environment_EnvironmentObject::InternalSwap(Environment_EnvironmentObject* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pose_, other->pose_);
  swap(scale_, other->scale_);
  swap(scale_limits_, other->scale_limits_);
  swap(speed_reduction_, other->speed_reduction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Environment_EnvironmentObject::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Environment::InitAsDefaultInstance() {
  ::metamoto::types::_Environment_default_instance_._instance.get_mutable()->weather_ = const_cast< ::metamoto::types::Environment_Weather*>(
      ::metamoto::types::Environment_Weather::internal_default_instance());
  ::metamoto::types::_Environment_default_instance_._instance.get_mutable()->lighting_ = const_cast< ::metamoto::types::Environment_Lighting*>(
      ::metamoto::types::Environment_Lighting::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Environment::kWeatherFieldNumber;
const int Environment::kTimeOfDayFieldNumber;
const int Environment::kRoadConditionsFieldNumber;
const int Environment::kLightingFieldNumber;
const int Environment::kEnvironmentObjectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Environment::Environment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_Environment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Environment)
}
Environment::Environment(const Environment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      road_conditions_(from.road_conditions_),
      environment_objects_(from.environment_objects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weather()) {
    weather_ = new ::metamoto::types::Environment_Weather(*from.weather_);
  } else {
    weather_ = NULL;
  }
  if (from.has_lighting()) {
    lighting_ = new ::metamoto::types::Environment_Lighting(*from.lighting_);
  } else {
    lighting_ = NULL;
  }
  time_of_day_ = from.time_of_day_;
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Environment)
}

void Environment::SharedCtor() {
  ::memset(&weather_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_of_day_) -
      reinterpret_cast<char*>(&weather_)) + sizeof(time_of_day_));
}

Environment::~Environment() {
  // @@protoc_insertion_point(destructor:metamoto.types.Environment)
  SharedDtor();
}

void Environment::SharedDtor() {
  if (this != internal_default_instance()) delete weather_;
  if (this != internal_default_instance()) delete lighting_;
}

void Environment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Environment::descriptor() {
  ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Environment& Environment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_Environment.base);
  return *internal_default_instance();
}


void Environment::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Environment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_conditions_.Clear();
  environment_objects_.Clear();
  if (GetArenaNoVirtual() == NULL && weather_ != NULL) {
    delete weather_;
  }
  weather_ = NULL;
  if (GetArenaNoVirtual() == NULL && lighting_ != NULL) {
    delete lighting_;
  }
  lighting_ = NULL;
  time_of_day_ = 0;
  _internal_metadata_.Clear();
}

bool Environment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Environment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.Environment.Weather weather = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_weather()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time_of_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_of_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Environment.RoadConditions road_conditions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_road_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Environment.Lighting lighting = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lighting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Environment.EnvironmentObject environment_objects = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_environment_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Environment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Environment)
  return false;
#undef DO_
}

void Environment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Environment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Environment.Weather weather = 1;
  if (this->has_weather()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_weather(), output);
  }

  // float time_of_day = 2;
  if (this->time_of_day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->time_of_day(), output);
  }

  // repeated .metamoto.types.Environment.RoadConditions road_conditions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_conditions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->road_conditions(static_cast<int>(i)),
      output);
  }

  // .metamoto.types.Environment.Lighting lighting = 4;
  if (this->has_lighting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_lighting(), output);
  }

  // repeated .metamoto.types.Environment.EnvironmentObject environment_objects = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->environment_objects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->environment_objects(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Environment)
}

::google::protobuf::uint8* Environment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Environment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Environment.Weather weather = 1;
  if (this->has_weather()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_weather(), deterministic, target);
  }

  // float time_of_day = 2;
  if (this->time_of_day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->time_of_day(), target);
  }

  // repeated .metamoto.types.Environment.RoadConditions road_conditions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_conditions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->road_conditions(static_cast<int>(i)), deterministic, target);
  }

  // .metamoto.types.Environment.Lighting lighting = 4;
  if (this->has_lighting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_lighting(), deterministic, target);
  }

  // repeated .metamoto.types.Environment.EnvironmentObject environment_objects = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->environment_objects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->environment_objects(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Environment)
  return target;
}

size_t Environment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Environment)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.Environment.RoadConditions road_conditions = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->road_conditions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road_conditions(static_cast<int>(i)));
    }
  }

  // repeated .metamoto.types.Environment.EnvironmentObject environment_objects = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->environment_objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->environment_objects(static_cast<int>(i)));
    }
  }

  // .metamoto.types.Environment.Weather weather = 1;
  if (this->has_weather()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *weather_);
  }

  // .metamoto.types.Environment.Lighting lighting = 4;
  if (this->has_lighting()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lighting_);
  }

  // float time_of_day = 2;
  if (this->time_of_day() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Environment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Environment)
  GOOGLE_DCHECK_NE(&from, this);
  const Environment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Environment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Environment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Environment)
    MergeFrom(*source);
  }
}

void Environment::MergeFrom(const Environment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Environment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_conditions_.MergeFrom(from.road_conditions_);
  environment_objects_.MergeFrom(from.environment_objects_);
  if (from.has_weather()) {
    mutable_weather()->::metamoto::types::Environment_Weather::MergeFrom(from.weather());
  }
  if (from.has_lighting()) {
    mutable_lighting()->::metamoto::types::Environment_Lighting::MergeFrom(from.lighting());
  }
  if (from.time_of_day() != 0) {
    set_time_of_day(from.time_of_day());
  }
}

void Environment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Environment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Environment::CopyFrom(const Environment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Environment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Environment::IsInitialized() const {
  return true;
}

void Environment::Swap(Environment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Environment::InternalSwap(Environment* other) {
  using std::swap;
  CastToBase(&road_conditions_)->InternalSwap(CastToBase(&other->road_conditions_));
  CastToBase(&environment_objects_)->InternalSwap(CastToBase(&other->environment_objects_));
  swap(weather_, other->weather_);
  swap(lighting_, other->lighting_);
  swap(time_of_day_, other->time_of_day_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Environment::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EnvironmentObjectLibrary_EnvironmentObjectTemplate::InitAsDefaultInstance() {
  ::metamoto::types::_EnvironmentObjectLibrary_EnvironmentObjectTemplate_default_instance_._instance.get_mutable()->scale_limits_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
}
void EnvironmentObjectLibrary_EnvironmentObjectTemplate::clear_scale_limits() {
  if (GetArenaNoVirtual() == NULL && scale_limits_ != NULL) {
    delete scale_limits_;
  }
  scale_limits_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnvironmentObjectLibrary_EnvironmentObjectTemplate::kNameFieldNumber;
const int EnvironmentObjectLibrary_EnvironmentObjectTemplate::kPrefabFieldNumber;
const int EnvironmentObjectLibrary_EnvironmentObjectTemplate::kDescriptionFieldNumber;
const int EnvironmentObjectLibrary_EnvironmentObjectTemplate::kBundleFieldNumber;
const int EnvironmentObjectLibrary_EnvironmentObjectTemplate::kScaleLimitsFieldNumber;
const int EnvironmentObjectLibrary_EnvironmentObjectTemplate::kImageFieldNumber;
const int EnvironmentObjectLibrary_EnvironmentObjectTemplate::kSpeedReductionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnvironmentObjectLibrary_EnvironmentObjectTemplate::EnvironmentObjectLibrary_EnvironmentObjectTemplate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_EnvironmentObjectLibrary_EnvironmentObjectTemplate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate)
}
EnvironmentObjectLibrary_EnvironmentObjectTemplate::EnvironmentObjectLibrary_EnvironmentObjectTemplate(const EnvironmentObjectLibrary_EnvironmentObjectTemplate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  prefab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prefab().size() > 0) {
    prefab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefab_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  bundle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bundle().size() > 0) {
    bundle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundle_);
  }
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.has_scale_limits()) {
    scale_limits_ = new ::metamoto::types::Vector3(*from.scale_limits_);
  } else {
    scale_limits_ = NULL;
  }
  speed_reduction_ = from.speed_reduction_;
  // @@protoc_insertion_point(copy_constructor:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate)
}

void EnvironmentObjectLibrary_EnvironmentObjectTemplate::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&scale_limits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_reduction_) -
      reinterpret_cast<char*>(&scale_limits_)) + sizeof(speed_reduction_));
}

EnvironmentObjectLibrary_EnvironmentObjectTemplate::~EnvironmentObjectLibrary_EnvironmentObjectTemplate() {
  // @@protoc_insertion_point(destructor:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate)
  SharedDtor();
}

void EnvironmentObjectLibrary_EnvironmentObjectTemplate::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scale_limits_;
}

void EnvironmentObjectLibrary_EnvironmentObjectTemplate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EnvironmentObjectLibrary_EnvironmentObjectTemplate::descriptor() {
  ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnvironmentObjectLibrary_EnvironmentObjectTemplate& EnvironmentObjectLibrary_EnvironmentObjectTemplate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_EnvironmentObjectLibrary_EnvironmentObjectTemplate.base);
  return *internal_default_instance();
}


void EnvironmentObjectLibrary_EnvironmentObjectTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && scale_limits_ != NULL) {
    delete scale_limits_;
  }
  scale_limits_ = NULL;
  speed_reduction_ = 0;
  _internal_metadata_.Clear();
}

bool EnvironmentObjectLibrary_EnvironmentObjectTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prefab = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefab().data(), static_cast<int>(this->prefab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.prefab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bundle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bundle().data(), static_cast<int>(this->bundle().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.bundle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 scale_limits = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scale_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.image"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_reduction = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_reduction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate)
  return false;
#undef DO_
}

void EnvironmentObjectLibrary_EnvironmentObjectTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string prefab = 2;
  if (this->prefab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefab().data(), static_cast<int>(this->prefab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.prefab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->prefab(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // string bundle = 4;
  if (this->bundle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bundle().data(), static_cast<int>(this->bundle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.bundle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bundle(), output);
  }

  // .metamoto.types.Vector3 scale_limits = 5;
  if (this->has_scale_limits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_scale_limits(), output);
  }

  // string image = 6;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->image(), output);
  }

  // float speed_reduction = 7;
  if (this->speed_reduction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->speed_reduction(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate)
}

::google::protobuf::uint8* EnvironmentObjectLibrary_EnvironmentObjectTemplate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string prefab = 2;
  if (this->prefab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefab().data(), static_cast<int>(this->prefab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.prefab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->prefab(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // string bundle = 4;
  if (this->bundle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bundle().data(), static_cast<int>(this->bundle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.bundle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bundle(), target);
  }

  // .metamoto.types.Vector3 scale_limits = 5;
  if (this->has_scale_limits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_scale_limits(), deterministic, target);
  }

  // string image = 6;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->image(), target);
  }

  // float speed_reduction = 7;
  if (this->speed_reduction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->speed_reduction(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate)
  return target;
}

size_t EnvironmentObjectLibrary_EnvironmentObjectTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string prefab = 2;
  if (this->prefab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefab());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string bundle = 4;
  if (this->bundle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bundle());
  }

  // string image = 6;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());
  }

  // .metamoto.types.Vector3 scale_limits = 5;
  if (this->has_scale_limits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *scale_limits_);
  }

  // float speed_reduction = 7;
  if (this->speed_reduction() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentObjectLibrary_EnvironmentObjectTemplate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentObjectLibrary_EnvironmentObjectTemplate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnvironmentObjectLibrary_EnvironmentObjectTemplate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate)
    MergeFrom(*source);
  }
}

void EnvironmentObjectLibrary_EnvironmentObjectTemplate::MergeFrom(const EnvironmentObjectLibrary_EnvironmentObjectTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.prefab().size() > 0) {

    prefab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefab_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.bundle().size() > 0) {

    bundle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundle_);
  }
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.has_scale_limits()) {
    mutable_scale_limits()->::metamoto::types::Vector3::MergeFrom(from.scale_limits());
  }
  if (from.speed_reduction() != 0) {
    set_speed_reduction(from.speed_reduction());
  }
}

void EnvironmentObjectLibrary_EnvironmentObjectTemplate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentObjectLibrary_EnvironmentObjectTemplate::CopyFrom(const EnvironmentObjectLibrary_EnvironmentObjectTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentObjectLibrary_EnvironmentObjectTemplate::IsInitialized() const {
  return true;
}

void EnvironmentObjectLibrary_EnvironmentObjectTemplate::Swap(EnvironmentObjectLibrary_EnvironmentObjectTemplate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnvironmentObjectLibrary_EnvironmentObjectTemplate::InternalSwap(EnvironmentObjectLibrary_EnvironmentObjectTemplate* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prefab_.Swap(&other->prefab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bundle_.Swap(&other->bundle_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(scale_limits_, other->scale_limits_);
  swap(speed_reduction_, other->speed_reduction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EnvironmentObjectLibrary_EnvironmentObjectTemplate::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EnvironmentObjectLibrary::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnvironmentObjectLibrary::kObjectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnvironmentObjectLibrary::EnvironmentObjectLibrary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_EnvironmentObjectLibrary.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.EnvironmentObjectLibrary)
}
EnvironmentObjectLibrary::EnvironmentObjectLibrary(const EnvironmentObjectLibrary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.types.EnvironmentObjectLibrary)
}

void EnvironmentObjectLibrary::SharedCtor() {
}

EnvironmentObjectLibrary::~EnvironmentObjectLibrary() {
  // @@protoc_insertion_point(destructor:metamoto.types.EnvironmentObjectLibrary)
  SharedDtor();
}

void EnvironmentObjectLibrary::SharedDtor() {
}

void EnvironmentObjectLibrary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EnvironmentObjectLibrary::descriptor() {
  ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnvironmentObjectLibrary& EnvironmentObjectLibrary::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fenvironment_2eproto::scc_info_EnvironmentObjectLibrary.base);
  return *internal_default_instance();
}


void EnvironmentObjectLibrary::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.EnvironmentObjectLibrary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  _internal_metadata_.Clear();
}

bool EnvironmentObjectLibrary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.EnvironmentObjectLibrary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate objects = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.EnvironmentObjectLibrary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.EnvironmentObjectLibrary)
  return false;
#undef DO_
}

void EnvironmentObjectLibrary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.EnvironmentObjectLibrary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->objects(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.EnvironmentObjectLibrary)
}

::google::protobuf::uint8* EnvironmentObjectLibrary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.EnvironmentObjectLibrary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->objects(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.EnvironmentObjectLibrary)
  return target;
}

size_t EnvironmentObjectLibrary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.EnvironmentObjectLibrary)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate objects = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->objects(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentObjectLibrary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.EnvironmentObjectLibrary)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentObjectLibrary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnvironmentObjectLibrary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.EnvironmentObjectLibrary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.EnvironmentObjectLibrary)
    MergeFrom(*source);
  }
}

void EnvironmentObjectLibrary::MergeFrom(const EnvironmentObjectLibrary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.EnvironmentObjectLibrary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
}

void EnvironmentObjectLibrary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.EnvironmentObjectLibrary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentObjectLibrary::CopyFrom(const EnvironmentObjectLibrary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.EnvironmentObjectLibrary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentObjectLibrary::IsInitialized() const {
  return true;
}

void EnvironmentObjectLibrary::Swap(EnvironmentObjectLibrary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnvironmentObjectLibrary::InternalSwap(EnvironmentObjectLibrary* other) {
  using std::swap;
  CastToBase(&objects_)->InternalSwap(CastToBase(&other->objects_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EnvironmentObjectLibrary::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Environment_Weather* Arena::CreateMaybeMessage< ::metamoto::types::Environment_Weather >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Environment_Weather >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Environment_RoadConditions* Arena::CreateMaybeMessage< ::metamoto::types::Environment_RoadConditions >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Environment_RoadConditions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Environment_Lighting* Arena::CreateMaybeMessage< ::metamoto::types::Environment_Lighting >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Environment_Lighting >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Environment_EnvironmentObject* Arena::CreateMaybeMessage< ::metamoto::types::Environment_EnvironmentObject >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Environment_EnvironmentObject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Environment* Arena::CreateMaybeMessage< ::metamoto::types::Environment >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Environment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate* Arena::CreateMaybeMessage< ::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::EnvironmentObjectLibrary* Arena::CreateMaybeMessage< ::metamoto::types::EnvironmentObjectLibrary >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::EnvironmentObjectLibrary >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
