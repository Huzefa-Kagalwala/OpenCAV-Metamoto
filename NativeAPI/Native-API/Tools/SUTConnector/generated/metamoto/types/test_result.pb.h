// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/test_result.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2ftest_5fresult_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2ftest_5fresult_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/asset.pb.h"
#include "metamoto/types/ego_vehicle.pb.h"
#include "metamoto/types/pose.pb.h"
#include "metamoto/types/result_metadata.pb.h"
#include "metamoto/types/vehicle_instance.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2ftest_5fresult_2eproto 

namespace protobuf_metamoto_2ftypes_2ftest_5fresult_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2ftest_5fresult_2eproto
namespace metamoto {
namespace types {
class TestResult;
class TestResultDefaultTypeInternal;
extern TestResultDefaultTypeInternal _TestResult_default_instance_;
class TestResult_DataBusTopic;
class TestResult_DataBusTopicDefaultTypeInternal;
extern TestResult_DataBusTopicDefaultTypeInternal _TestResult_DataBusTopic_default_instance_;
class TestResult_DataStream;
class TestResult_DataStreamDefaultTypeInternal;
extern TestResult_DataStreamDefaultTypeInternal _TestResult_DataStream_default_instance_;
class TestResult_Pedestrian;
class TestResult_PedestrianDefaultTypeInternal;
extern TestResult_PedestrianDefaultTypeInternal _TestResult_Pedestrian_default_instance_;
class TestResult_Result;
class TestResult_ResultDefaultTypeInternal;
extern TestResult_ResultDefaultTypeInternal _TestResult_Result_default_instance_;
class TestResult_Statistics;
class TestResult_StatisticsDefaultTypeInternal;
extern TestResult_StatisticsDefaultTypeInternal _TestResult_Statistics_default_instance_;
class TestResult_Vehicle;
class TestResult_VehicleDefaultTypeInternal;
extern TestResult_VehicleDefaultTypeInternal _TestResult_Vehicle_default_instance_;
class TestResult_Vehicle_Binary;
class TestResult_Vehicle_BinaryDefaultTypeInternal;
extern TestResult_Vehicle_BinaryDefaultTypeInternal _TestResult_Vehicle_Binary_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::TestResult* Arena::CreateMaybeMessage<::metamoto::types::TestResult>(Arena*);
template<> ::metamoto::types::TestResult_DataBusTopic* Arena::CreateMaybeMessage<::metamoto::types::TestResult_DataBusTopic>(Arena*);
template<> ::metamoto::types::TestResult_DataStream* Arena::CreateMaybeMessage<::metamoto::types::TestResult_DataStream>(Arena*);
template<> ::metamoto::types::TestResult_Pedestrian* Arena::CreateMaybeMessage<::metamoto::types::TestResult_Pedestrian>(Arena*);
template<> ::metamoto::types::TestResult_Result* Arena::CreateMaybeMessage<::metamoto::types::TestResult_Result>(Arena*);
template<> ::metamoto::types::TestResult_Statistics* Arena::CreateMaybeMessage<::metamoto::types::TestResult_Statistics>(Arena*);
template<> ::metamoto::types::TestResult_Vehicle* Arena::CreateMaybeMessage<::metamoto::types::TestResult_Vehicle>(Arena*);
template<> ::metamoto::types::TestResult_Vehicle_Binary* Arena::CreateMaybeMessage<::metamoto::types::TestResult_Vehicle_Binary>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

enum TestResult_Status {
  TestResult_Status_UNKNOWN = 0,
  TestResult_Status_OTHER = 1,
  TestResult_Status_PASS = 2,
  TestResult_Status_FAIL = 3,
  TestResult_Status_STOP = 4,
  TestResult_Status_ERROR = 5,
  TestResult_Status_PENDING = 6,
  TestResult_Status_RUNNING = 7,
  TestResult_Status_STOPPING = 8,
  TestResult_Status_POST_PROCESSING = 9,
  TestResult_Status_TestResult_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TestResult_Status_TestResult_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TestResult_Status_IsValid(int value);
const TestResult_Status TestResult_Status_Status_MIN = TestResult_Status_UNKNOWN;
const TestResult_Status TestResult_Status_Status_MAX = TestResult_Status_POST_PROCESSING;
const int TestResult_Status_Status_ARRAYSIZE = TestResult_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* TestResult_Status_descriptor();
inline const ::std::string& TestResult_Status_Name(TestResult_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    TestResult_Status_descriptor(), value);
}
inline bool TestResult_Status_Parse(
    const ::std::string& name, TestResult_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TestResult_Status>(
    TestResult_Status_descriptor(), name, value);
}
// ===================================================================

class TestResult_Result : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.TestResult.Result) */ {
 public:
  TestResult_Result();
  virtual ~TestResult_Result();

  TestResult_Result(const TestResult_Result& from);

  inline TestResult_Result& operator=(const TestResult_Result& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestResult_Result(TestResult_Result&& from) noexcept
    : TestResult_Result() {
    *this = ::std::move(from);
  }

  inline TestResult_Result& operator=(TestResult_Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestResult_Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestResult_Result* internal_default_instance() {
    return reinterpret_cast<const TestResult_Result*>(
               &_TestResult_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TestResult_Result* other);
  friend void swap(TestResult_Result& a, TestResult_Result& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestResult_Result* New() const final {
    return CreateMaybeMessage<TestResult_Result>(NULL);
  }

  TestResult_Result* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestResult_Result>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestResult_Result& from);
  void MergeFrom(const TestResult_Result& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestResult_Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // .metamoto.types.TestResult.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::metamoto::types::TestResult_Status status() const;
  void set_status(::metamoto::types::TestResult_Status value);

  // @@protoc_insertion_point(class_scope:metamoto.types.TestResult.Result)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2ftest_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestResult_Statistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.TestResult.Statistics) */ {
 public:
  TestResult_Statistics();
  virtual ~TestResult_Statistics();

  TestResult_Statistics(const TestResult_Statistics& from);

  inline TestResult_Statistics& operator=(const TestResult_Statistics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestResult_Statistics(TestResult_Statistics&& from) noexcept
    : TestResult_Statistics() {
    *this = ::std::move(from);
  }

  inline TestResult_Statistics& operator=(TestResult_Statistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestResult_Statistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestResult_Statistics* internal_default_instance() {
    return reinterpret_cast<const TestResult_Statistics*>(
               &_TestResult_Statistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TestResult_Statistics* other);
  friend void swap(TestResult_Statistics& a, TestResult_Statistics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestResult_Statistics* New() const final {
    return CreateMaybeMessage<TestResult_Statistics>(NULL);
  }

  TestResult_Statistics* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestResult_Statistics>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestResult_Statistics& from);
  void MergeFrom(const TestResult_Statistics& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestResult_Statistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float simulation_time = 1;
  void clear_simulation_time();
  static const int kSimulationTimeFieldNumber = 1;
  float simulation_time() const;
  void set_simulation_time(float value);

  // float real_time = 2;
  void clear_real_time();
  static const int kRealTimeFieldNumber = 2;
  float real_time() const;
  void set_real_time(float value);

  // float render_frame_rate = 3;
  void clear_render_frame_rate();
  static const int kRenderFrameRateFieldNumber = 3;
  float render_frame_rate() const;
  void set_render_frame_rate(float value);

  // float physics_frame_rate = 4;
  void clear_physics_frame_rate();
  static const int kPhysicsFrameRateFieldNumber = 4;
  float physics_frame_rate() const;
  void set_physics_frame_rate(float value);

  // @@protoc_insertion_point(class_scope:metamoto.types.TestResult.Statistics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float simulation_time_;
  float real_time_;
  float render_frame_rate_;
  float physics_frame_rate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2ftest_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestResult_DataBusTopic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.TestResult.DataBusTopic) */ {
 public:
  TestResult_DataBusTopic();
  virtual ~TestResult_DataBusTopic();

  TestResult_DataBusTopic(const TestResult_DataBusTopic& from);

  inline TestResult_DataBusTopic& operator=(const TestResult_DataBusTopic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestResult_DataBusTopic(TestResult_DataBusTopic&& from) noexcept
    : TestResult_DataBusTopic() {
    *this = ::std::move(from);
  }

  inline TestResult_DataBusTopic& operator=(TestResult_DataBusTopic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestResult_DataBusTopic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestResult_DataBusTopic* internal_default_instance() {
    return reinterpret_cast<const TestResult_DataBusTopic*>(
               &_TestResult_DataBusTopic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TestResult_DataBusTopic* other);
  friend void swap(TestResult_DataBusTopic& a, TestResult_DataBusTopic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestResult_DataBusTopic* New() const final {
    return CreateMaybeMessage<TestResult_DataBusTopic>(NULL);
  }

  TestResult_DataBusTopic* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestResult_DataBusTopic>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestResult_DataBusTopic& from);
  void MergeFrom(const TestResult_DataBusTopic& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestResult_DataBusTopic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string message_file = 2;
  void clear_message_file();
  static const int kMessageFileFieldNumber = 2;
  const ::std::string& message_file() const;
  void set_message_file(const ::std::string& value);
  #if LANG_CXX11
  void set_message_file(::std::string&& value);
  #endif
  void set_message_file(const char* value);
  void set_message_file(const char* value, size_t size);
  ::std::string* mutable_message_file();
  ::std::string* release_message_file();
  void set_allocated_message_file(::std::string* message_file);

  // @@protoc_insertion_point(class_scope:metamoto.types.TestResult.DataBusTopic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr message_file_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2ftest_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestResult_Vehicle_Binary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.TestResult.Vehicle.Binary) */ {
 public:
  TestResult_Vehicle_Binary();
  virtual ~TestResult_Vehicle_Binary();

  TestResult_Vehicle_Binary(const TestResult_Vehicle_Binary& from);

  inline TestResult_Vehicle_Binary& operator=(const TestResult_Vehicle_Binary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestResult_Vehicle_Binary(TestResult_Vehicle_Binary&& from) noexcept
    : TestResult_Vehicle_Binary() {
    *this = ::std::move(from);
  }

  inline TestResult_Vehicle_Binary& operator=(TestResult_Vehicle_Binary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestResult_Vehicle_Binary& default_instance();

  enum TypeOneofCase {
    kController = 1,
    kSensor = 2,
    TYPE_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestResult_Vehicle_Binary* internal_default_instance() {
    return reinterpret_cast<const TestResult_Vehicle_Binary*>(
               &_TestResult_Vehicle_Binary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TestResult_Vehicle_Binary* other);
  friend void swap(TestResult_Vehicle_Binary& a, TestResult_Vehicle_Binary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestResult_Vehicle_Binary* New() const final {
    return CreateMaybeMessage<TestResult_Vehicle_Binary>(NULL);
  }

  TestResult_Vehicle_Binary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestResult_Vehicle_Binary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestResult_Vehicle_Binary& from);
  void MergeFrom(const TestResult_Vehicle_Binary& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestResult_Vehicle_Binary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.ResultMetadata results_data = 4;
  int results_data_size() const;
  void clear_results_data();
  static const int kResultsDataFieldNumber = 4;
  ::metamoto::types::ResultMetadata* mutable_results_data(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata >*
      mutable_results_data();
  const ::metamoto::types::ResultMetadata& results_data(int index) const;
  ::metamoto::types::ResultMetadata* add_results_data();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata >&
      results_data() const;

  // string results_directory = 3;
  void clear_results_directory();
  static const int kResultsDirectoryFieldNumber = 3;
  const ::std::string& results_directory() const;
  void set_results_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_results_directory(::std::string&& value);
  #endif
  void set_results_directory(const char* value);
  void set_results_directory(const char* value, size_t size);
  ::std::string* mutable_results_directory();
  ::std::string* release_results_directory();
  void set_allocated_results_directory(::std::string* results_directory);

  // .metamoto.types.Controller controller = 1;
  bool has_controller() const;
  void clear_controller();
  static const int kControllerFieldNumber = 1;
  private:
  const ::metamoto::types::Controller& _internal_controller() const;
  public:
  const ::metamoto::types::Controller& controller() const;
  ::metamoto::types::Controller* release_controller();
  ::metamoto::types::Controller* mutable_controller();
  void set_allocated_controller(::metamoto::types::Controller* controller);

  // .metamoto.types.Sensor sensor = 2;
  bool has_sensor() const;
  void clear_sensor();
  static const int kSensorFieldNumber = 2;
  private:
  const ::metamoto::types::Sensor& _internal_sensor() const;
  public:
  const ::metamoto::types::Sensor& sensor() const;
  ::metamoto::types::Sensor* release_sensor();
  ::metamoto::types::Sensor* mutable_sensor();
  void set_allocated_sensor(::metamoto::types::Sensor* sensor);

  void clear_type_oneof();
  TypeOneofCase type_oneof_case() const;
  // @@protoc_insertion_point(class_scope:metamoto.types.TestResult.Vehicle.Binary)
 private:
  void set_has_controller();
  void set_has_sensor();

  inline bool has_type_oneof() const;
  inline void clear_has_type_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata > results_data_;
  ::google::protobuf::internal::ArenaStringPtr results_directory_;
  union TypeOneofUnion {
    TypeOneofUnion() {}
    ::metamoto::types::Controller* controller_;
    ::metamoto::types::Sensor* sensor_;
  } type_oneof_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_metamoto_2ftypes_2ftest_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestResult_Vehicle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.TestResult.Vehicle) */ {
 public:
  TestResult_Vehicle();
  virtual ~TestResult_Vehicle();

  TestResult_Vehicle(const TestResult_Vehicle& from);

  inline TestResult_Vehicle& operator=(const TestResult_Vehicle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestResult_Vehicle(TestResult_Vehicle&& from) noexcept
    : TestResult_Vehicle() {
    *this = ::std::move(from);
  }

  inline TestResult_Vehicle& operator=(TestResult_Vehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestResult_Vehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestResult_Vehicle* internal_default_instance() {
    return reinterpret_cast<const TestResult_Vehicle*>(
               &_TestResult_Vehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TestResult_Vehicle* other);
  friend void swap(TestResult_Vehicle& a, TestResult_Vehicle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestResult_Vehicle* New() const final {
    return CreateMaybeMessage<TestResult_Vehicle>(NULL);
  }

  TestResult_Vehicle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestResult_Vehicle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestResult_Vehicle& from);
  void MergeFrom(const TestResult_Vehicle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestResult_Vehicle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestResult_Vehicle_Binary Binary;

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.TestResult.Vehicle.Binary binaries = 4;
  int binaries_size() const;
  void clear_binaries();
  static const int kBinariesFieldNumber = 4;
  ::metamoto::types::TestResult_Vehicle_Binary* mutable_binaries(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Vehicle_Binary >*
      mutable_binaries();
  const ::metamoto::types::TestResult_Vehicle_Binary& binaries(int index) const;
  ::metamoto::types::TestResult_Vehicle_Binary* add_binaries();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Vehicle_Binary >&
      binaries() const;

  // repeated .metamoto.types.SensorMount sensor_mounts = 5;
  int sensor_mounts_size() const;
  void clear_sensor_mounts();
  static const int kSensorMountsFieldNumber = 5;
  ::metamoto::types::SensorMount* mutable_sensor_mounts(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::SensorMount >*
      mutable_sensor_mounts();
  const ::metamoto::types::SensorMount& sensor_mounts(int index) const;
  ::metamoto::types::SensorMount* add_sensor_mounts();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::SensorMount >&
      sensor_mounts() const;

  // repeated .metamoto.types.TestResult.DataBusTopic topics = 8;
  int topics_size() const;
  void clear_topics();
  static const int kTopicsFieldNumber = 8;
  ::metamoto::types::TestResult_DataBusTopic* mutable_topics(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataBusTopic >*
      mutable_topics();
  const ::metamoto::types::TestResult_DataBusTopic& topics(int index) const;
  ::metamoto::types::TestResult_DataBusTopic* add_topics();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataBusTopic >&
      topics() const;

  // repeated .metamoto.types.TestResult.DataStream data_streams = 9;
  int data_streams_size() const;
  void clear_data_streams();
  static const int kDataStreamsFieldNumber = 9;
  ::metamoto::types::TestResult_DataStream* mutable_data_streams(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataStream >*
      mutable_data_streams();
  const ::metamoto::types::TestResult_DataStream& data_streams(int index) const;
  ::metamoto::types::TestResult_DataStream* add_data_streams();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataStream >&
      data_streams() const;

  // string transforms_file = 2;
  void clear_transforms_file();
  static const int kTransformsFileFieldNumber = 2;
  const ::std::string& transforms_file() const;
  void set_transforms_file(const ::std::string& value);
  #if LANG_CXX11
  void set_transforms_file(::std::string&& value);
  #endif
  void set_transforms_file(const char* value);
  void set_transforms_file(const char* value, size_t size);
  ::std::string* mutable_transforms_file();
  ::std::string* release_transforms_file();
  void set_allocated_transforms_file(::std::string* transforms_file);

  // string id = 6;
  void clear_id();
  static const int kIdFieldNumber = 6;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string results_directory = 7;
  void clear_results_directory();
  static const int kResultsDirectoryFieldNumber = 7;
  const ::std::string& results_directory() const;
  void set_results_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_results_directory(::std::string&& value);
  #endif
  void set_results_directory(const char* value);
  void set_results_directory(const char* value, size_t size);
  ::std::string* mutable_results_directory();
  ::std::string* release_results_directory();
  void set_allocated_results_directory(::std::string* results_directory);

  // string visualizations_file = 10;
  void clear_visualizations_file();
  static const int kVisualizationsFileFieldNumber = 10;
  const ::std::string& visualizations_file() const;
  void set_visualizations_file(const ::std::string& value);
  #if LANG_CXX11
  void set_visualizations_file(::std::string&& value);
  #endif
  void set_visualizations_file(const char* value);
  void set_visualizations_file(const char* value, size_t size);
  ::std::string* mutable_visualizations_file();
  ::std::string* release_visualizations_file();
  void set_allocated_visualizations_file(::std::string* visualizations_file);

  // .metamoto.types.VehicleInstance instance = 1;
  bool has_instance() const;
  void clear_instance();
  static const int kInstanceFieldNumber = 1;
  private:
  const ::metamoto::types::VehicleInstance& _internal_instance() const;
  public:
  const ::metamoto::types::VehicleInstance& instance() const;
  ::metamoto::types::VehicleInstance* release_instance();
  ::metamoto::types::VehicleInstance* mutable_instance();
  void set_allocated_instance(::metamoto::types::VehicleInstance* instance);

  // .metamoto.types.Pose pose = 3;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 3;
  private:
  const ::metamoto::types::Pose& _internal_pose() const;
  public:
  const ::metamoto::types::Pose& pose() const;
  ::metamoto::types::Pose* release_pose();
  ::metamoto::types::Pose* mutable_pose();
  void set_allocated_pose(::metamoto::types::Pose* pose);

  // @@protoc_insertion_point(class_scope:metamoto.types.TestResult.Vehicle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Vehicle_Binary > binaries_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::SensorMount > sensor_mounts_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataBusTopic > topics_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataStream > data_streams_;
  ::google::protobuf::internal::ArenaStringPtr transforms_file_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr results_directory_;
  ::google::protobuf::internal::ArenaStringPtr visualizations_file_;
  ::metamoto::types::VehicleInstance* instance_;
  ::metamoto::types::Pose* pose_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2ftest_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestResult_Pedestrian : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.TestResult.Pedestrian) */ {
 public:
  TestResult_Pedestrian();
  virtual ~TestResult_Pedestrian();

  TestResult_Pedestrian(const TestResult_Pedestrian& from);

  inline TestResult_Pedestrian& operator=(const TestResult_Pedestrian& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestResult_Pedestrian(TestResult_Pedestrian&& from) noexcept
    : TestResult_Pedestrian() {
    *this = ::std::move(from);
  }

  inline TestResult_Pedestrian& operator=(TestResult_Pedestrian&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestResult_Pedestrian& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestResult_Pedestrian* internal_default_instance() {
    return reinterpret_cast<const TestResult_Pedestrian*>(
               &_TestResult_Pedestrian_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TestResult_Pedestrian* other);
  friend void swap(TestResult_Pedestrian& a, TestResult_Pedestrian& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestResult_Pedestrian* New() const final {
    return CreateMaybeMessage<TestResult_Pedestrian>(NULL);
  }

  TestResult_Pedestrian* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestResult_Pedestrian>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestResult_Pedestrian& from);
  void MergeFrom(const TestResult_Pedestrian& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestResult_Pedestrian* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string transforms_file = 2;
  void clear_transforms_file();
  static const int kTransformsFileFieldNumber = 2;
  const ::std::string& transforms_file() const;
  void set_transforms_file(const ::std::string& value);
  #if LANG_CXX11
  void set_transforms_file(::std::string&& value);
  #endif
  void set_transforms_file(const char* value);
  void set_transforms_file(const char* value, size_t size);
  ::std::string* mutable_transforms_file();
  ::std::string* release_transforms_file();
  void set_allocated_transforms_file(::std::string* transforms_file);

  // @@protoc_insertion_point(class_scope:metamoto.types.TestResult.Pedestrian)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr transforms_file_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2ftest_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestResult_DataStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.TestResult.DataStream) */ {
 public:
  TestResult_DataStream();
  virtual ~TestResult_DataStream();

  TestResult_DataStream(const TestResult_DataStream& from);

  inline TestResult_DataStream& operator=(const TestResult_DataStream& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestResult_DataStream(TestResult_DataStream&& from) noexcept
    : TestResult_DataStream() {
    *this = ::std::move(from);
  }

  inline TestResult_DataStream& operator=(TestResult_DataStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestResult_DataStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestResult_DataStream* internal_default_instance() {
    return reinterpret_cast<const TestResult_DataStream*>(
               &_TestResult_DataStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(TestResult_DataStream* other);
  friend void swap(TestResult_DataStream& a, TestResult_DataStream& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestResult_DataStream* New() const final {
    return CreateMaybeMessage<TestResult_DataStream>(NULL);
  }

  TestResult_DataStream* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestResult_DataStream>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestResult_DataStream& from);
  void MergeFrom(const TestResult_DataStream& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestResult_DataStream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string units = 3;
  void clear_units();
  static const int kUnitsFieldNumber = 3;
  const ::std::string& units() const;
  void set_units(const ::std::string& value);
  #if LANG_CXX11
  void set_units(::std::string&& value);
  #endif
  void set_units(const char* value);
  void set_units(const char* value, size_t size);
  ::std::string* mutable_units();
  ::std::string* release_units();
  void set_allocated_units(::std::string* units);

  // string filename = 4;
  void clear_filename();
  static const int kFilenameFieldNumber = 4;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:metamoto.types.TestResult.DataStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr units_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2ftest_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.TestResult) */ {
 public:
  TestResult();
  virtual ~TestResult();

  TestResult(const TestResult& from);

  inline TestResult& operator=(const TestResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestResult(TestResult&& from) noexcept
    : TestResult() {
    *this = ::std::move(from);
  }

  inline TestResult& operator=(TestResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestResult* internal_default_instance() {
    return reinterpret_cast<const TestResult*>(
               &_TestResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TestResult* other);
  friend void swap(TestResult& a, TestResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestResult* New() const final {
    return CreateMaybeMessage<TestResult>(NULL);
  }

  TestResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestResult& from);
  void MergeFrom(const TestResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestResult_Result Result;
  typedef TestResult_Statistics Statistics;
  typedef TestResult_DataBusTopic DataBusTopic;
  typedef TestResult_Vehicle Vehicle;
  typedef TestResult_Pedestrian Pedestrian;
  typedef TestResult_DataStream DataStream;

  typedef TestResult_Status Status;
  static const Status UNKNOWN =
    TestResult_Status_UNKNOWN;
  static const Status OTHER =
    TestResult_Status_OTHER;
  static const Status PASS =
    TestResult_Status_PASS;
  static const Status FAIL =
    TestResult_Status_FAIL;
  static const Status STOP =
    TestResult_Status_STOP;
  static const Status ERROR =
    TestResult_Status_ERROR;
  static const Status PENDING =
    TestResult_Status_PENDING;
  static const Status RUNNING =
    TestResult_Status_RUNNING;
  static const Status STOPPING =
    TestResult_Status_STOPPING;
  static const Status POST_PROCESSING =
    TestResult_Status_POST_PROCESSING;
  static inline bool Status_IsValid(int value) {
    return TestResult_Status_IsValid(value);
  }
  static const Status Status_MIN =
    TestResult_Status_Status_MIN;
  static const Status Status_MAX =
    TestResult_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    TestResult_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return TestResult_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return TestResult_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return TestResult_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.TestResult.DataBusTopic topics = 6;
  int topics_size() const;
  void clear_topics();
  static const int kTopicsFieldNumber = 6;
  ::metamoto::types::TestResult_DataBusTopic* mutable_topics(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataBusTopic >*
      mutable_topics();
  const ::metamoto::types::TestResult_DataBusTopic& topics(int index) const;
  ::metamoto::types::TestResult_DataBusTopic* add_topics();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataBusTopic >&
      topics() const;

  // repeated .metamoto.types.TestResult.Vehicle vehicles = 15;
  int vehicles_size() const;
  void clear_vehicles();
  static const int kVehiclesFieldNumber = 15;
  ::metamoto::types::TestResult_Vehicle* mutable_vehicles(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Vehicle >*
      mutable_vehicles();
  const ::metamoto::types::TestResult_Vehicle& vehicles(int index) const;
  ::metamoto::types::TestResult_Vehicle* add_vehicles();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Vehicle >&
      vehicles() const;

  // repeated .metamoto.types.TestResult.Pedestrian pedestrians = 16;
  int pedestrians_size() const;
  void clear_pedestrians();
  static const int kPedestriansFieldNumber = 16;
  ::metamoto::types::TestResult_Pedestrian* mutable_pedestrians(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Pedestrian >*
      mutable_pedestrians();
  const ::metamoto::types::TestResult_Pedestrian& pedestrians(int index) const;
  ::metamoto::types::TestResult_Pedestrian* add_pedestrians();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Pedestrian >&
      pedestrians() const;

  // repeated string final_view_files = 17;
  int final_view_files_size() const;
  void clear_final_view_files();
  static const int kFinalViewFilesFieldNumber = 17;
  const ::std::string& final_view_files(int index) const;
  ::std::string* mutable_final_view_files(int index);
  void set_final_view_files(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_final_view_files(int index, ::std::string&& value);
  #endif
  void set_final_view_files(int index, const char* value);
  void set_final_view_files(int index, const char* value, size_t size);
  ::std::string* add_final_view_files();
  void add_final_view_files(const ::std::string& value);
  #if LANG_CXX11
  void add_final_view_files(::std::string&& value);
  #endif
  void add_final_view_files(const char* value);
  void add_final_view_files(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& final_view_files() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_final_view_files();

  // repeated .metamoto.types.TestResult.DataStream data_streams = 18;
  int data_streams_size() const;
  void clear_data_streams();
  static const int kDataStreamsFieldNumber = 18;
  ::metamoto::types::TestResult_DataStream* mutable_data_streams(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataStream >*
      mutable_data_streams();
  const ::metamoto::types::TestResult_DataStream& data_streams(int index) const;
  ::metamoto::types::TestResult_DataStream* add_data_streams();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataStream >&
      data_streams() const;

  // repeated .metamoto.types.Asset assets = 19;
  int assets_size() const;
  void clear_assets();
  static const int kAssetsFieldNumber = 19;
  ::metamoto::types::Asset* mutable_assets(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Asset >*
      mutable_assets();
  const ::metamoto::types::Asset& assets(int index) const;
  ::metamoto::types::Asset* add_assets();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Asset >&
      assets() const;

  // repeated .metamoto.types.TestResult.Vehicle ego_vehicles = 20;
  int ego_vehicles_size() const;
  void clear_ego_vehicles();
  static const int kEgoVehiclesFieldNumber = 20;
  ::metamoto::types::TestResult_Vehicle* mutable_ego_vehicles(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Vehicle >*
      mutable_ego_vehicles();
  const ::metamoto::types::TestResult_Vehicle& ego_vehicles(int index) const;
  ::metamoto::types::TestResult_Vehicle* add_ego_vehicles();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Vehicle >&
      ego_vehicles() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(::std::string&& value);
  #endif
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // string test_engine_version = 3;
  void clear_test_engine_version();
  static const int kTestEngineVersionFieldNumber = 3;
  const ::std::string& test_engine_version() const;
  void set_test_engine_version(const ::std::string& value);
  #if LANG_CXX11
  void set_test_engine_version(::std::string&& value);
  #endif
  void set_test_engine_version(const char* value);
  void set_test_engine_version(const char* value, size_t size);
  ::std::string* mutable_test_engine_version();
  ::std::string* release_test_engine_version();
  void set_allocated_test_engine_version(::std::string* test_engine_version);

  // string test_case_file = 7;
  void clear_test_case_file();
  static const int kTestCaseFileFieldNumber = 7;
  const ::std::string& test_case_file() const;
  void set_test_case_file(const ::std::string& value);
  #if LANG_CXX11
  void set_test_case_file(::std::string&& value);
  #endif
  void set_test_case_file(const char* value);
  void set_test_case_file(const char* value, size_t size);
  ::std::string* mutable_test_case_file();
  ::std::string* release_test_case_file();
  void set_allocated_test_case_file(::std::string* test_case_file);

  // string log_file = 8;
  void clear_log_file();
  static const int kLogFileFieldNumber = 8;
  const ::std::string& log_file() const;
  void set_log_file(const ::std::string& value);
  #if LANG_CXX11
  void set_log_file(::std::string&& value);
  #endif
  void set_log_file(const char* value);
  void set_log_file(const char* value, size_t size);
  ::std::string* mutable_log_file();
  ::std::string* release_log_file();
  void set_allocated_log_file(::std::string* log_file);

  // string intersection_series_log_file = 9;
  void clear_intersection_series_log_file();
  static const int kIntersectionSeriesLogFileFieldNumber = 9;
  const ::std::string& intersection_series_log_file() const;
  void set_intersection_series_log_file(const ::std::string& value);
  #if LANG_CXX11
  void set_intersection_series_log_file(::std::string&& value);
  #endif
  void set_intersection_series_log_file(const char* value);
  void set_intersection_series_log_file(const char* value, size_t size);
  ::std::string* mutable_intersection_series_log_file();
  ::std::string* release_intersection_series_log_file();
  void set_allocated_intersection_series_log_file(::std::string* intersection_series_log_file);

  // string transforms_directory = 10;
  void clear_transforms_directory();
  static const int kTransformsDirectoryFieldNumber = 10;
  const ::std::string& transforms_directory() const;
  void set_transforms_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_transforms_directory(::std::string&& value);
  #endif
  void set_transforms_directory(const char* value);
  void set_transforms_directory(const char* value, size_t size);
  ::std::string* mutable_transforms_directory();
  ::std::string* release_transforms_directory();
  void set_allocated_transforms_directory(::std::string* transforms_directory);

  // string data_streams_directory = 11;
  void clear_data_streams_directory();
  static const int kDataStreamsDirectoryFieldNumber = 11;
  const ::std::string& data_streams_directory() const;
  void set_data_streams_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_data_streams_directory(::std::string&& value);
  #endif
  void set_data_streams_directory(const char* value);
  void set_data_streams_directory(const char* value, size_t size);
  ::std::string* mutable_data_streams_directory();
  ::std::string* release_data_streams_directory();
  void set_allocated_data_streams_directory(::std::string* data_streams_directory);

  // string final_views_directory = 12;
  void clear_final_views_directory();
  static const int kFinalViewsDirectoryFieldNumber = 12;
  const ::std::string& final_views_directory() const;
  void set_final_views_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_final_views_directory(::std::string&& value);
  #endif
  void set_final_views_directory(const char* value);
  void set_final_views_directory(const char* value, size_t size);
  ::std::string* mutable_final_views_directory();
  ::std::string* release_final_views_directory();
  void set_allocated_final_views_directory(::std::string* final_views_directory);

  // string data_bus_directory = 13;
  void clear_data_bus_directory();
  static const int kDataBusDirectoryFieldNumber = 13;
  const ::std::string& data_bus_directory() const;
  void set_data_bus_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_data_bus_directory(::std::string&& value);
  #endif
  void set_data_bus_directory(const char* value);
  void set_data_bus_directory(const char* value, size_t size);
  ::std::string* mutable_data_bus_directory();
  ::std::string* release_data_bus_directory();
  void set_allocated_data_bus_directory(::std::string* data_bus_directory);

  // .metamoto.types.TestResult.Result result = 4;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 4;
  private:
  const ::metamoto::types::TestResult_Result& _internal_result() const;
  public:
  const ::metamoto::types::TestResult_Result& result() const;
  ::metamoto::types::TestResult_Result* release_result();
  ::metamoto::types::TestResult_Result* mutable_result();
  void set_allocated_result(::metamoto::types::TestResult_Result* result);

  // .metamoto.types.TestResult.Statistics statistics = 5;
  bool has_statistics() const;
  void clear_statistics();
  static const int kStatisticsFieldNumber = 5;
  private:
  const ::metamoto::types::TestResult_Statistics& _internal_statistics() const;
  public:
  const ::metamoto::types::TestResult_Statistics& statistics() const;
  ::metamoto::types::TestResult_Statistics* release_statistics();
  ::metamoto::types::TestResult_Statistics* mutable_statistics();
  void set_allocated_statistics(::metamoto::types::TestResult_Statistics* statistics);

  // .metamoto.types.TestResult.Vehicle ego_vehicle = 14;
  bool has_ego_vehicle() const;
  void clear_ego_vehicle();
  static const int kEgoVehicleFieldNumber = 14;
  private:
  const ::metamoto::types::TestResult_Vehicle& _internal_ego_vehicle() const;
  public:
  const ::metamoto::types::TestResult_Vehicle& ego_vehicle() const;
  ::metamoto::types::TestResult_Vehicle* release_ego_vehicle();
  ::metamoto::types::TestResult_Vehicle* mutable_ego_vehicle();
  void set_allocated_ego_vehicle(::metamoto::types::TestResult_Vehicle* ego_vehicle);

  // @@protoc_insertion_point(class_scope:metamoto.types.TestResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataBusTopic > topics_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Vehicle > vehicles_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Pedestrian > pedestrians_;
  ::google::protobuf::RepeatedPtrField< ::std::string> final_view_files_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataStream > data_streams_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Asset > assets_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Vehicle > ego_vehicles_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  ::google::protobuf::internal::ArenaStringPtr test_engine_version_;
  ::google::protobuf::internal::ArenaStringPtr test_case_file_;
  ::google::protobuf::internal::ArenaStringPtr log_file_;
  ::google::protobuf::internal::ArenaStringPtr intersection_series_log_file_;
  ::google::protobuf::internal::ArenaStringPtr transforms_directory_;
  ::google::protobuf::internal::ArenaStringPtr data_streams_directory_;
  ::google::protobuf::internal::ArenaStringPtr final_views_directory_;
  ::google::protobuf::internal::ArenaStringPtr data_bus_directory_;
  ::metamoto::types::TestResult_Result* result_;
  ::metamoto::types::TestResult_Statistics* statistics_;
  ::metamoto::types::TestResult_Vehicle* ego_vehicle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2ftest_5fresult_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestResult_Result

// .metamoto.types.TestResult.Status status = 1;
inline void TestResult_Result::clear_status() {
  status_ = 0;
}
inline ::metamoto::types::TestResult_Status TestResult_Result::status() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Result.status)
  return static_cast< ::metamoto::types::TestResult_Status >(status_);
}
inline void TestResult_Result::set_status(::metamoto::types::TestResult_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.Result.status)
}

// string reason = 2;
inline void TestResult_Result::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult_Result::reason() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Result.reason)
  return reason_.GetNoArena();
}
inline void TestResult_Result::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.Result.reason)
}
#if LANG_CXX11
inline void TestResult_Result::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.Result.reason)
}
#endif
inline void TestResult_Result::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.Result.reason)
}
inline void TestResult_Result::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.Result.reason)
}
inline ::std::string* TestResult_Result::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.Result.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult_Result::release_reason() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.Result.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult_Result::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.Result.reason)
}

// -------------------------------------------------------------------

// TestResult_Statistics

// float simulation_time = 1;
inline void TestResult_Statistics::clear_simulation_time() {
  simulation_time_ = 0;
}
inline float TestResult_Statistics::simulation_time() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Statistics.simulation_time)
  return simulation_time_;
}
inline void TestResult_Statistics::set_simulation_time(float value) {
  
  simulation_time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.Statistics.simulation_time)
}

// float real_time = 2;
inline void TestResult_Statistics::clear_real_time() {
  real_time_ = 0;
}
inline float TestResult_Statistics::real_time() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Statistics.real_time)
  return real_time_;
}
inline void TestResult_Statistics::set_real_time(float value) {
  
  real_time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.Statistics.real_time)
}

// float render_frame_rate = 3;
inline void TestResult_Statistics::clear_render_frame_rate() {
  render_frame_rate_ = 0;
}
inline float TestResult_Statistics::render_frame_rate() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Statistics.render_frame_rate)
  return render_frame_rate_;
}
inline void TestResult_Statistics::set_render_frame_rate(float value) {
  
  render_frame_rate_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.Statistics.render_frame_rate)
}

// float physics_frame_rate = 4;
inline void TestResult_Statistics::clear_physics_frame_rate() {
  physics_frame_rate_ = 0;
}
inline float TestResult_Statistics::physics_frame_rate() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Statistics.physics_frame_rate)
  return physics_frame_rate_;
}
inline void TestResult_Statistics::set_physics_frame_rate(float value) {
  
  physics_frame_rate_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.Statistics.physics_frame_rate)
}

// -------------------------------------------------------------------

// TestResult_DataBusTopic

// string name = 1;
inline void TestResult_DataBusTopic::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult_DataBusTopic::name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.DataBusTopic.name)
  return name_.GetNoArena();
}
inline void TestResult_DataBusTopic::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.DataBusTopic.name)
}
#if LANG_CXX11
inline void TestResult_DataBusTopic::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.DataBusTopic.name)
}
#endif
inline void TestResult_DataBusTopic::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.DataBusTopic.name)
}
inline void TestResult_DataBusTopic::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.DataBusTopic.name)
}
inline ::std::string* TestResult_DataBusTopic::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.DataBusTopic.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult_DataBusTopic::release_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.DataBusTopic.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult_DataBusTopic::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.DataBusTopic.name)
}

// string message_file = 2;
inline void TestResult_DataBusTopic::clear_message_file() {
  message_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult_DataBusTopic::message_file() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.DataBusTopic.message_file)
  return message_file_.GetNoArena();
}
inline void TestResult_DataBusTopic::set_message_file(const ::std::string& value) {
  
  message_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.DataBusTopic.message_file)
}
#if LANG_CXX11
inline void TestResult_DataBusTopic::set_message_file(::std::string&& value) {
  
  message_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.DataBusTopic.message_file)
}
#endif
inline void TestResult_DataBusTopic::set_message_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.DataBusTopic.message_file)
}
inline void TestResult_DataBusTopic::set_message_file(const char* value, size_t size) {
  
  message_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.DataBusTopic.message_file)
}
inline ::std::string* TestResult_DataBusTopic::mutable_message_file() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.DataBusTopic.message_file)
  return message_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult_DataBusTopic::release_message_file() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.DataBusTopic.message_file)
  
  return message_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult_DataBusTopic::set_allocated_message_file(::std::string* message_file) {
  if (message_file != NULL) {
    
  } else {
    
  }
  message_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_file);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.DataBusTopic.message_file)
}

// -------------------------------------------------------------------

// TestResult_Vehicle_Binary

// .metamoto.types.Controller controller = 1;
inline bool TestResult_Vehicle_Binary::has_controller() const {
  return type_oneof_case() == kController;
}
inline void TestResult_Vehicle_Binary::set_has_controller() {
  _oneof_case_[0] = kController;
}
inline const ::metamoto::types::Controller& TestResult_Vehicle_Binary::_internal_controller() const {
  return *type_oneof_.controller_;
}
inline ::metamoto::types::Controller* TestResult_Vehicle_Binary::release_controller() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.Vehicle.Binary.controller)
  if (has_controller()) {
    clear_has_type_oneof();
      ::metamoto::types::Controller* temp = type_oneof_.controller_;
    type_oneof_.controller_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::types::Controller& TestResult_Vehicle_Binary::controller() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Vehicle.Binary.controller)
  return has_controller()
      ? *type_oneof_.controller_
      : *reinterpret_cast< ::metamoto::types::Controller*>(&::metamoto::types::_Controller_default_instance_);
}
inline ::metamoto::types::Controller* TestResult_Vehicle_Binary::mutable_controller() {
  if (!has_controller()) {
    clear_type_oneof();
    set_has_controller();
    type_oneof_.controller_ = CreateMaybeMessage< ::metamoto::types::Controller >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.Vehicle.Binary.controller)
  return type_oneof_.controller_;
}

// .metamoto.types.Sensor sensor = 2;
inline bool TestResult_Vehicle_Binary::has_sensor() const {
  return type_oneof_case() == kSensor;
}
inline void TestResult_Vehicle_Binary::set_has_sensor() {
  _oneof_case_[0] = kSensor;
}
inline const ::metamoto::types::Sensor& TestResult_Vehicle_Binary::_internal_sensor() const {
  return *type_oneof_.sensor_;
}
inline ::metamoto::types::Sensor* TestResult_Vehicle_Binary::release_sensor() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.Vehicle.Binary.sensor)
  if (has_sensor()) {
    clear_has_type_oneof();
      ::metamoto::types::Sensor* temp = type_oneof_.sensor_;
    type_oneof_.sensor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::metamoto::types::Sensor& TestResult_Vehicle_Binary::sensor() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Vehicle.Binary.sensor)
  return has_sensor()
      ? *type_oneof_.sensor_
      : *reinterpret_cast< ::metamoto::types::Sensor*>(&::metamoto::types::_Sensor_default_instance_);
}
inline ::metamoto::types::Sensor* TestResult_Vehicle_Binary::mutable_sensor() {
  if (!has_sensor()) {
    clear_type_oneof();
    set_has_sensor();
    type_oneof_.sensor_ = CreateMaybeMessage< ::metamoto::types::Sensor >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.Vehicle.Binary.sensor)
  return type_oneof_.sensor_;
}

// string results_directory = 3;
inline void TestResult_Vehicle_Binary::clear_results_directory() {
  results_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult_Vehicle_Binary::results_directory() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Vehicle.Binary.results_directory)
  return results_directory_.GetNoArena();
}
inline void TestResult_Vehicle_Binary::set_results_directory(const ::std::string& value) {
  
  results_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.Vehicle.Binary.results_directory)
}
#if LANG_CXX11
inline void TestResult_Vehicle_Binary::set_results_directory(::std::string&& value) {
  
  results_directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.Vehicle.Binary.results_directory)
}
#endif
inline void TestResult_Vehicle_Binary::set_results_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  results_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.Vehicle.Binary.results_directory)
}
inline void TestResult_Vehicle_Binary::set_results_directory(const char* value, size_t size) {
  
  results_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.Vehicle.Binary.results_directory)
}
inline ::std::string* TestResult_Vehicle_Binary::mutable_results_directory() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.Vehicle.Binary.results_directory)
  return results_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult_Vehicle_Binary::release_results_directory() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.Vehicle.Binary.results_directory)
  
  return results_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult_Vehicle_Binary::set_allocated_results_directory(::std::string* results_directory) {
  if (results_directory != NULL) {
    
  } else {
    
  }
  results_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), results_directory);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.Vehicle.Binary.results_directory)
}

// repeated .metamoto.types.ResultMetadata results_data = 4;
inline int TestResult_Vehicle_Binary::results_data_size() const {
  return results_data_.size();
}
inline ::metamoto::types::ResultMetadata* TestResult_Vehicle_Binary::mutable_results_data(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.Vehicle.Binary.results_data)
  return results_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata >*
TestResult_Vehicle_Binary::mutable_results_data() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.TestResult.Vehicle.Binary.results_data)
  return &results_data_;
}
inline const ::metamoto::types::ResultMetadata& TestResult_Vehicle_Binary::results_data(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Vehicle.Binary.results_data)
  return results_data_.Get(index);
}
inline ::metamoto::types::ResultMetadata* TestResult_Vehicle_Binary::add_results_data() {
  // @@protoc_insertion_point(field_add:metamoto.types.TestResult.Vehicle.Binary.results_data)
  return results_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::ResultMetadata >&
TestResult_Vehicle_Binary::results_data() const {
  // @@protoc_insertion_point(field_list:metamoto.types.TestResult.Vehicle.Binary.results_data)
  return results_data_;
}

inline bool TestResult_Vehicle_Binary::has_type_oneof() const {
  return type_oneof_case() != TYPE_ONEOF_NOT_SET;
}
inline void TestResult_Vehicle_Binary::clear_has_type_oneof() {
  _oneof_case_[0] = TYPE_ONEOF_NOT_SET;
}
inline TestResult_Vehicle_Binary::TypeOneofCase TestResult_Vehicle_Binary::type_oneof_case() const {
  return TestResult_Vehicle_Binary::TypeOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TestResult_Vehicle

// .metamoto.types.VehicleInstance instance = 1;
inline bool TestResult_Vehicle::has_instance() const {
  return this != internal_default_instance() && instance_ != NULL;
}
inline const ::metamoto::types::VehicleInstance& TestResult_Vehicle::_internal_instance() const {
  return *instance_;
}
inline const ::metamoto::types::VehicleInstance& TestResult_Vehicle::instance() const {
  const ::metamoto::types::VehicleInstance* p = instance_;
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Vehicle.instance)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::VehicleInstance*>(
      &::metamoto::types::_VehicleInstance_default_instance_);
}
inline ::metamoto::types::VehicleInstance* TestResult_Vehicle::release_instance() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.Vehicle.instance)
  
  ::metamoto::types::VehicleInstance* temp = instance_;
  instance_ = NULL;
  return temp;
}
inline ::metamoto::types::VehicleInstance* TestResult_Vehicle::mutable_instance() {
  
  if (instance_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::VehicleInstance>(GetArenaNoVirtual());
    instance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.Vehicle.instance)
  return instance_;
}
inline void TestResult_Vehicle::set_allocated_instance(::metamoto::types::VehicleInstance* instance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(instance_);
  }
  if (instance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.Vehicle.instance)
}

// string transforms_file = 2;
inline void TestResult_Vehicle::clear_transforms_file() {
  transforms_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult_Vehicle::transforms_file() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Vehicle.transforms_file)
  return transforms_file_.GetNoArena();
}
inline void TestResult_Vehicle::set_transforms_file(const ::std::string& value) {
  
  transforms_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.Vehicle.transforms_file)
}
#if LANG_CXX11
inline void TestResult_Vehicle::set_transforms_file(::std::string&& value) {
  
  transforms_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.Vehicle.transforms_file)
}
#endif
inline void TestResult_Vehicle::set_transforms_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  transforms_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.Vehicle.transforms_file)
}
inline void TestResult_Vehicle::set_transforms_file(const char* value, size_t size) {
  
  transforms_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.Vehicle.transforms_file)
}
inline ::std::string* TestResult_Vehicle::mutable_transforms_file() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.Vehicle.transforms_file)
  return transforms_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult_Vehicle::release_transforms_file() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.Vehicle.transforms_file)
  
  return transforms_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult_Vehicle::set_allocated_transforms_file(::std::string* transforms_file) {
  if (transforms_file != NULL) {
    
  } else {
    
  }
  transforms_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transforms_file);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.Vehicle.transforms_file)
}

// .metamoto.types.Pose pose = 3;
inline bool TestResult_Vehicle::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::metamoto::types::Pose& TestResult_Vehicle::_internal_pose() const {
  return *pose_;
}
inline const ::metamoto::types::Pose& TestResult_Vehicle::pose() const {
  const ::metamoto::types::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Vehicle.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Pose*>(
      &::metamoto::types::_Pose_default_instance_);
}
inline ::metamoto::types::Pose* TestResult_Vehicle::release_pose() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.Vehicle.pose)
  
  ::metamoto::types::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::metamoto::types::Pose* TestResult_Vehicle::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.Vehicle.pose)
  return pose_;
}
inline void TestResult_Vehicle::set_allocated_pose(::metamoto::types::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.Vehicle.pose)
}

// repeated .metamoto.types.TestResult.Vehicle.Binary binaries = 4;
inline int TestResult_Vehicle::binaries_size() const {
  return binaries_.size();
}
inline void TestResult_Vehicle::clear_binaries() {
  binaries_.Clear();
}
inline ::metamoto::types::TestResult_Vehicle_Binary* TestResult_Vehicle::mutable_binaries(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.Vehicle.binaries)
  return binaries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Vehicle_Binary >*
TestResult_Vehicle::mutable_binaries() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.TestResult.Vehicle.binaries)
  return &binaries_;
}
inline const ::metamoto::types::TestResult_Vehicle_Binary& TestResult_Vehicle::binaries(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Vehicle.binaries)
  return binaries_.Get(index);
}
inline ::metamoto::types::TestResult_Vehicle_Binary* TestResult_Vehicle::add_binaries() {
  // @@protoc_insertion_point(field_add:metamoto.types.TestResult.Vehicle.binaries)
  return binaries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Vehicle_Binary >&
TestResult_Vehicle::binaries() const {
  // @@protoc_insertion_point(field_list:metamoto.types.TestResult.Vehicle.binaries)
  return binaries_;
}

// repeated .metamoto.types.SensorMount sensor_mounts = 5;
inline int TestResult_Vehicle::sensor_mounts_size() const {
  return sensor_mounts_.size();
}
inline ::metamoto::types::SensorMount* TestResult_Vehicle::mutable_sensor_mounts(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.Vehicle.sensor_mounts)
  return sensor_mounts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::SensorMount >*
TestResult_Vehicle::mutable_sensor_mounts() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.TestResult.Vehicle.sensor_mounts)
  return &sensor_mounts_;
}
inline const ::metamoto::types::SensorMount& TestResult_Vehicle::sensor_mounts(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Vehicle.sensor_mounts)
  return sensor_mounts_.Get(index);
}
inline ::metamoto::types::SensorMount* TestResult_Vehicle::add_sensor_mounts() {
  // @@protoc_insertion_point(field_add:metamoto.types.TestResult.Vehicle.sensor_mounts)
  return sensor_mounts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::SensorMount >&
TestResult_Vehicle::sensor_mounts() const {
  // @@protoc_insertion_point(field_list:metamoto.types.TestResult.Vehicle.sensor_mounts)
  return sensor_mounts_;
}

// string id = 6;
inline void TestResult_Vehicle::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult_Vehicle::id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Vehicle.id)
  return id_.GetNoArena();
}
inline void TestResult_Vehicle::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.Vehicle.id)
}
#if LANG_CXX11
inline void TestResult_Vehicle::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.Vehicle.id)
}
#endif
inline void TestResult_Vehicle::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.Vehicle.id)
}
inline void TestResult_Vehicle::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.Vehicle.id)
}
inline ::std::string* TestResult_Vehicle::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.Vehicle.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult_Vehicle::release_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.Vehicle.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult_Vehicle::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.Vehicle.id)
}

// string results_directory = 7;
inline void TestResult_Vehicle::clear_results_directory() {
  results_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult_Vehicle::results_directory() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Vehicle.results_directory)
  return results_directory_.GetNoArena();
}
inline void TestResult_Vehicle::set_results_directory(const ::std::string& value) {
  
  results_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.Vehicle.results_directory)
}
#if LANG_CXX11
inline void TestResult_Vehicle::set_results_directory(::std::string&& value) {
  
  results_directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.Vehicle.results_directory)
}
#endif
inline void TestResult_Vehicle::set_results_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  results_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.Vehicle.results_directory)
}
inline void TestResult_Vehicle::set_results_directory(const char* value, size_t size) {
  
  results_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.Vehicle.results_directory)
}
inline ::std::string* TestResult_Vehicle::mutable_results_directory() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.Vehicle.results_directory)
  return results_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult_Vehicle::release_results_directory() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.Vehicle.results_directory)
  
  return results_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult_Vehicle::set_allocated_results_directory(::std::string* results_directory) {
  if (results_directory != NULL) {
    
  } else {
    
  }
  results_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), results_directory);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.Vehicle.results_directory)
}

// repeated .metamoto.types.TestResult.DataBusTopic topics = 8;
inline int TestResult_Vehicle::topics_size() const {
  return topics_.size();
}
inline void TestResult_Vehicle::clear_topics() {
  topics_.Clear();
}
inline ::metamoto::types::TestResult_DataBusTopic* TestResult_Vehicle::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.Vehicle.topics)
  return topics_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataBusTopic >*
TestResult_Vehicle::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.TestResult.Vehicle.topics)
  return &topics_;
}
inline const ::metamoto::types::TestResult_DataBusTopic& TestResult_Vehicle::topics(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Vehicle.topics)
  return topics_.Get(index);
}
inline ::metamoto::types::TestResult_DataBusTopic* TestResult_Vehicle::add_topics() {
  // @@protoc_insertion_point(field_add:metamoto.types.TestResult.Vehicle.topics)
  return topics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataBusTopic >&
TestResult_Vehicle::topics() const {
  // @@protoc_insertion_point(field_list:metamoto.types.TestResult.Vehicle.topics)
  return topics_;
}

// repeated .metamoto.types.TestResult.DataStream data_streams = 9;
inline int TestResult_Vehicle::data_streams_size() const {
  return data_streams_.size();
}
inline void TestResult_Vehicle::clear_data_streams() {
  data_streams_.Clear();
}
inline ::metamoto::types::TestResult_DataStream* TestResult_Vehicle::mutable_data_streams(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.Vehicle.data_streams)
  return data_streams_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataStream >*
TestResult_Vehicle::mutable_data_streams() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.TestResult.Vehicle.data_streams)
  return &data_streams_;
}
inline const ::metamoto::types::TestResult_DataStream& TestResult_Vehicle::data_streams(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Vehicle.data_streams)
  return data_streams_.Get(index);
}
inline ::metamoto::types::TestResult_DataStream* TestResult_Vehicle::add_data_streams() {
  // @@protoc_insertion_point(field_add:metamoto.types.TestResult.Vehicle.data_streams)
  return data_streams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataStream >&
TestResult_Vehicle::data_streams() const {
  // @@protoc_insertion_point(field_list:metamoto.types.TestResult.Vehicle.data_streams)
  return data_streams_;
}

// string visualizations_file = 10;
inline void TestResult_Vehicle::clear_visualizations_file() {
  visualizations_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult_Vehicle::visualizations_file() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Vehicle.visualizations_file)
  return visualizations_file_.GetNoArena();
}
inline void TestResult_Vehicle::set_visualizations_file(const ::std::string& value) {
  
  visualizations_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.Vehicle.visualizations_file)
}
#if LANG_CXX11
inline void TestResult_Vehicle::set_visualizations_file(::std::string&& value) {
  
  visualizations_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.Vehicle.visualizations_file)
}
#endif
inline void TestResult_Vehicle::set_visualizations_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  visualizations_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.Vehicle.visualizations_file)
}
inline void TestResult_Vehicle::set_visualizations_file(const char* value, size_t size) {
  
  visualizations_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.Vehicle.visualizations_file)
}
inline ::std::string* TestResult_Vehicle::mutable_visualizations_file() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.Vehicle.visualizations_file)
  return visualizations_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult_Vehicle::release_visualizations_file() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.Vehicle.visualizations_file)
  
  return visualizations_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult_Vehicle::set_allocated_visualizations_file(::std::string* visualizations_file) {
  if (visualizations_file != NULL) {
    
  } else {
    
  }
  visualizations_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), visualizations_file);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.Vehicle.visualizations_file)
}

// -------------------------------------------------------------------

// TestResult_Pedestrian

// string name = 1;
inline void TestResult_Pedestrian::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult_Pedestrian::name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Pedestrian.name)
  return name_.GetNoArena();
}
inline void TestResult_Pedestrian::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.Pedestrian.name)
}
#if LANG_CXX11
inline void TestResult_Pedestrian::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.Pedestrian.name)
}
#endif
inline void TestResult_Pedestrian::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.Pedestrian.name)
}
inline void TestResult_Pedestrian::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.Pedestrian.name)
}
inline ::std::string* TestResult_Pedestrian::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.Pedestrian.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult_Pedestrian::release_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.Pedestrian.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult_Pedestrian::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.Pedestrian.name)
}

// string transforms_file = 2;
inline void TestResult_Pedestrian::clear_transforms_file() {
  transforms_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult_Pedestrian::transforms_file() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.Pedestrian.transforms_file)
  return transforms_file_.GetNoArena();
}
inline void TestResult_Pedestrian::set_transforms_file(const ::std::string& value) {
  
  transforms_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.Pedestrian.transforms_file)
}
#if LANG_CXX11
inline void TestResult_Pedestrian::set_transforms_file(::std::string&& value) {
  
  transforms_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.Pedestrian.transforms_file)
}
#endif
inline void TestResult_Pedestrian::set_transforms_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  transforms_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.Pedestrian.transforms_file)
}
inline void TestResult_Pedestrian::set_transforms_file(const char* value, size_t size) {
  
  transforms_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.Pedestrian.transforms_file)
}
inline ::std::string* TestResult_Pedestrian::mutable_transforms_file() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.Pedestrian.transforms_file)
  return transforms_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult_Pedestrian::release_transforms_file() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.Pedestrian.transforms_file)
  
  return transforms_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult_Pedestrian::set_allocated_transforms_file(::std::string* transforms_file) {
  if (transforms_file != NULL) {
    
  } else {
    
  }
  transforms_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transforms_file);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.Pedestrian.transforms_file)
}

// -------------------------------------------------------------------

// TestResult_DataStream

// string name = 1;
inline void TestResult_DataStream::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult_DataStream::name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.DataStream.name)
  return name_.GetNoArena();
}
inline void TestResult_DataStream::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.DataStream.name)
}
#if LANG_CXX11
inline void TestResult_DataStream::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.DataStream.name)
}
#endif
inline void TestResult_DataStream::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.DataStream.name)
}
inline void TestResult_DataStream::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.DataStream.name)
}
inline ::std::string* TestResult_DataStream::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.DataStream.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult_DataStream::release_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.DataStream.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult_DataStream::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.DataStream.name)
}

// string description = 2;
inline void TestResult_DataStream::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult_DataStream::description() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.DataStream.description)
  return description_.GetNoArena();
}
inline void TestResult_DataStream::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.DataStream.description)
}
#if LANG_CXX11
inline void TestResult_DataStream::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.DataStream.description)
}
#endif
inline void TestResult_DataStream::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.DataStream.description)
}
inline void TestResult_DataStream::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.DataStream.description)
}
inline ::std::string* TestResult_DataStream::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.DataStream.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult_DataStream::release_description() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.DataStream.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult_DataStream::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.DataStream.description)
}

// string units = 3;
inline void TestResult_DataStream::clear_units() {
  units_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult_DataStream::units() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.DataStream.units)
  return units_.GetNoArena();
}
inline void TestResult_DataStream::set_units(const ::std::string& value) {
  
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.DataStream.units)
}
#if LANG_CXX11
inline void TestResult_DataStream::set_units(::std::string&& value) {
  
  units_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.DataStream.units)
}
#endif
inline void TestResult_DataStream::set_units(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.DataStream.units)
}
inline void TestResult_DataStream::set_units(const char* value, size_t size) {
  
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.DataStream.units)
}
inline ::std::string* TestResult_DataStream::mutable_units() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.DataStream.units)
  return units_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult_DataStream::release_units() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.DataStream.units)
  
  return units_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult_DataStream::set_allocated_units(::std::string* units) {
  if (units != NULL) {
    
  } else {
    
  }
  units_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), units);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.DataStream.units)
}

// string filename = 4;
inline void TestResult_DataStream::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult_DataStream::filename() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.DataStream.filename)
  return filename_.GetNoArena();
}
inline void TestResult_DataStream::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.DataStream.filename)
}
#if LANG_CXX11
inline void TestResult_DataStream::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.DataStream.filename)
}
#endif
inline void TestResult_DataStream::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.DataStream.filename)
}
inline void TestResult_DataStream::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.DataStream.filename)
}
inline ::std::string* TestResult_DataStream::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.DataStream.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult_DataStream::release_filename() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.DataStream.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult_DataStream::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.DataStream.filename)
}

// -------------------------------------------------------------------

// TestResult

// string name = 1;
inline void TestResult::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult::name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.name)
  return name_.GetNoArena();
}
inline void TestResult::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.name)
}
#if LANG_CXX11
inline void TestResult::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.name)
}
#endif
inline void TestResult::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.name)
}
inline void TestResult::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.name)
}
inline ::std::string* TestResult::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult::release_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.name)
}

// string timestamp = 2;
inline void TestResult::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult::timestamp() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.timestamp)
  return timestamp_.GetNoArena();
}
inline void TestResult::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.timestamp)
}
#if LANG_CXX11
inline void TestResult::set_timestamp(::std::string&& value) {
  
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.timestamp)
}
#endif
inline void TestResult::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.timestamp)
}
inline void TestResult::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.timestamp)
}
inline ::std::string* TestResult::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult::release_timestamp() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.timestamp)
}

// string test_engine_version = 3;
inline void TestResult::clear_test_engine_version() {
  test_engine_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult::test_engine_version() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.test_engine_version)
  return test_engine_version_.GetNoArena();
}
inline void TestResult::set_test_engine_version(const ::std::string& value) {
  
  test_engine_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.test_engine_version)
}
#if LANG_CXX11
inline void TestResult::set_test_engine_version(::std::string&& value) {
  
  test_engine_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.test_engine_version)
}
#endif
inline void TestResult::set_test_engine_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_engine_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.test_engine_version)
}
inline void TestResult::set_test_engine_version(const char* value, size_t size) {
  
  test_engine_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.test_engine_version)
}
inline ::std::string* TestResult::mutable_test_engine_version() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.test_engine_version)
  return test_engine_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult::release_test_engine_version() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.test_engine_version)
  
  return test_engine_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult::set_allocated_test_engine_version(::std::string* test_engine_version) {
  if (test_engine_version != NULL) {
    
  } else {
    
  }
  test_engine_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_engine_version);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.test_engine_version)
}

// .metamoto.types.TestResult.Result result = 4;
inline bool TestResult::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
inline void TestResult::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
}
inline const ::metamoto::types::TestResult_Result& TestResult::_internal_result() const {
  return *result_;
}
inline const ::metamoto::types::TestResult_Result& TestResult::result() const {
  const ::metamoto::types::TestResult_Result* p = result_;
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.result)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::TestResult_Result*>(
      &::metamoto::types::_TestResult_Result_default_instance_);
}
inline ::metamoto::types::TestResult_Result* TestResult::release_result() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.result)
  
  ::metamoto::types::TestResult_Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline ::metamoto::types::TestResult_Result* TestResult::mutable_result() {
  
  if (result_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::TestResult_Result>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.result)
  return result_;
}
inline void TestResult::set_allocated_result(::metamoto::types::TestResult_Result* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete result_;
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.result)
}

// .metamoto.types.TestResult.Statistics statistics = 5;
inline bool TestResult::has_statistics() const {
  return this != internal_default_instance() && statistics_ != NULL;
}
inline void TestResult::clear_statistics() {
  if (GetArenaNoVirtual() == NULL && statistics_ != NULL) {
    delete statistics_;
  }
  statistics_ = NULL;
}
inline const ::metamoto::types::TestResult_Statistics& TestResult::_internal_statistics() const {
  return *statistics_;
}
inline const ::metamoto::types::TestResult_Statistics& TestResult::statistics() const {
  const ::metamoto::types::TestResult_Statistics* p = statistics_;
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.statistics)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::TestResult_Statistics*>(
      &::metamoto::types::_TestResult_Statistics_default_instance_);
}
inline ::metamoto::types::TestResult_Statistics* TestResult::release_statistics() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.statistics)
  
  ::metamoto::types::TestResult_Statistics* temp = statistics_;
  statistics_ = NULL;
  return temp;
}
inline ::metamoto::types::TestResult_Statistics* TestResult::mutable_statistics() {
  
  if (statistics_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::TestResult_Statistics>(GetArenaNoVirtual());
    statistics_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.statistics)
  return statistics_;
}
inline void TestResult::set_allocated_statistics(::metamoto::types::TestResult_Statistics* statistics) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete statistics_;
  }
  if (statistics) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      statistics = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, statistics, submessage_arena);
    }
    
  } else {
    
  }
  statistics_ = statistics;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.statistics)
}

// repeated .metamoto.types.TestResult.DataBusTopic topics = 6;
inline int TestResult::topics_size() const {
  return topics_.size();
}
inline void TestResult::clear_topics() {
  topics_.Clear();
}
inline ::metamoto::types::TestResult_DataBusTopic* TestResult::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.topics)
  return topics_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataBusTopic >*
TestResult::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.TestResult.topics)
  return &topics_;
}
inline const ::metamoto::types::TestResult_DataBusTopic& TestResult::topics(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.topics)
  return topics_.Get(index);
}
inline ::metamoto::types::TestResult_DataBusTopic* TestResult::add_topics() {
  // @@protoc_insertion_point(field_add:metamoto.types.TestResult.topics)
  return topics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataBusTopic >&
TestResult::topics() const {
  // @@protoc_insertion_point(field_list:metamoto.types.TestResult.topics)
  return topics_;
}

// string test_case_file = 7;
inline void TestResult::clear_test_case_file() {
  test_case_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult::test_case_file() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.test_case_file)
  return test_case_file_.GetNoArena();
}
inline void TestResult::set_test_case_file(const ::std::string& value) {
  
  test_case_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.test_case_file)
}
#if LANG_CXX11
inline void TestResult::set_test_case_file(::std::string&& value) {
  
  test_case_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.test_case_file)
}
#endif
inline void TestResult::set_test_case_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_case_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.test_case_file)
}
inline void TestResult::set_test_case_file(const char* value, size_t size) {
  
  test_case_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.test_case_file)
}
inline ::std::string* TestResult::mutable_test_case_file() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.test_case_file)
  return test_case_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult::release_test_case_file() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.test_case_file)
  
  return test_case_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult::set_allocated_test_case_file(::std::string* test_case_file) {
  if (test_case_file != NULL) {
    
  } else {
    
  }
  test_case_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_case_file);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.test_case_file)
}

// string log_file = 8;
inline void TestResult::clear_log_file() {
  log_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult::log_file() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.log_file)
  return log_file_.GetNoArena();
}
inline void TestResult::set_log_file(const ::std::string& value) {
  
  log_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.log_file)
}
#if LANG_CXX11
inline void TestResult::set_log_file(::std::string&& value) {
  
  log_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.log_file)
}
#endif
inline void TestResult::set_log_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  log_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.log_file)
}
inline void TestResult::set_log_file(const char* value, size_t size) {
  
  log_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.log_file)
}
inline ::std::string* TestResult::mutable_log_file() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.log_file)
  return log_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult::release_log_file() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.log_file)
  
  return log_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult::set_allocated_log_file(::std::string* log_file) {
  if (log_file != NULL) {
    
  } else {
    
  }
  log_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_file);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.log_file)
}

// string intersection_series_log_file = 9;
inline void TestResult::clear_intersection_series_log_file() {
  intersection_series_log_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult::intersection_series_log_file() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.intersection_series_log_file)
  return intersection_series_log_file_.GetNoArena();
}
inline void TestResult::set_intersection_series_log_file(const ::std::string& value) {
  
  intersection_series_log_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.intersection_series_log_file)
}
#if LANG_CXX11
inline void TestResult::set_intersection_series_log_file(::std::string&& value) {
  
  intersection_series_log_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.intersection_series_log_file)
}
#endif
inline void TestResult::set_intersection_series_log_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  intersection_series_log_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.intersection_series_log_file)
}
inline void TestResult::set_intersection_series_log_file(const char* value, size_t size) {
  
  intersection_series_log_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.intersection_series_log_file)
}
inline ::std::string* TestResult::mutable_intersection_series_log_file() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.intersection_series_log_file)
  return intersection_series_log_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult::release_intersection_series_log_file() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.intersection_series_log_file)
  
  return intersection_series_log_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult::set_allocated_intersection_series_log_file(::std::string* intersection_series_log_file) {
  if (intersection_series_log_file != NULL) {
    
  } else {
    
  }
  intersection_series_log_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), intersection_series_log_file);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.intersection_series_log_file)
}

// string transforms_directory = 10;
inline void TestResult::clear_transforms_directory() {
  transforms_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult::transforms_directory() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.transforms_directory)
  return transforms_directory_.GetNoArena();
}
inline void TestResult::set_transforms_directory(const ::std::string& value) {
  
  transforms_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.transforms_directory)
}
#if LANG_CXX11
inline void TestResult::set_transforms_directory(::std::string&& value) {
  
  transforms_directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.transforms_directory)
}
#endif
inline void TestResult::set_transforms_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  transforms_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.transforms_directory)
}
inline void TestResult::set_transforms_directory(const char* value, size_t size) {
  
  transforms_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.transforms_directory)
}
inline ::std::string* TestResult::mutable_transforms_directory() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.transforms_directory)
  return transforms_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult::release_transforms_directory() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.transforms_directory)
  
  return transforms_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult::set_allocated_transforms_directory(::std::string* transforms_directory) {
  if (transforms_directory != NULL) {
    
  } else {
    
  }
  transforms_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transforms_directory);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.transforms_directory)
}

// string data_streams_directory = 11;
inline void TestResult::clear_data_streams_directory() {
  data_streams_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult::data_streams_directory() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.data_streams_directory)
  return data_streams_directory_.GetNoArena();
}
inline void TestResult::set_data_streams_directory(const ::std::string& value) {
  
  data_streams_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.data_streams_directory)
}
#if LANG_CXX11
inline void TestResult::set_data_streams_directory(::std::string&& value) {
  
  data_streams_directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.data_streams_directory)
}
#endif
inline void TestResult::set_data_streams_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_streams_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.data_streams_directory)
}
inline void TestResult::set_data_streams_directory(const char* value, size_t size) {
  
  data_streams_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.data_streams_directory)
}
inline ::std::string* TestResult::mutable_data_streams_directory() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.data_streams_directory)
  return data_streams_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult::release_data_streams_directory() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.data_streams_directory)
  
  return data_streams_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult::set_allocated_data_streams_directory(::std::string* data_streams_directory) {
  if (data_streams_directory != NULL) {
    
  } else {
    
  }
  data_streams_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_streams_directory);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.data_streams_directory)
}

// string final_views_directory = 12;
inline void TestResult::clear_final_views_directory() {
  final_views_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult::final_views_directory() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.final_views_directory)
  return final_views_directory_.GetNoArena();
}
inline void TestResult::set_final_views_directory(const ::std::string& value) {
  
  final_views_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.final_views_directory)
}
#if LANG_CXX11
inline void TestResult::set_final_views_directory(::std::string&& value) {
  
  final_views_directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.final_views_directory)
}
#endif
inline void TestResult::set_final_views_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  final_views_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.final_views_directory)
}
inline void TestResult::set_final_views_directory(const char* value, size_t size) {
  
  final_views_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.final_views_directory)
}
inline ::std::string* TestResult::mutable_final_views_directory() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.final_views_directory)
  return final_views_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult::release_final_views_directory() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.final_views_directory)
  
  return final_views_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult::set_allocated_final_views_directory(::std::string* final_views_directory) {
  if (final_views_directory != NULL) {
    
  } else {
    
  }
  final_views_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), final_views_directory);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.final_views_directory)
}

// string data_bus_directory = 13;
inline void TestResult::clear_data_bus_directory() {
  data_bus_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestResult::data_bus_directory() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.data_bus_directory)
  return data_bus_directory_.GetNoArena();
}
inline void TestResult::set_data_bus_directory(const ::std::string& value) {
  
  data_bus_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.data_bus_directory)
}
#if LANG_CXX11
inline void TestResult::set_data_bus_directory(::std::string&& value) {
  
  data_bus_directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestResult.data_bus_directory)
}
#endif
inline void TestResult::set_data_bus_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_bus_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.data_bus_directory)
}
inline void TestResult::set_data_bus_directory(const char* value, size_t size) {
  
  data_bus_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.data_bus_directory)
}
inline ::std::string* TestResult::mutable_data_bus_directory() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.data_bus_directory)
  return data_bus_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestResult::release_data_bus_directory() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.data_bus_directory)
  
  return data_bus_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestResult::set_allocated_data_bus_directory(::std::string* data_bus_directory) {
  if (data_bus_directory != NULL) {
    
  } else {
    
  }
  data_bus_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_bus_directory);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.data_bus_directory)
}

// .metamoto.types.TestResult.Vehicle ego_vehicle = 14;
inline bool TestResult::has_ego_vehicle() const {
  return this != internal_default_instance() && ego_vehicle_ != NULL;
}
inline void TestResult::clear_ego_vehicle() {
  if (GetArenaNoVirtual() == NULL && ego_vehicle_ != NULL) {
    delete ego_vehicle_;
  }
  ego_vehicle_ = NULL;
}
inline const ::metamoto::types::TestResult_Vehicle& TestResult::_internal_ego_vehicle() const {
  return *ego_vehicle_;
}
inline const ::metamoto::types::TestResult_Vehicle& TestResult::ego_vehicle() const {
  const ::metamoto::types::TestResult_Vehicle* p = ego_vehicle_;
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.ego_vehicle)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::TestResult_Vehicle*>(
      &::metamoto::types::_TestResult_Vehicle_default_instance_);
}
inline ::metamoto::types::TestResult_Vehicle* TestResult::release_ego_vehicle() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestResult.ego_vehicle)
  
  ::metamoto::types::TestResult_Vehicle* temp = ego_vehicle_;
  ego_vehicle_ = NULL;
  return temp;
}
inline ::metamoto::types::TestResult_Vehicle* TestResult::mutable_ego_vehicle() {
  
  if (ego_vehicle_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::TestResult_Vehicle>(GetArenaNoVirtual());
    ego_vehicle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.ego_vehicle)
  return ego_vehicle_;
}
inline void TestResult::set_allocated_ego_vehicle(::metamoto::types::TestResult_Vehicle* ego_vehicle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ego_vehicle_;
  }
  if (ego_vehicle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ego_vehicle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ego_vehicle, submessage_arena);
    }
    
  } else {
    
  }
  ego_vehicle_ = ego_vehicle;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestResult.ego_vehicle)
}

// repeated .metamoto.types.TestResult.Vehicle vehicles = 15;
inline int TestResult::vehicles_size() const {
  return vehicles_.size();
}
inline void TestResult::clear_vehicles() {
  vehicles_.Clear();
}
inline ::metamoto::types::TestResult_Vehicle* TestResult::mutable_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.vehicles)
  return vehicles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Vehicle >*
TestResult::mutable_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.TestResult.vehicles)
  return &vehicles_;
}
inline const ::metamoto::types::TestResult_Vehicle& TestResult::vehicles(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.vehicles)
  return vehicles_.Get(index);
}
inline ::metamoto::types::TestResult_Vehicle* TestResult::add_vehicles() {
  // @@protoc_insertion_point(field_add:metamoto.types.TestResult.vehicles)
  return vehicles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Vehicle >&
TestResult::vehicles() const {
  // @@protoc_insertion_point(field_list:metamoto.types.TestResult.vehicles)
  return vehicles_;
}

// repeated .metamoto.types.TestResult.Pedestrian pedestrians = 16;
inline int TestResult::pedestrians_size() const {
  return pedestrians_.size();
}
inline void TestResult::clear_pedestrians() {
  pedestrians_.Clear();
}
inline ::metamoto::types::TestResult_Pedestrian* TestResult::mutable_pedestrians(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.pedestrians)
  return pedestrians_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Pedestrian >*
TestResult::mutable_pedestrians() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.TestResult.pedestrians)
  return &pedestrians_;
}
inline const ::metamoto::types::TestResult_Pedestrian& TestResult::pedestrians(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.pedestrians)
  return pedestrians_.Get(index);
}
inline ::metamoto::types::TestResult_Pedestrian* TestResult::add_pedestrians() {
  // @@protoc_insertion_point(field_add:metamoto.types.TestResult.pedestrians)
  return pedestrians_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Pedestrian >&
TestResult::pedestrians() const {
  // @@protoc_insertion_point(field_list:metamoto.types.TestResult.pedestrians)
  return pedestrians_;
}

// repeated string final_view_files = 17;
inline int TestResult::final_view_files_size() const {
  return final_view_files_.size();
}
inline void TestResult::clear_final_view_files() {
  final_view_files_.Clear();
}
inline const ::std::string& TestResult::final_view_files(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.final_view_files)
  return final_view_files_.Get(index);
}
inline ::std::string* TestResult::mutable_final_view_files(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.final_view_files)
  return final_view_files_.Mutable(index);
}
inline void TestResult::set_final_view_files(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.final_view_files)
  final_view_files_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TestResult::set_final_view_files(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:metamoto.types.TestResult.final_view_files)
  final_view_files_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TestResult::set_final_view_files(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  final_view_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestResult.final_view_files)
}
inline void TestResult::set_final_view_files(int index, const char* value, size_t size) {
  final_view_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestResult.final_view_files)
}
inline ::std::string* TestResult::add_final_view_files() {
  // @@protoc_insertion_point(field_add_mutable:metamoto.types.TestResult.final_view_files)
  return final_view_files_.Add();
}
inline void TestResult::add_final_view_files(const ::std::string& value) {
  final_view_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:metamoto.types.TestResult.final_view_files)
}
#if LANG_CXX11
inline void TestResult::add_final_view_files(::std::string&& value) {
  final_view_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:metamoto.types.TestResult.final_view_files)
}
#endif
inline void TestResult::add_final_view_files(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  final_view_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:metamoto.types.TestResult.final_view_files)
}
inline void TestResult::add_final_view_files(const char* value, size_t size) {
  final_view_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:metamoto.types.TestResult.final_view_files)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestResult::final_view_files() const {
  // @@protoc_insertion_point(field_list:metamoto.types.TestResult.final_view_files)
  return final_view_files_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TestResult::mutable_final_view_files() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.TestResult.final_view_files)
  return &final_view_files_;
}

// repeated .metamoto.types.TestResult.DataStream data_streams = 18;
inline int TestResult::data_streams_size() const {
  return data_streams_.size();
}
inline void TestResult::clear_data_streams() {
  data_streams_.Clear();
}
inline ::metamoto::types::TestResult_DataStream* TestResult::mutable_data_streams(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.data_streams)
  return data_streams_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataStream >*
TestResult::mutable_data_streams() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.TestResult.data_streams)
  return &data_streams_;
}
inline const ::metamoto::types::TestResult_DataStream& TestResult::data_streams(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.data_streams)
  return data_streams_.Get(index);
}
inline ::metamoto::types::TestResult_DataStream* TestResult::add_data_streams() {
  // @@protoc_insertion_point(field_add:metamoto.types.TestResult.data_streams)
  return data_streams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_DataStream >&
TestResult::data_streams() const {
  // @@protoc_insertion_point(field_list:metamoto.types.TestResult.data_streams)
  return data_streams_;
}

// repeated .metamoto.types.Asset assets = 19;
inline int TestResult::assets_size() const {
  return assets_.size();
}
inline ::metamoto::types::Asset* TestResult::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.assets)
  return assets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::Asset >*
TestResult::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.TestResult.assets)
  return &assets_;
}
inline const ::metamoto::types::Asset& TestResult::assets(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.assets)
  return assets_.Get(index);
}
inline ::metamoto::types::Asset* TestResult::add_assets() {
  // @@protoc_insertion_point(field_add:metamoto.types.TestResult.assets)
  return assets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Asset >&
TestResult::assets() const {
  // @@protoc_insertion_point(field_list:metamoto.types.TestResult.assets)
  return assets_;
}

// repeated .metamoto.types.TestResult.Vehicle ego_vehicles = 20;
inline int TestResult::ego_vehicles_size() const {
  return ego_vehicles_.size();
}
inline void TestResult::clear_ego_vehicles() {
  ego_vehicles_.Clear();
}
inline ::metamoto::types::TestResult_Vehicle* TestResult::mutable_ego_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestResult.ego_vehicles)
  return ego_vehicles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Vehicle >*
TestResult::mutable_ego_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.TestResult.ego_vehicles)
  return &ego_vehicles_;
}
inline const ::metamoto::types::TestResult_Vehicle& TestResult::ego_vehicles(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestResult.ego_vehicles)
  return ego_vehicles_.Get(index);
}
inline ::metamoto::types::TestResult_Vehicle* TestResult::add_ego_vehicles() {
  // @@protoc_insertion_point(field_add:metamoto.types.TestResult.ego_vehicles)
  return ego_vehicles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestResult_Vehicle >&
TestResult::ego_vehicles() const {
  // @@protoc_insertion_point(field_list:metamoto.types.TestResult.ego_vehicles)
  return ego_vehicles_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::metamoto::types::TestResult_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metamoto::types::TestResult_Status>() {
  return ::metamoto::types::TestResult_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2ftest_5fresult_2eproto
