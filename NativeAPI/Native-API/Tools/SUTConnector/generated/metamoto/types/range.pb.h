// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/range.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2frange_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2frange_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2frange_2eproto 

namespace protobuf_metamoto_2ftypes_2frange_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2frange_2eproto
namespace metamoto {
namespace types {
class NumericRange;
class NumericRangeDefaultTypeInternal;
extern NumericRangeDefaultTypeInternal _NumericRange_default_instance_;
class Parameter;
class ParameterDefaultTypeInternal;
extern ParameterDefaultTypeInternal _Parameter_default_instance_;
class Range;
class RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::NumericRange* Arena::CreateMaybeMessage<::metamoto::types::NumericRange>(Arena*);
template<> ::metamoto::types::Parameter* Arena::CreateMaybeMessage<::metamoto::types::Parameter>(Arena*);
template<> ::metamoto::types::Range* Arena::CreateMaybeMessage<::metamoto::types::Range>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

// ===================================================================

class NumericRange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.NumericRange) */ {
 public:
  NumericRange();
  virtual ~NumericRange();

  NumericRange(const NumericRange& from);

  inline NumericRange& operator=(const NumericRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NumericRange(NumericRange&& from) noexcept
    : NumericRange() {
    *this = ::std::move(from);
  }

  inline NumericRange& operator=(NumericRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NumericRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NumericRange* internal_default_instance() {
    return reinterpret_cast<const NumericRange*>(
               &_NumericRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NumericRange* other);
  friend void swap(NumericRange& a, NumericRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NumericRange* New() const final {
    return CreateMaybeMessage<NumericRange>(NULL);
  }

  NumericRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NumericRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NumericRange& from);
  void MergeFrom(const NumericRange& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumericRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double min = 1;
  void clear_min();
  static const int kMinFieldNumber = 1;
  double min() const;
  void set_min(double value);

  // double max = 2;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  double max() const;
  void set_max(double value);

  // double step = 3;
  void clear_step();
  static const int kStepFieldNumber = 3;
  double step() const;
  void set_step(double value);

  // @@protoc_insertion_point(class_scope:metamoto.types.NumericRange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double min_;
  double max_;
  double step_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2frange_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Range : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.Range) */ {
 public:
  Range();
  virtual ~Range();

  Range(const Range& from);

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(Range&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Range& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Range* other);
  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Range* New() const final {
    return CreateMaybeMessage<Range>(NULL);
  }

  Range* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Range>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Range* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.NumericRange numeric_ranges = 2;
  int numeric_ranges_size() const;
  void clear_numeric_ranges();
  static const int kNumericRangesFieldNumber = 2;
  ::metamoto::types::NumericRange* mutable_numeric_ranges(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::NumericRange >*
      mutable_numeric_ranges();
  const ::metamoto::types::NumericRange& numeric_ranges(int index) const;
  ::metamoto::types::NumericRange* add_numeric_ranges();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::NumericRange >&
      numeric_ranges() const;

  // repeated .google.protobuf.Value values = 3;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 3;
  ::google::protobuf::Value* mutable_values(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Value >*
      mutable_values();
  const ::google::protobuf::Value& values(int index) const;
  ::google::protobuf::Value* add_values();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Value >&
      values() const;

  // string parameter_name = 1;
  void clear_parameter_name();
  static const int kParameterNameFieldNumber = 1;
  const ::std::string& parameter_name() const;
  void set_parameter_name(const ::std::string& value);
  #if LANG_CXX11
  void set_parameter_name(::std::string&& value);
  #endif
  void set_parameter_name(const char* value);
  void set_parameter_name(const char* value, size_t size);
  ::std::string* mutable_parameter_name();
  ::std::string* release_parameter_name();
  void set_allocated_parameter_name(::std::string* parameter_name);

  // @@protoc_insertion_point(class_scope:metamoto.types.Range)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::NumericRange > numeric_ranges_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Value > values_;
  ::google::protobuf::internal::ArenaStringPtr parameter_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2frange_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Parameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.Parameter) */ {
 public:
  Parameter();
  virtual ~Parameter();

  Parameter(const Parameter& from);

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Parameter(Parameter&& from) noexcept
    : Parameter() {
    *this = ::std::move(from);
  }

  inline Parameter& operator=(Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Parameter* internal_default_instance() {
    return reinterpret_cast<const Parameter*>(
               &_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Parameter* other);
  friend void swap(Parameter& a, Parameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Parameter* New() const final {
    return CreateMaybeMessage<Parameter>(NULL);
  }

  Parameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Parameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.types.Range range = 1;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 1;
  private:
  const ::metamoto::types::Range& _internal_range() const;
  public:
  const ::metamoto::types::Range& range() const;
  ::metamoto::types::Range* release_range();
  ::metamoto::types::Range* mutable_range();
  void set_allocated_range(::metamoto::types::Range* range);

  // .metamoto.types.Range selected = 2;
  bool has_selected() const;
  void clear_selected();
  static const int kSelectedFieldNumber = 2;
  private:
  const ::metamoto::types::Range& _internal_selected() const;
  public:
  const ::metamoto::types::Range& selected() const;
  ::metamoto::types::Range* release_selected();
  ::metamoto::types::Range* mutable_selected();
  void set_allocated_selected(::metamoto::types::Range* selected);

  // @@protoc_insertion_point(class_scope:metamoto.types.Parameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::types::Range* range_;
  ::metamoto::types::Range* selected_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2frange_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NumericRange

// double min = 1;
inline void NumericRange::clear_min() {
  min_ = 0;
}
inline double NumericRange::min() const {
  // @@protoc_insertion_point(field_get:metamoto.types.NumericRange.min)
  return min_;
}
inline void NumericRange::set_min(double value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.NumericRange.min)
}

// double max = 2;
inline void NumericRange::clear_max() {
  max_ = 0;
}
inline double NumericRange::max() const {
  // @@protoc_insertion_point(field_get:metamoto.types.NumericRange.max)
  return max_;
}
inline void NumericRange::set_max(double value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.NumericRange.max)
}

// double step = 3;
inline void NumericRange::clear_step() {
  step_ = 0;
}
inline double NumericRange::step() const {
  // @@protoc_insertion_point(field_get:metamoto.types.NumericRange.step)
  return step_;
}
inline void NumericRange::set_step(double value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.NumericRange.step)
}

// -------------------------------------------------------------------

// Range

// string parameter_name = 1;
inline void Range::clear_parameter_name() {
  parameter_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Range::parameter_name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Range.parameter_name)
  return parameter_name_.GetNoArena();
}
inline void Range::set_parameter_name(const ::std::string& value) {
  
  parameter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.Range.parameter_name)
}
#if LANG_CXX11
inline void Range::set_parameter_name(::std::string&& value) {
  
  parameter_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.Range.parameter_name)
}
#endif
inline void Range::set_parameter_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parameter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.Range.parameter_name)
}
inline void Range::set_parameter_name(const char* value, size_t size) {
  
  parameter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Range.parameter_name)
}
inline ::std::string* Range::mutable_parameter_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.Range.parameter_name)
  return parameter_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Range::release_parameter_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.Range.parameter_name)
  
  return parameter_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Range::set_allocated_parameter_name(::std::string* parameter_name) {
  if (parameter_name != NULL) {
    
  } else {
    
  }
  parameter_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameter_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Range.parameter_name)
}

// repeated .metamoto.types.NumericRange numeric_ranges = 2;
inline int Range::numeric_ranges_size() const {
  return numeric_ranges_.size();
}
inline void Range::clear_numeric_ranges() {
  numeric_ranges_.Clear();
}
inline ::metamoto::types::NumericRange* Range::mutable_numeric_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.Range.numeric_ranges)
  return numeric_ranges_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::NumericRange >*
Range::mutable_numeric_ranges() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.Range.numeric_ranges)
  return &numeric_ranges_;
}
inline const ::metamoto::types::NumericRange& Range::numeric_ranges(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.Range.numeric_ranges)
  return numeric_ranges_.Get(index);
}
inline ::metamoto::types::NumericRange* Range::add_numeric_ranges() {
  // @@protoc_insertion_point(field_add:metamoto.types.Range.numeric_ranges)
  return numeric_ranges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::NumericRange >&
Range::numeric_ranges() const {
  // @@protoc_insertion_point(field_list:metamoto.types.Range.numeric_ranges)
  return numeric_ranges_;
}

// repeated .google.protobuf.Value values = 3;
inline int Range::values_size() const {
  return values_.size();
}
inline ::google::protobuf::Value* Range::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.Range.values)
  return values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Value >*
Range::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.Range.values)
  return &values_;
}
inline const ::google::protobuf::Value& Range::values(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.Range.values)
  return values_.Get(index);
}
inline ::google::protobuf::Value* Range::add_values() {
  // @@protoc_insertion_point(field_add:metamoto.types.Range.values)
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Value >&
Range::values() const {
  // @@protoc_insertion_point(field_list:metamoto.types.Range.values)
  return values_;
}

// -------------------------------------------------------------------

// Parameter

// .metamoto.types.Range range = 1;
inline bool Parameter::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
inline void Parameter::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
}
inline const ::metamoto::types::Range& Parameter::_internal_range() const {
  return *range_;
}
inline const ::metamoto::types::Range& Parameter::range() const {
  const ::metamoto::types::Range* p = range_;
  // @@protoc_insertion_point(field_get:metamoto.types.Parameter.range)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Range*>(
      &::metamoto::types::_Range_default_instance_);
}
inline ::metamoto::types::Range* Parameter::release_range() {
  // @@protoc_insertion_point(field_release:metamoto.types.Parameter.range)
  
  ::metamoto::types::Range* temp = range_;
  range_ = NULL;
  return temp;
}
inline ::metamoto::types::Range* Parameter::mutable_range() {
  
  if (range_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Range>(GetArenaNoVirtual());
    range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Parameter.range)
  return range_;
}
inline void Parameter::set_allocated_range(::metamoto::types::Range* range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete range_;
  }
  if (range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    
  } else {
    
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Parameter.range)
}

// .metamoto.types.Range selected = 2;
inline bool Parameter::has_selected() const {
  return this != internal_default_instance() && selected_ != NULL;
}
inline void Parameter::clear_selected() {
  if (GetArenaNoVirtual() == NULL && selected_ != NULL) {
    delete selected_;
  }
  selected_ = NULL;
}
inline const ::metamoto::types::Range& Parameter::_internal_selected() const {
  return *selected_;
}
inline const ::metamoto::types::Range& Parameter::selected() const {
  const ::metamoto::types::Range* p = selected_;
  // @@protoc_insertion_point(field_get:metamoto.types.Parameter.selected)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Range*>(
      &::metamoto::types::_Range_default_instance_);
}
inline ::metamoto::types::Range* Parameter::release_selected() {
  // @@protoc_insertion_point(field_release:metamoto.types.Parameter.selected)
  
  ::metamoto::types::Range* temp = selected_;
  selected_ = NULL;
  return temp;
}
inline ::metamoto::types::Range* Parameter::mutable_selected() {
  
  if (selected_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Range>(GetArenaNoVirtual());
    selected_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Parameter.selected)
  return selected_;
}
inline void Parameter::set_allocated_selected(::metamoto::types::Range* selected) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete selected_;
  }
  if (selected) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selected = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selected, submessage_arena);
    }
    
  } else {
    
  }
  selected_ = selected;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Parameter.selected)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2frange_2eproto
