// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/shape.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2fshape_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2fshape_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fshape_2eproto 

namespace protobuf_metamoto_2ftypes_2fshape_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2fshape_2eproto
namespace metamoto {
namespace types {
class Shape;
class ShapeDefaultTypeInternal;
extern ShapeDefaultTypeInternal _Shape_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::Shape* Arena::CreateMaybeMessage<::metamoto::types::Shape>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

enum Shape_Type {
  Shape_Type_BOX = 0,
  Shape_Type_SPHERE = 1,
  Shape_Type_CYLINDER = 2,
  Shape_Type_CONE = 3,
  Shape_Type_Shape_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Shape_Type_Shape_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Shape_Type_IsValid(int value);
const Shape_Type Shape_Type_Type_MIN = Shape_Type_BOX;
const Shape_Type Shape_Type_Type_MAX = Shape_Type_CONE;
const int Shape_Type_Type_ARRAYSIZE = Shape_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Shape_Type_descriptor();
inline const ::std::string& Shape_Type_Name(Shape_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Shape_Type_descriptor(), value);
}
inline bool Shape_Type_Parse(
    const ::std::string& name, Shape_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Shape_Type>(
    Shape_Type_descriptor(), name, value);
}
// ===================================================================

class Shape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.Shape) */ {
 public:
  Shape();
  virtual ~Shape();

  Shape(const Shape& from);

  inline Shape& operator=(const Shape& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Shape(Shape&& from) noexcept
    : Shape() {
    *this = ::std::move(from);
  }

  inline Shape& operator=(Shape&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Shape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shape* internal_default_instance() {
    return reinterpret_cast<const Shape*>(
               &_Shape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Shape* other);
  friend void swap(Shape& a, Shape& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Shape* New() const final {
    return CreateMaybeMessage<Shape>(NULL);
  }

  Shape* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Shape>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Shape& from);
  void MergeFrom(const Shape& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Shape_Type Type;
  static const Type BOX =
    Shape_Type_BOX;
  static const Type SPHERE =
    Shape_Type_SPHERE;
  static const Type CYLINDER =
    Shape_Type_CYLINDER;
  static const Type CONE =
    Shape_Type_CONE;
  static inline bool Type_IsValid(int value) {
    return Shape_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Shape_Type_Type_MIN;
  static const Type Type_MAX =
    Shape_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Shape_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Shape_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Shape_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Shape_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated float dimensions = 2;
  int dimensions_size() const;
  void clear_dimensions();
  static const int kDimensionsFieldNumber = 2;
  float dimensions(int index) const;
  void set_dimensions(int index, float value);
  void add_dimensions(float value);
  const ::google::protobuf::RepeatedField< float >&
      dimensions() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_dimensions();

  // .metamoto.types.Shape.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::metamoto::types::Shape_Type type() const;
  void set_type(::metamoto::types::Shape_Type value);

  // @@protoc_insertion_point(class_scope:metamoto.types.Shape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > dimensions_;
  mutable int _dimensions_cached_byte_size_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fshape_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Shape

// .metamoto.types.Shape.Type type = 1;
inline void Shape::clear_type() {
  type_ = 0;
}
inline ::metamoto::types::Shape_Type Shape::type() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Shape.type)
  return static_cast< ::metamoto::types::Shape_Type >(type_);
}
inline void Shape::set_type(::metamoto::types::Shape_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Shape.type)
}

// repeated float dimensions = 2;
inline int Shape::dimensions_size() const {
  return dimensions_.size();
}
inline void Shape::clear_dimensions() {
  dimensions_.Clear();
}
inline float Shape::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.Shape.dimensions)
  return dimensions_.Get(index);
}
inline void Shape::set_dimensions(int index, float value) {
  dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.types.Shape.dimensions)
}
inline void Shape::add_dimensions(float value) {
  dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.types.Shape.dimensions)
}
inline const ::google::protobuf::RepeatedField< float >&
Shape::dimensions() const {
  // @@protoc_insertion_point(field_list:metamoto.types.Shape.dimensions)
  return dimensions_;
}
inline ::google::protobuf::RepeatedField< float >*
Shape::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.Shape.dimensions)
  return &dimensions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::metamoto::types::Shape_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metamoto::types::Shape_Type>() {
  return ::metamoto::types::Shape_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2fshape_2eproto
