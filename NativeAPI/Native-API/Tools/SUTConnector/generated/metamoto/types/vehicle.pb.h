// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/vehicle.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2fvehicle_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2fvehicle_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/acceleration.pb.h"
#include "metamoto/types/pose.pb.h"
#include "metamoto/types/roads.pb.h"
#include "metamoto/types/shape.pb.h"
#include "metamoto/types/velocity.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fvehicle_2eproto 

namespace protobuf_metamoto_2ftypes_2fvehicle_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2fvehicle_2eproto
namespace metamoto {
namespace types {
class Vehicle;
class VehicleDefaultTypeInternal;
extern VehicleDefaultTypeInternal _Vehicle_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::Vehicle* Arena::CreateMaybeMessage<::metamoto::types::Vehicle>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

enum Vehicle_Type {
  Vehicle_Type_TYPE_UNKNOWN = 0,
  Vehicle_Type_TYPE_OTHER = 1,
  Vehicle_Type_CAR = 2,
  Vehicle_Type_TRUCK = 3,
  Vehicle_Type_BUS = 4,
  Vehicle_Type_MOTORCYCLE = 5,
  Vehicle_Type_BICYCLE = 6,
  Vehicle_Type_TRAIN = 7,
  Vehicle_Type_STREET_CAR = 8,
  Vehicle_Type_Vehicle_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Vehicle_Type_Vehicle_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Vehicle_Type_IsValid(int value);
const Vehicle_Type Vehicle_Type_Type_MIN = Vehicle_Type_TYPE_UNKNOWN;
const Vehicle_Type Vehicle_Type_Type_MAX = Vehicle_Type_STREET_CAR;
const int Vehicle_Type_Type_ARRAYSIZE = Vehicle_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Vehicle_Type_descriptor();
inline const ::std::string& Vehicle_Type_Name(Vehicle_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Vehicle_Type_descriptor(), value);
}
inline bool Vehicle_Type_Parse(
    const ::std::string& name, Vehicle_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Vehicle_Type>(
    Vehicle_Type_descriptor(), name, value);
}
enum Vehicle_LightState {
  Vehicle_LightState_LIGHT_STATE_UNKNOWN = 0,
  Vehicle_LightState_LIGHT_STATE_OTHER = 1,
  Vehicle_LightState_OFF = 2,
  Vehicle_LightState_ON = 3,
  Vehicle_LightState_STRONG = 4,
  Vehicle_LightState_Vehicle_LightState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Vehicle_LightState_Vehicle_LightState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Vehicle_LightState_IsValid(int value);
const Vehicle_LightState Vehicle_LightState_LightState_MIN = Vehicle_LightState_LIGHT_STATE_UNKNOWN;
const Vehicle_LightState Vehicle_LightState_LightState_MAX = Vehicle_LightState_STRONG;
const int Vehicle_LightState_LightState_ARRAYSIZE = Vehicle_LightState_LightState_MAX + 1;

const ::google::protobuf::EnumDescriptor* Vehicle_LightState_descriptor();
inline const ::std::string& Vehicle_LightState_Name(Vehicle_LightState value) {
  return ::google::protobuf::internal::NameOfEnum(
    Vehicle_LightState_descriptor(), value);
}
inline bool Vehicle_LightState_Parse(
    const ::std::string& name, Vehicle_LightState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Vehicle_LightState>(
    Vehicle_LightState_descriptor(), name, value);
}
enum Vehicle_SignalLightState {
  Vehicle_SignalLightState_SIGNAL_LIGHT_STATE_UNKNOWN = 0,
  Vehicle_SignalLightState_SIGNAL_LIGHT_STATE_OTHER = 1,
  Vehicle_SignalLightState_SIGNAL_LIGHT_STATE_OFF = 2,
  Vehicle_SignalLightState_LEFT = 3,
  Vehicle_SignalLightState_RIGHT = 4,
  Vehicle_SignalLightState_HAZARD = 5,
  Vehicle_SignalLightState_Vehicle_SignalLightState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Vehicle_SignalLightState_Vehicle_SignalLightState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Vehicle_SignalLightState_IsValid(int value);
const Vehicle_SignalLightState Vehicle_SignalLightState_SignalLightState_MIN = Vehicle_SignalLightState_SIGNAL_LIGHT_STATE_UNKNOWN;
const Vehicle_SignalLightState Vehicle_SignalLightState_SignalLightState_MAX = Vehicle_SignalLightState_HAZARD;
const int Vehicle_SignalLightState_SignalLightState_ARRAYSIZE = Vehicle_SignalLightState_SignalLightState_MAX + 1;

const ::google::protobuf::EnumDescriptor* Vehicle_SignalLightState_descriptor();
inline const ::std::string& Vehicle_SignalLightState_Name(Vehicle_SignalLightState value) {
  return ::google::protobuf::internal::NameOfEnum(
    Vehicle_SignalLightState_descriptor(), value);
}
inline bool Vehicle_SignalLightState_Parse(
    const ::std::string& name, Vehicle_SignalLightState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Vehicle_SignalLightState>(
    Vehicle_SignalLightState_descriptor(), name, value);
}
enum Vehicle_GearSelector {
  Vehicle_GearSelector_GEAR_UNKNOWN = 0,
  Vehicle_GearSelector_GEAR_OTHER = 1,
  Vehicle_GearSelector_GEAR_P = 2,
  Vehicle_GearSelector_GEAR_R = 3,
  Vehicle_GearSelector_GEAR_N = 4,
  Vehicle_GearSelector_GEAR_D = 5,
  Vehicle_GearSelector_GEAR_L = 6,
  Vehicle_GearSelector_Vehicle_GearSelector_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Vehicle_GearSelector_Vehicle_GearSelector_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Vehicle_GearSelector_IsValid(int value);
const Vehicle_GearSelector Vehicle_GearSelector_GearSelector_MIN = Vehicle_GearSelector_GEAR_UNKNOWN;
const Vehicle_GearSelector Vehicle_GearSelector_GearSelector_MAX = Vehicle_GearSelector_GEAR_L;
const int Vehicle_GearSelector_GearSelector_ARRAYSIZE = Vehicle_GearSelector_GearSelector_MAX + 1;

const ::google::protobuf::EnumDescriptor* Vehicle_GearSelector_descriptor();
inline const ::std::string& Vehicle_GearSelector_Name(Vehicle_GearSelector value) {
  return ::google::protobuf::internal::NameOfEnum(
    Vehicle_GearSelector_descriptor(), value);
}
inline bool Vehicle_GearSelector_Parse(
    const ::std::string& name, Vehicle_GearSelector* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Vehicle_GearSelector>(
    Vehicle_GearSelector_descriptor(), name, value);
}
// ===================================================================

class Vehicle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.Vehicle) */ {
 public:
  Vehicle();
  virtual ~Vehicle();

  Vehicle(const Vehicle& from);

  inline Vehicle& operator=(const Vehicle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vehicle(Vehicle&& from) noexcept
    : Vehicle() {
    *this = ::std::move(from);
  }

  inline Vehicle& operator=(Vehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vehicle* internal_default_instance() {
    return reinterpret_cast<const Vehicle*>(
               &_Vehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Vehicle* other);
  friend void swap(Vehicle& a, Vehicle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vehicle* New() const final {
    return CreateMaybeMessage<Vehicle>(NULL);
  }

  Vehicle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vehicle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vehicle& from);
  void MergeFrom(const Vehicle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vehicle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Vehicle_Type Type;
  static const Type TYPE_UNKNOWN =
    Vehicle_Type_TYPE_UNKNOWN;
  static const Type TYPE_OTHER =
    Vehicle_Type_TYPE_OTHER;
  static const Type CAR =
    Vehicle_Type_CAR;
  static const Type TRUCK =
    Vehicle_Type_TRUCK;
  static const Type BUS =
    Vehicle_Type_BUS;
  static const Type MOTORCYCLE =
    Vehicle_Type_MOTORCYCLE;
  static const Type BICYCLE =
    Vehicle_Type_BICYCLE;
  static const Type TRAIN =
    Vehicle_Type_TRAIN;
  static const Type STREET_CAR =
    Vehicle_Type_STREET_CAR;
  static inline bool Type_IsValid(int value) {
    return Vehicle_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Vehicle_Type_Type_MIN;
  static const Type Type_MAX =
    Vehicle_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Vehicle_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Vehicle_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Vehicle_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Vehicle_Type_Parse(name, value);
  }

  typedef Vehicle_LightState LightState;
  static const LightState LIGHT_STATE_UNKNOWN =
    Vehicle_LightState_LIGHT_STATE_UNKNOWN;
  static const LightState LIGHT_STATE_OTHER =
    Vehicle_LightState_LIGHT_STATE_OTHER;
  static const LightState OFF =
    Vehicle_LightState_OFF;
  static const LightState ON =
    Vehicle_LightState_ON;
  static const LightState STRONG =
    Vehicle_LightState_STRONG;
  static inline bool LightState_IsValid(int value) {
    return Vehicle_LightState_IsValid(value);
  }
  static const LightState LightState_MIN =
    Vehicle_LightState_LightState_MIN;
  static const LightState LightState_MAX =
    Vehicle_LightState_LightState_MAX;
  static const int LightState_ARRAYSIZE =
    Vehicle_LightState_LightState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LightState_descriptor() {
    return Vehicle_LightState_descriptor();
  }
  static inline const ::std::string& LightState_Name(LightState value) {
    return Vehicle_LightState_Name(value);
  }
  static inline bool LightState_Parse(const ::std::string& name,
      LightState* value) {
    return Vehicle_LightState_Parse(name, value);
  }

  typedef Vehicle_SignalLightState SignalLightState;
  static const SignalLightState SIGNAL_LIGHT_STATE_UNKNOWN =
    Vehicle_SignalLightState_SIGNAL_LIGHT_STATE_UNKNOWN;
  static const SignalLightState SIGNAL_LIGHT_STATE_OTHER =
    Vehicle_SignalLightState_SIGNAL_LIGHT_STATE_OTHER;
  static const SignalLightState SIGNAL_LIGHT_STATE_OFF =
    Vehicle_SignalLightState_SIGNAL_LIGHT_STATE_OFF;
  static const SignalLightState LEFT =
    Vehicle_SignalLightState_LEFT;
  static const SignalLightState RIGHT =
    Vehicle_SignalLightState_RIGHT;
  static const SignalLightState HAZARD =
    Vehicle_SignalLightState_HAZARD;
  static inline bool SignalLightState_IsValid(int value) {
    return Vehicle_SignalLightState_IsValid(value);
  }
  static const SignalLightState SignalLightState_MIN =
    Vehicle_SignalLightState_SignalLightState_MIN;
  static const SignalLightState SignalLightState_MAX =
    Vehicle_SignalLightState_SignalLightState_MAX;
  static const int SignalLightState_ARRAYSIZE =
    Vehicle_SignalLightState_SignalLightState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SignalLightState_descriptor() {
    return Vehicle_SignalLightState_descriptor();
  }
  static inline const ::std::string& SignalLightState_Name(SignalLightState value) {
    return Vehicle_SignalLightState_Name(value);
  }
  static inline bool SignalLightState_Parse(const ::std::string& name,
      SignalLightState* value) {
    return Vehicle_SignalLightState_Parse(name, value);
  }

  typedef Vehicle_GearSelector GearSelector;
  static const GearSelector GEAR_UNKNOWN =
    Vehicle_GearSelector_GEAR_UNKNOWN;
  static const GearSelector GEAR_OTHER =
    Vehicle_GearSelector_GEAR_OTHER;
  static const GearSelector GEAR_P =
    Vehicle_GearSelector_GEAR_P;
  static const GearSelector GEAR_R =
    Vehicle_GearSelector_GEAR_R;
  static const GearSelector GEAR_N =
    Vehicle_GearSelector_GEAR_N;
  static const GearSelector GEAR_D =
    Vehicle_GearSelector_GEAR_D;
  static const GearSelector GEAR_L =
    Vehicle_GearSelector_GEAR_L;
  static inline bool GearSelector_IsValid(int value) {
    return Vehicle_GearSelector_IsValid(value);
  }
  static const GearSelector GearSelector_MIN =
    Vehicle_GearSelector_GearSelector_MIN;
  static const GearSelector GearSelector_MAX =
    Vehicle_GearSelector_GearSelector_MAX;
  static const int GearSelector_ARRAYSIZE =
    Vehicle_GearSelector_GearSelector_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GearSelector_descriptor() {
    return Vehicle_GearSelector_descriptor();
  }
  static inline const ::std::string& GearSelector_Name(GearSelector value) {
    return Vehicle_GearSelector_Name(value);
  }
  static inline bool GearSelector_Parse(const ::std::string& name,
      GearSelector* value) {
    return Vehicle_GearSelector_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.RoadPoint road_point = 3;
  int road_point_size() const;
  void clear_road_point();
  static const int kRoadPointFieldNumber = 3;
  ::metamoto::types::RoadPoint* mutable_road_point(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::RoadPoint >*
      mutable_road_point();
  const ::metamoto::types::RoadPoint& road_point(int index) const;
  ::metamoto::types::RoadPoint* add_road_point();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::RoadPoint >&
      road_point() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string model = 12;
  void clear_model();
  static const int kModelFieldNumber = 12;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // string paint = 13;
  void clear_paint();
  static const int kPaintFieldNumber = 13;
  const ::std::string& paint() const;
  void set_paint(const ::std::string& value);
  #if LANG_CXX11
  void set_paint(::std::string&& value);
  #endif
  void set_paint(const char* value);
  void set_paint(const char* value, size_t size);
  ::std::string* mutable_paint();
  ::std::string* release_paint();
  void set_allocated_paint(::std::string* paint);

  // .metamoto.types.Pose pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  private:
  const ::metamoto::types::Pose& _internal_pose() const;
  public:
  const ::metamoto::types::Pose& pose() const;
  ::metamoto::types::Pose* release_pose();
  ::metamoto::types::Pose* mutable_pose();
  void set_allocated_pose(::metamoto::types::Pose* pose);

  // .metamoto.types.Velocity velocity = 4;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 4;
  private:
  const ::metamoto::types::Velocity& _internal_velocity() const;
  public:
  const ::metamoto::types::Velocity& velocity() const;
  ::metamoto::types::Velocity* release_velocity();
  ::metamoto::types::Velocity* mutable_velocity();
  void set_allocated_velocity(::metamoto::types::Velocity* velocity);

  // .metamoto.types.Acceleration acceleration = 5;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 5;
  private:
  const ::metamoto::types::Acceleration& _internal_acceleration() const;
  public:
  const ::metamoto::types::Acceleration& acceleration() const;
  ::metamoto::types::Acceleration* release_acceleration();
  ::metamoto::types::Acceleration* mutable_acceleration();
  void set_allocated_acceleration(::metamoto::types::Acceleration* acceleration);

  // .metamoto.types.Shape shape = 6;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 6;
  private:
  const ::metamoto::types::Shape& _internal_shape() const;
  public:
  const ::metamoto::types::Shape& shape() const;
  ::metamoto::types::Shape* release_shape();
  ::metamoto::types::Shape* mutable_shape();
  void set_allocated_shape(::metamoto::types::Shape* shape);

  // .metamoto.types.Vehicle.Type type = 7;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::metamoto::types::Vehicle_Type type() const;
  void set_type(::metamoto::types::Vehicle_Type value);

  // .metamoto.types.Vehicle.LightState head_lights = 8;
  void clear_head_lights();
  static const int kHeadLightsFieldNumber = 8;
  ::metamoto::types::Vehicle_LightState head_lights() const;
  void set_head_lights(::metamoto::types::Vehicle_LightState value);

  // .metamoto.types.Vehicle.LightState reverse_lights = 9;
  void clear_reverse_lights();
  static const int kReverseLightsFieldNumber = 9;
  ::metamoto::types::Vehicle_LightState reverse_lights() const;
  void set_reverse_lights(::metamoto::types::Vehicle_LightState value);

  // .metamoto.types.Vehicle.LightState brake_lights = 10;
  void clear_brake_lights();
  static const int kBrakeLightsFieldNumber = 10;
  ::metamoto::types::Vehicle_LightState brake_lights() const;
  void set_brake_lights(::metamoto::types::Vehicle_LightState value);

  // .metamoto.types.Vehicle.SignalLightState signal_lights = 11;
  void clear_signal_lights();
  static const int kSignalLightsFieldNumber = 11;
  ::metamoto::types::Vehicle_SignalLightState signal_lights() const;
  void set_signal_lights(::metamoto::types::Vehicle_SignalLightState value);

  // @@protoc_insertion_point(class_scope:metamoto.types.Vehicle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::RoadPoint > road_point_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::internal::ArenaStringPtr paint_;
  ::metamoto::types::Pose* pose_;
  ::metamoto::types::Velocity* velocity_;
  ::metamoto::types::Acceleration* acceleration_;
  ::metamoto::types::Shape* shape_;
  int type_;
  int head_lights_;
  int reverse_lights_;
  int brake_lights_;
  int signal_lights_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fvehicle_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vehicle

// string id = 1;
inline void Vehicle::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vehicle::id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Vehicle.id)
  return id_.GetNoArena();
}
inline void Vehicle::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.Vehicle.id)
}
#if LANG_CXX11
inline void Vehicle::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.Vehicle.id)
}
#endif
inline void Vehicle::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.Vehicle.id)
}
inline void Vehicle::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Vehicle.id)
}
inline ::std::string* Vehicle::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.Vehicle.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vehicle::release_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.Vehicle.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vehicle::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Vehicle.id)
}

// .metamoto.types.Pose pose = 2;
inline bool Vehicle::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::metamoto::types::Pose& Vehicle::_internal_pose() const {
  return *pose_;
}
inline const ::metamoto::types::Pose& Vehicle::pose() const {
  const ::metamoto::types::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:metamoto.types.Vehicle.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Pose*>(
      &::metamoto::types::_Pose_default_instance_);
}
inline ::metamoto::types::Pose* Vehicle::release_pose() {
  // @@protoc_insertion_point(field_release:metamoto.types.Vehicle.pose)
  
  ::metamoto::types::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::metamoto::types::Pose* Vehicle::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Vehicle.pose)
  return pose_;
}
inline void Vehicle::set_allocated_pose(::metamoto::types::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Vehicle.pose)
}

// repeated .metamoto.types.RoadPoint road_point = 3;
inline int Vehicle::road_point_size() const {
  return road_point_.size();
}
inline ::metamoto::types::RoadPoint* Vehicle::mutable_road_point(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.Vehicle.road_point)
  return road_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::RoadPoint >*
Vehicle::mutable_road_point() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.Vehicle.road_point)
  return &road_point_;
}
inline const ::metamoto::types::RoadPoint& Vehicle::road_point(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.Vehicle.road_point)
  return road_point_.Get(index);
}
inline ::metamoto::types::RoadPoint* Vehicle::add_road_point() {
  // @@protoc_insertion_point(field_add:metamoto.types.Vehicle.road_point)
  return road_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::RoadPoint >&
Vehicle::road_point() const {
  // @@protoc_insertion_point(field_list:metamoto.types.Vehicle.road_point)
  return road_point_;
}

// .metamoto.types.Velocity velocity = 4;
inline bool Vehicle::has_velocity() const {
  return this != internal_default_instance() && velocity_ != NULL;
}
inline const ::metamoto::types::Velocity& Vehicle::_internal_velocity() const {
  return *velocity_;
}
inline const ::metamoto::types::Velocity& Vehicle::velocity() const {
  const ::metamoto::types::Velocity* p = velocity_;
  // @@protoc_insertion_point(field_get:metamoto.types.Vehicle.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Velocity*>(
      &::metamoto::types::_Velocity_default_instance_);
}
inline ::metamoto::types::Velocity* Vehicle::release_velocity() {
  // @@protoc_insertion_point(field_release:metamoto.types.Vehicle.velocity)
  
  ::metamoto::types::Velocity* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline ::metamoto::types::Velocity* Vehicle::mutable_velocity() {
  
  if (velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Velocity>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Vehicle.velocity)
  return velocity_;
}
inline void Vehicle::set_allocated_velocity(::metamoto::types::Velocity* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Vehicle.velocity)
}

// .metamoto.types.Acceleration acceleration = 5;
inline bool Vehicle::has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != NULL;
}
inline const ::metamoto::types::Acceleration& Vehicle::_internal_acceleration() const {
  return *acceleration_;
}
inline const ::metamoto::types::Acceleration& Vehicle::acceleration() const {
  const ::metamoto::types::Acceleration* p = acceleration_;
  // @@protoc_insertion_point(field_get:metamoto.types.Vehicle.acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Acceleration*>(
      &::metamoto::types::_Acceleration_default_instance_);
}
inline ::metamoto::types::Acceleration* Vehicle::release_acceleration() {
  // @@protoc_insertion_point(field_release:metamoto.types.Vehicle.acceleration)
  
  ::metamoto::types::Acceleration* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
inline ::metamoto::types::Acceleration* Vehicle::mutable_acceleration() {
  
  if (acceleration_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Acceleration>(GetArenaNoVirtual());
    acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Vehicle.acceleration)
  return acceleration_;
}
inline void Vehicle::set_allocated_acceleration(::metamoto::types::Acceleration* acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(acceleration_);
  }
  if (acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Vehicle.acceleration)
}

// .metamoto.types.Shape shape = 6;
inline bool Vehicle::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline const ::metamoto::types::Shape& Vehicle::_internal_shape() const {
  return *shape_;
}
inline const ::metamoto::types::Shape& Vehicle::shape() const {
  const ::metamoto::types::Shape* p = shape_;
  // @@protoc_insertion_point(field_get:metamoto.types.Vehicle.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Shape*>(
      &::metamoto::types::_Shape_default_instance_);
}
inline ::metamoto::types::Shape* Vehicle::release_shape() {
  // @@protoc_insertion_point(field_release:metamoto.types.Vehicle.shape)
  
  ::metamoto::types::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline ::metamoto::types::Shape* Vehicle::mutable_shape() {
  
  if (shape_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Shape>(GetArenaNoVirtual());
    shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Vehicle.shape)
  return shape_;
}
inline void Vehicle::set_allocated_shape(::metamoto::types::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(shape_);
  }
  if (shape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Vehicle.shape)
}

// .metamoto.types.Vehicle.Type type = 7;
inline void Vehicle::clear_type() {
  type_ = 0;
}
inline ::metamoto::types::Vehicle_Type Vehicle::type() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Vehicle.type)
  return static_cast< ::metamoto::types::Vehicle_Type >(type_);
}
inline void Vehicle::set_type(::metamoto::types::Vehicle_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Vehicle.type)
}

// .metamoto.types.Vehicle.LightState head_lights = 8;
inline void Vehicle::clear_head_lights() {
  head_lights_ = 0;
}
inline ::metamoto::types::Vehicle_LightState Vehicle::head_lights() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Vehicle.head_lights)
  return static_cast< ::metamoto::types::Vehicle_LightState >(head_lights_);
}
inline void Vehicle::set_head_lights(::metamoto::types::Vehicle_LightState value) {
  
  head_lights_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Vehicle.head_lights)
}

// .metamoto.types.Vehicle.LightState reverse_lights = 9;
inline void Vehicle::clear_reverse_lights() {
  reverse_lights_ = 0;
}
inline ::metamoto::types::Vehicle_LightState Vehicle::reverse_lights() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Vehicle.reverse_lights)
  return static_cast< ::metamoto::types::Vehicle_LightState >(reverse_lights_);
}
inline void Vehicle::set_reverse_lights(::metamoto::types::Vehicle_LightState value) {
  
  reverse_lights_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Vehicle.reverse_lights)
}

// .metamoto.types.Vehicle.LightState brake_lights = 10;
inline void Vehicle::clear_brake_lights() {
  brake_lights_ = 0;
}
inline ::metamoto::types::Vehicle_LightState Vehicle::brake_lights() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Vehicle.brake_lights)
  return static_cast< ::metamoto::types::Vehicle_LightState >(brake_lights_);
}
inline void Vehicle::set_brake_lights(::metamoto::types::Vehicle_LightState value) {
  
  brake_lights_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Vehicle.brake_lights)
}

// .metamoto.types.Vehicle.SignalLightState signal_lights = 11;
inline void Vehicle::clear_signal_lights() {
  signal_lights_ = 0;
}
inline ::metamoto::types::Vehicle_SignalLightState Vehicle::signal_lights() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Vehicle.signal_lights)
  return static_cast< ::metamoto::types::Vehicle_SignalLightState >(signal_lights_);
}
inline void Vehicle::set_signal_lights(::metamoto::types::Vehicle_SignalLightState value) {
  
  signal_lights_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Vehicle.signal_lights)
}

// string model = 12;
inline void Vehicle::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vehicle::model() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Vehicle.model)
  return model_.GetNoArena();
}
inline void Vehicle::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.Vehicle.model)
}
#if LANG_CXX11
inline void Vehicle::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.Vehicle.model)
}
#endif
inline void Vehicle::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.Vehicle.model)
}
inline void Vehicle::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Vehicle.model)
}
inline ::std::string* Vehicle::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.Vehicle.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vehicle::release_model() {
  // @@protoc_insertion_point(field_release:metamoto.types.Vehicle.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vehicle::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Vehicle.model)
}

// string paint = 13;
inline void Vehicle::clear_paint() {
  paint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vehicle::paint() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Vehicle.paint)
  return paint_.GetNoArena();
}
inline void Vehicle::set_paint(const ::std::string& value) {
  
  paint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.Vehicle.paint)
}
#if LANG_CXX11
inline void Vehicle::set_paint(::std::string&& value) {
  
  paint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.Vehicle.paint)
}
#endif
inline void Vehicle::set_paint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  paint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.Vehicle.paint)
}
inline void Vehicle::set_paint(const char* value, size_t size) {
  
  paint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Vehicle.paint)
}
inline ::std::string* Vehicle::mutable_paint() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.Vehicle.paint)
  return paint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vehicle::release_paint() {
  // @@protoc_insertion_point(field_release:metamoto.types.Vehicle.paint)
  
  return paint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vehicle::set_allocated_paint(::std::string* paint) {
  if (paint != NULL) {
    
  } else {
    
  }
  paint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paint);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Vehicle.paint)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::metamoto::types::Vehicle_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metamoto::types::Vehicle_Type>() {
  return ::metamoto::types::Vehicle_Type_descriptor();
}
template <> struct is_proto_enum< ::metamoto::types::Vehicle_LightState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metamoto::types::Vehicle_LightState>() {
  return ::metamoto::types::Vehicle_LightState_descriptor();
}
template <> struct is_proto_enum< ::metamoto::types::Vehicle_SignalLightState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metamoto::types::Vehicle_SignalLightState>() {
  return ::metamoto::types::Vehicle_SignalLightState_descriptor();
}
template <> struct is_proto_enum< ::metamoto::types::Vehicle_GearSelector> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metamoto::types::Vehicle_GearSelector>() {
  return ::metamoto::types::Vehicle_GearSelector_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2fvehicle_2eproto
