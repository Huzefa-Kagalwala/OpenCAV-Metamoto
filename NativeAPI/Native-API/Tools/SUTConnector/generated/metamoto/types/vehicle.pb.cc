// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/vehicle.proto

#include "metamoto/types/vehicle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_metamoto_2ftypes_2facceleration_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2facceleration_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Acceleration;
}  // namespace protobuf_metamoto_2ftypes_2facceleration_2eproto
namespace protobuf_metamoto_2ftypes_2fpose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fpose_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Pose;
}  // namespace protobuf_metamoto_2ftypes_2fpose_2eproto
namespace protobuf_metamoto_2ftypes_2froads_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2froads_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RoadPoint;
}  // namespace protobuf_metamoto_2ftypes_2froads_2eproto
namespace protobuf_metamoto_2ftypes_2fshape_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fshape_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Shape;
}  // namespace protobuf_metamoto_2ftypes_2fshape_2eproto
namespace protobuf_metamoto_2ftypes_2fvelocity_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fvelocity_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Velocity;
}  // namespace protobuf_metamoto_2ftypes_2fvelocity_2eproto
namespace metamoto {
namespace types {
class VehicleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vehicle>
      _instance;
} _Vehicle_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace protobuf_metamoto_2ftypes_2fvehicle_2eproto {
static void InitDefaultsVehicle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Vehicle_default_instance_;
    new (ptr) ::metamoto::types::Vehicle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Vehicle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Vehicle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsVehicle}, {
      &protobuf_metamoto_2ftypes_2fpose_2eproto::scc_info_Pose.base,
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_RoadPoint.base,
      &protobuf_metamoto_2ftypes_2fvelocity_2eproto::scc_info_Velocity.base,
      &protobuf_metamoto_2ftypes_2facceleration_2eproto::scc_info_Acceleration.base,
      &protobuf_metamoto_2ftypes_2fshape_2eproto::scc_info_Shape.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Vehicle.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Vehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Vehicle, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Vehicle, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Vehicle, road_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Vehicle, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Vehicle, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Vehicle, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Vehicle, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Vehicle, head_lights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Vehicle, reverse_lights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Vehicle, brake_lights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Vehicle, signal_lights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Vehicle, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Vehicle, paint_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::types::Vehicle)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Vehicle_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/types/vehicle.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034metamoto/types/vehicle.proto\022\016metamoto"
      ".types\032!metamoto/types/acceleration.prot"
      "o\032\031metamoto/types/pose.proto\032\032metamoto/t"
      "ypes/roads.proto\032\032metamoto/types/shape.p"
      "roto\032\035metamoto/types/velocity.proto\"\200\010\n\007"
      "Vehicle\022\n\n\002id\030\001 \001(\t\022\"\n\004pose\030\002 \001(\0132\024.meta"
      "moto.types.Pose\022-\n\nroad_point\030\003 \003(\0132\031.me"
      "tamoto.types.RoadPoint\022*\n\010velocity\030\004 \001(\013"
      "2\030.metamoto.types.Velocity\0222\n\014accelerati"
      "on\030\005 \001(\0132\034.metamoto.types.Acceleration\022$"
      "\n\005shape\030\006 \001(\0132\025.metamoto.types.Shape\022*\n\004"
      "type\030\007 \001(\0162\034.metamoto.types.Vehicle.Type"
      "\0227\n\013head_lights\030\010 \001(\0162\".metamoto.types.V"
      "ehicle.LightState\022:\n\016reverse_lights\030\t \001("
      "\0162\".metamoto.types.Vehicle.LightState\0228\n"
      "\014brake_lights\030\n \001(\0162\".metamoto.types.Veh"
      "icle.LightState\022\?\n\rsignal_lights\030\013 \001(\0162("
      ".metamoto.types.Vehicle.SignalLightState"
      "\022\r\n\005model\030\014 \001(\t\022\r\n\005paint\030\r \001(\t\"}\n\004Type\022\020"
      "\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_OTHER\020\001\022\007\n\003CAR\020"
      "\002\022\t\n\005TRUCK\020\003\022\007\n\003BUS\020\004\022\016\n\nMOTORCYCLE\020\005\022\013\n"
      "\007BICYCLE\020\006\022\t\n\005TRAIN\020\007\022\016\n\nSTREET_CAR\020\010\"Y\n"
      "\nLightState\022\027\n\023LIGHT_STATE_UNKNOWN\020\000\022\025\n\021"
      "LIGHT_STATE_OTHER\020\001\022\007\n\003OFF\020\002\022\006\n\002ON\020\003\022\n\n\006"
      "STRONG\020\004\"\215\001\n\020SignalLightState\022\036\n\032SIGNAL_"
      "LIGHT_STATE_UNKNOWN\020\000\022\034\n\030SIGNAL_LIGHT_ST"
      "ATE_OTHER\020\001\022\032\n\026SIGNAL_LIGHT_STATE_OFF\020\002\022"
      "\010\n\004LEFT\020\003\022\t\n\005RIGHT\020\004\022\n\n\006HAZARD\020\005\"l\n\014Gear"
      "Selector\022\020\n\014GEAR_UNKNOWN\020\000\022\016\n\nGEAR_OTHER"
      "\020\001\022\n\n\006GEAR_P\020\002\022\n\n\006GEAR_R\020\003\022\n\n\006GEAR_N\020\004\022\n"
      "\n\006GEAR_D\020\005\022\n\n\006GEAR_L\020\006B\021\252\002\016Metamoto.Type"
      "sb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1249);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/types/vehicle.proto", &protobuf_RegisterTypes);
  ::protobuf_metamoto_2ftypes_2facceleration_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fpose_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2froads_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fshape_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fvelocity_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2ftypes_2fvehicle_2eproto
namespace metamoto {
namespace types {
const ::google::protobuf::EnumDescriptor* Vehicle_Type_descriptor() {
  protobuf_metamoto_2ftypes_2fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2fvehicle_2eproto::file_level_enum_descriptors[0];
}
bool Vehicle_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle_Type Vehicle::TYPE_UNKNOWN;
const Vehicle_Type Vehicle::TYPE_OTHER;
const Vehicle_Type Vehicle::CAR;
const Vehicle_Type Vehicle::TRUCK;
const Vehicle_Type Vehicle::BUS;
const Vehicle_Type Vehicle::MOTORCYCLE;
const Vehicle_Type Vehicle::BICYCLE;
const Vehicle_Type Vehicle::TRAIN;
const Vehicle_Type Vehicle::STREET_CAR;
const Vehicle_Type Vehicle::Type_MIN;
const Vehicle_Type Vehicle::Type_MAX;
const int Vehicle::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle_LightState_descriptor() {
  protobuf_metamoto_2ftypes_2fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2fvehicle_2eproto::file_level_enum_descriptors[1];
}
bool Vehicle_LightState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle_LightState Vehicle::LIGHT_STATE_UNKNOWN;
const Vehicle_LightState Vehicle::LIGHT_STATE_OTHER;
const Vehicle_LightState Vehicle::OFF;
const Vehicle_LightState Vehicle::ON;
const Vehicle_LightState Vehicle::STRONG;
const Vehicle_LightState Vehicle::LightState_MIN;
const Vehicle_LightState Vehicle::LightState_MAX;
const int Vehicle::LightState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle_SignalLightState_descriptor() {
  protobuf_metamoto_2ftypes_2fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2fvehicle_2eproto::file_level_enum_descriptors[2];
}
bool Vehicle_SignalLightState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle_SignalLightState Vehicle::SIGNAL_LIGHT_STATE_UNKNOWN;
const Vehicle_SignalLightState Vehicle::SIGNAL_LIGHT_STATE_OTHER;
const Vehicle_SignalLightState Vehicle::SIGNAL_LIGHT_STATE_OFF;
const Vehicle_SignalLightState Vehicle::LEFT;
const Vehicle_SignalLightState Vehicle::RIGHT;
const Vehicle_SignalLightState Vehicle::HAZARD;
const Vehicle_SignalLightState Vehicle::SignalLightState_MIN;
const Vehicle_SignalLightState Vehicle::SignalLightState_MAX;
const int Vehicle::SignalLightState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle_GearSelector_descriptor() {
  protobuf_metamoto_2ftypes_2fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2fvehicle_2eproto::file_level_enum_descriptors[3];
}
bool Vehicle_GearSelector_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle_GearSelector Vehicle::GEAR_UNKNOWN;
const Vehicle_GearSelector Vehicle::GEAR_OTHER;
const Vehicle_GearSelector Vehicle::GEAR_P;
const Vehicle_GearSelector Vehicle::GEAR_R;
const Vehicle_GearSelector Vehicle::GEAR_N;
const Vehicle_GearSelector Vehicle::GEAR_D;
const Vehicle_GearSelector Vehicle::GEAR_L;
const Vehicle_GearSelector Vehicle::GearSelector_MIN;
const Vehicle_GearSelector Vehicle::GearSelector_MAX;
const int Vehicle::GearSelector_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Vehicle::InitAsDefaultInstance() {
  ::metamoto::types::_Vehicle_default_instance_._instance.get_mutable()->pose_ = const_cast< ::metamoto::types::Pose*>(
      ::metamoto::types::Pose::internal_default_instance());
  ::metamoto::types::_Vehicle_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::metamoto::types::Velocity*>(
      ::metamoto::types::Velocity::internal_default_instance());
  ::metamoto::types::_Vehicle_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::metamoto::types::Acceleration*>(
      ::metamoto::types::Acceleration::internal_default_instance());
  ::metamoto::types::_Vehicle_default_instance_._instance.get_mutable()->shape_ = const_cast< ::metamoto::types::Shape*>(
      ::metamoto::types::Shape::internal_default_instance());
}
void Vehicle::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
void Vehicle::clear_road_point() {
  road_point_.Clear();
}
void Vehicle::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
}
void Vehicle::clear_acceleration() {
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) {
    delete acceleration_;
  }
  acceleration_ = NULL;
}
void Vehicle::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vehicle::kIdFieldNumber;
const int Vehicle::kPoseFieldNumber;
const int Vehicle::kRoadPointFieldNumber;
const int Vehicle::kVelocityFieldNumber;
const int Vehicle::kAccelerationFieldNumber;
const int Vehicle::kShapeFieldNumber;
const int Vehicle::kTypeFieldNumber;
const int Vehicle::kHeadLightsFieldNumber;
const int Vehicle::kReverseLightsFieldNumber;
const int Vehicle::kBrakeLightsFieldNumber;
const int Vehicle::kSignalLightsFieldNumber;
const int Vehicle::kModelFieldNumber;
const int Vehicle::kPaintFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vehicle::Vehicle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fvehicle_2eproto::scc_info_Vehicle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Vehicle)
}
Vehicle::Vehicle(const Vehicle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      road_point_(from.road_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  paint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.paint().size() > 0) {
    paint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paint_);
  }
  if (from.has_pose()) {
    pose_ = new ::metamoto::types::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::metamoto::types::Velocity(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::metamoto::types::Acceleration(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  if (from.has_shape()) {
    shape_ = new ::metamoto::types::Shape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_lights_) -
    reinterpret_cast<char*>(&type_)) + sizeof(signal_lights_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Vehicle)
}

void Vehicle::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_lights_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(signal_lights_));
}

Vehicle::~Vehicle() {
  // @@protoc_insertion_point(destructor:metamoto.types.Vehicle)
  SharedDtor();
}

void Vehicle::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete shape_;
}

void Vehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Vehicle::descriptor() {
  ::protobuf_metamoto_2ftypes_2fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fvehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vehicle& Vehicle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fvehicle_2eproto::scc_info_Vehicle.base);
  return *internal_default_instance();
}


void Vehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Vehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_point_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) {
    delete acceleration_;
  }
  acceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_lights_) -
      reinterpret_cast<char*>(&type_)) + sizeof(signal_lights_));
  _internal_metadata_.Clear();
}

bool Vehicle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Vehicle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Vehicle.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Pose pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.RoadPoint road_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_road_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Velocity velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Acceleration acceleration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Shape shape = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vehicle.Type type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::metamoto::types::Vehicle_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vehicle.LightState head_lights = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_head_lights(static_cast< ::metamoto::types::Vehicle_LightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vehicle.LightState reverse_lights = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reverse_lights(static_cast< ::metamoto::types::Vehicle_LightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vehicle.LightState brake_lights = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_brake_lights(static_cast< ::metamoto::types::Vehicle_LightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vehicle.SignalLightState signal_lights = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_signal_lights(static_cast< ::metamoto::types::Vehicle_SignalLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), static_cast<int>(this->model().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Vehicle.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string paint = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->paint().data(), static_cast<int>(this->paint().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Vehicle.paint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Vehicle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Vehicle)
  return false;
#undef DO_
}

void Vehicle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Vehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Vehicle.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .metamoto.types.Pose pose = 2;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_pose(), output);
  }

  // repeated .metamoto.types.RoadPoint road_point = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->road_point(static_cast<int>(i)),
      output);
  }

  // .metamoto.types.Velocity velocity = 4;
  if (this->has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_velocity(), output);
  }

  // .metamoto.types.Acceleration acceleration = 5;
  if (this->has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_acceleration(), output);
  }

  // .metamoto.types.Shape shape = 6;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_shape(), output);
  }

  // .metamoto.types.Vehicle.Type type = 7;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  // .metamoto.types.Vehicle.LightState head_lights = 8;
  if (this->head_lights() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->head_lights(), output);
  }

  // .metamoto.types.Vehicle.LightState reverse_lights = 9;
  if (this->reverse_lights() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->reverse_lights(), output);
  }

  // .metamoto.types.Vehicle.LightState brake_lights = 10;
  if (this->brake_lights() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->brake_lights(), output);
  }

  // .metamoto.types.Vehicle.SignalLightState signal_lights = 11;
  if (this->signal_lights() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->signal_lights(), output);
  }

  // string model = 12;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Vehicle.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->model(), output);
  }

  // string paint = 13;
  if (this->paint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->paint().data(), static_cast<int>(this->paint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Vehicle.paint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->paint(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Vehicle)
}

::google::protobuf::uint8* Vehicle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Vehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Vehicle.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .metamoto.types.Pose pose = 2;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_pose(), deterministic, target);
  }

  // repeated .metamoto.types.RoadPoint road_point = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->road_point(static_cast<int>(i)), deterministic, target);
  }

  // .metamoto.types.Velocity velocity = 4;
  if (this->has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_velocity(), deterministic, target);
  }

  // .metamoto.types.Acceleration acceleration = 5;
  if (this->has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_acceleration(), deterministic, target);
  }

  // .metamoto.types.Shape shape = 6;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_shape(), deterministic, target);
  }

  // .metamoto.types.Vehicle.Type type = 7;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  // .metamoto.types.Vehicle.LightState head_lights = 8;
  if (this->head_lights() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->head_lights(), target);
  }

  // .metamoto.types.Vehicle.LightState reverse_lights = 9;
  if (this->reverse_lights() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->reverse_lights(), target);
  }

  // .metamoto.types.Vehicle.LightState brake_lights = 10;
  if (this->brake_lights() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->brake_lights(), target);
  }

  // .metamoto.types.Vehicle.SignalLightState signal_lights = 11;
  if (this->signal_lights() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->signal_lights(), target);
  }

  // string model = 12;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Vehicle.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->model(), target);
  }

  // string paint = 13;
  if (this->paint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->paint().data(), static_cast<int>(this->paint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Vehicle.paint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->paint(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Vehicle)
  return target;
}

size_t Vehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Vehicle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.RoadPoint road_point = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->road_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road_point(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string model = 12;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // string paint = 13;
  if (this->paint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->paint());
  }

  // .metamoto.types.Pose pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .metamoto.types.Velocity velocity = 4;
  if (this->has_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .metamoto.types.Acceleration acceleration = 5;
  if (this->has_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *acceleration_);
  }

  // .metamoto.types.Shape shape = 6;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .metamoto.types.Vehicle.Type type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .metamoto.types.Vehicle.LightState head_lights = 8;
  if (this->head_lights() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->head_lights());
  }

  // .metamoto.types.Vehicle.LightState reverse_lights = 9;
  if (this->reverse_lights() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reverse_lights());
  }

  // .metamoto.types.Vehicle.LightState brake_lights = 10;
  if (this->brake_lights() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->brake_lights());
  }

  // .metamoto.types.Vehicle.SignalLightState signal_lights = 11;
  if (this->signal_lights() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->signal_lights());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Vehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vehicle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Vehicle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Vehicle)
    MergeFrom(*source);
  }
}

void Vehicle::MergeFrom(const Vehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Vehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_point_.MergeFrom(from.road_point_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.paint().size() > 0) {

    paint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paint_);
  }
  if (from.has_pose()) {
    mutable_pose()->::metamoto::types::Pose::MergeFrom(from.pose());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::metamoto::types::Velocity::MergeFrom(from.velocity());
  }
  if (from.has_acceleration()) {
    mutable_acceleration()->::metamoto::types::Acceleration::MergeFrom(from.acceleration());
  }
  if (from.has_shape()) {
    mutable_shape()->::metamoto::types::Shape::MergeFrom(from.shape());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.head_lights() != 0) {
    set_head_lights(from.head_lights());
  }
  if (from.reverse_lights() != 0) {
    set_reverse_lights(from.reverse_lights());
  }
  if (from.brake_lights() != 0) {
    set_brake_lights(from.brake_lights());
  }
  if (from.signal_lights() != 0) {
    set_signal_lights(from.signal_lights());
  }
}

void Vehicle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle::CopyFrom(const Vehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle::IsInitialized() const {
  return true;
}

void Vehicle::Swap(Vehicle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vehicle::InternalSwap(Vehicle* other) {
  using std::swap;
  CastToBase(&road_point_)->InternalSwap(CastToBase(&other->road_point_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_.Swap(&other->model_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  paint_.Swap(&other->paint_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pose_, other->pose_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
  swap(shape_, other->shape_);
  swap(type_, other->type_);
  swap(head_lights_, other->head_lights_);
  swap(reverse_lights_, other->reverse_lights_);
  swap(brake_lights_, other->brake_lights_);
  swap(signal_lights_, other->signal_lights_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Vehicle::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fvehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Vehicle* Arena::CreateMaybeMessage< ::metamoto::types::Vehicle >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Vehicle >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
