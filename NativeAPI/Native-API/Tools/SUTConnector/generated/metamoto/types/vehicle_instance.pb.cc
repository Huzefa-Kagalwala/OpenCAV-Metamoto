// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/vehicle_instance.proto

#include "metamoto/types/vehicle_instance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FloatValue;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VehicleInstance_Body;
}  // namespace protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto
namespace metamoto {
namespace types {
class VehicleInstance_BodyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleInstance_Body>
      _instance;
} _VehicleInstance_Body_default_instance_;
class VehicleInstanceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleInstance>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr model_;
  int type_;
} _VehicleInstance_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto {
static void InitDefaultsVehicleInstance_Body() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_VehicleInstance_Body_default_instance_;
    new (ptr) ::metamoto::types::VehicleInstance_Body();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::VehicleInstance_Body::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VehicleInstance_Body =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVehicleInstance_Body}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_FloatValue.base,}};

static void InitDefaultsVehicleInstance() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_VehicleInstance_default_instance_;
    new (ptr) ::metamoto::types::VehicleInstance();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::VehicleInstance::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VehicleInstance =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVehicleInstance}, {
      &protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::scc_info_VehicleInstance_Body.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleInstance_Body.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleInstance.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleInstance_Body, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleInstance_Body, paint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleInstance_Body, dirt_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleInstance, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::metamoto::types::VehicleInstanceDefaultTypeInternal, model_),
  offsetof(::metamoto::types::VehicleInstanceDefaultTypeInternal, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleInstance, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleInstance, model_oneof_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::types::VehicleInstance_Body)},
  { 7, -1, sizeof(::metamoto::types::VehicleInstance)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_VehicleInstance_Body_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_VehicleInstance_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/types/vehicle_instance.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n%metamoto/types/vehicle_instance.proto\022"
      "\016metamoto.types\032\036google/protobuf/wrapper"
      "s.proto\032\034metamoto/types/vehicle.proto\"\325\001"
      "\n\017VehicleInstance\022\017\n\005model\030\001 \001(\tH\000\022,\n\004ty"
      "pe\030\002 \001(\0162\034.metamoto.types.Vehicle.TypeH\000"
      "\0222\n\004body\030\003 \001(\0132$.metamoto.types.VehicleI"
      "nstance.Body\032@\n\004Body\022\r\n\005paint\030\001 \001(\t\022)\n\004d"
      "irt\030\002 \001(\0132\033.google.protobuf.FloatValueB\r"
      "\n\013model_oneofB\021\252\002\016Metamoto.Typesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 360);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/types/vehicle_instance.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fvehicle_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto
namespace metamoto {
namespace types {

// ===================================================================

void VehicleInstance_Body::InitAsDefaultInstance() {
  ::metamoto::types::_VehicleInstance_Body_default_instance_._instance.get_mutable()->dirt_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
}
void VehicleInstance_Body::clear_dirt() {
  if (GetArenaNoVirtual() == NULL && dirt_ != NULL) {
    delete dirt_;
  }
  dirt_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleInstance_Body::kPaintFieldNumber;
const int VehicleInstance_Body::kDirtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleInstance_Body::VehicleInstance_Body()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::scc_info_VehicleInstance_Body.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.VehicleInstance.Body)
}
VehicleInstance_Body::VehicleInstance_Body(const VehicleInstance_Body& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.paint().size() > 0) {
    paint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paint_);
  }
  if (from.has_dirt()) {
    dirt_ = new ::google::protobuf::FloatValue(*from.dirt_);
  } else {
    dirt_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.types.VehicleInstance.Body)
}

void VehicleInstance_Body::SharedCtor() {
  paint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dirt_ = NULL;
}

VehicleInstance_Body::~VehicleInstance_Body() {
  // @@protoc_insertion_point(destructor:metamoto.types.VehicleInstance.Body)
  SharedDtor();
}

void VehicleInstance_Body::SharedDtor() {
  paint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dirt_;
}

void VehicleInstance_Body::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleInstance_Body::descriptor() {
  ::protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleInstance_Body& VehicleInstance_Body::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::scc_info_VehicleInstance_Body.base);
  return *internal_default_instance();
}


void VehicleInstance_Body::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.VehicleInstance.Body)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && dirt_ != NULL) {
    delete dirt_;
  }
  dirt_ = NULL;
  _internal_metadata_.Clear();
}

bool VehicleInstance_Body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.VehicleInstance.Body)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string paint = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->paint().data(), static_cast<int>(this->paint().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.VehicleInstance.Body.paint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue dirt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dirt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.VehicleInstance.Body)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.VehicleInstance.Body)
  return false;
#undef DO_
}

void VehicleInstance_Body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.VehicleInstance.Body)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string paint = 1;
  if (this->paint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->paint().data(), static_cast<int>(this->paint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.VehicleInstance.Body.paint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->paint(), output);
  }

  // .google.protobuf.FloatValue dirt = 2;
  if (this->has_dirt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_dirt(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.VehicleInstance.Body)
}

::google::protobuf::uint8* VehicleInstance_Body::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.VehicleInstance.Body)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string paint = 1;
  if (this->paint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->paint().data(), static_cast<int>(this->paint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.VehicleInstance.Body.paint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->paint(), target);
  }

  // .google.protobuf.FloatValue dirt = 2;
  if (this->has_dirt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_dirt(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.VehicleInstance.Body)
  return target;
}

size_t VehicleInstance_Body::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.VehicleInstance.Body)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string paint = 1;
  if (this->paint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->paint());
  }

  // .google.protobuf.FloatValue dirt = 2;
  if (this->has_dirt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dirt_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleInstance_Body::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.VehicleInstance.Body)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleInstance_Body* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleInstance_Body>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.VehicleInstance.Body)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.VehicleInstance.Body)
    MergeFrom(*source);
  }
}

void VehicleInstance_Body::MergeFrom(const VehicleInstance_Body& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.VehicleInstance.Body)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.paint().size() > 0) {

    paint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paint_);
  }
  if (from.has_dirt()) {
    mutable_dirt()->::google::protobuf::FloatValue::MergeFrom(from.dirt());
  }
}

void VehicleInstance_Body::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.VehicleInstance.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleInstance_Body::CopyFrom(const VehicleInstance_Body& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.VehicleInstance.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleInstance_Body::IsInitialized() const {
  return true;
}

void VehicleInstance_Body::Swap(VehicleInstance_Body* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleInstance_Body::InternalSwap(VehicleInstance_Body* other) {
  using std::swap;
  paint_.Swap(&other->paint_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dirt_, other->dirt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleInstance_Body::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleInstance::InitAsDefaultInstance() {
  ::metamoto::types::_VehicleInstance_default_instance_.model_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::metamoto::types::_VehicleInstance_default_instance_.type_ = 0;
  ::metamoto::types::_VehicleInstance_default_instance_._instance.get_mutable()->body_ = const_cast< ::metamoto::types::VehicleInstance_Body*>(
      ::metamoto::types::VehicleInstance_Body::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleInstance::kModelFieldNumber;
const int VehicleInstance::kTypeFieldNumber;
const int VehicleInstance::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleInstance::VehicleInstance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::scc_info_VehicleInstance.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.VehicleInstance)
}
VehicleInstance::VehicleInstance(const VehicleInstance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_body()) {
    body_ = new ::metamoto::types::VehicleInstance_Body(*from.body_);
  } else {
    body_ = NULL;
  }
  clear_has_model_oneof();
  switch (from.model_oneof_case()) {
    case kModel: {
      set_model(from.model());
      break;
    }
    case kType: {
      set_type(from.type());
      break;
    }
    case MODEL_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.types.VehicleInstance)
}

void VehicleInstance::SharedCtor() {
  body_ = NULL;
  clear_has_model_oneof();
}

VehicleInstance::~VehicleInstance() {
  // @@protoc_insertion_point(destructor:metamoto.types.VehicleInstance)
  SharedDtor();
}

void VehicleInstance::SharedDtor() {
  if (this != internal_default_instance()) delete body_;
  if (has_model_oneof()) {
    clear_model_oneof();
  }
}

void VehicleInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleInstance::descriptor() {
  ::protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleInstance& VehicleInstance::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::scc_info_VehicleInstance.base);
  return *internal_default_instance();
}


void VehicleInstance::clear_model_oneof() {
// @@protoc_insertion_point(one_of_clear_start:metamoto.types.VehicleInstance)
  switch (model_oneof_case()) {
    case kModel: {
      model_oneof_.model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kType: {
      // No need to clear
      break;
    }
    case MODEL_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MODEL_ONEOF_NOT_SET;
}


void VehicleInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.VehicleInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && body_ != NULL) {
    delete body_;
  }
  body_ = NULL;
  clear_model_oneof();
  _internal_metadata_.Clear();
}

bool VehicleInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.VehicleInstance)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string model = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), static_cast<int>(this->model().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.VehicleInstance.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vehicle.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::metamoto::types::Vehicle_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.VehicleInstance.Body body = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.VehicleInstance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.VehicleInstance)
  return false;
#undef DO_
}

void VehicleInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.VehicleInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.VehicleInstance.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model(), output);
  }

  // .metamoto.types.Vehicle.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .metamoto.types.VehicleInstance.Body body = 3;
  if (this->has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_body(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.VehicleInstance)
}

::google::protobuf::uint8* VehicleInstance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.VehicleInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.VehicleInstance.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model(), target);
  }

  // .metamoto.types.Vehicle.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .metamoto.types.VehicleInstance.Body body = 3;
  if (this->has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_body(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.VehicleInstance)
  return target;
}

size_t VehicleInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.VehicleInstance)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.VehicleInstance.Body body = 3;
  if (this->has_body()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *body_);
  }

  switch (model_oneof_case()) {
    // string model = 1;
    case kModel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
      break;
    }
    // .metamoto.types.Vehicle.Type type = 2;
    case kType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
      break;
    }
    case MODEL_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleInstance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.VehicleInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleInstance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleInstance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.VehicleInstance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.VehicleInstance)
    MergeFrom(*source);
  }
}

void VehicleInstance::MergeFrom(const VehicleInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.VehicleInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_body()) {
    mutable_body()->::metamoto::types::VehicleInstance_Body::MergeFrom(from.body());
  }
  switch (from.model_oneof_case()) {
    case kModel: {
      set_model(from.model());
      break;
    }
    case kType: {
      set_type(from.type());
      break;
    }
    case MODEL_ONEOF_NOT_SET: {
      break;
    }
  }
}

void VehicleInstance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.VehicleInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleInstance::CopyFrom(const VehicleInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.VehicleInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleInstance::IsInitialized() const {
  return true;
}

void VehicleInstance::Swap(VehicleInstance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleInstance::InternalSwap(VehicleInstance* other) {
  using std::swap;
  swap(body_, other->body_);
  swap(model_oneof_, other->model_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleInstance::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::VehicleInstance_Body* Arena::CreateMaybeMessage< ::metamoto::types::VehicleInstance_Body >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::VehicleInstance_Body >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::VehicleInstance* Arena::CreateMaybeMessage< ::metamoto::types::VehicleInstance >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::VehicleInstance >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
