// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/vehicle_instance.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2fvehicle_5finstance_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2fvehicle_5finstance_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include "metamoto/types/vehicle.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto 

namespace protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto
namespace metamoto {
namespace types {
class VehicleInstance;
class VehicleInstanceDefaultTypeInternal;
extern VehicleInstanceDefaultTypeInternal _VehicleInstance_default_instance_;
class VehicleInstance_Body;
class VehicleInstance_BodyDefaultTypeInternal;
extern VehicleInstance_BodyDefaultTypeInternal _VehicleInstance_Body_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::VehicleInstance* Arena::CreateMaybeMessage<::metamoto::types::VehicleInstance>(Arena*);
template<> ::metamoto::types::VehicleInstance_Body* Arena::CreateMaybeMessage<::metamoto::types::VehicleInstance_Body>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

// ===================================================================

class VehicleInstance_Body : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.VehicleInstance.Body) */ {
 public:
  VehicleInstance_Body();
  virtual ~VehicleInstance_Body();

  VehicleInstance_Body(const VehicleInstance_Body& from);

  inline VehicleInstance_Body& operator=(const VehicleInstance_Body& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleInstance_Body(VehicleInstance_Body&& from) noexcept
    : VehicleInstance_Body() {
    *this = ::std::move(from);
  }

  inline VehicleInstance_Body& operator=(VehicleInstance_Body&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleInstance_Body& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleInstance_Body* internal_default_instance() {
    return reinterpret_cast<const VehicleInstance_Body*>(
               &_VehicleInstance_Body_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VehicleInstance_Body* other);
  friend void swap(VehicleInstance_Body& a, VehicleInstance_Body& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleInstance_Body* New() const final {
    return CreateMaybeMessage<VehicleInstance_Body>(NULL);
  }

  VehicleInstance_Body* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleInstance_Body>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleInstance_Body& from);
  void MergeFrom(const VehicleInstance_Body& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleInstance_Body* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string paint = 1;
  void clear_paint();
  static const int kPaintFieldNumber = 1;
  const ::std::string& paint() const;
  void set_paint(const ::std::string& value);
  #if LANG_CXX11
  void set_paint(::std::string&& value);
  #endif
  void set_paint(const char* value);
  void set_paint(const char* value, size_t size);
  ::std::string* mutable_paint();
  ::std::string* release_paint();
  void set_allocated_paint(::std::string* paint);

  // .google.protobuf.FloatValue dirt = 2;
  bool has_dirt() const;
  void clear_dirt();
  static const int kDirtFieldNumber = 2;
  private:
  const ::google::protobuf::FloatValue& _internal_dirt() const;
  public:
  const ::google::protobuf::FloatValue& dirt() const;
  ::google::protobuf::FloatValue* release_dirt();
  ::google::protobuf::FloatValue* mutable_dirt();
  void set_allocated_dirt(::google::protobuf::FloatValue* dirt);

  // @@protoc_insertion_point(class_scope:metamoto.types.VehicleInstance.Body)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr paint_;
  ::google::protobuf::FloatValue* dirt_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleInstance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.VehicleInstance) */ {
 public:
  VehicleInstance();
  virtual ~VehicleInstance();

  VehicleInstance(const VehicleInstance& from);

  inline VehicleInstance& operator=(const VehicleInstance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleInstance(VehicleInstance&& from) noexcept
    : VehicleInstance() {
    *this = ::std::move(from);
  }

  inline VehicleInstance& operator=(VehicleInstance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleInstance& default_instance();

  enum ModelOneofCase {
    kModel = 1,
    kType = 2,
    MODEL_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleInstance* internal_default_instance() {
    return reinterpret_cast<const VehicleInstance*>(
               &_VehicleInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(VehicleInstance* other);
  friend void swap(VehicleInstance& a, VehicleInstance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleInstance* New() const final {
    return CreateMaybeMessage<VehicleInstance>(NULL);
  }

  VehicleInstance* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleInstance>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleInstance& from);
  void MergeFrom(const VehicleInstance& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleInstance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VehicleInstance_Body Body;

  // accessors -------------------------------------------------------

  // .metamoto.types.VehicleInstance.Body body = 3;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 3;
  private:
  const ::metamoto::types::VehicleInstance_Body& _internal_body() const;
  public:
  const ::metamoto::types::VehicleInstance_Body& body() const;
  ::metamoto::types::VehicleInstance_Body* release_body();
  ::metamoto::types::VehicleInstance_Body* mutable_body();
  void set_allocated_body(::metamoto::types::VehicleInstance_Body* body);

  // string model = 1;
  private:
  bool has_model() const;
  public:
  void clear_model();
  static const int kModelFieldNumber = 1;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // .metamoto.types.Vehicle.Type type = 2;
  private:
  bool has_type() const;
  public:
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::metamoto::types::Vehicle_Type type() const;
  void set_type(::metamoto::types::Vehicle_Type value);

  void clear_model_oneof();
  ModelOneofCase model_oneof_case() const;
  // @@protoc_insertion_point(class_scope:metamoto.types.VehicleInstance)
 private:
  void set_has_model();
  void set_has_type();

  inline bool has_model_oneof() const;
  inline void clear_has_model_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::types::VehicleInstance_Body* body_;
  union ModelOneofUnion {
    ModelOneofUnion() {}
    ::google::protobuf::internal::ArenaStringPtr model_;
    int type_;
  } model_oneof_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleInstance_Body

// string paint = 1;
inline void VehicleInstance_Body::clear_paint() {
  paint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleInstance_Body::paint() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleInstance.Body.paint)
  return paint_.GetNoArena();
}
inline void VehicleInstance_Body::set_paint(const ::std::string& value) {
  
  paint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleInstance.Body.paint)
}
#if LANG_CXX11
inline void VehicleInstance_Body::set_paint(::std::string&& value) {
  
  paint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.VehicleInstance.Body.paint)
}
#endif
inline void VehicleInstance_Body::set_paint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  paint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.VehicleInstance.Body.paint)
}
inline void VehicleInstance_Body::set_paint(const char* value, size_t size) {
  
  paint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.VehicleInstance.Body.paint)
}
inline ::std::string* VehicleInstance_Body::mutable_paint() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.VehicleInstance.Body.paint)
  return paint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleInstance_Body::release_paint() {
  // @@protoc_insertion_point(field_release:metamoto.types.VehicleInstance.Body.paint)
  
  return paint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleInstance_Body::set_allocated_paint(::std::string* paint) {
  if (paint != NULL) {
    
  } else {
    
  }
  paint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paint);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.VehicleInstance.Body.paint)
}

// .google.protobuf.FloatValue dirt = 2;
inline bool VehicleInstance_Body::has_dirt() const {
  return this != internal_default_instance() && dirt_ != NULL;
}
inline const ::google::protobuf::FloatValue& VehicleInstance_Body::_internal_dirt() const {
  return *dirt_;
}
inline const ::google::protobuf::FloatValue& VehicleInstance_Body::dirt() const {
  const ::google::protobuf::FloatValue* p = dirt_;
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleInstance.Body.dirt)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FloatValue*>(
      &::google::protobuf::_FloatValue_default_instance_);
}
inline ::google::protobuf::FloatValue* VehicleInstance_Body::release_dirt() {
  // @@protoc_insertion_point(field_release:metamoto.types.VehicleInstance.Body.dirt)
  
  ::google::protobuf::FloatValue* temp = dirt_;
  dirt_ = NULL;
  return temp;
}
inline ::google::protobuf::FloatValue* VehicleInstance_Body::mutable_dirt() {
  
  if (dirt_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FloatValue>(GetArenaNoVirtual());
    dirt_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.VehicleInstance.Body.dirt)
  return dirt_;
}
inline void VehicleInstance_Body::set_allocated_dirt(::google::protobuf::FloatValue* dirt) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dirt_);
  }
  if (dirt) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(dirt)->GetArena();
    if (message_arena != submessage_arena) {
      dirt = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dirt, submessage_arena);
    }
    
  } else {
    
  }
  dirt_ = dirt;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.VehicleInstance.Body.dirt)
}

// -------------------------------------------------------------------

// VehicleInstance

// string model = 1;
inline bool VehicleInstance::has_model() const {
  return model_oneof_case() == kModel;
}
inline void VehicleInstance::set_has_model() {
  _oneof_case_[0] = kModel;
}
inline void VehicleInstance::clear_model() {
  if (has_model()) {
    model_oneof_.model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_model_oneof();
  }
}
inline const ::std::string& VehicleInstance::model() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleInstance.model)
  if (has_model()) {
    return model_oneof_.model_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void VehicleInstance::set_model(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleInstance.model)
  if (!has_model()) {
    clear_model_oneof();
    set_has_model();
    model_oneof_.model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  model_oneof_.model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleInstance.model)
}
#if LANG_CXX11
inline void VehicleInstance::set_model(::std::string&& value) {
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleInstance.model)
  if (!has_model()) {
    clear_model_oneof();
    set_has_model();
    model_oneof_.model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  model_oneof_.model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.VehicleInstance.model)
}
#endif
inline void VehicleInstance::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_model()) {
    clear_model_oneof();
    set_has_model();
    model_oneof_.model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  model_oneof_.model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.VehicleInstance.model)
}
inline void VehicleInstance::set_model(const char* value, size_t size) {
  if (!has_model()) {
    clear_model_oneof();
    set_has_model();
    model_oneof_.model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  model_oneof_.model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.VehicleInstance.model)
}
inline ::std::string* VehicleInstance::mutable_model() {
  if (!has_model()) {
    clear_model_oneof();
    set_has_model();
    model_oneof_.model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.VehicleInstance.model)
  return model_oneof_.model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleInstance::release_model() {
  // @@protoc_insertion_point(field_release:metamoto.types.VehicleInstance.model)
  if (has_model()) {
    clear_has_model_oneof();
    return model_oneof_.model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void VehicleInstance::set_allocated_model(::std::string* model) {
  if (!has_model()) {
    model_oneof_.model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_model_oneof();
  if (model != NULL) {
    set_has_model();
    model_oneof_.model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  }
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.VehicleInstance.model)
}

// .metamoto.types.Vehicle.Type type = 2;
inline bool VehicleInstance::has_type() const {
  return model_oneof_case() == kType;
}
inline void VehicleInstance::set_has_type() {
  _oneof_case_[0] = kType;
}
inline void VehicleInstance::clear_type() {
  if (has_type()) {
    model_oneof_.type_ = 0;
    clear_has_model_oneof();
  }
}
inline ::metamoto::types::Vehicle_Type VehicleInstance::type() const {
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleInstance.type)
  if (has_type()) {
    return static_cast< ::metamoto::types::Vehicle_Type >(model_oneof_.type_);
  }
  return static_cast< ::metamoto::types::Vehicle_Type >(0);
}
inline void VehicleInstance::set_type(::metamoto::types::Vehicle_Type value) {
  if (!has_type()) {
    clear_model_oneof();
    set_has_type();
  }
  model_oneof_.type_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.VehicleInstance.type)
}

// .metamoto.types.VehicleInstance.Body body = 3;
inline bool VehicleInstance::has_body() const {
  return this != internal_default_instance() && body_ != NULL;
}
inline void VehicleInstance::clear_body() {
  if (GetArenaNoVirtual() == NULL && body_ != NULL) {
    delete body_;
  }
  body_ = NULL;
}
inline const ::metamoto::types::VehicleInstance_Body& VehicleInstance::_internal_body() const {
  return *body_;
}
inline const ::metamoto::types::VehicleInstance_Body& VehicleInstance::body() const {
  const ::metamoto::types::VehicleInstance_Body* p = body_;
  // @@protoc_insertion_point(field_get:metamoto.types.VehicleInstance.body)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::VehicleInstance_Body*>(
      &::metamoto::types::_VehicleInstance_Body_default_instance_);
}
inline ::metamoto::types::VehicleInstance_Body* VehicleInstance::release_body() {
  // @@protoc_insertion_point(field_release:metamoto.types.VehicleInstance.body)
  
  ::metamoto::types::VehicleInstance_Body* temp = body_;
  body_ = NULL;
  return temp;
}
inline ::metamoto::types::VehicleInstance_Body* VehicleInstance::mutable_body() {
  
  if (body_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::VehicleInstance_Body>(GetArenaNoVirtual());
    body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.VehicleInstance.body)
  return body_;
}
inline void VehicleInstance::set_allocated_body(::metamoto::types::VehicleInstance_Body* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete body_;
  }
  if (body) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.VehicleInstance.body)
}

inline bool VehicleInstance::has_model_oneof() const {
  return model_oneof_case() != MODEL_ONEOF_NOT_SET;
}
inline void VehicleInstance::clear_has_model_oneof() {
  _oneof_case_[0] = MODEL_ONEOF_NOT_SET;
}
inline VehicleInstance::ModelOneofCase VehicleInstance::model_oneof_case() const {
  return VehicleInstance::ModelOneofCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2fvehicle_5finstance_2eproto
