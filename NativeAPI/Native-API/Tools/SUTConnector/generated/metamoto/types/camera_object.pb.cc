// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/camera_object.proto

#include "metamoto/types/camera_object.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_metamoto_2ftypes_2facceleration_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2facceleration_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Acceleration;
}  // namespace protobuf_metamoto_2ftypes_2facceleration_2eproto
namespace protobuf_metamoto_2ftypes_2fpose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fpose_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Pose;
}  // namespace protobuf_metamoto_2ftypes_2fpose_2eproto
namespace protobuf_metamoto_2ftypes_2fshape_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fshape_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Shape;
}  // namespace protobuf_metamoto_2ftypes_2fshape_2eproto
namespace protobuf_metamoto_2ftypes_2fvelocity_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fvelocity_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Velocity;
}  // namespace protobuf_metamoto_2ftypes_2fvelocity_2eproto
namespace metamoto {
namespace types {
class CameraObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraObject>
      _instance;
} _CameraObject_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace protobuf_metamoto_2ftypes_2fcamera_5fobject_2eproto {
static void InitDefaultsCameraObject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_CameraObject_default_instance_;
    new (ptr) ::metamoto::types::CameraObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::CameraObject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_CameraObject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCameraObject}, {
      &protobuf_metamoto_2ftypes_2fpose_2eproto::scc_info_Pose.base,
      &protobuf_metamoto_2ftypes_2fvelocity_2eproto::scc_info_Velocity.base,
      &protobuf_metamoto_2ftypes_2facceleration_2eproto::scc_info_Acceleration.base,
      &protobuf_metamoto_2ftypes_2fshape_2eproto::scc_info_Shape.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CameraObject.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::CameraObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::CameraObject, object_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::CameraObject, object_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::CameraObject, reference_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::CameraObject, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::CameraObject, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::CameraObject, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::CameraObject, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::CameraObject, x_lower_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::CameraObject, y_lower_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::CameraObject, x_upper_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::CameraObject, y_upper_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::CameraObject, pixel_count_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::types::CameraObject)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_CameraObject_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/types/camera_object.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\"metamoto/types/camera_object.proto\022\016me"
      "tamoto.types\032!metamoto/types/acceleratio"
      "n.proto\032!metamoto/types/enumerations.pro"
      "to\032\031metamoto/types/pose.proto\032\032metamoto/"
      "types/shape.proto\032\035metamoto/types/veloci"
      "ty.proto\"\244\003\n\014CameraObject\022\021\n\tobject_id\030\001"
      " \001(\r\022/\n\013object_type\030\002 \001(\0162\032.metamoto.typ"
      "es.ObjectType\0227\n\017reference_frame\030\003 \001(\0162\036"
      ".metamoto.types.ReferenceFrame\022\"\n\004pose\030\004"
      " \001(\0132\024.metamoto.types.Pose\022*\n\010velocity\030\005"
      " \001(\0132\030.metamoto.types.Velocity\0222\n\014accele"
      "ration\030\006 \001(\0132\034.metamoto.types.Accelerati"
      "on\022$\n\005shape\030\007 \001(\0132\025.metamoto.types.Shape"
      "\022\024\n\014x_lower_left\030\010 \001(\r\022\024\n\014y_lower_left\030\t"
      " \001(\r\022\025\n\rx_upper_right\030\n \001(\r\022\025\n\ry_upper_r"
      "ight\030\013 \001(\r\022\023\n\013pixel_count\030\014 \001(\rB\021\252\002\016Meta"
      "moto.Typesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 658);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/types/camera_object.proto", &protobuf_RegisterTypes);
  ::protobuf_metamoto_2ftypes_2facceleration_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fenumerations_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fpose_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fshape_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fvelocity_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2ftypes_2fcamera_5fobject_2eproto
namespace metamoto {
namespace types {

// ===================================================================

void CameraObject::InitAsDefaultInstance() {
  ::metamoto::types::_CameraObject_default_instance_._instance.get_mutable()->pose_ = const_cast< ::metamoto::types::Pose*>(
      ::metamoto::types::Pose::internal_default_instance());
  ::metamoto::types::_CameraObject_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::metamoto::types::Velocity*>(
      ::metamoto::types::Velocity::internal_default_instance());
  ::metamoto::types::_CameraObject_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::metamoto::types::Acceleration*>(
      ::metamoto::types::Acceleration::internal_default_instance());
  ::metamoto::types::_CameraObject_default_instance_._instance.get_mutable()->shape_ = const_cast< ::metamoto::types::Shape*>(
      ::metamoto::types::Shape::internal_default_instance());
}
void CameraObject::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
void CameraObject::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
}
void CameraObject::clear_acceleration() {
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) {
    delete acceleration_;
  }
  acceleration_ = NULL;
}
void CameraObject::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraObject::kObjectIdFieldNumber;
const int CameraObject::kObjectTypeFieldNumber;
const int CameraObject::kReferenceFrameFieldNumber;
const int CameraObject::kPoseFieldNumber;
const int CameraObject::kVelocityFieldNumber;
const int CameraObject::kAccelerationFieldNumber;
const int CameraObject::kShapeFieldNumber;
const int CameraObject::kXLowerLeftFieldNumber;
const int CameraObject::kYLowerLeftFieldNumber;
const int CameraObject::kXUpperRightFieldNumber;
const int CameraObject::kYUpperRightFieldNumber;
const int CameraObject::kPixelCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraObject::CameraObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fcamera_5fobject_2eproto::scc_info_CameraObject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.CameraObject)
}
CameraObject::CameraObject(const CameraObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::metamoto::types::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::metamoto::types::Velocity(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::metamoto::types::Acceleration(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  if (from.has_shape()) {
    shape_ = new ::metamoto::types::Shape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pixel_count_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(pixel_count_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.CameraObject)
}

void CameraObject::SharedCtor() {
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_count_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(pixel_count_));
}

CameraObject::~CameraObject() {
  // @@protoc_insertion_point(destructor:metamoto.types.CameraObject)
  SharedDtor();
}

void CameraObject::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete shape_;
}

void CameraObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CameraObject::descriptor() {
  ::protobuf_metamoto_2ftypes_2fcamera_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fcamera_5fobject_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraObject& CameraObject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fcamera_5fobject_2eproto::scc_info_CameraObject.base);
  return *internal_default_instance();
}


void CameraObject::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.CameraObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) {
    delete acceleration_;
  }
  acceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_count_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(pixel_count_));
  _internal_metadata_.Clear();
}

bool CameraObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.CameraObject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 object_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &object_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.ObjectType object_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_object_type(static_cast< ::metamoto::types::ObjectType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.ReferenceFrame reference_frame = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reference_frame(static_cast< ::metamoto::types::ReferenceFrame >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Pose pose = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Velocity velocity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Acceleration acceleration = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Shape shape = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 x_lower_left = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_lower_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 y_lower_left = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_lower_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 x_upper_right = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_upper_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 y_upper_right = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_upper_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pixel_count = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pixel_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.CameraObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.CameraObject)
  return false;
#undef DO_
}

void CameraObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.CameraObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 object_id = 1;
  if (this->object_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->object_id(), output);
  }

  // .metamoto.types.ObjectType object_type = 2;
  if (this->object_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->object_type(), output);
  }

  // .metamoto.types.ReferenceFrame reference_frame = 3;
  if (this->reference_frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->reference_frame(), output);
  }

  // .metamoto.types.Pose pose = 4;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_pose(), output);
  }

  // .metamoto.types.Velocity velocity = 5;
  if (this->has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_velocity(), output);
  }

  // .metamoto.types.Acceleration acceleration = 6;
  if (this->has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_acceleration(), output);
  }

  // .metamoto.types.Shape shape = 7;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_shape(), output);
  }

  // uint32 x_lower_left = 8;
  if (this->x_lower_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->x_lower_left(), output);
  }

  // uint32 y_lower_left = 9;
  if (this->y_lower_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->y_lower_left(), output);
  }

  // uint32 x_upper_right = 10;
  if (this->x_upper_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->x_upper_right(), output);
  }

  // uint32 y_upper_right = 11;
  if (this->y_upper_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->y_upper_right(), output);
  }

  // uint32 pixel_count = 12;
  if (this->pixel_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->pixel_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.CameraObject)
}

::google::protobuf::uint8* CameraObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.CameraObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 object_id = 1;
  if (this->object_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->object_id(), target);
  }

  // .metamoto.types.ObjectType object_type = 2;
  if (this->object_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->object_type(), target);
  }

  // .metamoto.types.ReferenceFrame reference_frame = 3;
  if (this->reference_frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->reference_frame(), target);
  }

  // .metamoto.types.Pose pose = 4;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_pose(), deterministic, target);
  }

  // .metamoto.types.Velocity velocity = 5;
  if (this->has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_velocity(), deterministic, target);
  }

  // .metamoto.types.Acceleration acceleration = 6;
  if (this->has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_acceleration(), deterministic, target);
  }

  // .metamoto.types.Shape shape = 7;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_shape(), deterministic, target);
  }

  // uint32 x_lower_left = 8;
  if (this->x_lower_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->x_lower_left(), target);
  }

  // uint32 y_lower_left = 9;
  if (this->y_lower_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->y_lower_left(), target);
  }

  // uint32 x_upper_right = 10;
  if (this->x_upper_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->x_upper_right(), target);
  }

  // uint32 y_upper_right = 11;
  if (this->y_upper_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->y_upper_right(), target);
  }

  // uint32 pixel_count = 12;
  if (this->pixel_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->pixel_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.CameraObject)
  return target;
}

size_t CameraObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.CameraObject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.Pose pose = 4;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .metamoto.types.Velocity velocity = 5;
  if (this->has_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .metamoto.types.Acceleration acceleration = 6;
  if (this->has_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *acceleration_);
  }

  // .metamoto.types.Shape shape = 7;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // uint32 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->object_id());
  }

  // .metamoto.types.ObjectType object_type = 2;
  if (this->object_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->object_type());
  }

  // .metamoto.types.ReferenceFrame reference_frame = 3;
  if (this->reference_frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reference_frame());
  }

  // uint32 x_lower_left = 8;
  if (this->x_lower_left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x_lower_left());
  }

  // uint32 y_lower_left = 9;
  if (this->y_lower_left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y_lower_left());
  }

  // uint32 x_upper_right = 10;
  if (this->x_upper_right() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x_upper_right());
  }

  // uint32 y_upper_right = 11;
  if (this->y_upper_right() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y_upper_right());
  }

  // uint32 pixel_count = 12;
  if (this->pixel_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pixel_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.CameraObject)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.CameraObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.CameraObject)
    MergeFrom(*source);
  }
}

void CameraObject::MergeFrom(const CameraObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.CameraObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    mutable_pose()->::metamoto::types::Pose::MergeFrom(from.pose());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::metamoto::types::Velocity::MergeFrom(from.velocity());
  }
  if (from.has_acceleration()) {
    mutable_acceleration()->::metamoto::types::Acceleration::MergeFrom(from.acceleration());
  }
  if (from.has_shape()) {
    mutable_shape()->::metamoto::types::Shape::MergeFrom(from.shape());
  }
  if (from.object_id() != 0) {
    set_object_id(from.object_id());
  }
  if (from.object_type() != 0) {
    set_object_type(from.object_type());
  }
  if (from.reference_frame() != 0) {
    set_reference_frame(from.reference_frame());
  }
  if (from.x_lower_left() != 0) {
    set_x_lower_left(from.x_lower_left());
  }
  if (from.y_lower_left() != 0) {
    set_y_lower_left(from.y_lower_left());
  }
  if (from.x_upper_right() != 0) {
    set_x_upper_right(from.x_upper_right());
  }
  if (from.y_upper_right() != 0) {
    set_y_upper_right(from.y_upper_right());
  }
  if (from.pixel_count() != 0) {
    set_pixel_count(from.pixel_count());
  }
}

void CameraObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.CameraObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraObject::CopyFrom(const CameraObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.CameraObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraObject::IsInitialized() const {
  return true;
}

void CameraObject::Swap(CameraObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraObject::InternalSwap(CameraObject* other) {
  using std::swap;
  swap(pose_, other->pose_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
  swap(shape_, other->shape_);
  swap(object_id_, other->object_id_);
  swap(object_type_, other->object_type_);
  swap(reference_frame_, other->reference_frame_);
  swap(x_lower_left_, other->x_lower_left_);
  swap(y_lower_left_, other->y_lower_left_);
  swap(x_upper_right_, other->x_upper_right_);
  swap(y_upper_right_, other->y_upper_right_);
  swap(pixel_count_, other->pixel_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CameraObject::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fcamera_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fcamera_5fobject_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::CameraObject* Arena::CreateMaybeMessage< ::metamoto::types::CameraObject >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::CameraObject >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
