// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/test_job.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2ftest_5fjob_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2ftest_5fjob_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/range.pb.h"
#include "metamoto/types/test_result.pb.h"
#include "metamoto/types/test_vector.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2ftest_5fjob_2eproto 

namespace protobuf_metamoto_2ftypes_2ftest_5fjob_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2ftest_5fjob_2eproto
namespace metamoto {
namespace types {
class TestJob;
class TestJobDefaultTypeInternal;
extern TestJobDefaultTypeInternal _TestJob_default_instance_;
class TestJob_ParametersEntry_DoNotUse;
class TestJob_ParametersEntry_DoNotUseDefaultTypeInternal;
extern TestJob_ParametersEntry_DoNotUseDefaultTypeInternal _TestJob_ParametersEntry_DoNotUse_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::TestJob* Arena::CreateMaybeMessage<::metamoto::types::TestJob>(Arena*);
template<> ::metamoto::types::TestJob_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage<::metamoto::types::TestJob_ParametersEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

// ===================================================================

class TestJob_ParametersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TestJob_ParametersEntry_DoNotUse, 
    ::std::string, ::metamoto::types::Parameter,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<TestJob_ParametersEntry_DoNotUse, 
    ::std::string, ::metamoto::types::Parameter,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  TestJob_ParametersEntry_DoNotUse();
  TestJob_ParametersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TestJob_ParametersEntry_DoNotUse& other);
  static const TestJob_ParametersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestJob_ParametersEntry_DoNotUse*>(&_TestJob_ParametersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TestJob : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.TestJob) */ {
 public:
  TestJob();
  virtual ~TestJob();

  TestJob(const TestJob& from);

  inline TestJob& operator=(const TestJob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestJob(TestJob&& from) noexcept
    : TestJob() {
    *this = ::std::move(from);
  }

  inline TestJob& operator=(TestJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestJob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestJob* internal_default_instance() {
    return reinterpret_cast<const TestJob*>(
               &_TestJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TestJob* other);
  friend void swap(TestJob& a, TestJob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestJob* New() const final {
    return CreateMaybeMessage<TestJob>(NULL);
  }

  TestJob* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestJob>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestJob& from);
  void MergeFrom(const TestJob& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestJob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string sut_job_ids = 2;
  int sut_job_ids_size() const;
  void clear_sut_job_ids();
  static const int kSutJobIdsFieldNumber = 2;
  const ::std::string& sut_job_ids(int index) const;
  ::std::string* mutable_sut_job_ids(int index);
  void set_sut_job_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_sut_job_ids(int index, ::std::string&& value);
  #endif
  void set_sut_job_ids(int index, const char* value);
  void set_sut_job_ids(int index, const char* value, size_t size);
  ::std::string* add_sut_job_ids();
  void add_sut_job_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_sut_job_ids(::std::string&& value);
  #endif
  void add_sut_job_ids(const char* value);
  void add_sut_job_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sut_job_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sut_job_ids();

  // map<string, .metamoto.types.Parameter> parameters = 100;
  int parameters_size() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 100;
  const ::google::protobuf::Map< ::std::string, ::metamoto::types::Parameter >&
      parameters() const;
  ::google::protobuf::Map< ::std::string, ::metamoto::types::Parameter >*
      mutable_parameters();

  // string job_id = 1;
  void clear_job_id();
  static const int kJobIdFieldNumber = 1;
  const ::std::string& job_id() const;
  void set_job_id(const ::std::string& value);
  #if LANG_CXX11
  void set_job_id(::std::string&& value);
  #endif
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  ::std::string* mutable_job_id();
  ::std::string* release_job_id();
  void set_allocated_job_id(::std::string* job_id);

  // string test_run_id = 3;
  void clear_test_run_id();
  static const int kTestRunIdFieldNumber = 3;
  const ::std::string& test_run_id() const;
  void set_test_run_id(const ::std::string& value);
  #if LANG_CXX11
  void set_test_run_id(::std::string&& value);
  #endif
  void set_test_run_id(const char* value);
  void set_test_run_id(const char* value, size_t size);
  ::std::string* mutable_test_run_id();
  ::std::string* release_test_run_id();
  void set_allocated_test_run_id(::std::string* test_run_id);

  // string test_case_id = 4;
  void clear_test_case_id();
  static const int kTestCaseIdFieldNumber = 4;
  const ::std::string& test_case_id() const;
  void set_test_case_id(const ::std::string& value);
  #if LANG_CXX11
  void set_test_case_id(::std::string&& value);
  #endif
  void set_test_case_id(const char* value);
  void set_test_case_id(const char* value, size_t size);
  ::std::string* mutable_test_case_id();
  ::std::string* release_test_case_id();
  void set_allocated_test_case_id(::std::string* test_case_id);

  // string test_case_name = 5;
  void clear_test_case_name();
  static const int kTestCaseNameFieldNumber = 5;
  const ::std::string& test_case_name() const;
  void set_test_case_name(const ::std::string& value);
  #if LANG_CXX11
  void set_test_case_name(::std::string&& value);
  #endif
  void set_test_case_name(const char* value);
  void set_test_case_name(const char* value, size_t size);
  ::std::string* mutable_test_case_name();
  ::std::string* release_test_case_name();
  void set_allocated_test_case_name(::std::string* test_case_name);

  // string test_vector_id = 6;
  void clear_test_vector_id();
  static const int kTestVectorIdFieldNumber = 6;
  const ::std::string& test_vector_id() const;
  void set_test_vector_id(const ::std::string& value);
  #if LANG_CXX11
  void set_test_vector_id(::std::string&& value);
  #endif
  void set_test_vector_id(const char* value);
  void set_test_vector_id(const char* value, size_t size);
  ::std::string* mutable_test_vector_id();
  ::std::string* release_test_vector_id();
  void set_allocated_test_vector_id(::std::string* test_vector_id);

  // string test_vector_name = 7;
  void clear_test_vector_name();
  static const int kTestVectorNameFieldNumber = 7;
  const ::std::string& test_vector_name() const;
  void set_test_vector_name(const ::std::string& value);
  #if LANG_CXX11
  void set_test_vector_name(::std::string&& value);
  #endif
  void set_test_vector_name(const char* value);
  void set_test_vector_name(const char* value, size_t size);
  ::std::string* mutable_test_vector_name();
  ::std::string* release_test_vector_name();
  void set_allocated_test_vector_name(::std::string* test_vector_name);

  // string start_time = 9;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 9;
  const ::std::string& start_time() const;
  void set_start_time(const ::std::string& value);
  #if LANG_CXX11
  void set_start_time(::std::string&& value);
  #endif
  void set_start_time(const char* value);
  void set_start_time(const char* value, size_t size);
  ::std::string* mutable_start_time();
  ::std::string* release_start_time();
  void set_allocated_start_time(::std::string* start_time);

  // string end_time = 10;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 10;
  const ::std::string& end_time() const;
  void set_end_time(const ::std::string& value);
  #if LANG_CXX11
  void set_end_time(::std::string&& value);
  #endif
  void set_end_time(const char* value);
  void set_end_time(const char* value, size_t size);
  ::std::string* mutable_end_time();
  ::std::string* release_end_time();
  void set_allocated_end_time(::std::string* end_time);

  // string result_text = 13;
  void clear_result_text();
  static const int kResultTextFieldNumber = 13;
  const ::std::string& result_text() const;
  void set_result_text(const ::std::string& value);
  #if LANG_CXX11
  void set_result_text(::std::string&& value);
  #endif
  void set_result_text(const char* value);
  void set_result_text(const char* value, size_t size);
  ::std::string* mutable_result_text();
  ::std::string* release_result_text();
  void set_allocated_result_text(::std::string* result_text);

  // string log_file = 17;
  void clear_log_file();
  static const int kLogFileFieldNumber = 17;
  const ::std::string& log_file() const;
  void set_log_file(const ::std::string& value);
  #if LANG_CXX11
  void set_log_file(::std::string&& value);
  #endif
  void set_log_file(const char* value);
  void set_log_file(const char* value, size_t size);
  ::std::string* mutable_log_file();
  ::std::string* release_log_file();
  void set_allocated_log_file(::std::string* log_file);

  // string results_file = 18;
  void clear_results_file();
  static const int kResultsFileFieldNumber = 18;
  const ::std::string& results_file() const;
  void set_results_file(const ::std::string& value);
  #if LANG_CXX11
  void set_results_file(::std::string&& value);
  #endif
  void set_results_file(const char* value);
  void set_results_file(const char* value, size_t size);
  ::std::string* mutable_results_file();
  ::std::string* release_results_file();
  void set_allocated_results_file(::std::string* results_file);

  // string last_update_time = 20;
  void clear_last_update_time();
  static const int kLastUpdateTimeFieldNumber = 20;
  const ::std::string& last_update_time() const;
  void set_last_update_time(const ::std::string& value);
  #if LANG_CXX11
  void set_last_update_time(::std::string&& value);
  #endif
  void set_last_update_time(const char* value);
  void set_last_update_time(const char* value, size_t size);
  ::std::string* mutable_last_update_time();
  ::std::string* release_last_update_time();
  void set_allocated_last_update_time(::std::string* last_update_time);

  // string sut_log_file = 21;
  void clear_sut_log_file();
  static const int kSutLogFileFieldNumber = 21;
  const ::std::string& sut_log_file() const;
  void set_sut_log_file(const ::std::string& value);
  #if LANG_CXX11
  void set_sut_log_file(::std::string&& value);
  #endif
  void set_sut_log_file(const char* value);
  void set_sut_log_file(const char* value, size_t size);
  ::std::string* mutable_sut_log_file();
  ::std::string* release_sut_log_file();
  void set_allocated_sut_log_file(::std::string* sut_log_file);

  // .metamoto.types.TestVector.Strategy test_vector_strategy = 8;
  void clear_test_vector_strategy();
  static const int kTestVectorStrategyFieldNumber = 8;
  ::metamoto::types::TestVector_Strategy test_vector_strategy() const;
  void set_test_vector_strategy(::metamoto::types::TestVector_Strategy value);

  // float compute_time = 11;
  void clear_compute_time();
  static const int kComputeTimeFieldNumber = 11;
  float compute_time() const;
  void set_compute_time(float value);

  // .metamoto.types.TestResult.Status status = 12;
  void clear_status();
  static const int kStatusFieldNumber = 12;
  ::metamoto::types::TestResult_Status status() const;
  void set_status(::metamoto::types::TestResult_Status value);

  // float progress = 14;
  void clear_progress();
  static const int kProgressFieldNumber = 14;
  float progress() const;
  void set_progress(float value);

  // float duration_objective = 15;
  void clear_duration_objective();
  static const int kDurationObjectiveFieldNumber = 15;
  float duration_objective() const;
  void set_duration_objective(float value);

  // float last_job_duration = 16;
  void clear_last_job_duration();
  static const int kLastJobDurationFieldNumber = 16;
  float last_job_duration() const;
  void set_last_job_duration(float value);

  // float disk_usage = 19;
  void clear_disk_usage();
  static const int kDiskUsageFieldNumber = 19;
  float disk_usage() const;
  void set_disk_usage(float value);

  // @@protoc_insertion_point(class_scope:metamoto.types.TestJob)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sut_job_ids_;
  ::google::protobuf::internal::MapField<
      TestJob_ParametersEntry_DoNotUse,
      ::std::string, ::metamoto::types::Parameter,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > parameters_;
  ::google::protobuf::internal::ArenaStringPtr job_id_;
  ::google::protobuf::internal::ArenaStringPtr test_run_id_;
  ::google::protobuf::internal::ArenaStringPtr test_case_id_;
  ::google::protobuf::internal::ArenaStringPtr test_case_name_;
  ::google::protobuf::internal::ArenaStringPtr test_vector_id_;
  ::google::protobuf::internal::ArenaStringPtr test_vector_name_;
  ::google::protobuf::internal::ArenaStringPtr start_time_;
  ::google::protobuf::internal::ArenaStringPtr end_time_;
  ::google::protobuf::internal::ArenaStringPtr result_text_;
  ::google::protobuf::internal::ArenaStringPtr log_file_;
  ::google::protobuf::internal::ArenaStringPtr results_file_;
  ::google::protobuf::internal::ArenaStringPtr last_update_time_;
  ::google::protobuf::internal::ArenaStringPtr sut_log_file_;
  int test_vector_strategy_;
  float compute_time_;
  int status_;
  float progress_;
  float duration_objective_;
  float last_job_duration_;
  float disk_usage_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2ftest_5fjob_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TestJob

// string job_id = 1;
inline void TestJob::clear_job_id() {
  job_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestJob::job_id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.job_id)
  return job_id_.GetNoArena();
}
inline void TestJob::set_job_id(const ::std::string& value) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.job_id)
}
#if LANG_CXX11
inline void TestJob::set_job_id(::std::string&& value) {
  
  job_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestJob.job_id)
}
#endif
inline void TestJob::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestJob.job_id)
}
inline void TestJob::set_job_id(const char* value, size_t size) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestJob.job_id)
}
inline ::std::string* TestJob::mutable_job_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestJob.job_id)
  return job_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestJob::release_job_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestJob.job_id)
  
  return job_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestJob::set_allocated_job_id(::std::string* job_id) {
  if (job_id != NULL) {
    
  } else {
    
  }
  job_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestJob.job_id)
}

// repeated string sut_job_ids = 2;
inline int TestJob::sut_job_ids_size() const {
  return sut_job_ids_.size();
}
inline void TestJob::clear_sut_job_ids() {
  sut_job_ids_.Clear();
}
inline const ::std::string& TestJob::sut_job_ids(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.sut_job_ids)
  return sut_job_ids_.Get(index);
}
inline ::std::string* TestJob::mutable_sut_job_ids(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestJob.sut_job_ids)
  return sut_job_ids_.Mutable(index);
}
inline void TestJob::set_sut_job_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.sut_job_ids)
  sut_job_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TestJob::set_sut_job_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.sut_job_ids)
  sut_job_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TestJob::set_sut_job_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sut_job_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestJob.sut_job_ids)
}
inline void TestJob::set_sut_job_ids(int index, const char* value, size_t size) {
  sut_job_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestJob.sut_job_ids)
}
inline ::std::string* TestJob::add_sut_job_ids() {
  // @@protoc_insertion_point(field_add_mutable:metamoto.types.TestJob.sut_job_ids)
  return sut_job_ids_.Add();
}
inline void TestJob::add_sut_job_ids(const ::std::string& value) {
  sut_job_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:metamoto.types.TestJob.sut_job_ids)
}
#if LANG_CXX11
inline void TestJob::add_sut_job_ids(::std::string&& value) {
  sut_job_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:metamoto.types.TestJob.sut_job_ids)
}
#endif
inline void TestJob::add_sut_job_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sut_job_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:metamoto.types.TestJob.sut_job_ids)
}
inline void TestJob::add_sut_job_ids(const char* value, size_t size) {
  sut_job_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:metamoto.types.TestJob.sut_job_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestJob::sut_job_ids() const {
  // @@protoc_insertion_point(field_list:metamoto.types.TestJob.sut_job_ids)
  return sut_job_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TestJob::mutable_sut_job_ids() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.TestJob.sut_job_ids)
  return &sut_job_ids_;
}

// string test_run_id = 3;
inline void TestJob::clear_test_run_id() {
  test_run_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestJob::test_run_id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.test_run_id)
  return test_run_id_.GetNoArena();
}
inline void TestJob::set_test_run_id(const ::std::string& value) {
  
  test_run_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.test_run_id)
}
#if LANG_CXX11
inline void TestJob::set_test_run_id(::std::string&& value) {
  
  test_run_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestJob.test_run_id)
}
#endif
inline void TestJob::set_test_run_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_run_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestJob.test_run_id)
}
inline void TestJob::set_test_run_id(const char* value, size_t size) {
  
  test_run_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestJob.test_run_id)
}
inline ::std::string* TestJob::mutable_test_run_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestJob.test_run_id)
  return test_run_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestJob::release_test_run_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestJob.test_run_id)
  
  return test_run_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestJob::set_allocated_test_run_id(::std::string* test_run_id) {
  if (test_run_id != NULL) {
    
  } else {
    
  }
  test_run_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_run_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestJob.test_run_id)
}

// string test_case_id = 4;
inline void TestJob::clear_test_case_id() {
  test_case_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestJob::test_case_id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.test_case_id)
  return test_case_id_.GetNoArena();
}
inline void TestJob::set_test_case_id(const ::std::string& value) {
  
  test_case_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.test_case_id)
}
#if LANG_CXX11
inline void TestJob::set_test_case_id(::std::string&& value) {
  
  test_case_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestJob.test_case_id)
}
#endif
inline void TestJob::set_test_case_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_case_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestJob.test_case_id)
}
inline void TestJob::set_test_case_id(const char* value, size_t size) {
  
  test_case_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestJob.test_case_id)
}
inline ::std::string* TestJob::mutable_test_case_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestJob.test_case_id)
  return test_case_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestJob::release_test_case_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestJob.test_case_id)
  
  return test_case_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestJob::set_allocated_test_case_id(::std::string* test_case_id) {
  if (test_case_id != NULL) {
    
  } else {
    
  }
  test_case_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_case_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestJob.test_case_id)
}

// string test_case_name = 5;
inline void TestJob::clear_test_case_name() {
  test_case_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestJob::test_case_name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.test_case_name)
  return test_case_name_.GetNoArena();
}
inline void TestJob::set_test_case_name(const ::std::string& value) {
  
  test_case_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.test_case_name)
}
#if LANG_CXX11
inline void TestJob::set_test_case_name(::std::string&& value) {
  
  test_case_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestJob.test_case_name)
}
#endif
inline void TestJob::set_test_case_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_case_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestJob.test_case_name)
}
inline void TestJob::set_test_case_name(const char* value, size_t size) {
  
  test_case_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestJob.test_case_name)
}
inline ::std::string* TestJob::mutable_test_case_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestJob.test_case_name)
  return test_case_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestJob::release_test_case_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestJob.test_case_name)
  
  return test_case_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestJob::set_allocated_test_case_name(::std::string* test_case_name) {
  if (test_case_name != NULL) {
    
  } else {
    
  }
  test_case_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_case_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestJob.test_case_name)
}

// string test_vector_id = 6;
inline void TestJob::clear_test_vector_id() {
  test_vector_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestJob::test_vector_id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.test_vector_id)
  return test_vector_id_.GetNoArena();
}
inline void TestJob::set_test_vector_id(const ::std::string& value) {
  
  test_vector_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.test_vector_id)
}
#if LANG_CXX11
inline void TestJob::set_test_vector_id(::std::string&& value) {
  
  test_vector_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestJob.test_vector_id)
}
#endif
inline void TestJob::set_test_vector_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_vector_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestJob.test_vector_id)
}
inline void TestJob::set_test_vector_id(const char* value, size_t size) {
  
  test_vector_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestJob.test_vector_id)
}
inline ::std::string* TestJob::mutable_test_vector_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestJob.test_vector_id)
  return test_vector_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestJob::release_test_vector_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestJob.test_vector_id)
  
  return test_vector_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestJob::set_allocated_test_vector_id(::std::string* test_vector_id) {
  if (test_vector_id != NULL) {
    
  } else {
    
  }
  test_vector_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_vector_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestJob.test_vector_id)
}

// string test_vector_name = 7;
inline void TestJob::clear_test_vector_name() {
  test_vector_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestJob::test_vector_name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.test_vector_name)
  return test_vector_name_.GetNoArena();
}
inline void TestJob::set_test_vector_name(const ::std::string& value) {
  
  test_vector_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.test_vector_name)
}
#if LANG_CXX11
inline void TestJob::set_test_vector_name(::std::string&& value) {
  
  test_vector_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestJob.test_vector_name)
}
#endif
inline void TestJob::set_test_vector_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_vector_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestJob.test_vector_name)
}
inline void TestJob::set_test_vector_name(const char* value, size_t size) {
  
  test_vector_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestJob.test_vector_name)
}
inline ::std::string* TestJob::mutable_test_vector_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestJob.test_vector_name)
  return test_vector_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestJob::release_test_vector_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestJob.test_vector_name)
  
  return test_vector_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestJob::set_allocated_test_vector_name(::std::string* test_vector_name) {
  if (test_vector_name != NULL) {
    
  } else {
    
  }
  test_vector_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_vector_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestJob.test_vector_name)
}

// .metamoto.types.TestVector.Strategy test_vector_strategy = 8;
inline void TestJob::clear_test_vector_strategy() {
  test_vector_strategy_ = 0;
}
inline ::metamoto::types::TestVector_Strategy TestJob::test_vector_strategy() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.test_vector_strategy)
  return static_cast< ::metamoto::types::TestVector_Strategy >(test_vector_strategy_);
}
inline void TestJob::set_test_vector_strategy(::metamoto::types::TestVector_Strategy value) {
  
  test_vector_strategy_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.test_vector_strategy)
}

// string start_time = 9;
inline void TestJob::clear_start_time() {
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestJob::start_time() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.start_time)
  return start_time_.GetNoArena();
}
inline void TestJob::set_start_time(const ::std::string& value) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.start_time)
}
#if LANG_CXX11
inline void TestJob::set_start_time(::std::string&& value) {
  
  start_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestJob.start_time)
}
#endif
inline void TestJob::set_start_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestJob.start_time)
}
inline void TestJob::set_start_time(const char* value, size_t size) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestJob.start_time)
}
inline ::std::string* TestJob::mutable_start_time() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestJob.start_time)
  return start_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestJob::release_start_time() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestJob.start_time)
  
  return start_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestJob::set_allocated_start_time(::std::string* start_time) {
  if (start_time != NULL) {
    
  } else {
    
  }
  start_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_time);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestJob.start_time)
}

// string end_time = 10;
inline void TestJob::clear_end_time() {
  end_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestJob::end_time() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.end_time)
  return end_time_.GetNoArena();
}
inline void TestJob::set_end_time(const ::std::string& value) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.end_time)
}
#if LANG_CXX11
inline void TestJob::set_end_time(::std::string&& value) {
  
  end_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestJob.end_time)
}
#endif
inline void TestJob::set_end_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestJob.end_time)
}
inline void TestJob::set_end_time(const char* value, size_t size) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestJob.end_time)
}
inline ::std::string* TestJob::mutable_end_time() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestJob.end_time)
  return end_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestJob::release_end_time() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestJob.end_time)
  
  return end_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestJob::set_allocated_end_time(::std::string* end_time) {
  if (end_time != NULL) {
    
  } else {
    
  }
  end_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_time);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestJob.end_time)
}

// float compute_time = 11;
inline void TestJob::clear_compute_time() {
  compute_time_ = 0;
}
inline float TestJob::compute_time() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.compute_time)
  return compute_time_;
}
inline void TestJob::set_compute_time(float value) {
  
  compute_time_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.compute_time)
}

// .metamoto.types.TestResult.Status status = 12;
inline void TestJob::clear_status() {
  status_ = 0;
}
inline ::metamoto::types::TestResult_Status TestJob::status() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.status)
  return static_cast< ::metamoto::types::TestResult_Status >(status_);
}
inline void TestJob::set_status(::metamoto::types::TestResult_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.status)
}

// string result_text = 13;
inline void TestJob::clear_result_text() {
  result_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestJob::result_text() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.result_text)
  return result_text_.GetNoArena();
}
inline void TestJob::set_result_text(const ::std::string& value) {
  
  result_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.result_text)
}
#if LANG_CXX11
inline void TestJob::set_result_text(::std::string&& value) {
  
  result_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestJob.result_text)
}
#endif
inline void TestJob::set_result_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  result_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestJob.result_text)
}
inline void TestJob::set_result_text(const char* value, size_t size) {
  
  result_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestJob.result_text)
}
inline ::std::string* TestJob::mutable_result_text() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestJob.result_text)
  return result_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestJob::release_result_text() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestJob.result_text)
  
  return result_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestJob::set_allocated_result_text(::std::string* result_text) {
  if (result_text != NULL) {
    
  } else {
    
  }
  result_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result_text);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestJob.result_text)
}

// float progress = 14;
inline void TestJob::clear_progress() {
  progress_ = 0;
}
inline float TestJob::progress() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.progress)
  return progress_;
}
inline void TestJob::set_progress(float value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.progress)
}

// float duration_objective = 15;
inline void TestJob::clear_duration_objective() {
  duration_objective_ = 0;
}
inline float TestJob::duration_objective() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.duration_objective)
  return duration_objective_;
}
inline void TestJob::set_duration_objective(float value) {
  
  duration_objective_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.duration_objective)
}

// float last_job_duration = 16;
inline void TestJob::clear_last_job_duration() {
  last_job_duration_ = 0;
}
inline float TestJob::last_job_duration() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.last_job_duration)
  return last_job_duration_;
}
inline void TestJob::set_last_job_duration(float value) {
  
  last_job_duration_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.last_job_duration)
}

// string log_file = 17;
inline void TestJob::clear_log_file() {
  log_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestJob::log_file() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.log_file)
  return log_file_.GetNoArena();
}
inline void TestJob::set_log_file(const ::std::string& value) {
  
  log_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.log_file)
}
#if LANG_CXX11
inline void TestJob::set_log_file(::std::string&& value) {
  
  log_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestJob.log_file)
}
#endif
inline void TestJob::set_log_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  log_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestJob.log_file)
}
inline void TestJob::set_log_file(const char* value, size_t size) {
  
  log_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestJob.log_file)
}
inline ::std::string* TestJob::mutable_log_file() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestJob.log_file)
  return log_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestJob::release_log_file() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestJob.log_file)
  
  return log_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestJob::set_allocated_log_file(::std::string* log_file) {
  if (log_file != NULL) {
    
  } else {
    
  }
  log_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_file);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestJob.log_file)
}

// string results_file = 18;
inline void TestJob::clear_results_file() {
  results_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestJob::results_file() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.results_file)
  return results_file_.GetNoArena();
}
inline void TestJob::set_results_file(const ::std::string& value) {
  
  results_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.results_file)
}
#if LANG_CXX11
inline void TestJob::set_results_file(::std::string&& value) {
  
  results_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestJob.results_file)
}
#endif
inline void TestJob::set_results_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  results_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestJob.results_file)
}
inline void TestJob::set_results_file(const char* value, size_t size) {
  
  results_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestJob.results_file)
}
inline ::std::string* TestJob::mutable_results_file() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestJob.results_file)
  return results_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestJob::release_results_file() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestJob.results_file)
  
  return results_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestJob::set_allocated_results_file(::std::string* results_file) {
  if (results_file != NULL) {
    
  } else {
    
  }
  results_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), results_file);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestJob.results_file)
}

// float disk_usage = 19;
inline void TestJob::clear_disk_usage() {
  disk_usage_ = 0;
}
inline float TestJob::disk_usage() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.disk_usage)
  return disk_usage_;
}
inline void TestJob::set_disk_usage(float value) {
  
  disk_usage_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.disk_usage)
}

// string last_update_time = 20;
inline void TestJob::clear_last_update_time() {
  last_update_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestJob::last_update_time() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.last_update_time)
  return last_update_time_.GetNoArena();
}
inline void TestJob::set_last_update_time(const ::std::string& value) {
  
  last_update_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.last_update_time)
}
#if LANG_CXX11
inline void TestJob::set_last_update_time(::std::string&& value) {
  
  last_update_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestJob.last_update_time)
}
#endif
inline void TestJob::set_last_update_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  last_update_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestJob.last_update_time)
}
inline void TestJob::set_last_update_time(const char* value, size_t size) {
  
  last_update_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestJob.last_update_time)
}
inline ::std::string* TestJob::mutable_last_update_time() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestJob.last_update_time)
  return last_update_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestJob::release_last_update_time() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestJob.last_update_time)
  
  return last_update_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestJob::set_allocated_last_update_time(::std::string* last_update_time) {
  if (last_update_time != NULL) {
    
  } else {
    
  }
  last_update_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_update_time);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestJob.last_update_time)
}

// string sut_log_file = 21;
inline void TestJob::clear_sut_log_file() {
  sut_log_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestJob::sut_log_file() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestJob.sut_log_file)
  return sut_log_file_.GetNoArena();
}
inline void TestJob::set_sut_log_file(const ::std::string& value) {
  
  sut_log_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestJob.sut_log_file)
}
#if LANG_CXX11
inline void TestJob::set_sut_log_file(::std::string&& value) {
  
  sut_log_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestJob.sut_log_file)
}
#endif
inline void TestJob::set_sut_log_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sut_log_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestJob.sut_log_file)
}
inline void TestJob::set_sut_log_file(const char* value, size_t size) {
  
  sut_log_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestJob.sut_log_file)
}
inline ::std::string* TestJob::mutable_sut_log_file() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestJob.sut_log_file)
  return sut_log_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestJob::release_sut_log_file() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestJob.sut_log_file)
  
  return sut_log_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestJob::set_allocated_sut_log_file(::std::string* sut_log_file) {
  if (sut_log_file != NULL) {
    
  } else {
    
  }
  sut_log_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sut_log_file);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestJob.sut_log_file)
}

// map<string, .metamoto.types.Parameter> parameters = 100;
inline int TestJob::parameters_size() const {
  return parameters_.size();
}
inline const ::google::protobuf::Map< ::std::string, ::metamoto::types::Parameter >&
TestJob::parameters() const {
  // @@protoc_insertion_point(field_map:metamoto.types.TestJob.parameters)
  return parameters_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::metamoto::types::Parameter >*
TestJob::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_map:metamoto.types.TestJob.parameters)
  return parameters_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2ftest_5fjob_2eproto
