// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/laser_return.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2flaser_5freturn_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2flaser_5freturn_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/enumerations.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2flaser_5freturn_2eproto 

namespace protobuf_metamoto_2ftypes_2flaser_5freturn_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2flaser_5freturn_2eproto
namespace metamoto {
namespace types {
class LaserReturn;
class LaserReturnDefaultTypeInternal;
extern LaserReturnDefaultTypeInternal _LaserReturn_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::LaserReturn* Arena::CreateMaybeMessage<::metamoto::types::LaserReturn>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

// ===================================================================

class LaserReturn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.LaserReturn) */ {
 public:
  LaserReturn();
  virtual ~LaserReturn();

  LaserReturn(const LaserReturn& from);

  inline LaserReturn& operator=(const LaserReturn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaserReturn(LaserReturn&& from) noexcept
    : LaserReturn() {
    *this = ::std::move(from);
  }

  inline LaserReturn& operator=(LaserReturn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaserReturn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaserReturn* internal_default_instance() {
    return reinterpret_cast<const LaserReturn*>(
               &_LaserReturn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LaserReturn* other);
  friend void swap(LaserReturn& a, LaserReturn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaserReturn* New() const final {
    return CreateMaybeMessage<LaserReturn>(NULL);
  }

  LaserReturn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaserReturn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaserReturn& from);
  void MergeFrom(const LaserReturn& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaserReturn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float ranges = 2;
  int ranges_size() const;
  void clear_ranges();
  static const int kRangesFieldNumber = 2;
  float ranges(int index) const;
  void set_ranges(int index, float value);
  void add_ranges(float value);
  const ::google::protobuf::RepeatedField< float >&
      ranges() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_ranges();

  // repeated float intensities = 3;
  int intensities_size() const;
  void clear_intensities();
  static const int kIntensitiesFieldNumber = 3;
  float intensities(int index) const;
  void set_intensities(int index, float value);
  void add_intensities(float value);
  const ::google::protobuf::RepeatedField< float >&
      intensities() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_intensities();

  // repeated uint32 object_ids = 4;
  int object_ids_size() const;
  void clear_object_ids();
  static const int kObjectIdsFieldNumber = 4;
  ::google::protobuf::uint32 object_ids(int index) const;
  void set_object_ids(int index, ::google::protobuf::uint32 value);
  void add_object_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      object_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_object_ids();

  // repeated .metamoto.types.ObjectType object_types = 5;
  int object_types_size() const;
  void clear_object_types();
  static const int kObjectTypesFieldNumber = 5;
  ::metamoto::types::ObjectType object_types(int index) const;
  void set_object_types(int index, ::metamoto::types::ObjectType value);
  void add_object_types(::metamoto::types::ObjectType value);
  const ::google::protobuf::RepeatedField<int>& object_types() const;
  ::google::protobuf::RepeatedField<int>* mutable_object_types();

  // float elevation_angle = 1;
  void clear_elevation_angle();
  static const int kElevationAngleFieldNumber = 1;
  float elevation_angle() const;
  void set_elevation_angle(float value);

  // @@protoc_insertion_point(class_scope:metamoto.types.LaserReturn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > ranges_;
  mutable int _ranges_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > intensities_;
  mutable int _intensities_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > object_ids_;
  mutable int _object_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> object_types_;
  mutable int _object_types_cached_byte_size_;
  float elevation_angle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2flaser_5freturn_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaserReturn

// float elevation_angle = 1;
inline void LaserReturn::clear_elevation_angle() {
  elevation_angle_ = 0;
}
inline float LaserReturn::elevation_angle() const {
  // @@protoc_insertion_point(field_get:metamoto.types.LaserReturn.elevation_angle)
  return elevation_angle_;
}
inline void LaserReturn::set_elevation_angle(float value) {
  
  elevation_angle_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.LaserReturn.elevation_angle)
}

// repeated float ranges = 2;
inline int LaserReturn::ranges_size() const {
  return ranges_.size();
}
inline void LaserReturn::clear_ranges() {
  ranges_.Clear();
}
inline float LaserReturn::ranges(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.LaserReturn.ranges)
  return ranges_.Get(index);
}
inline void LaserReturn::set_ranges(int index, float value) {
  ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.types.LaserReturn.ranges)
}
inline void LaserReturn::add_ranges(float value) {
  ranges_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.types.LaserReturn.ranges)
}
inline const ::google::protobuf::RepeatedField< float >&
LaserReturn::ranges() const {
  // @@protoc_insertion_point(field_list:metamoto.types.LaserReturn.ranges)
  return ranges_;
}
inline ::google::protobuf::RepeatedField< float >*
LaserReturn::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.LaserReturn.ranges)
  return &ranges_;
}

// repeated float intensities = 3;
inline int LaserReturn::intensities_size() const {
  return intensities_.size();
}
inline void LaserReturn::clear_intensities() {
  intensities_.Clear();
}
inline float LaserReturn::intensities(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.LaserReturn.intensities)
  return intensities_.Get(index);
}
inline void LaserReturn::set_intensities(int index, float value) {
  intensities_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.types.LaserReturn.intensities)
}
inline void LaserReturn::add_intensities(float value) {
  intensities_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.types.LaserReturn.intensities)
}
inline const ::google::protobuf::RepeatedField< float >&
LaserReturn::intensities() const {
  // @@protoc_insertion_point(field_list:metamoto.types.LaserReturn.intensities)
  return intensities_;
}
inline ::google::protobuf::RepeatedField< float >*
LaserReturn::mutable_intensities() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.LaserReturn.intensities)
  return &intensities_;
}

// repeated uint32 object_ids = 4;
inline int LaserReturn::object_ids_size() const {
  return object_ids_.size();
}
inline void LaserReturn::clear_object_ids() {
  object_ids_.Clear();
}
inline ::google::protobuf::uint32 LaserReturn::object_ids(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.LaserReturn.object_ids)
  return object_ids_.Get(index);
}
inline void LaserReturn::set_object_ids(int index, ::google::protobuf::uint32 value) {
  object_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.types.LaserReturn.object_ids)
}
inline void LaserReturn::add_object_ids(::google::protobuf::uint32 value) {
  object_ids_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.types.LaserReturn.object_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LaserReturn::object_ids() const {
  // @@protoc_insertion_point(field_list:metamoto.types.LaserReturn.object_ids)
  return object_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LaserReturn::mutable_object_ids() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.LaserReturn.object_ids)
  return &object_ids_;
}

// repeated .metamoto.types.ObjectType object_types = 5;
inline int LaserReturn::object_types_size() const {
  return object_types_.size();
}
inline void LaserReturn::clear_object_types() {
  object_types_.Clear();
}
inline ::metamoto::types::ObjectType LaserReturn::object_types(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.LaserReturn.object_types)
  return static_cast< ::metamoto::types::ObjectType >(object_types_.Get(index));
}
inline void LaserReturn::set_object_types(int index, ::metamoto::types::ObjectType value) {
  object_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.types.LaserReturn.object_types)
}
inline void LaserReturn::add_object_types(::metamoto::types::ObjectType value) {
  object_types_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.types.LaserReturn.object_types)
}
inline const ::google::protobuf::RepeatedField<int>&
LaserReturn::object_types() const {
  // @@protoc_insertion_point(field_list:metamoto.types.LaserReturn.object_types)
  return object_types_;
}
inline ::google::protobuf::RepeatedField<int>*
LaserReturn::mutable_object_types() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.LaserReturn.object_types)
  return &object_types_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2flaser_5freturn_2eproto
