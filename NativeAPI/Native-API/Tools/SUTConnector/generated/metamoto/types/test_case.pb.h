// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/test_case.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2ftest_5fcase_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2ftest_5fcase_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/ego_vehicle.pb.h"
#include "metamoto/types/scenario.pb.h"
#include "metamoto/types/test_job.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2ftest_5fcase_2eproto 

namespace protobuf_metamoto_2ftypes_2ftest_5fcase_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2ftest_5fcase_2eproto
namespace metamoto {
namespace types {
class TestCase;
class TestCaseDefaultTypeInternal;
extern TestCaseDefaultTypeInternal _TestCase_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::TestCase* Arena::CreateMaybeMessage<::metamoto::types::TestCase>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

// ===================================================================

class TestCase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.TestCase) */ {
 public:
  TestCase();
  virtual ~TestCase();

  TestCase(const TestCase& from);

  inline TestCase& operator=(const TestCase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestCase(TestCase&& from) noexcept
    : TestCase() {
    *this = ::std::move(from);
  }

  inline TestCase& operator=(TestCase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestCase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestCase* internal_default_instance() {
    return reinterpret_cast<const TestCase*>(
               &_TestCase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TestCase* other);
  friend void swap(TestCase& a, TestCase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestCase* New() const final {
    return CreateMaybeMessage<TestCase>(NULL);
  }

  TestCase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestCase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestCase& from);
  void MergeFrom(const TestCase& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestCase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.TestJob history = 5;
  int history_size() const;
  void clear_history();
  static const int kHistoryFieldNumber = 5;
  ::metamoto::types::TestJob* mutable_history(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestJob >*
      mutable_history();
  const ::metamoto::types::TestJob& history(int index) const;
  ::metamoto::types::TestJob* add_history();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestJob >&
      history() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string test_manager_url = 6;
  void clear_test_manager_url();
  static const int kTestManagerUrlFieldNumber = 6;
  const ::std::string& test_manager_url() const;
  void set_test_manager_url(const ::std::string& value);
  #if LANG_CXX11
  void set_test_manager_url(::std::string&& value);
  #endif
  void set_test_manager_url(const char* value);
  void set_test_manager_url(const char* value, size_t size);
  ::std::string* mutable_test_manager_url();
  ::std::string* release_test_manager_url();
  void set_allocated_test_manager_url(::std::string* test_manager_url);

  // .metamoto.types.Scenario scenario = 3;
  bool has_scenario() const;
  void clear_scenario();
  static const int kScenarioFieldNumber = 3;
  private:
  const ::metamoto::types::Scenario& _internal_scenario() const;
  public:
  const ::metamoto::types::Scenario& scenario() const;
  ::metamoto::types::Scenario* release_scenario();
  ::metamoto::types::Scenario* mutable_scenario();
  void set_allocated_scenario(::metamoto::types::Scenario* scenario);

  // .metamoto.types.EgoVehicle ego_vehicle = 4;
  bool has_ego_vehicle() const;
  void clear_ego_vehicle();
  static const int kEgoVehicleFieldNumber = 4;
  private:
  const ::metamoto::types::EgoVehicle& _internal_ego_vehicle() const;
  public:
  const ::metamoto::types::EgoVehicle& ego_vehicle() const;
  ::metamoto::types::EgoVehicle* release_ego_vehicle();
  ::metamoto::types::EgoVehicle* mutable_ego_vehicle();
  void set_allocated_ego_vehicle(::metamoto::types::EgoVehicle* ego_vehicle);

  // @@protoc_insertion_point(class_scope:metamoto.types.TestCase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestJob > history_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr test_manager_url_;
  ::metamoto::types::Scenario* scenario_;
  ::metamoto::types::EgoVehicle* ego_vehicle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2ftest_5fcase_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestCase

// string id = 1;
inline void TestCase::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestCase::id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestCase.id)
  return id_.GetNoArena();
}
inline void TestCase::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestCase.id)
}
#if LANG_CXX11
inline void TestCase::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestCase.id)
}
#endif
inline void TestCase::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestCase.id)
}
inline void TestCase::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestCase.id)
}
inline ::std::string* TestCase::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestCase.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestCase::release_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestCase.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestCase::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestCase.id)
}

// string name = 2;
inline void TestCase::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestCase::name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestCase.name)
  return name_.GetNoArena();
}
inline void TestCase::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestCase.name)
}
#if LANG_CXX11
inline void TestCase::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestCase.name)
}
#endif
inline void TestCase::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestCase.name)
}
inline void TestCase::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestCase.name)
}
inline ::std::string* TestCase::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestCase.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestCase::release_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestCase.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestCase::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestCase.name)
}

// .metamoto.types.Scenario scenario = 3;
inline bool TestCase::has_scenario() const {
  return this != internal_default_instance() && scenario_ != NULL;
}
inline const ::metamoto::types::Scenario& TestCase::_internal_scenario() const {
  return *scenario_;
}
inline const ::metamoto::types::Scenario& TestCase::scenario() const {
  const ::metamoto::types::Scenario* p = scenario_;
  // @@protoc_insertion_point(field_get:metamoto.types.TestCase.scenario)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Scenario*>(
      &::metamoto::types::_Scenario_default_instance_);
}
inline ::metamoto::types::Scenario* TestCase::release_scenario() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestCase.scenario)
  
  ::metamoto::types::Scenario* temp = scenario_;
  scenario_ = NULL;
  return temp;
}
inline ::metamoto::types::Scenario* TestCase::mutable_scenario() {
  
  if (scenario_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Scenario>(GetArenaNoVirtual());
    scenario_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestCase.scenario)
  return scenario_;
}
inline void TestCase::set_allocated_scenario(::metamoto::types::Scenario* scenario) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scenario_);
  }
  if (scenario) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scenario = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scenario, submessage_arena);
    }
    
  } else {
    
  }
  scenario_ = scenario;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestCase.scenario)
}

// .metamoto.types.EgoVehicle ego_vehicle = 4;
inline bool TestCase::has_ego_vehicle() const {
  return this != internal_default_instance() && ego_vehicle_ != NULL;
}
inline const ::metamoto::types::EgoVehicle& TestCase::_internal_ego_vehicle() const {
  return *ego_vehicle_;
}
inline const ::metamoto::types::EgoVehicle& TestCase::ego_vehicle() const {
  const ::metamoto::types::EgoVehicle* p = ego_vehicle_;
  // @@protoc_insertion_point(field_get:metamoto.types.TestCase.ego_vehicle)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::EgoVehicle*>(
      &::metamoto::types::_EgoVehicle_default_instance_);
}
inline ::metamoto::types::EgoVehicle* TestCase::release_ego_vehicle() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestCase.ego_vehicle)
  
  ::metamoto::types::EgoVehicle* temp = ego_vehicle_;
  ego_vehicle_ = NULL;
  return temp;
}
inline ::metamoto::types::EgoVehicle* TestCase::mutable_ego_vehicle() {
  
  if (ego_vehicle_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::EgoVehicle>(GetArenaNoVirtual());
    ego_vehicle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestCase.ego_vehicle)
  return ego_vehicle_;
}
inline void TestCase::set_allocated_ego_vehicle(::metamoto::types::EgoVehicle* ego_vehicle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ego_vehicle_);
  }
  if (ego_vehicle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ego_vehicle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ego_vehicle, submessage_arena);
    }
    
  } else {
    
  }
  ego_vehicle_ = ego_vehicle;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestCase.ego_vehicle)
}

// repeated .metamoto.types.TestJob history = 5;
inline int TestCase::history_size() const {
  return history_.size();
}
inline ::metamoto::types::TestJob* TestCase::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestCase.history)
  return history_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestJob >*
TestCase::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.TestCase.history)
  return &history_;
}
inline const ::metamoto::types::TestJob& TestCase::history(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestCase.history)
  return history_.Get(index);
}
inline ::metamoto::types::TestJob* TestCase::add_history() {
  // @@protoc_insertion_point(field_add:metamoto.types.TestCase.history)
  return history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::TestJob >&
TestCase::history() const {
  // @@protoc_insertion_point(field_list:metamoto.types.TestCase.history)
  return history_;
}

// string test_manager_url = 6;
inline void TestCase::clear_test_manager_url() {
  test_manager_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestCase::test_manager_url() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestCase.test_manager_url)
  return test_manager_url_.GetNoArena();
}
inline void TestCase::set_test_manager_url(const ::std::string& value) {
  
  test_manager_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestCase.test_manager_url)
}
#if LANG_CXX11
inline void TestCase::set_test_manager_url(::std::string&& value) {
  
  test_manager_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestCase.test_manager_url)
}
#endif
inline void TestCase::set_test_manager_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_manager_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestCase.test_manager_url)
}
inline void TestCase::set_test_manager_url(const char* value, size_t size) {
  
  test_manager_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestCase.test_manager_url)
}
inline ::std::string* TestCase::mutable_test_manager_url() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestCase.test_manager_url)
  return test_manager_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestCase::release_test_manager_url() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestCase.test_manager_url)
  
  return test_manager_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestCase::set_allocated_test_manager_url(::std::string* test_manager_url) {
  if (test_manager_url != NULL) {
    
  } else {
    
  }
  test_manager_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_manager_url);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestCase.test_manager_url)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2ftest_5fcase_2eproto
