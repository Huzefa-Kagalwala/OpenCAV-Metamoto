// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/test_suite.proto

#include "metamoto/types/test_suite.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace metamoto {
namespace types {
class TestSuiteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestSuite>
      _instance;
} _TestSuite_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace protobuf_metamoto_2ftypes_2ftest_5fsuite_2eproto {
static void InitDefaultsTestSuite() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_TestSuite_default_instance_;
    new (ptr) ::metamoto::types::TestSuite();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::TestSuite::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestSuite =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestSuite}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TestSuite.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TestSuite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TestSuite, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TestSuite, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TestSuite, schedule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TestSuite, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TestSuite, next_run_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TestSuite, test_vector_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::TestSuite, priority_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::types::TestSuite)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_TestSuite_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/types/test_suite.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\037metamoto/types/test_suite.proto\022\016metam"
      "oto.types\"\217\002\n\tTestSuite\022\n\n\002id\030\001 \001(\t\022\014\n\004n"
      "ame\030\002 \001(\t\0228\n\010schedule\030\003 \001(\0162&.metamoto.t"
      "ypes.TestSuite.ScheduleType\022\022\n\nstart_tim"
      "e\030\004 \001(\t\022\025\n\rnext_run_time\030\005 \001(\t\022\027\n\017test_v"
      "ector_ids\030\006 \003(\t\022\020\n\010priority\030\007 \001(\005\"X\n\014Sch"
      "eduleType\022\013\n\007UNKNOWN\020\000\022\t\n\005OTHER\020\001\022\014\n\010RUN"
      "_ONCE\020\002\022\t\n\005DAILY\020\003\022\n\n\006WEEKLY\020\004\022\013\n\007DISABL"
      "E\020\005B\021\252\002\016Metamoto.Typesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 350);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/types/test_suite.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2ftypes_2ftest_5fsuite_2eproto
namespace metamoto {
namespace types {
const ::google::protobuf::EnumDescriptor* TestSuite_ScheduleType_descriptor() {
  protobuf_metamoto_2ftypes_2ftest_5fsuite_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2ftest_5fsuite_2eproto::file_level_enum_descriptors[0];
}
bool TestSuite_ScheduleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TestSuite_ScheduleType TestSuite::UNKNOWN;
const TestSuite_ScheduleType TestSuite::OTHER;
const TestSuite_ScheduleType TestSuite::RUN_ONCE;
const TestSuite_ScheduleType TestSuite::DAILY;
const TestSuite_ScheduleType TestSuite::WEEKLY;
const TestSuite_ScheduleType TestSuite::DISABLE;
const TestSuite_ScheduleType TestSuite::ScheduleType_MIN;
const TestSuite_ScheduleType TestSuite::ScheduleType_MAX;
const int TestSuite::ScheduleType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void TestSuite::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestSuite::kIdFieldNumber;
const int TestSuite::kNameFieldNumber;
const int TestSuite::kScheduleFieldNumber;
const int TestSuite::kStartTimeFieldNumber;
const int TestSuite::kNextRunTimeFieldNumber;
const int TestSuite::kTestVectorIdsFieldNumber;
const int TestSuite::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestSuite::TestSuite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2ftest_5fsuite_2eproto::scc_info_TestSuite.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.TestSuite)
}
TestSuite::TestSuite(const TestSuite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      test_vector_ids_(from.test_vector_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_time().size() > 0) {
    start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_);
  }
  next_run_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_run_time().size() > 0) {
    next_run_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_run_time_);
  }
  ::memcpy(&schedule_, &from.schedule_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&schedule_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.TestSuite)
}

void TestSuite::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_run_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&schedule_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&schedule_)) + sizeof(priority_));
}

TestSuite::~TestSuite() {
  // @@protoc_insertion_point(destructor:metamoto.types.TestSuite)
  SharedDtor();
}

void TestSuite::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_run_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TestSuite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestSuite::descriptor() {
  ::protobuf_metamoto_2ftypes_2ftest_5fsuite_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2ftest_5fsuite_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestSuite& TestSuite::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2ftest_5fsuite_2eproto::scc_info_TestSuite.base);
  return *internal_default_instance();
}


void TestSuite::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.TestSuite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_vector_ids_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_run_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&schedule_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&schedule_)) + sizeof(priority_));
  _internal_metadata_.Clear();
}

bool TestSuite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.TestSuite)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.TestSuite.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.TestSuite.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.TestSuite.ScheduleType schedule = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_schedule(static_cast< ::metamoto::types::TestSuite_ScheduleType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string start_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_time().data(), static_cast<int>(this->start_time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.TestSuite.start_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_run_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_run_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_run_time().data(), static_cast<int>(this->next_run_time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.TestSuite.next_run_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string test_vector_ids = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_test_vector_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->test_vector_ids(this->test_vector_ids_size() - 1).data(),
            static_cast<int>(this->test_vector_ids(this->test_vector_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.TestSuite.test_vector_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.TestSuite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.TestSuite)
  return false;
#undef DO_
}

void TestSuite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.TestSuite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.TestSuite.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.TestSuite.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .metamoto.types.TestSuite.ScheduleType schedule = 3;
  if (this->schedule() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->schedule(), output);
  }

  // string start_time = 4;
  if (this->start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_time().data(), static_cast<int>(this->start_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.TestSuite.start_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->start_time(), output);
  }

  // string next_run_time = 5;
  if (this->next_run_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_run_time().data(), static_cast<int>(this->next_run_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.TestSuite.next_run_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->next_run_time(), output);
  }

  // repeated string test_vector_ids = 6;
  for (int i = 0, n = this->test_vector_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->test_vector_ids(i).data(), static_cast<int>(this->test_vector_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.TestSuite.test_vector_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->test_vector_ids(i), output);
  }

  // int32 priority = 7;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->priority(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.TestSuite)
}

::google::protobuf::uint8* TestSuite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.TestSuite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.TestSuite.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.TestSuite.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .metamoto.types.TestSuite.ScheduleType schedule = 3;
  if (this->schedule() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->schedule(), target);
  }

  // string start_time = 4;
  if (this->start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_time().data(), static_cast<int>(this->start_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.TestSuite.start_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->start_time(), target);
  }

  // string next_run_time = 5;
  if (this->next_run_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_run_time().data(), static_cast<int>(this->next_run_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.TestSuite.next_run_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->next_run_time(), target);
  }

  // repeated string test_vector_ids = 6;
  for (int i = 0, n = this->test_vector_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->test_vector_ids(i).data(), static_cast<int>(this->test_vector_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.TestSuite.test_vector_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->test_vector_ids(i), target);
  }

  // int32 priority = 7;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->priority(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.TestSuite)
  return target;
}

size_t TestSuite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.TestSuite)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string test_vector_ids = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->test_vector_ids_size());
  for (int i = 0, n = this->test_vector_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->test_vector_ids(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string start_time = 4;
  if (this->start_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_time());
  }

  // string next_run_time = 5;
  if (this->next_run_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_run_time());
  }

  // .metamoto.types.TestSuite.ScheduleType schedule = 3;
  if (this->schedule() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->schedule());
  }

  // int32 priority = 7;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestSuite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.TestSuite)
  GOOGLE_DCHECK_NE(&from, this);
  const TestSuite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestSuite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.TestSuite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.TestSuite)
    MergeFrom(*source);
  }
}

void TestSuite::MergeFrom(const TestSuite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.TestSuite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  test_vector_ids_.MergeFrom(from.test_vector_ids_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.start_time().size() > 0) {

    start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_);
  }
  if (from.next_run_time().size() > 0) {

    next_run_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_run_time_);
  }
  if (from.schedule() != 0) {
    set_schedule(from.schedule());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
}

void TestSuite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.TestSuite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestSuite::CopyFrom(const TestSuite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.TestSuite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestSuite::IsInitialized() const {
  return true;
}

void TestSuite::Swap(TestSuite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestSuite::InternalSwap(TestSuite* other) {
  using std::swap;
  test_vector_ids_.InternalSwap(CastToBase(&other->test_vector_ids_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_time_.Swap(&other->start_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  next_run_time_.Swap(&other->next_run_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(schedule_, other->schedule_);
  swap(priority_, other->priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestSuite::GetMetadata() const {
  protobuf_metamoto_2ftypes_2ftest_5fsuite_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2ftest_5fsuite_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::TestSuite* Arena::CreateMaybeMessage< ::metamoto::types::TestSuite >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::TestSuite >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
