// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/pedestrian.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2fpedestrian_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2fpedestrian_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/acceleration.pb.h"
#include "metamoto/types/pose.pb.h"
#include "metamoto/types/shape.pb.h"
#include "metamoto/types/velocity.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fpedestrian_2eproto 

namespace protobuf_metamoto_2ftypes_2fpedestrian_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2fpedestrian_2eproto
namespace metamoto {
namespace types {
class Pedestrian;
class PedestrianDefaultTypeInternal;
extern PedestrianDefaultTypeInternal _Pedestrian_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::Pedestrian* Arena::CreateMaybeMessage<::metamoto::types::Pedestrian>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

enum Pedestrian_Type {
  Pedestrian_Type_UNKNOWN = 0,
  Pedestrian_Type_OTHER = 1,
  Pedestrian_Type_ADULT = 2,
  Pedestrian_Type_CHILD = 3,
  Pedestrian_Type_ANIMAL = 4,
  Pedestrian_Type_RUNNER = 5,
  Pedestrian_Type_Pedestrian_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Pedestrian_Type_Pedestrian_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Pedestrian_Type_IsValid(int value);
const Pedestrian_Type Pedestrian_Type_Type_MIN = Pedestrian_Type_UNKNOWN;
const Pedestrian_Type Pedestrian_Type_Type_MAX = Pedestrian_Type_RUNNER;
const int Pedestrian_Type_Type_ARRAYSIZE = Pedestrian_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pedestrian_Type_descriptor();
inline const ::std::string& Pedestrian_Type_Name(Pedestrian_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pedestrian_Type_descriptor(), value);
}
inline bool Pedestrian_Type_Parse(
    const ::std::string& name, Pedestrian_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pedestrian_Type>(
    Pedestrian_Type_descriptor(), name, value);
}
// ===================================================================

class Pedestrian : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.Pedestrian) */ {
 public:
  Pedestrian();
  virtual ~Pedestrian();

  Pedestrian(const Pedestrian& from);

  inline Pedestrian& operator=(const Pedestrian& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pedestrian(Pedestrian&& from) noexcept
    : Pedestrian() {
    *this = ::std::move(from);
  }

  inline Pedestrian& operator=(Pedestrian&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pedestrian& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pedestrian* internal_default_instance() {
    return reinterpret_cast<const Pedestrian*>(
               &_Pedestrian_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Pedestrian* other);
  friend void swap(Pedestrian& a, Pedestrian& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pedestrian* New() const final {
    return CreateMaybeMessage<Pedestrian>(NULL);
  }

  Pedestrian* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pedestrian>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pedestrian& from);
  void MergeFrom(const Pedestrian& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pedestrian* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Pedestrian_Type Type;
  static const Type UNKNOWN =
    Pedestrian_Type_UNKNOWN;
  static const Type OTHER =
    Pedestrian_Type_OTHER;
  static const Type ADULT =
    Pedestrian_Type_ADULT;
  static const Type CHILD =
    Pedestrian_Type_CHILD;
  static const Type ANIMAL =
    Pedestrian_Type_ANIMAL;
  static const Type RUNNER =
    Pedestrian_Type_RUNNER;
  static inline bool Type_IsValid(int value) {
    return Pedestrian_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Pedestrian_Type_Type_MIN;
  static const Type Type_MAX =
    Pedestrian_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Pedestrian_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Pedestrian_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Pedestrian_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Pedestrian_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .metamoto.types.Pose pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  private:
  const ::metamoto::types::Pose& _internal_pose() const;
  public:
  const ::metamoto::types::Pose& pose() const;
  ::metamoto::types::Pose* release_pose();
  ::metamoto::types::Pose* mutable_pose();
  void set_allocated_pose(::metamoto::types::Pose* pose);

  // .metamoto.types.Velocity velocity = 3;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 3;
  private:
  const ::metamoto::types::Velocity& _internal_velocity() const;
  public:
  const ::metamoto::types::Velocity& velocity() const;
  ::metamoto::types::Velocity* release_velocity();
  ::metamoto::types::Velocity* mutable_velocity();
  void set_allocated_velocity(::metamoto::types::Velocity* velocity);

  // .metamoto.types.Acceleration acceleration = 4;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 4;
  private:
  const ::metamoto::types::Acceleration& _internal_acceleration() const;
  public:
  const ::metamoto::types::Acceleration& acceleration() const;
  ::metamoto::types::Acceleration* release_acceleration();
  ::metamoto::types::Acceleration* mutable_acceleration();
  void set_allocated_acceleration(::metamoto::types::Acceleration* acceleration);

  // .metamoto.types.Shape shape = 5;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 5;
  private:
  const ::metamoto::types::Shape& _internal_shape() const;
  public:
  const ::metamoto::types::Shape& shape() const;
  ::metamoto::types::Shape* release_shape();
  ::metamoto::types::Shape* mutable_shape();
  void set_allocated_shape(::metamoto::types::Shape* shape);

  // .metamoto.types.Pedestrian.Type type = 6;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::metamoto::types::Pedestrian_Type type() const;
  void set_type(::metamoto::types::Pedestrian_Type value);

  // @@protoc_insertion_point(class_scope:metamoto.types.Pedestrian)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::metamoto::types::Pose* pose_;
  ::metamoto::types::Velocity* velocity_;
  ::metamoto::types::Acceleration* acceleration_;
  ::metamoto::types::Shape* shape_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fpedestrian_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pedestrian

// string id = 1;
inline void Pedestrian::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pedestrian::id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Pedestrian.id)
  return id_.GetNoArena();
}
inline void Pedestrian::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.Pedestrian.id)
}
#if LANG_CXX11
inline void Pedestrian::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.Pedestrian.id)
}
#endif
inline void Pedestrian::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.Pedestrian.id)
}
inline void Pedestrian::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Pedestrian.id)
}
inline ::std::string* Pedestrian::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.Pedestrian.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pedestrian::release_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.Pedestrian.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pedestrian::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Pedestrian.id)
}

// .metamoto.types.Pose pose = 2;
inline bool Pedestrian::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::metamoto::types::Pose& Pedestrian::_internal_pose() const {
  return *pose_;
}
inline const ::metamoto::types::Pose& Pedestrian::pose() const {
  const ::metamoto::types::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:metamoto.types.Pedestrian.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Pose*>(
      &::metamoto::types::_Pose_default_instance_);
}
inline ::metamoto::types::Pose* Pedestrian::release_pose() {
  // @@protoc_insertion_point(field_release:metamoto.types.Pedestrian.pose)
  
  ::metamoto::types::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::metamoto::types::Pose* Pedestrian::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Pedestrian.pose)
  return pose_;
}
inline void Pedestrian::set_allocated_pose(::metamoto::types::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Pedestrian.pose)
}

// .metamoto.types.Velocity velocity = 3;
inline bool Pedestrian::has_velocity() const {
  return this != internal_default_instance() && velocity_ != NULL;
}
inline const ::metamoto::types::Velocity& Pedestrian::_internal_velocity() const {
  return *velocity_;
}
inline const ::metamoto::types::Velocity& Pedestrian::velocity() const {
  const ::metamoto::types::Velocity* p = velocity_;
  // @@protoc_insertion_point(field_get:metamoto.types.Pedestrian.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Velocity*>(
      &::metamoto::types::_Velocity_default_instance_);
}
inline ::metamoto::types::Velocity* Pedestrian::release_velocity() {
  // @@protoc_insertion_point(field_release:metamoto.types.Pedestrian.velocity)
  
  ::metamoto::types::Velocity* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline ::metamoto::types::Velocity* Pedestrian::mutable_velocity() {
  
  if (velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Velocity>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Pedestrian.velocity)
  return velocity_;
}
inline void Pedestrian::set_allocated_velocity(::metamoto::types::Velocity* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Pedestrian.velocity)
}

// .metamoto.types.Acceleration acceleration = 4;
inline bool Pedestrian::has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != NULL;
}
inline const ::metamoto::types::Acceleration& Pedestrian::_internal_acceleration() const {
  return *acceleration_;
}
inline const ::metamoto::types::Acceleration& Pedestrian::acceleration() const {
  const ::metamoto::types::Acceleration* p = acceleration_;
  // @@protoc_insertion_point(field_get:metamoto.types.Pedestrian.acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Acceleration*>(
      &::metamoto::types::_Acceleration_default_instance_);
}
inline ::metamoto::types::Acceleration* Pedestrian::release_acceleration() {
  // @@protoc_insertion_point(field_release:metamoto.types.Pedestrian.acceleration)
  
  ::metamoto::types::Acceleration* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
inline ::metamoto::types::Acceleration* Pedestrian::mutable_acceleration() {
  
  if (acceleration_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Acceleration>(GetArenaNoVirtual());
    acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Pedestrian.acceleration)
  return acceleration_;
}
inline void Pedestrian::set_allocated_acceleration(::metamoto::types::Acceleration* acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(acceleration_);
  }
  if (acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Pedestrian.acceleration)
}

// .metamoto.types.Shape shape = 5;
inline bool Pedestrian::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline const ::metamoto::types::Shape& Pedestrian::_internal_shape() const {
  return *shape_;
}
inline const ::metamoto::types::Shape& Pedestrian::shape() const {
  const ::metamoto::types::Shape* p = shape_;
  // @@protoc_insertion_point(field_get:metamoto.types.Pedestrian.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Shape*>(
      &::metamoto::types::_Shape_default_instance_);
}
inline ::metamoto::types::Shape* Pedestrian::release_shape() {
  // @@protoc_insertion_point(field_release:metamoto.types.Pedestrian.shape)
  
  ::metamoto::types::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline ::metamoto::types::Shape* Pedestrian::mutable_shape() {
  
  if (shape_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Shape>(GetArenaNoVirtual());
    shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Pedestrian.shape)
  return shape_;
}
inline void Pedestrian::set_allocated_shape(::metamoto::types::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(shape_);
  }
  if (shape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Pedestrian.shape)
}

// .metamoto.types.Pedestrian.Type type = 6;
inline void Pedestrian::clear_type() {
  type_ = 0;
}
inline ::metamoto::types::Pedestrian_Type Pedestrian::type() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Pedestrian.type)
  return static_cast< ::metamoto::types::Pedestrian_Type >(type_);
}
inline void Pedestrian::set_type(::metamoto::types::Pedestrian_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Pedestrian.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::metamoto::types::Pedestrian_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metamoto::types::Pedestrian_Type>() {
  return ::metamoto::types::Pedestrian_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2fpedestrian_2eproto
