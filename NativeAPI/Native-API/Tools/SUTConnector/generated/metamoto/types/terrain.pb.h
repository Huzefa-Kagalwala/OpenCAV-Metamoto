// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/terrain.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2fterrain_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2fterrain_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/vector3.pb.h"
#include "metamoto/types/enumerations.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fterrain_2eproto 

namespace protobuf_metamoto_2ftypes_2fterrain_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2fterrain_2eproto
namespace metamoto {
namespace types {
class Terrain;
class TerrainDefaultTypeInternal;
extern TerrainDefaultTypeInternal _Terrain_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::Terrain* Arena::CreateMaybeMessage<::metamoto::types::Terrain>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

// ===================================================================

class Terrain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.Terrain) */ {
 public:
  Terrain();
  virtual ~Terrain();

  Terrain(const Terrain& from);

  inline Terrain& operator=(const Terrain& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Terrain(Terrain&& from) noexcept
    : Terrain() {
    *this = ::std::move(from);
  }

  inline Terrain& operator=(Terrain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Terrain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Terrain* internal_default_instance() {
    return reinterpret_cast<const Terrain*>(
               &_Terrain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Terrain* other);
  friend void swap(Terrain& a, Terrain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Terrain* New() const final {
    return CreateMaybeMessage<Terrain>(NULL);
  }

  Terrain* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Terrain>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Terrain& from);
  void MergeFrom(const Terrain& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Terrain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.Vector3 vertices = 2;
  int vertices_size() const;
  void clear_vertices();
  static const int kVerticesFieldNumber = 2;
  ::metamoto::types::Vector3* mutable_vertices(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vector3 >*
      mutable_vertices();
  const ::metamoto::types::Vector3& vertices(int index) const;
  ::metamoto::types::Vector3* add_vertices();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vector3 >&
      vertices() const;

  // repeated .metamoto.types.Vector3 normals = 3;
  int normals_size() const;
  void clear_normals();
  static const int kNormalsFieldNumber = 3;
  ::metamoto::types::Vector3* mutable_normals(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vector3 >*
      mutable_normals();
  const ::metamoto::types::Vector3& normals(int index) const;
  ::metamoto::types::Vector3* add_normals();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vector3 >&
      normals() const;

  // repeated float wetnesses = 4;
  int wetnesses_size() const;
  void clear_wetnesses();
  static const int kWetnessesFieldNumber = 4;
  float wetnesses(int index) const;
  void set_wetnesses(int index, float value);
  void add_wetnesses(float value);
  const ::google::protobuf::RepeatedField< float >&
      wetnesses() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_wetnesses();

  // repeated float puddles = 5;
  int puddles_size() const;
  void clear_puddles();
  static const int kPuddlesFieldNumber = 5;
  float puddles(int index) const;
  void set_puddles(int index, float value);
  void add_puddles(float value);
  const ::google::protobuf::RepeatedField< float >&
      puddles() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_puddles();

  // repeated int32 triangles = 6;
  int triangles_size() const;
  void clear_triangles();
  static const int kTrianglesFieldNumber = 6;
  ::google::protobuf::int32 triangles(int index) const;
  void set_triangles(int index, ::google::protobuf::int32 value);
  void add_triangles(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      triangles() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_triangles();

  // repeated .metamoto.types.MaterialType materials = 7;
  int materials_size() const;
  void clear_materials();
  static const int kMaterialsFieldNumber = 7;
  ::metamoto::types::MaterialType materials(int index) const;
  void set_materials(int index, ::metamoto::types::MaterialType value);
  void add_materials(::metamoto::types::MaterialType value);
  const ::google::protobuf::RepeatedField<int>& materials() const;
  ::google::protobuf::RepeatedField<int>* mutable_materials();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:metamoto.types.Terrain)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vector3 > vertices_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vector3 > normals_;
  ::google::protobuf::RepeatedField< float > wetnesses_;
  mutable int _wetnesses_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > puddles_;
  mutable int _puddles_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > triangles_;
  mutable int _triangles_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> materials_;
  mutable int _materials_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fterrain_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Terrain

// string name = 1;
inline void Terrain::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Terrain::name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Terrain.name)
  return name_.GetNoArena();
}
inline void Terrain::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.Terrain.name)
}
#if LANG_CXX11
inline void Terrain::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.Terrain.name)
}
#endif
inline void Terrain::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.Terrain.name)
}
inline void Terrain::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Terrain.name)
}
inline ::std::string* Terrain::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.Terrain.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Terrain::release_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.Terrain.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Terrain::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Terrain.name)
}

// repeated .metamoto.types.Vector3 vertices = 2;
inline int Terrain::vertices_size() const {
  return vertices_.size();
}
inline ::metamoto::types::Vector3* Terrain::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.Terrain.vertices)
  return vertices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vector3 >*
Terrain::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.Terrain.vertices)
  return &vertices_;
}
inline const ::metamoto::types::Vector3& Terrain::vertices(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.Terrain.vertices)
  return vertices_.Get(index);
}
inline ::metamoto::types::Vector3* Terrain::add_vertices() {
  // @@protoc_insertion_point(field_add:metamoto.types.Terrain.vertices)
  return vertices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vector3 >&
Terrain::vertices() const {
  // @@protoc_insertion_point(field_list:metamoto.types.Terrain.vertices)
  return vertices_;
}

// repeated .metamoto.types.Vector3 normals = 3;
inline int Terrain::normals_size() const {
  return normals_.size();
}
inline ::metamoto::types::Vector3* Terrain::mutable_normals(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.Terrain.normals)
  return normals_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vector3 >*
Terrain::mutable_normals() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.Terrain.normals)
  return &normals_;
}
inline const ::metamoto::types::Vector3& Terrain::normals(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.Terrain.normals)
  return normals_.Get(index);
}
inline ::metamoto::types::Vector3* Terrain::add_normals() {
  // @@protoc_insertion_point(field_add:metamoto.types.Terrain.normals)
  return normals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Vector3 >&
Terrain::normals() const {
  // @@protoc_insertion_point(field_list:metamoto.types.Terrain.normals)
  return normals_;
}

// repeated float wetnesses = 4;
inline int Terrain::wetnesses_size() const {
  return wetnesses_.size();
}
inline void Terrain::clear_wetnesses() {
  wetnesses_.Clear();
}
inline float Terrain::wetnesses(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.Terrain.wetnesses)
  return wetnesses_.Get(index);
}
inline void Terrain::set_wetnesses(int index, float value) {
  wetnesses_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.types.Terrain.wetnesses)
}
inline void Terrain::add_wetnesses(float value) {
  wetnesses_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.types.Terrain.wetnesses)
}
inline const ::google::protobuf::RepeatedField< float >&
Terrain::wetnesses() const {
  // @@protoc_insertion_point(field_list:metamoto.types.Terrain.wetnesses)
  return wetnesses_;
}
inline ::google::protobuf::RepeatedField< float >*
Terrain::mutable_wetnesses() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.Terrain.wetnesses)
  return &wetnesses_;
}

// repeated float puddles = 5;
inline int Terrain::puddles_size() const {
  return puddles_.size();
}
inline void Terrain::clear_puddles() {
  puddles_.Clear();
}
inline float Terrain::puddles(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.Terrain.puddles)
  return puddles_.Get(index);
}
inline void Terrain::set_puddles(int index, float value) {
  puddles_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.types.Terrain.puddles)
}
inline void Terrain::add_puddles(float value) {
  puddles_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.types.Terrain.puddles)
}
inline const ::google::protobuf::RepeatedField< float >&
Terrain::puddles() const {
  // @@protoc_insertion_point(field_list:metamoto.types.Terrain.puddles)
  return puddles_;
}
inline ::google::protobuf::RepeatedField< float >*
Terrain::mutable_puddles() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.Terrain.puddles)
  return &puddles_;
}

// repeated int32 triangles = 6;
inline int Terrain::triangles_size() const {
  return triangles_.size();
}
inline void Terrain::clear_triangles() {
  triangles_.Clear();
}
inline ::google::protobuf::int32 Terrain::triangles(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.Terrain.triangles)
  return triangles_.Get(index);
}
inline void Terrain::set_triangles(int index, ::google::protobuf::int32 value) {
  triangles_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.types.Terrain.triangles)
}
inline void Terrain::add_triangles(::google::protobuf::int32 value) {
  triangles_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.types.Terrain.triangles)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Terrain::triangles() const {
  // @@protoc_insertion_point(field_list:metamoto.types.Terrain.triangles)
  return triangles_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Terrain::mutable_triangles() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.Terrain.triangles)
  return &triangles_;
}

// repeated .metamoto.types.MaterialType materials = 7;
inline int Terrain::materials_size() const {
  return materials_.size();
}
inline void Terrain::clear_materials() {
  materials_.Clear();
}
inline ::metamoto::types::MaterialType Terrain::materials(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.Terrain.materials)
  return static_cast< ::metamoto::types::MaterialType >(materials_.Get(index));
}
inline void Terrain::set_materials(int index, ::metamoto::types::MaterialType value) {
  materials_.Set(index, value);
  // @@protoc_insertion_point(field_set:metamoto.types.Terrain.materials)
}
inline void Terrain::add_materials(::metamoto::types::MaterialType value) {
  materials_.Add(value);
  // @@protoc_insertion_point(field_add:metamoto.types.Terrain.materials)
}
inline const ::google::protobuf::RepeatedField<int>&
Terrain::materials() const {
  // @@protoc_insertion_point(field_list:metamoto.types.Terrain.materials)
  return materials_;
}
inline ::google::protobuf::RepeatedField<int>*
Terrain::mutable_materials() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.Terrain.materials)
  return &materials_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2fterrain_2eproto
