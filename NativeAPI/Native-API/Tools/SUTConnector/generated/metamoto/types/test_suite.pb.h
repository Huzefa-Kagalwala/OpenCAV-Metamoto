// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/test_suite.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2ftest_5fsuite_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2ftest_5fsuite_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2ftest_5fsuite_2eproto 

namespace protobuf_metamoto_2ftypes_2ftest_5fsuite_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2ftest_5fsuite_2eproto
namespace metamoto {
namespace types {
class TestSuite;
class TestSuiteDefaultTypeInternal;
extern TestSuiteDefaultTypeInternal _TestSuite_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::TestSuite* Arena::CreateMaybeMessage<::metamoto::types::TestSuite>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

enum TestSuite_ScheduleType {
  TestSuite_ScheduleType_UNKNOWN = 0,
  TestSuite_ScheduleType_OTHER = 1,
  TestSuite_ScheduleType_RUN_ONCE = 2,
  TestSuite_ScheduleType_DAILY = 3,
  TestSuite_ScheduleType_WEEKLY = 4,
  TestSuite_ScheduleType_DISABLE = 5,
  TestSuite_ScheduleType_TestSuite_ScheduleType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TestSuite_ScheduleType_TestSuite_ScheduleType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TestSuite_ScheduleType_IsValid(int value);
const TestSuite_ScheduleType TestSuite_ScheduleType_ScheduleType_MIN = TestSuite_ScheduleType_UNKNOWN;
const TestSuite_ScheduleType TestSuite_ScheduleType_ScheduleType_MAX = TestSuite_ScheduleType_DISABLE;
const int TestSuite_ScheduleType_ScheduleType_ARRAYSIZE = TestSuite_ScheduleType_ScheduleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TestSuite_ScheduleType_descriptor();
inline const ::std::string& TestSuite_ScheduleType_Name(TestSuite_ScheduleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TestSuite_ScheduleType_descriptor(), value);
}
inline bool TestSuite_ScheduleType_Parse(
    const ::std::string& name, TestSuite_ScheduleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TestSuite_ScheduleType>(
    TestSuite_ScheduleType_descriptor(), name, value);
}
// ===================================================================

class TestSuite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.TestSuite) */ {
 public:
  TestSuite();
  virtual ~TestSuite();

  TestSuite(const TestSuite& from);

  inline TestSuite& operator=(const TestSuite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestSuite(TestSuite&& from) noexcept
    : TestSuite() {
    *this = ::std::move(from);
  }

  inline TestSuite& operator=(TestSuite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestSuite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestSuite* internal_default_instance() {
    return reinterpret_cast<const TestSuite*>(
               &_TestSuite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TestSuite* other);
  friend void swap(TestSuite& a, TestSuite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestSuite* New() const final {
    return CreateMaybeMessage<TestSuite>(NULL);
  }

  TestSuite* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestSuite>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestSuite& from);
  void MergeFrom(const TestSuite& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestSuite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestSuite_ScheduleType ScheduleType;
  static const ScheduleType UNKNOWN =
    TestSuite_ScheduleType_UNKNOWN;
  static const ScheduleType OTHER =
    TestSuite_ScheduleType_OTHER;
  static const ScheduleType RUN_ONCE =
    TestSuite_ScheduleType_RUN_ONCE;
  static const ScheduleType DAILY =
    TestSuite_ScheduleType_DAILY;
  static const ScheduleType WEEKLY =
    TestSuite_ScheduleType_WEEKLY;
  static const ScheduleType DISABLE =
    TestSuite_ScheduleType_DISABLE;
  static inline bool ScheduleType_IsValid(int value) {
    return TestSuite_ScheduleType_IsValid(value);
  }
  static const ScheduleType ScheduleType_MIN =
    TestSuite_ScheduleType_ScheduleType_MIN;
  static const ScheduleType ScheduleType_MAX =
    TestSuite_ScheduleType_ScheduleType_MAX;
  static const int ScheduleType_ARRAYSIZE =
    TestSuite_ScheduleType_ScheduleType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ScheduleType_descriptor() {
    return TestSuite_ScheduleType_descriptor();
  }
  static inline const ::std::string& ScheduleType_Name(ScheduleType value) {
    return TestSuite_ScheduleType_Name(value);
  }
  static inline bool ScheduleType_Parse(const ::std::string& name,
      ScheduleType* value) {
    return TestSuite_ScheduleType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string test_vector_ids = 6;
  int test_vector_ids_size() const;
  void clear_test_vector_ids();
  static const int kTestVectorIdsFieldNumber = 6;
  const ::std::string& test_vector_ids(int index) const;
  ::std::string* mutable_test_vector_ids(int index);
  void set_test_vector_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_vector_ids(int index, ::std::string&& value);
  #endif
  void set_test_vector_ids(int index, const char* value);
  void set_test_vector_ids(int index, const char* value, size_t size);
  ::std::string* add_test_vector_ids();
  void add_test_vector_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_test_vector_ids(::std::string&& value);
  #endif
  void add_test_vector_ids(const char* value);
  void add_test_vector_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_vector_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_vector_ids();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string start_time = 4;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  const ::std::string& start_time() const;
  void set_start_time(const ::std::string& value);
  #if LANG_CXX11
  void set_start_time(::std::string&& value);
  #endif
  void set_start_time(const char* value);
  void set_start_time(const char* value, size_t size);
  ::std::string* mutable_start_time();
  ::std::string* release_start_time();
  void set_allocated_start_time(::std::string* start_time);

  // string next_run_time = 5;
  void clear_next_run_time();
  static const int kNextRunTimeFieldNumber = 5;
  const ::std::string& next_run_time() const;
  void set_next_run_time(const ::std::string& value);
  #if LANG_CXX11
  void set_next_run_time(::std::string&& value);
  #endif
  void set_next_run_time(const char* value);
  void set_next_run_time(const char* value, size_t size);
  ::std::string* mutable_next_run_time();
  ::std::string* release_next_run_time();
  void set_allocated_next_run_time(::std::string* next_run_time);

  // .metamoto.types.TestSuite.ScheduleType schedule = 3;
  void clear_schedule();
  static const int kScheduleFieldNumber = 3;
  ::metamoto::types::TestSuite_ScheduleType schedule() const;
  void set_schedule(::metamoto::types::TestSuite_ScheduleType value);

  // int32 priority = 7;
  void clear_priority();
  static const int kPriorityFieldNumber = 7;
  ::google::protobuf::int32 priority() const;
  void set_priority(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:metamoto.types.TestSuite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_vector_ids_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr start_time_;
  ::google::protobuf::internal::ArenaStringPtr next_run_time_;
  int schedule_;
  ::google::protobuf::int32 priority_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2ftest_5fsuite_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestSuite

// string id = 1;
inline void TestSuite::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestSuite::id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestSuite.id)
  return id_.GetNoArena();
}
inline void TestSuite::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestSuite.id)
}
#if LANG_CXX11
inline void TestSuite::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestSuite.id)
}
#endif
inline void TestSuite::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestSuite.id)
}
inline void TestSuite::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestSuite.id)
}
inline ::std::string* TestSuite::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestSuite.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestSuite::release_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestSuite.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestSuite::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestSuite.id)
}

// string name = 2;
inline void TestSuite::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestSuite::name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestSuite.name)
  return name_.GetNoArena();
}
inline void TestSuite::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestSuite.name)
}
#if LANG_CXX11
inline void TestSuite::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestSuite.name)
}
#endif
inline void TestSuite::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestSuite.name)
}
inline void TestSuite::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestSuite.name)
}
inline ::std::string* TestSuite::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestSuite.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestSuite::release_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestSuite.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestSuite::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestSuite.name)
}

// .metamoto.types.TestSuite.ScheduleType schedule = 3;
inline void TestSuite::clear_schedule() {
  schedule_ = 0;
}
inline ::metamoto::types::TestSuite_ScheduleType TestSuite::schedule() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestSuite.schedule)
  return static_cast< ::metamoto::types::TestSuite_ScheduleType >(schedule_);
}
inline void TestSuite::set_schedule(::metamoto::types::TestSuite_ScheduleType value) {
  
  schedule_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestSuite.schedule)
}

// string start_time = 4;
inline void TestSuite::clear_start_time() {
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestSuite::start_time() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestSuite.start_time)
  return start_time_.GetNoArena();
}
inline void TestSuite::set_start_time(const ::std::string& value) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestSuite.start_time)
}
#if LANG_CXX11
inline void TestSuite::set_start_time(::std::string&& value) {
  
  start_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestSuite.start_time)
}
#endif
inline void TestSuite::set_start_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestSuite.start_time)
}
inline void TestSuite::set_start_time(const char* value, size_t size) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestSuite.start_time)
}
inline ::std::string* TestSuite::mutable_start_time() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestSuite.start_time)
  return start_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestSuite::release_start_time() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestSuite.start_time)
  
  return start_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestSuite::set_allocated_start_time(::std::string* start_time) {
  if (start_time != NULL) {
    
  } else {
    
  }
  start_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_time);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestSuite.start_time)
}

// string next_run_time = 5;
inline void TestSuite::clear_next_run_time() {
  next_run_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestSuite::next_run_time() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestSuite.next_run_time)
  return next_run_time_.GetNoArena();
}
inline void TestSuite::set_next_run_time(const ::std::string& value) {
  
  next_run_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestSuite.next_run_time)
}
#if LANG_CXX11
inline void TestSuite::set_next_run_time(::std::string&& value) {
  
  next_run_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestSuite.next_run_time)
}
#endif
inline void TestSuite::set_next_run_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_run_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestSuite.next_run_time)
}
inline void TestSuite::set_next_run_time(const char* value, size_t size) {
  
  next_run_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestSuite.next_run_time)
}
inline ::std::string* TestSuite::mutable_next_run_time() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestSuite.next_run_time)
  return next_run_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestSuite::release_next_run_time() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestSuite.next_run_time)
  
  return next_run_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestSuite::set_allocated_next_run_time(::std::string* next_run_time) {
  if (next_run_time != NULL) {
    
  } else {
    
  }
  next_run_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_run_time);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestSuite.next_run_time)
}

// repeated string test_vector_ids = 6;
inline int TestSuite::test_vector_ids_size() const {
  return test_vector_ids_.size();
}
inline void TestSuite::clear_test_vector_ids() {
  test_vector_ids_.Clear();
}
inline const ::std::string& TestSuite::test_vector_ids(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestSuite.test_vector_ids)
  return test_vector_ids_.Get(index);
}
inline ::std::string* TestSuite::mutable_test_vector_ids(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestSuite.test_vector_ids)
  return test_vector_ids_.Mutable(index);
}
inline void TestSuite::set_test_vector_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:metamoto.types.TestSuite.test_vector_ids)
  test_vector_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TestSuite::set_test_vector_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:metamoto.types.TestSuite.test_vector_ids)
  test_vector_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TestSuite::set_test_vector_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_vector_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestSuite.test_vector_ids)
}
inline void TestSuite::set_test_vector_ids(int index, const char* value, size_t size) {
  test_vector_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestSuite.test_vector_ids)
}
inline ::std::string* TestSuite::add_test_vector_ids() {
  // @@protoc_insertion_point(field_add_mutable:metamoto.types.TestSuite.test_vector_ids)
  return test_vector_ids_.Add();
}
inline void TestSuite::add_test_vector_ids(const ::std::string& value) {
  test_vector_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:metamoto.types.TestSuite.test_vector_ids)
}
#if LANG_CXX11
inline void TestSuite::add_test_vector_ids(::std::string&& value) {
  test_vector_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:metamoto.types.TestSuite.test_vector_ids)
}
#endif
inline void TestSuite::add_test_vector_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_vector_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:metamoto.types.TestSuite.test_vector_ids)
}
inline void TestSuite::add_test_vector_ids(const char* value, size_t size) {
  test_vector_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:metamoto.types.TestSuite.test_vector_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestSuite::test_vector_ids() const {
  // @@protoc_insertion_point(field_list:metamoto.types.TestSuite.test_vector_ids)
  return test_vector_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TestSuite::mutable_test_vector_ids() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.TestSuite.test_vector_ids)
  return &test_vector_ids_;
}

// int32 priority = 7;
inline void TestSuite::clear_priority() {
  priority_ = 0;
}
inline ::google::protobuf::int32 TestSuite::priority() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestSuite.priority)
  return priority_;
}
inline void TestSuite::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestSuite.priority)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::metamoto::types::TestSuite_ScheduleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metamoto::types::TestSuite_ScheduleType>() {
  return ::metamoto::types::TestSuite_ScheduleType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2ftest_5fsuite_2eproto
