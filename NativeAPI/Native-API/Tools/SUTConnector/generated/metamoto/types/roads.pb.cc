// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/roads.proto

#include "metamoto/types/roads.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FloatValue;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace protobuf_metamoto_2ftypes_2fgeo_5fcoordinates_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fgeo_5fcoordinates_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GeoCoordinates;
}  // namespace protobuf_metamoto_2ftypes_2fgeo_5fcoordinates_2eproto
namespace protobuf_metamoto_2ftypes_2froads_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2froads_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Elevation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2froads_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Junction_Connection_RoadLink;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2froads_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LaneLink;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2froads_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Signal_LaneValidity;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2froads_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ConnectingRoad;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2froads_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Geometry_Arc;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2froads_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Junction_Connection;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2froads_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Lane;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2froads_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LaneSection;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2froads_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Marking;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2froads_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Signal;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2froads_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Geometry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2froads_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Junction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2froads_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Road;
}  // namespace protobuf_metamoto_2ftypes_2froads_2eproto
namespace protobuf_metamoto_2ftypes_2fvector3_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fvector3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3;
}  // namespace protobuf_metamoto_2ftypes_2fvector3_2eproto
namespace metamoto {
namespace types {
class ElevationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Elevation>
      _instance;
} _Elevation_default_instance_;
class Geometry_ArcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Geometry_Arc>
      _instance;
} _Geometry_Arc_default_instance_;
class GeometryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Geometry>
      _instance;
} _Geometry_default_instance_;
class MarkingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Marking>
      _instance;
} _Marking_default_instance_;
class LaneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lane>
      _instance;
} _Lane_default_instance_;
class LaneLinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneLink>
      _instance;
} _LaneLink_default_instance_;
class Signal_LaneValidityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signal_LaneValidity>
      _instance;
} _Signal_LaneValidity_default_instance_;
class SignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signal>
      _instance;
} _Signal_default_instance_;
class ConnectingRoadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectingRoad>
      _instance;
} _ConnectingRoad_default_instance_;
class LaneSectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneSection>
      _instance;
} _LaneSection_default_instance_;
class RoadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Road>
      _instance;
} _Road_default_instance_;
class Junction_Connection_RoadLinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Junction_Connection_RoadLink>
      _instance;
} _Junction_Connection_RoadLink_default_instance_;
class Junction_ConnectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Junction_Connection>
      _instance;
} _Junction_Connection_default_instance_;
class JunctionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Junction>
      _instance;
} _Junction_default_instance_;
class RoadNetworkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadNetwork>
      _instance;
} _RoadNetwork_default_instance_;
class RoadPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadPoint>
      _instance;
} _RoadPoint_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace protobuf_metamoto_2ftypes_2froads_2eproto {
static void InitDefaultsElevation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Elevation_default_instance_;
    new (ptr) ::metamoto::types::Elevation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Elevation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Elevation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsElevation}, {}};

static void InitDefaultsGeometry_Arc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Geometry_Arc_default_instance_;
    new (ptr) ::metamoto::types::Geometry_Arc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Geometry_Arc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Geometry_Arc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGeometry_Arc}, {
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsGeometry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Geometry_default_instance_;
    new (ptr) ::metamoto::types::Geometry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Geometry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Geometry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGeometry}, {
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Geometry_Arc.base,}};

static void InitDefaultsMarking() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Marking_default_instance_;
    new (ptr) ::metamoto::types::Marking();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Marking::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Marking =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMarking}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_FloatValue.base,}};

static void InitDefaultsLane() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Lane_default_instance_;
    new (ptr) ::metamoto::types::Lane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Lane::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Lane =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLane}, {
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Marking.base,}};

static void InitDefaultsLaneLink() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_LaneLink_default_instance_;
    new (ptr) ::metamoto::types::LaneLink();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::LaneLink::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LaneLink =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLaneLink}, {}};

static void InitDefaultsSignal_LaneValidity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Signal_LaneValidity_default_instance_;
    new (ptr) ::metamoto::types::Signal_LaneValidity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Signal_LaneValidity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Signal_LaneValidity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignal_LaneValidity}, {}};

static void InitDefaultsSignal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Signal_default_instance_;
    new (ptr) ::metamoto::types::Signal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Signal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Signal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSignal}, {
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Signal_LaneValidity.base,}};

static void InitDefaultsConnectingRoad() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_ConnectingRoad_default_instance_;
    new (ptr) ::metamoto::types::ConnectingRoad();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::ConnectingRoad::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConnectingRoad =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConnectingRoad}, {
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_LaneLink.base,}};

static void InitDefaultsLaneSection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_LaneSection_default_instance_;
    new (ptr) ::metamoto::types::LaneSection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::LaneSection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaneSection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaneSection}, {
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Lane.base,}};

static void InitDefaultsRoad() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Road_default_instance_;
    new (ptr) ::metamoto::types::Road();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Road::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Road =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsRoad}, {
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Geometry.base,
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_LaneSection.base,
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Signal.base,
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_ConnectingRoad.base,
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Elevation.base,}};

static void InitDefaultsJunction_Connection_RoadLink() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Junction_Connection_RoadLink_default_instance_;
    new (ptr) ::metamoto::types::Junction_Connection_RoadLink();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Junction_Connection_RoadLink::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Junction_Connection_RoadLink =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJunction_Connection_RoadLink}, {}};

static void InitDefaultsJunction_Connection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Junction_Connection_default_instance_;
    new (ptr) ::metamoto::types::Junction_Connection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Junction_Connection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Junction_Connection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsJunction_Connection}, {
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Junction_Connection_RoadLink.base,}};

static void InitDefaultsJunction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Junction_default_instance_;
    new (ptr) ::metamoto::types::Junction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Junction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Junction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsJunction}, {
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Junction_Connection.base,
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsRoadNetwork() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_RoadNetwork_default_instance_;
    new (ptr) ::metamoto::types::RoadNetwork();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::RoadNetwork::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RoadNetwork =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRoadNetwork}, {
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Road.base,
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Junction.base,
      &protobuf_metamoto_2ftypes_2fgeo_5fcoordinates_2eproto::scc_info_GeoCoordinates.base,}};

static void InitDefaultsRoadPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_RoadPoint_default_instance_;
    new (ptr) ::metamoto::types::RoadPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::RoadPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RoadPoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRoadPoint}, {
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Elevation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Geometry_Arc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Geometry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Marking.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Lane.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneLink.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Signal_LaneValidity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Signal.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConnectingRoad.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneSection.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Road.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Junction_Connection_RoadLink.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Junction_Connection.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Junction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadNetwork.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadPoint.base);
}

::google::protobuf::Metadata file_level_metadata[16];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Elevation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Elevation, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Elevation, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Elevation, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Elevation, c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Elevation, d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Elevation, reversed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Geometry_Arc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Geometry_Arc, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Geometry_Arc, angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Geometry_Arc, center_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Geometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Geometry, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Geometry, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Geometry, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Geometry, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Geometry, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Geometry, arc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Marking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Marking, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Marking, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Marking, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Marking, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Marking, heading_offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Lane, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Lane, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Lane, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Lane, width0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Lane, width1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Lane, center0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Lane, center1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Lane, markings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::LaneLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::LaneLink, from_lane_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::LaneLink, to_lane_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::LaneLink, from_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::LaneLink, to_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::LaneLink, lane_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::LaneLink, lane_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Signal_LaneValidity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Signal_LaneValidity, from_lane_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Signal_LaneValidity, to_lane_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Signal, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Signal, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Signal, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Signal, lane_validity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::ConnectingRoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::ConnectingRoad, in_junction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::ConnectingRoad, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::ConnectingRoad, lane_links_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::LaneSection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::LaneSection, s0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::LaneSection, s1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::LaneSection, lanes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Road, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Road, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Road, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Road, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Road, one_way_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Road, geometries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Road, lane_sections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Road, signals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Road, connecting_road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Road, predecessor_road_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Road, successor_road_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Road, predecessor_junction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Road, successor_junction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Road, elevation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Junction_Connection_RoadLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Junction_Connection_RoadLink, road_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Junction_Connection_RoadLink, contact_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Junction_Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Junction_Connection, from_road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Junction_Connection, to_road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Junction_Connection, connecting_road_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Junction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Junction, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Junction, connections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Junction, approx_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Junction, vector_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RoadNetwork, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RoadNetwork, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RoadNetwork, roads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RoadNetwork, junctions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RoadNetwork, origin_coordinates_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RoadPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RoadPoint, road_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RoadPoint, lane_section_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RoadPoint, lane_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RoadPoint, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RoadPoint, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RoadPoint, heading_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RoadPoint, world_position_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::types::Elevation)},
  { 11, -1, sizeof(::metamoto::types::Geometry_Arc)},
  { 19, -1, sizeof(::metamoto::types::Geometry)},
  { 30, -1, sizeof(::metamoto::types::Marking)},
  { 40, -1, sizeof(::metamoto::types::Lane)},
  { 53, -1, sizeof(::metamoto::types::LaneLink)},
  { 64, -1, sizeof(::metamoto::types::Signal_LaneValidity)},
  { 71, -1, sizeof(::metamoto::types::Signal)},
  { 80, -1, sizeof(::metamoto::types::ConnectingRoad)},
  { 88, -1, sizeof(::metamoto::types::LaneSection)},
  { 96, -1, sizeof(::metamoto::types::Road)},
  { 114, -1, sizeof(::metamoto::types::Junction_Connection_RoadLink)},
  { 121, -1, sizeof(::metamoto::types::Junction_Connection)},
  { 129, -1, sizeof(::metamoto::types::Junction)},
  { 138, -1, sizeof(::metamoto::types::RoadNetwork)},
  { 147, -1, sizeof(::metamoto::types::RoadPoint)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Elevation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Geometry_Arc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Geometry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Marking_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Lane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_LaneLink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Signal_LaneValidity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Signal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_ConnectingRoad_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_LaneSection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Road_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Junction_Connection_RoadLink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Junction_Connection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Junction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_RoadNetwork_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_RoadPoint_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/types/roads.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 16);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032metamoto/types/roads.proto\022\016metamoto.t"
      "ypes\032\036google/protobuf/wrappers.proto\032\034me"
      "tamoto/types/vector3.proto\032$metamoto/typ"
      "es/geo_coordinates.proto\"T\n\tElevation\022\t\n"
      "\001s\030\001 \001(\002\022\t\n\001a\030\002 \001(\002\022\t\n\001b\030\003 \001(\002\022\t\n\001c\030\004 \001("
      "\002\022\t\n\001d\030\005 \001(\002\022\020\n\010reversed\030\006 \001(\010\"\332\002\n\010Geome"
      "try\022+\n\004type\030\001 \001(\0162\035.metamoto.types.Geome"
      "try.Type\022&\n\005start\030\002 \001(\0132\027.metamoto.types"
      ".Vector3\022(\n\007heading\030\003 \001(\0132\027.metamoto.typ"
      "es.Vector3\022\t\n\001s\030\004 \001(\002\022\016\n\006length\030\005 \001(\002\022)\n"
      "\003arc\030\006 \001(\0132\034.metamoto.types.Geometry.Arc"
      "\032M\n\003Arc\022\016\n\006radius\030\001 \001(\002\022\r\n\005angle\030\002 \001(\002\022\'"
      "\n\006center\030\003 \001(\0132\027.metamoto.types.Vector3\""
      ":\n\004Type\022\013\n\007UNKNOWN\020\000\022\t\n\005OTHER\020\001\022\021\n\rSTRAI"
      "GHT_LINE\020\002\022\007\n\003ARC\020\003\"\230\004\n\007Marking\022*\n\004type\030"
      "\001 \001(\0162\034.metamoto.types.Marking.Type\022,\n\005c"
      "olor\030\002 \001(\0162\035.metamoto.types.Marking.Colo"
      "r\022&\n\001s\030\003 \001(\0132\033.google.protobuf.FloatValu"
      "e\022&\n\001t\030\004 \001(\0132\033.google.protobuf.FloatValu"
      "e\022\026\n\016heading_offset\030\005 \001(\002\"\350\001\n\004Type\022\020\n\014TY"
      "PE_UNKNOWN\020\000\022\016\n\nTYPE_OTHER\020\001\022\t\n\005SOLID\020\002\022"
      "\010\n\004DASH\020\003\022\010\n\004CURB\020\004\022\020\n\014DOUBLE_SOLID\020\005\022\024\n"
      "\020SOLID_RIGHT_DASH\020\006\022\023\n\017SOLID_LEFT_DASH\020\007"
      "\022\024\n\020PARALLEL_PARKING\020\010\022\031\n\025PERPENDICULAR_"
      "PARKING\020\t\022\025\n\021ANGLED_PARKING_60\020\n\022\r\n\tCROS"
      "SWALK\020\013\022\013\n\007PARKING\020\014\"`\n\005Color\022\021\n\rCOLOR_U"
      "NKNOWN\020\000\022\017\n\013COLOR_OTHER\020\001\022\t\n\005WHITE\020\002\022\n\n\006"
      "YELLOW\020\003\022\007\n\003RED\020\004\022\t\n\005GREEN\020\005\022\010\n\004BLUE\020\006\"\370"
      "\002\n\004Lane\022\r\n\005index\030\001 \001(\005\022\n\n\002id\030\002 \001(\t\022\'\n\004ty"
      "pe\030\003 \001(\0162\031.metamoto.types.Lane.Type\022\016\n\006w"
      "idth0\030\004 \001(\002\022\016\n\006width1\030\005 \001(\002\022\017\n\007center0\030\006"
      " \001(\002\022\017\n\007center1\030\007 \001(\002\022)\n\010markings\030\010 \003(\0132"
      "\027.metamoto.types.Marking\"\276\001\n\004Type\022\013\n\007UNK"
      "NOWN\020\000\022\t\n\005OTHER\020\001\022\n\n\006MEDIAN\020\002\022\014\n\010CAR_LAN"
      "E\020\003\022\031\n\025PARALLEL_PARKING_LANE\020\004\022\r\n\tBIKE_L"
      "ANE\020\005\022\014\n\010SHOULDER\020\006\022\036\n\032PERPENDICULAR_PAR"
      "KING_LANE\020\007\022\032\n\026ANGLED_PARKING_60_LANE\020\010\022"
      "\020\n\014PARKING_LANE\020\t\"\211\001\n\010LaneLink\022\027\n\017from_l"
      "ane_index\030\001 \001(\005\022\025\n\rto_lane_index\030\002 \001(\005\022\024"
      "\n\014from_lane_id\030\003 \001(\t\022\022\n\nto_lane_id\030\004 \001(\t"
      "\022\022\n\nlane_index\030\005 \001(\005\022\017\n\007lane_id\030\006 \001(\t\"\331\002"
      "\n\006Signal\022\n\n\002id\030\001 \001(\t\022)\n\004type\030\002 \001(\0162\033.met"
      "amoto.types.Signal.Type\022\t\n\001s\030\003 \001(\002\022:\n\rla"
      "ne_validity\030\004 \001(\0132#.metamoto.types.Signa"
      "l.LaneValidity\032>\n\014LaneValidity\022\027\n\017from_l"
      "ane_index\030\001 \001(\005\022\025\n\rto_lane_index\030\002 \001(\005\"\220"
      "\001\n\004Type\022\013\n\007UNKNOWN\020\000\022\t\n\005OTHER\020\001\022\t\n\005LIGHT"
      "\020\002\022\023\n\017LEFT_TURN_LIGHT\020\003\022\024\n\020RIGHT_TURN_LI"
      "GHT\020\004\022\010\n\004STOP\020\005\022\t\n\005YIELD\020\006\022\022\n\016IMPLICIT_Y"
      "IELD\020\007\022\021\n\rDISCONTINUITY\020\010\"\200\002\n\016Connecting"
      "Road\022\026\n\016in_junction_id\030\001 \001(\t\0226\n\004type\030\002 \001"
      "(\0162(.metamoto.types.ConnectingRoad.Direc"
      "tion\022,\n\nlane_links\030\003 \003(\0132\030.metamoto.type"
      "s.LaneLink\"p\n\tDirection\022\013\n\007UNKNOWN\020\000\022\t\n\005"
      "OTHER\020\001\022\014\n\010STRAIGHT\020\002\022\t\n\005RIGHT\020\003\022\010\n\004LEFT"
      "\020\004\022\t\n\005UTURN\020\005\022\016\n\nSOFT_RIGHT\020\006\022\r\n\tSOFT_LE"
      "FT\020\007\"J\n\013LaneSection\022\n\n\002s0\030\001 \001(\002\022\n\n\002s1\030\002 "
      "\001(\002\022#\n\005lanes\030\003 \003(\0132\024.metamoto.types.Lane"
      "\"\264\003\n\004Road\022\n\n\002id\030\001 \001(\t\022\016\n\006length\030\002 \001(\002\022\023\n"
      "\013speed_limit\030\003 \001(\002\022\017\n\007one_way\030\004 \001(\010\022,\n\ng"
      "eometries\030\005 \003(\0132\030.metamoto.types.Geometr"
      "y\0222\n\rlane_sections\030\006 \003(\0132\033.metamoto.type"
      "s.LaneSection\022\'\n\007signals\030\007 \003(\0132\026.metamot"
      "o.types.Signal\0227\n\017connecting_road\030\010 \001(\0132"
      "\036.metamoto.types.ConnectingRoad\022\034\n\024prede"
      "cessor_road_ids\030\t \003(\t\022\032\n\022successor_road_"
      "ids\030\n \003(\t\022\037\n\027predecessor_junction_id\030\013 \001"
      "(\t\022\035\n\025successor_junction_id\030\014 \001(\t\022,\n\tele"
      "vation\030\r \003(\0132\031.metamoto.types.Elevation\""
      "\321\003\n\010Junction\022\n\n\002id\030\001 \001(\t\0228\n\013connections\030"
      "\002 \003(\0132#.metamoto.types.Junction.Connecti"
      "on\0220\n\017approx_location\030\003 \001(\0132\027.metamoto.t"
      "ypes.Vector3\022\021\n\tvector_id\030\004 \001(\t\032\271\002\n\nConn"
      "ection\022\?\n\tfrom_road\030\001 \001(\0132,.metamoto.typ"
      "es.Junction.Connection.RoadLink\022=\n\007to_ro"
      "ad\030\002 \001(\0132,.metamoto.types.Junction.Conne"
      "ction.RoadLink\022\032\n\022connecting_road_id\030\003 \001"
      "(\t\032\216\001\n\010RoadLink\022\017\n\007road_id\030\001 \001(\t\022N\n\014cont"
      "act_type\030\002 \001(\01628.metamoto.types.Junction"
      ".Connection.RoadLink.ContactType\"!\n\013Cont"
      "actType\022\t\n\005START\020\000\022\007\n\003END\020\001\"\247\001\n\013RoadNetw"
      "ork\022\n\n\002id\030\001 \001(\t\022#\n\005roads\030\002 \003(\0132\024.metamot"
      "o.types.Road\022+\n\tjunctions\030\003 \003(\0132\030.metamo"
      "to.types.Junction\022:\n\022origin_coordinates\030"
      "\004 \001(\0132\036.metamoto.types.GeoCoordinates\"\253\001"
      "\n\tRoadPoint\022\017\n\007road_id\030\001 \001(\t\022\032\n\022lane_sec"
      "tion_index\030\002 \001(\005\022\022\n\nlane_index\030\003 \001(\005\022\t\n\001"
      "s\030\004 \001(\002\022\t\n\001t\030\005 \001(\002\022\026\n\016heading_offset\030\006 \001"
      "(\002\022/\n\016world_position\030\007 \001(\0132\027.metamoto.ty"
      "pes.Vector3B\021\252\002\016Metamoto.Typesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3598);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/types/roads.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fvector3_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fgeo_5fcoordinates_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2ftypes_2froads_2eproto
namespace metamoto {
namespace types {
const ::google::protobuf::EnumDescriptor* Geometry_Type_descriptor() {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2froads_2eproto::file_level_enum_descriptors[0];
}
bool Geometry_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Geometry_Type Geometry::UNKNOWN;
const Geometry_Type Geometry::OTHER;
const Geometry_Type Geometry::STRAIGHT_LINE;
const Geometry_Type Geometry::ARC;
const Geometry_Type Geometry::Type_MIN;
const Geometry_Type Geometry::Type_MAX;
const int Geometry::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Marking_Type_descriptor() {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2froads_2eproto::file_level_enum_descriptors[1];
}
bool Marking_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Marking_Type Marking::TYPE_UNKNOWN;
const Marking_Type Marking::TYPE_OTHER;
const Marking_Type Marking::SOLID;
const Marking_Type Marking::DASH;
const Marking_Type Marking::CURB;
const Marking_Type Marking::DOUBLE_SOLID;
const Marking_Type Marking::SOLID_RIGHT_DASH;
const Marking_Type Marking::SOLID_LEFT_DASH;
const Marking_Type Marking::PARALLEL_PARKING;
const Marking_Type Marking::PERPENDICULAR_PARKING;
const Marking_Type Marking::ANGLED_PARKING_60;
const Marking_Type Marking::CROSSWALK;
const Marking_Type Marking::PARKING;
const Marking_Type Marking::Type_MIN;
const Marking_Type Marking::Type_MAX;
const int Marking::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Marking_Color_descriptor() {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2froads_2eproto::file_level_enum_descriptors[2];
}
bool Marking_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Marking_Color Marking::COLOR_UNKNOWN;
const Marking_Color Marking::COLOR_OTHER;
const Marking_Color Marking::WHITE;
const Marking_Color Marking::YELLOW;
const Marking_Color Marking::RED;
const Marking_Color Marking::GREEN;
const Marking_Color Marking::BLUE;
const Marking_Color Marking::Color_MIN;
const Marking_Color Marking::Color_MAX;
const int Marking::Color_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_Type_descriptor() {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2froads_2eproto::file_level_enum_descriptors[3];
}
bool Lane_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_Type Lane::UNKNOWN;
const Lane_Type Lane::OTHER;
const Lane_Type Lane::MEDIAN;
const Lane_Type Lane::CAR_LANE;
const Lane_Type Lane::PARALLEL_PARKING_LANE;
const Lane_Type Lane::BIKE_LANE;
const Lane_Type Lane::SHOULDER;
const Lane_Type Lane::PERPENDICULAR_PARKING_LANE;
const Lane_Type Lane::ANGLED_PARKING_60_LANE;
const Lane_Type Lane::PARKING_LANE;
const Lane_Type Lane::Type_MIN;
const Lane_Type Lane::Type_MAX;
const int Lane::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Signal_Type_descriptor() {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2froads_2eproto::file_level_enum_descriptors[4];
}
bool Signal_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_Type Signal::UNKNOWN;
const Signal_Type Signal::OTHER;
const Signal_Type Signal::LIGHT;
const Signal_Type Signal::LEFT_TURN_LIGHT;
const Signal_Type Signal::RIGHT_TURN_LIGHT;
const Signal_Type Signal::STOP;
const Signal_Type Signal::YIELD;
const Signal_Type Signal::IMPLICIT_YIELD;
const Signal_Type Signal::DISCONTINUITY;
const Signal_Type Signal::Type_MIN;
const Signal_Type Signal::Type_MAX;
const int Signal::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ConnectingRoad_Direction_descriptor() {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2froads_2eproto::file_level_enum_descriptors[5];
}
bool ConnectingRoad_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConnectingRoad_Direction ConnectingRoad::UNKNOWN;
const ConnectingRoad_Direction ConnectingRoad::OTHER;
const ConnectingRoad_Direction ConnectingRoad::STRAIGHT;
const ConnectingRoad_Direction ConnectingRoad::RIGHT;
const ConnectingRoad_Direction ConnectingRoad::LEFT;
const ConnectingRoad_Direction ConnectingRoad::UTURN;
const ConnectingRoad_Direction ConnectingRoad::SOFT_RIGHT;
const ConnectingRoad_Direction ConnectingRoad::SOFT_LEFT;
const ConnectingRoad_Direction ConnectingRoad::Direction_MIN;
const ConnectingRoad_Direction ConnectingRoad::Direction_MAX;
const int ConnectingRoad::Direction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Junction_Connection_RoadLink_ContactType_descriptor() {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2froads_2eproto::file_level_enum_descriptors[6];
}
bool Junction_Connection_RoadLink_ContactType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Junction_Connection_RoadLink_ContactType Junction_Connection_RoadLink::START;
const Junction_Connection_RoadLink_ContactType Junction_Connection_RoadLink::END;
const Junction_Connection_RoadLink_ContactType Junction_Connection_RoadLink::ContactType_MIN;
const Junction_Connection_RoadLink_ContactType Junction_Connection_RoadLink::ContactType_MAX;
const int Junction_Connection_RoadLink::ContactType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Elevation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Elevation::kSFieldNumber;
const int Elevation::kAFieldNumber;
const int Elevation::kBFieldNumber;
const int Elevation::kCFieldNumber;
const int Elevation::kDFieldNumber;
const int Elevation::kReversedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Elevation::Elevation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Elevation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Elevation)
}
Elevation::Elevation(const Elevation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&reversed_) -
    reinterpret_cast<char*>(&s_)) + sizeof(reversed_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Elevation)
}

void Elevation::SharedCtor() {
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reversed_) -
      reinterpret_cast<char*>(&s_)) + sizeof(reversed_));
}

Elevation::~Elevation() {
  // @@protoc_insertion_point(destructor:metamoto.types.Elevation)
  SharedDtor();
}

void Elevation::SharedDtor() {
}

void Elevation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Elevation::descriptor() {
  ::protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Elevation& Elevation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Elevation.base);
  return *internal_default_instance();
}


void Elevation::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Elevation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reversed_) -
      reinterpret_cast<char*>(&s_)) + sizeof(reversed_));
  _internal_metadata_.Clear();
}

bool Elevation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Elevation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float a = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float c = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float d = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reversed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reversed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Elevation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Elevation)
  return false;
#undef DO_
}

void Elevation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Elevation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float s = 1;
  if (this->s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->s(), output);
  }

  // float a = 2;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->a(), output);
  }

  // float b = 3;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->b(), output);
  }

  // float c = 4;
  if (this->c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->c(), output);
  }

  // float d = 5;
  if (this->d() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->d(), output);
  }

  // bool reversed = 6;
  if (this->reversed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->reversed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Elevation)
}

::google::protobuf::uint8* Elevation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Elevation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float s = 1;
  if (this->s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->s(), target);
  }

  // float a = 2;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->a(), target);
  }

  // float b = 3;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->b(), target);
  }

  // float c = 4;
  if (this->c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->c(), target);
  }

  // float d = 5;
  if (this->d() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->d(), target);
  }

  // bool reversed = 6;
  if (this->reversed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->reversed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Elevation)
  return target;
}

size_t Elevation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Elevation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float s = 1;
  if (this->s() != 0) {
    total_size += 1 + 4;
  }

  // float a = 2;
  if (this->a() != 0) {
    total_size += 1 + 4;
  }

  // float b = 3;
  if (this->b() != 0) {
    total_size += 1 + 4;
  }

  // float c = 4;
  if (this->c() != 0) {
    total_size += 1 + 4;
  }

  // float d = 5;
  if (this->d() != 0) {
    total_size += 1 + 4;
  }

  // bool reversed = 6;
  if (this->reversed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Elevation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Elevation)
  GOOGLE_DCHECK_NE(&from, this);
  const Elevation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Elevation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Elevation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Elevation)
    MergeFrom(*source);
  }
}

void Elevation::MergeFrom(const Elevation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Elevation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s() != 0) {
    set_s(from.s());
  }
  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.c() != 0) {
    set_c(from.c());
  }
  if (from.d() != 0) {
    set_d(from.d());
  }
  if (from.reversed() != 0) {
    set_reversed(from.reversed());
  }
}

void Elevation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Elevation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Elevation::CopyFrom(const Elevation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Elevation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Elevation::IsInitialized() const {
  return true;
}

void Elevation::Swap(Elevation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Elevation::InternalSwap(Elevation* other) {
  using std::swap;
  swap(s_, other->s_);
  swap(a_, other->a_);
  swap(b_, other->b_);
  swap(c_, other->c_);
  swap(d_, other->d_);
  swap(reversed_, other->reversed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Elevation::GetMetadata() const {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Geometry_Arc::InitAsDefaultInstance() {
  ::metamoto::types::_Geometry_Arc_default_instance_._instance.get_mutable()->center_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
}
void Geometry_Arc::clear_center() {
  if (GetArenaNoVirtual() == NULL && center_ != NULL) {
    delete center_;
  }
  center_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Geometry_Arc::kRadiusFieldNumber;
const int Geometry_Arc::kAngleFieldNumber;
const int Geometry_Arc::kCenterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Geometry_Arc::Geometry_Arc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Geometry_Arc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Geometry.Arc)
}
Geometry_Arc::Geometry_Arc(const Geometry_Arc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center()) {
    center_ = new ::metamoto::types::Vector3(*from.center_);
  } else {
    center_ = NULL;
  }
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Geometry.Arc)
}

void Geometry_Arc::SharedCtor() {
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&center_)) + sizeof(angle_));
}

Geometry_Arc::~Geometry_Arc() {
  // @@protoc_insertion_point(destructor:metamoto.types.Geometry.Arc)
  SharedDtor();
}

void Geometry_Arc::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
}

void Geometry_Arc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Geometry_Arc::descriptor() {
  ::protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Geometry_Arc& Geometry_Arc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Geometry_Arc.base);
  return *internal_default_instance();
}


void Geometry_Arc::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Geometry.Arc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && center_ != NULL) {
    delete center_;
  }
  center_ = NULL;
  ::memset(&radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&radius_)) + sizeof(angle_));
  _internal_metadata_.Clear();
}

bool Geometry_Arc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Geometry.Arc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float radius = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 center = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Geometry.Arc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Geometry.Arc)
  return false;
#undef DO_
}

void Geometry_Arc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Geometry.Arc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float radius = 1;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->radius(), output);
  }

  // float angle = 2;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle(), output);
  }

  // .metamoto.types.Vector3 center = 3;
  if (this->has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_center(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Geometry.Arc)
}

::google::protobuf::uint8* Geometry_Arc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Geometry.Arc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float radius = 1;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->radius(), target);
  }

  // float angle = 2;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle(), target);
  }

  // .metamoto.types.Vector3 center = 3;
  if (this->has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_center(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Geometry.Arc)
  return target;
}

size_t Geometry_Arc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Geometry.Arc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.Vector3 center = 3;
  if (this->has_center()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // float radius = 1;
  if (this->radius() != 0) {
    total_size += 1 + 4;
  }

  // float angle = 2;
  if (this->angle() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Geometry_Arc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Geometry.Arc)
  GOOGLE_DCHECK_NE(&from, this);
  const Geometry_Arc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Geometry_Arc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Geometry.Arc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Geometry.Arc)
    MergeFrom(*source);
  }
}

void Geometry_Arc::MergeFrom(const Geometry_Arc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Geometry.Arc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    mutable_center()->::metamoto::types::Vector3::MergeFrom(from.center());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
}

void Geometry_Arc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Geometry.Arc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geometry_Arc::CopyFrom(const Geometry_Arc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Geometry.Arc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geometry_Arc::IsInitialized() const {
  return true;
}

void Geometry_Arc::Swap(Geometry_Arc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Geometry_Arc::InternalSwap(Geometry_Arc* other) {
  using std::swap;
  swap(center_, other->center_);
  swap(radius_, other->radius_);
  swap(angle_, other->angle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Geometry_Arc::GetMetadata() const {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Geometry::InitAsDefaultInstance() {
  ::metamoto::types::_Geometry_default_instance_._instance.get_mutable()->start_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
  ::metamoto::types::_Geometry_default_instance_._instance.get_mutable()->heading_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
  ::metamoto::types::_Geometry_default_instance_._instance.get_mutable()->arc_ = const_cast< ::metamoto::types::Geometry_Arc*>(
      ::metamoto::types::Geometry_Arc::internal_default_instance());
}
void Geometry::clear_start() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
}
void Geometry::clear_heading() {
  if (GetArenaNoVirtual() == NULL && heading_ != NULL) {
    delete heading_;
  }
  heading_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Geometry::kTypeFieldNumber;
const int Geometry::kStartFieldNumber;
const int Geometry::kHeadingFieldNumber;
const int Geometry::kSFieldNumber;
const int Geometry::kLengthFieldNumber;
const int Geometry::kArcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Geometry::Geometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Geometry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Geometry)
}
Geometry::Geometry(const Geometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::metamoto::types::Vector3(*from.start_);
  } else {
    start_ = NULL;
  }
  if (from.has_heading()) {
    heading_ = new ::metamoto::types::Vector3(*from.heading_);
  } else {
    heading_ = NULL;
  }
  if (from.has_arc()) {
    arc_ = new ::metamoto::types::Geometry_Arc(*from.arc_);
  } else {
    arc_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&type_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Geometry)
}

void Geometry::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&start_)) + sizeof(length_));
}

Geometry::~Geometry() {
  // @@protoc_insertion_point(destructor:metamoto.types.Geometry)
  SharedDtor();
}

void Geometry::SharedDtor() {
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete heading_;
  if (this != internal_default_instance()) delete arc_;
}

void Geometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Geometry::descriptor() {
  ::protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Geometry& Geometry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Geometry.base);
  return *internal_default_instance();
}


void Geometry::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Geometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
  if (GetArenaNoVirtual() == NULL && heading_ != NULL) {
    delete heading_;
  }
  heading_ = NULL;
  if (GetArenaNoVirtual() == NULL && arc_ != NULL) {
    delete arc_;
  }
  arc_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&type_)) + sizeof(length_));
  _internal_metadata_.Clear();
}

bool Geometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Geometry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.Geometry.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::metamoto::types::Geometry_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heading()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Geometry.Arc arc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_arc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Geometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Geometry)
  return false;
#undef DO_
}

void Geometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Geometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Geometry.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .metamoto.types.Vector3 start = 2;
  if (this->has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_start(), output);
  }

  // .metamoto.types.Vector3 heading = 3;
  if (this->has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_heading(), output);
  }

  // float s = 4;
  if (this->s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->s(), output);
  }

  // float length = 5;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->length(), output);
  }

  // .metamoto.types.Geometry.Arc arc = 6;
  if (this->has_arc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_arc(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Geometry)
}

::google::protobuf::uint8* Geometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Geometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Geometry.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .metamoto.types.Vector3 start = 2;
  if (this->has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_start(), deterministic, target);
  }

  // .metamoto.types.Vector3 heading = 3;
  if (this->has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_heading(), deterministic, target);
  }

  // float s = 4;
  if (this->s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->s(), target);
  }

  // float length = 5;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->length(), target);
  }

  // .metamoto.types.Geometry.Arc arc = 6;
  if (this->has_arc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_arc(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Geometry)
  return target;
}

size_t Geometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Geometry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.Vector3 start = 2;
  if (this->has_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .metamoto.types.Vector3 heading = 3;
  if (this->has_heading()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *heading_);
  }

  // .metamoto.types.Geometry.Arc arc = 6;
  if (this->has_arc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *arc_);
  }

  // .metamoto.types.Geometry.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float s = 4;
  if (this->s() != 0) {
    total_size += 1 + 4;
  }

  // float length = 5;
  if (this->length() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Geometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Geometry)
  GOOGLE_DCHECK_NE(&from, this);
  const Geometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Geometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Geometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Geometry)
    MergeFrom(*source);
  }
}

void Geometry::MergeFrom(const Geometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Geometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start()) {
    mutable_start()->::metamoto::types::Vector3::MergeFrom(from.start());
  }
  if (from.has_heading()) {
    mutable_heading()->::metamoto::types::Vector3::MergeFrom(from.heading());
  }
  if (from.has_arc()) {
    mutable_arc()->::metamoto::types::Geometry_Arc::MergeFrom(from.arc());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.s() != 0) {
    set_s(from.s());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void Geometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Geometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geometry::CopyFrom(const Geometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Geometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geometry::IsInitialized() const {
  return true;
}

void Geometry::Swap(Geometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Geometry::InternalSwap(Geometry* other) {
  using std::swap;
  swap(start_, other->start_);
  swap(heading_, other->heading_);
  swap(arc_, other->arc_);
  swap(type_, other->type_);
  swap(s_, other->s_);
  swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Geometry::GetMetadata() const {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Marking::InitAsDefaultInstance() {
  ::metamoto::types::_Marking_default_instance_._instance.get_mutable()->s_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::metamoto::types::_Marking_default_instance_._instance.get_mutable()->t_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
}
void Marking::clear_s() {
  if (GetArenaNoVirtual() == NULL && s_ != NULL) {
    delete s_;
  }
  s_ = NULL;
}
void Marking::clear_t() {
  if (GetArenaNoVirtual() == NULL && t_ != NULL) {
    delete t_;
  }
  t_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Marking::kTypeFieldNumber;
const int Marking::kColorFieldNumber;
const int Marking::kSFieldNumber;
const int Marking::kTFieldNumber;
const int Marking::kHeadingOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Marking::Marking()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Marking.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Marking)
}
Marking::Marking(const Marking& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_s()) {
    s_ = new ::google::protobuf::FloatValue(*from.s_);
  } else {
    s_ = NULL;
  }
  if (from.has_t()) {
    t_ = new ::google::protobuf::FloatValue(*from.t_);
  } else {
    t_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_offset_) -
    reinterpret_cast<char*>(&type_)) + sizeof(heading_offset_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Marking)
}

void Marking::SharedCtor() {
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_offset_) -
      reinterpret_cast<char*>(&s_)) + sizeof(heading_offset_));
}

Marking::~Marking() {
  // @@protoc_insertion_point(destructor:metamoto.types.Marking)
  SharedDtor();
}

void Marking::SharedDtor() {
  if (this != internal_default_instance()) delete s_;
  if (this != internal_default_instance()) delete t_;
}

void Marking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Marking::descriptor() {
  ::protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Marking& Marking::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Marking.base);
  return *internal_default_instance();
}


void Marking::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Marking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && s_ != NULL) {
    delete s_;
  }
  s_ = NULL;
  if (GetArenaNoVirtual() == NULL && t_ != NULL) {
    delete t_;
  }
  t_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_offset_) -
      reinterpret_cast<char*>(&type_)) + sizeof(heading_offset_));
  _internal_metadata_.Clear();
}

bool Marking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Marking)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.Marking.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::metamoto::types::Marking_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Marking.Color color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::metamoto::types::Marking_Color >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue s = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue t = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_t()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading_offset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Marking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Marking)
  return false;
#undef DO_
}

void Marking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Marking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Marking.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .metamoto.types.Marking.Color color = 2;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->color(), output);
  }

  // .google.protobuf.FloatValue s = 3;
  if (this->has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_s(), output);
  }

  // .google.protobuf.FloatValue t = 4;
  if (this->has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_t(), output);
  }

  // float heading_offset = 5;
  if (this->heading_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->heading_offset(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Marking)
}

::google::protobuf::uint8* Marking::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Marking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Marking.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .metamoto.types.Marking.Color color = 2;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->color(), target);
  }

  // .google.protobuf.FloatValue s = 3;
  if (this->has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_s(), deterministic, target);
  }

  // .google.protobuf.FloatValue t = 4;
  if (this->has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_t(), deterministic, target);
  }

  // float heading_offset = 5;
  if (this->heading_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->heading_offset(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Marking)
  return target;
}

size_t Marking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Marking)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.FloatValue s = 3;
  if (this->has_s()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *s_);
  }

  // .google.protobuf.FloatValue t = 4;
  if (this->has_t()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *t_);
  }

  // .metamoto.types.Marking.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .metamoto.types.Marking.Color color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
  }

  // float heading_offset = 5;
  if (this->heading_offset() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Marking::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Marking)
  GOOGLE_DCHECK_NE(&from, this);
  const Marking* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Marking>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Marking)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Marking)
    MergeFrom(*source);
  }
}

void Marking::MergeFrom(const Marking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Marking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_s()) {
    mutable_s()->::google::protobuf::FloatValue::MergeFrom(from.s());
  }
  if (from.has_t()) {
    mutable_t()->::google::protobuf::FloatValue::MergeFrom(from.t());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.heading_offset() != 0) {
    set_heading_offset(from.heading_offset());
  }
}

void Marking::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Marking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Marking::CopyFrom(const Marking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Marking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Marking::IsInitialized() const {
  return true;
}

void Marking::Swap(Marking* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Marking::InternalSwap(Marking* other) {
  using std::swap;
  swap(s_, other->s_);
  swap(t_, other->t_);
  swap(type_, other->type_);
  swap(color_, other->color_);
  swap(heading_offset_, other->heading_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Marking::GetMetadata() const {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Lane::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane::kIndexFieldNumber;
const int Lane::kIdFieldNumber;
const int Lane::kTypeFieldNumber;
const int Lane::kWidth0FieldNumber;
const int Lane::kWidth1FieldNumber;
const int Lane::kCenter0FieldNumber;
const int Lane::kCenter1FieldNumber;
const int Lane::kMarkingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane::Lane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Lane.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Lane)
}
Lane::Lane(const Lane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      markings_(from.markings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&center1_) -
    reinterpret_cast<char*>(&index_)) + sizeof(center1_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Lane)
}

void Lane::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&center1_) -
      reinterpret_cast<char*>(&index_)) + sizeof(center1_));
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:metamoto.types.Lane)
  SharedDtor();
}

void Lane::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Lane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Lane::descriptor() {
  ::protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lane& Lane::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Lane.base);
  return *internal_default_instance();
}


void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markings_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&center1_) -
      reinterpret_cast<char*>(&index_)) + sizeof(center1_));
  _internal_metadata_.Clear();
}

bool Lane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Lane)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Lane.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Lane.Type type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::metamoto::types::Lane_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width0 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float center0 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &center0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float center1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &center1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Marking markings = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_markings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Lane)
  return false;
#undef DO_
}

void Lane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Lane.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // .metamoto.types.Lane.Type type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // float width0 = 4;
  if (this->width0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->width0(), output);
  }

  // float width1 = 5;
  if (this->width1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->width1(), output);
  }

  // float center0 = 6;
  if (this->center0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->center0(), output);
  }

  // float center1 = 7;
  if (this->center1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->center1(), output);
  }

  // repeated .metamoto.types.Marking markings = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->markings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->markings(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Lane)
}

::google::protobuf::uint8* Lane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Lane.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // .metamoto.types.Lane.Type type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // float width0 = 4;
  if (this->width0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->width0(), target);
  }

  // float width1 = 5;
  if (this->width1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->width1(), target);
  }

  // float center0 = 6;
  if (this->center0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->center0(), target);
  }

  // float center1 = 7;
  if (this->center1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->center1(), target);
  }

  // repeated .metamoto.types.Marking markings = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->markings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->markings(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Lane)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.Marking markings = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->markings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->markings(static_cast<int>(i)));
    }
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  // .metamoto.types.Lane.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float width0 = 4;
  if (this->width0() != 0) {
    total_size += 1 + 4;
  }

  // float width1 = 5;
  if (this->width1() != 0) {
    total_size += 1 + 4;
  }

  // float center0 = 6;
  if (this->center0() != 0) {
    total_size += 1 + 4;
  }

  // float center1 = 7;
  if (this->center1() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Lane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  markings_.MergeFrom(from.markings_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.width0() != 0) {
    set_width0(from.width0());
  }
  if (from.width1() != 0) {
    set_width1(from.width1());
  }
  if (from.center0() != 0) {
    set_center0(from.center0());
  }
  if (from.center1() != 0) {
    set_center1(from.center1());
  }
}

void Lane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::Swap(Lane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lane::InternalSwap(Lane* other) {
  using std::swap;
  CastToBase(&markings_)->InternalSwap(CastToBase(&other->markings_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(type_, other->type_);
  swap(width0_, other->width0_);
  swap(width1_, other->width1_);
  swap(center0_, other->center0_);
  swap(center1_, other->center1_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Lane::GetMetadata() const {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneLink::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneLink::kFromLaneIndexFieldNumber;
const int LaneLink::kToLaneIndexFieldNumber;
const int LaneLink::kFromLaneIdFieldNumber;
const int LaneLink::kToLaneIdFieldNumber;
const int LaneLink::kLaneIndexFieldNumber;
const int LaneLink::kLaneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneLink::LaneLink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_LaneLink.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.LaneLink)
}
LaneLink::LaneLink(const LaneLink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_lane_id().size() > 0) {
    from_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_lane_id_);
  }
  to_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.to_lane_id().size() > 0) {
    to_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_lane_id_);
  }
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lane_id().size() > 0) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&from_lane_index_, &from.from_lane_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_index_) -
    reinterpret_cast<char*>(&from_lane_index_)) + sizeof(lane_index_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.LaneLink)
}

void LaneLink::SharedCtor() {
  from_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_lane_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_index_) -
      reinterpret_cast<char*>(&from_lane_index_)) + sizeof(lane_index_));
}

LaneLink::~LaneLink() {
  // @@protoc_insertion_point(destructor:metamoto.types.LaneLink)
  SharedDtor();
}

void LaneLink::SharedDtor() {
  from_lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LaneLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneLink::descriptor() {
  ::protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneLink& LaneLink::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_LaneLink.base);
  return *internal_default_instance();
}


void LaneLink::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.LaneLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_lane_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_index_) -
      reinterpret_cast<char*>(&from_lane_index_)) + sizeof(lane_index_));
  _internal_metadata_.Clear();
}

bool LaneLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.LaneLink)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 from_lane_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_lane_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 to_lane_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_lane_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string from_lane_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_lane_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_lane_id().data(), static_cast<int>(this->from_lane_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.LaneLink.from_lane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string to_lane_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_lane_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to_lane_id().data(), static_cast<int>(this->to_lane_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.LaneLink.to_lane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lane_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.LaneLink.lane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.LaneLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.LaneLink)
  return false;
#undef DO_
}

void LaneLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.LaneLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from_lane_index = 1;
  if (this->from_lane_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->from_lane_index(), output);
  }

  // int32 to_lane_index = 2;
  if (this->to_lane_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->to_lane_index(), output);
  }

  // string from_lane_id = 3;
  if (this->from_lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_lane_id().data(), static_cast<int>(this->from_lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.LaneLink.from_lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from_lane_id(), output);
  }

  // string to_lane_id = 4;
  if (this->to_lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_lane_id().data(), static_cast<int>(this->to_lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.LaneLink.to_lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->to_lane_id(), output);
  }

  // int32 lane_index = 5;
  if (this->lane_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lane_index(), output);
  }

  // string lane_id = 6;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.LaneLink.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->lane_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.LaneLink)
}

::google::protobuf::uint8* LaneLink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.LaneLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from_lane_index = 1;
  if (this->from_lane_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->from_lane_index(), target);
  }

  // int32 to_lane_index = 2;
  if (this->to_lane_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->to_lane_index(), target);
  }

  // string from_lane_id = 3;
  if (this->from_lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_lane_id().data(), static_cast<int>(this->from_lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.LaneLink.from_lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_lane_id(), target);
  }

  // string to_lane_id = 4;
  if (this->to_lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_lane_id().data(), static_cast<int>(this->to_lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.LaneLink.to_lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to_lane_id(), target);
  }

  // int32 lane_index = 5;
  if (this->lane_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lane_index(), target);
  }

  // string lane_id = 6;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.LaneLink.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lane_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.LaneLink)
  return target;
}

size_t LaneLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.LaneLink)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string from_lane_id = 3;
  if (this->from_lane_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_lane_id());
  }

  // string to_lane_id = 4;
  if (this->to_lane_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_lane_id());
  }

  // string lane_id = 6;
  if (this->lane_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lane_id());
  }

  // int32 from_lane_index = 1;
  if (this->from_lane_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from_lane_index());
  }

  // int32 to_lane_index = 2;
  if (this->to_lane_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->to_lane_index());
  }

  // int32 lane_index = 5;
  if (this->lane_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.LaneLink)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneLink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneLink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.LaneLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.LaneLink)
    MergeFrom(*source);
  }
}

void LaneLink::MergeFrom(const LaneLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.LaneLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_lane_id().size() > 0) {

    from_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_lane_id_);
  }
  if (from.to_lane_id().size() > 0) {

    to_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_lane_id_);
  }
  if (from.lane_id().size() > 0) {

    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from.from_lane_index() != 0) {
    set_from_lane_index(from.from_lane_index());
  }
  if (from.to_lane_index() != 0) {
    set_to_lane_index(from.to_lane_index());
  }
  if (from.lane_index() != 0) {
    set_lane_index(from.lane_index());
  }
}

void LaneLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.LaneLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneLink::CopyFrom(const LaneLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.LaneLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneLink::IsInitialized() const {
  return true;
}

void LaneLink::Swap(LaneLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneLink::InternalSwap(LaneLink* other) {
  using std::swap;
  from_lane_id_.Swap(&other->from_lane_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_lane_id_.Swap(&other->to_lane_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lane_id_.Swap(&other->lane_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(from_lane_index_, other->from_lane_index_);
  swap(to_lane_index_, other->to_lane_index_);
  swap(lane_index_, other->lane_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneLink::GetMetadata() const {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Signal_LaneValidity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal_LaneValidity::kFromLaneIndexFieldNumber;
const int Signal_LaneValidity::kToLaneIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal_LaneValidity::Signal_LaneValidity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Signal_LaneValidity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Signal.LaneValidity)
}
Signal_LaneValidity::Signal_LaneValidity(const Signal_LaneValidity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_lane_index_, &from.from_lane_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_lane_index_) -
    reinterpret_cast<char*>(&from_lane_index_)) + sizeof(to_lane_index_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Signal.LaneValidity)
}

void Signal_LaneValidity::SharedCtor() {
  ::memset(&from_lane_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_lane_index_) -
      reinterpret_cast<char*>(&from_lane_index_)) + sizeof(to_lane_index_));
}

Signal_LaneValidity::~Signal_LaneValidity() {
  // @@protoc_insertion_point(destructor:metamoto.types.Signal.LaneValidity)
  SharedDtor();
}

void Signal_LaneValidity::SharedDtor() {
}

void Signal_LaneValidity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Signal_LaneValidity::descriptor() {
  ::protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Signal_LaneValidity& Signal_LaneValidity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Signal_LaneValidity.base);
  return *internal_default_instance();
}


void Signal_LaneValidity::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Signal.LaneValidity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_lane_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_lane_index_) -
      reinterpret_cast<char*>(&from_lane_index_)) + sizeof(to_lane_index_));
  _internal_metadata_.Clear();
}

bool Signal_LaneValidity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Signal.LaneValidity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 from_lane_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_lane_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 to_lane_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_lane_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Signal.LaneValidity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Signal.LaneValidity)
  return false;
#undef DO_
}

void Signal_LaneValidity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Signal.LaneValidity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from_lane_index = 1;
  if (this->from_lane_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->from_lane_index(), output);
  }

  // int32 to_lane_index = 2;
  if (this->to_lane_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->to_lane_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Signal.LaneValidity)
}

::google::protobuf::uint8* Signal_LaneValidity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Signal.LaneValidity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from_lane_index = 1;
  if (this->from_lane_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->from_lane_index(), target);
  }

  // int32 to_lane_index = 2;
  if (this->to_lane_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->to_lane_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Signal.LaneValidity)
  return target;
}

size_t Signal_LaneValidity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Signal.LaneValidity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 from_lane_index = 1;
  if (this->from_lane_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from_lane_index());
  }

  // int32 to_lane_index = 2;
  if (this->to_lane_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->to_lane_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal_LaneValidity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Signal.LaneValidity)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal_LaneValidity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signal_LaneValidity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Signal.LaneValidity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Signal.LaneValidity)
    MergeFrom(*source);
  }
}

void Signal_LaneValidity::MergeFrom(const Signal_LaneValidity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Signal.LaneValidity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_lane_index() != 0) {
    set_from_lane_index(from.from_lane_index());
  }
  if (from.to_lane_index() != 0) {
    set_to_lane_index(from.to_lane_index());
  }
}

void Signal_LaneValidity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Signal.LaneValidity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal_LaneValidity::CopyFrom(const Signal_LaneValidity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Signal.LaneValidity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal_LaneValidity::IsInitialized() const {
  return true;
}

void Signal_LaneValidity::Swap(Signal_LaneValidity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal_LaneValidity::InternalSwap(Signal_LaneValidity* other) {
  using std::swap;
  swap(from_lane_index_, other->from_lane_index_);
  swap(to_lane_index_, other->to_lane_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Signal_LaneValidity::GetMetadata() const {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Signal::InitAsDefaultInstance() {
  ::metamoto::types::_Signal_default_instance_._instance.get_mutable()->lane_validity_ = const_cast< ::metamoto::types::Signal_LaneValidity*>(
      ::metamoto::types::Signal_LaneValidity::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal::kIdFieldNumber;
const int Signal::kTypeFieldNumber;
const int Signal::kSFieldNumber;
const int Signal::kLaneValidityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal::Signal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Signal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Signal)
}
Signal::Signal(const Signal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_lane_validity()) {
    lane_validity_ = new ::metamoto::types::Signal_LaneValidity(*from.lane_validity_);
  } else {
    lane_validity_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&s_) -
    reinterpret_cast<char*>(&type_)) + sizeof(s_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Signal)
}

void Signal::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lane_validity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&lane_validity_)) + sizeof(s_));
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:metamoto.types.Signal)
  SharedDtor();
}

void Signal::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete lane_validity_;
}

void Signal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Signal::descriptor() {
  ::protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Signal& Signal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Signal.base);
  return *internal_default_instance();
}


void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && lane_validity_ != NULL) {
    delete lane_validity_;
  }
  lane_validity_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&type_)) + sizeof(s_));
  _internal_metadata_.Clear();
}

bool Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Signal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Signal.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Signal.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::metamoto::types::Signal_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Signal.LaneValidity lane_validity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_validity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Signal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Signal)
  return false;
#undef DO_
}

void Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Signal.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .metamoto.types.Signal.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // float s = 3;
  if (this->s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->s(), output);
  }

  // .metamoto.types.Signal.LaneValidity lane_validity = 4;
  if (this->has_lane_validity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_lane_validity(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Signal)
}

::google::protobuf::uint8* Signal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Signal.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .metamoto.types.Signal.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // float s = 3;
  if (this->s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->s(), target);
  }

  // .metamoto.types.Signal.LaneValidity lane_validity = 4;
  if (this->has_lane_validity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_lane_validity(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Signal)
  return target;
}

size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Signal)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .metamoto.types.Signal.LaneValidity lane_validity = 4;
  if (this->has_lane_validity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lane_validity_);
  }

  // .metamoto.types.Signal.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float s = 3;
  if (this->s() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Signal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Signal)
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_lane_validity()) {
    mutable_lane_validity()->::metamoto::types::Signal_LaneValidity::MergeFrom(from.lane_validity());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.s() != 0) {
    set_s(from.s());
  }
}

void Signal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  return true;
}

void Signal::Swap(Signal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal::InternalSwap(Signal* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lane_validity_, other->lane_validity_);
  swap(type_, other->type_);
  swap(s_, other->s_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConnectingRoad::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectingRoad::kInJunctionIdFieldNumber;
const int ConnectingRoad::kTypeFieldNumber;
const int ConnectingRoad::kLaneLinksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectingRoad::ConnectingRoad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_ConnectingRoad.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.ConnectingRoad)
}
ConnectingRoad::ConnectingRoad(const ConnectingRoad& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lane_links_(from.lane_links_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_junction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.in_junction_id().size() > 0) {
    in_junction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_junction_id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:metamoto.types.ConnectingRoad)
}

void ConnectingRoad::SharedCtor() {
  in_junction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

ConnectingRoad::~ConnectingRoad() {
  // @@protoc_insertion_point(destructor:metamoto.types.ConnectingRoad)
  SharedDtor();
}

void ConnectingRoad::SharedDtor() {
  in_junction_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConnectingRoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConnectingRoad::descriptor() {
  ::protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConnectingRoad& ConnectingRoad::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_ConnectingRoad.base);
  return *internal_default_instance();
}


void ConnectingRoad::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.ConnectingRoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_links_.Clear();
  in_junction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool ConnectingRoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.ConnectingRoad)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string in_junction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_in_junction_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->in_junction_id().data(), static_cast<int>(this->in_junction_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.ConnectingRoad.in_junction_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.ConnectingRoad.Direction type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::metamoto::types::ConnectingRoad_Direction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.LaneLink lane_links = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lane_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.ConnectingRoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.ConnectingRoad)
  return false;
#undef DO_
}

void ConnectingRoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.ConnectingRoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string in_junction_id = 1;
  if (this->in_junction_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->in_junction_id().data(), static_cast<int>(this->in_junction_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.ConnectingRoad.in_junction_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->in_junction_id(), output);
  }

  // .metamoto.types.ConnectingRoad.Direction type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .metamoto.types.LaneLink lane_links = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_links_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->lane_links(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.ConnectingRoad)
}

::google::protobuf::uint8* ConnectingRoad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.ConnectingRoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string in_junction_id = 1;
  if (this->in_junction_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->in_junction_id().data(), static_cast<int>(this->in_junction_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.ConnectingRoad.in_junction_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->in_junction_id(), target);
  }

  // .metamoto.types.ConnectingRoad.Direction type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated .metamoto.types.LaneLink lane_links = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_links_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->lane_links(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.ConnectingRoad)
  return target;
}

size_t ConnectingRoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.ConnectingRoad)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.LaneLink lane_links = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_links_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_links(static_cast<int>(i)));
    }
  }

  // string in_junction_id = 1;
  if (this->in_junction_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in_junction_id());
  }

  // .metamoto.types.ConnectingRoad.Direction type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectingRoad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.ConnectingRoad)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectingRoad* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectingRoad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.ConnectingRoad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.ConnectingRoad)
    MergeFrom(*source);
  }
}

void ConnectingRoad::MergeFrom(const ConnectingRoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.ConnectingRoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_links_.MergeFrom(from.lane_links_);
  if (from.in_junction_id().size() > 0) {

    in_junction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_junction_id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ConnectingRoad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.ConnectingRoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectingRoad::CopyFrom(const ConnectingRoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.ConnectingRoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectingRoad::IsInitialized() const {
  return true;
}

void ConnectingRoad::Swap(ConnectingRoad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectingRoad::InternalSwap(ConnectingRoad* other) {
  using std::swap;
  CastToBase(&lane_links_)->InternalSwap(CastToBase(&other->lane_links_));
  in_junction_id_.Swap(&other->in_junction_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConnectingRoad::GetMetadata() const {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneSection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneSection::kS0FieldNumber;
const int LaneSection::kS1FieldNumber;
const int LaneSection::kLanesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneSection::LaneSection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_LaneSection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.LaneSection)
}
LaneSection::LaneSection(const LaneSection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lanes_(from.lanes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s1_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s1_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.LaneSection)
}

void LaneSection::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s1_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s1_));
}

LaneSection::~LaneSection() {
  // @@protoc_insertion_point(destructor:metamoto.types.LaneSection)
  SharedDtor();
}

void LaneSection::SharedDtor() {
}

void LaneSection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneSection::descriptor() {
  ::protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneSection& LaneSection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_LaneSection.base);
  return *internal_default_instance();
}


void LaneSection::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.LaneSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lanes_.Clear();
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s1_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s1_));
  _internal_metadata_.Clear();
}

bool LaneSection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.LaneSection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float s0 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Lane lanes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lanes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.LaneSection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.LaneSection)
  return false;
#undef DO_
}

void LaneSection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.LaneSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float s0 = 1;
  if (this->s0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->s0(), output);
  }

  // float s1 = 2;
  if (this->s1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->s1(), output);
  }

  // repeated .metamoto.types.Lane lanes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lanes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->lanes(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.LaneSection)
}

::google::protobuf::uint8* LaneSection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.LaneSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float s0 = 1;
  if (this->s0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->s0(), target);
  }

  // float s1 = 2;
  if (this->s1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->s1(), target);
  }

  // repeated .metamoto.types.Lane lanes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lanes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->lanes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.LaneSection)
  return target;
}

size_t LaneSection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.LaneSection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.Lane lanes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->lanes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lanes(static_cast<int>(i)));
    }
  }

  // float s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 + 4;
  }

  // float s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneSection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.LaneSection)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneSection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneSection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.LaneSection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.LaneSection)
    MergeFrom(*source);
  }
}

void LaneSection::MergeFrom(const LaneSection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.LaneSection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lanes_.MergeFrom(from.lanes_);
  if (from.s0() != 0) {
    set_s0(from.s0());
  }
  if (from.s1() != 0) {
    set_s1(from.s1());
  }
}

void LaneSection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.LaneSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSection::CopyFrom(const LaneSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.LaneSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSection::IsInitialized() const {
  return true;
}

void LaneSection::Swap(LaneSection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneSection::InternalSwap(LaneSection* other) {
  using std::swap;
  CastToBase(&lanes_)->InternalSwap(CastToBase(&other->lanes_));
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneSection::GetMetadata() const {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Road::InitAsDefaultInstance() {
  ::metamoto::types::_Road_default_instance_._instance.get_mutable()->connecting_road_ = const_cast< ::metamoto::types::ConnectingRoad*>(
      ::metamoto::types::ConnectingRoad::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Road::kIdFieldNumber;
const int Road::kLengthFieldNumber;
const int Road::kSpeedLimitFieldNumber;
const int Road::kOneWayFieldNumber;
const int Road::kGeometriesFieldNumber;
const int Road::kLaneSectionsFieldNumber;
const int Road::kSignalsFieldNumber;
const int Road::kConnectingRoadFieldNumber;
const int Road::kPredecessorRoadIdsFieldNumber;
const int Road::kSuccessorRoadIdsFieldNumber;
const int Road::kPredecessorJunctionIdFieldNumber;
const int Road::kSuccessorJunctionIdFieldNumber;
const int Road::kElevationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Road::Road()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Road.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Road)
}
Road::Road(const Road& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      geometries_(from.geometries_),
      lane_sections_(from.lane_sections_),
      signals_(from.signals_),
      predecessor_road_ids_(from.predecessor_road_ids_),
      successor_road_ids_(from.successor_road_ids_),
      elevation_(from.elevation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  predecessor_junction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.predecessor_junction_id().size() > 0) {
    predecessor_junction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.predecessor_junction_id_);
  }
  successor_junction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.successor_junction_id().size() > 0) {
    successor_junction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.successor_junction_id_);
  }
  if (from.has_connecting_road()) {
    connecting_road_ = new ::metamoto::types::ConnectingRoad(*from.connecting_road_);
  } else {
    connecting_road_ = NULL;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&one_way_) -
    reinterpret_cast<char*>(&length_)) + sizeof(one_way_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Road)
}

void Road::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  predecessor_junction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  successor_junction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&connecting_road_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&one_way_) -
      reinterpret_cast<char*>(&connecting_road_)) + sizeof(one_way_));
}

Road::~Road() {
  // @@protoc_insertion_point(destructor:metamoto.types.Road)
  SharedDtor();
}

void Road::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  predecessor_junction_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  successor_junction_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete connecting_road_;
}

void Road::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Road::descriptor() {
  ::protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Road& Road::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Road.base);
  return *internal_default_instance();
}


void Road::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Road)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geometries_.Clear();
  lane_sections_.Clear();
  signals_.Clear();
  predecessor_road_ids_.Clear();
  successor_road_ids_.Clear();
  elevation_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  predecessor_junction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  successor_junction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && connecting_road_ != NULL) {
    delete connecting_road_;
  }
  connecting_road_ = NULL;
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&one_way_) -
      reinterpret_cast<char*>(&length_)) + sizeof(one_way_));
  _internal_metadata_.Clear();
}

bool Road::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Road)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Road.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool one_way = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &one_way_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Geometry geometries = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_geometries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.LaneSection lane_sections = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lane_sections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Signal signals = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_signals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.ConnectingRoad connecting_road = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connecting_road()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string predecessor_road_ids = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_predecessor_road_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->predecessor_road_ids(this->predecessor_road_ids_size() - 1).data(),
            static_cast<int>(this->predecessor_road_ids(this->predecessor_road_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Road.predecessor_road_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string successor_road_ids = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_successor_road_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->successor_road_ids(this->successor_road_ids_size() - 1).data(),
            static_cast<int>(this->successor_road_ids(this->successor_road_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Road.successor_road_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string predecessor_junction_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predecessor_junction_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->predecessor_junction_id().data(), static_cast<int>(this->predecessor_junction_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Road.predecessor_junction_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string successor_junction_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_successor_junction_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->successor_junction_id().data(), static_cast<int>(this->successor_junction_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Road.successor_junction_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Elevation elevation = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_elevation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Road)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Road)
  return false;
#undef DO_
}

void Road::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Road)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Road.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // float length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->length(), output);
  }

  // float speed_limit = 3;
  if (this->speed_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speed_limit(), output);
  }

  // bool one_way = 4;
  if (this->one_way() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->one_way(), output);
  }

  // repeated .metamoto.types.Geometry geometries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geometries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->geometries(static_cast<int>(i)),
      output);
  }

  // repeated .metamoto.types.LaneSection lane_sections = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_sections_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->lane_sections(static_cast<int>(i)),
      output);
  }

  // repeated .metamoto.types.Signal signals = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signals_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->signals(static_cast<int>(i)),
      output);
  }

  // .metamoto.types.ConnectingRoad connecting_road = 8;
  if (this->has_connecting_road()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_connecting_road(), output);
  }

  // repeated string predecessor_road_ids = 9;
  for (int i = 0, n = this->predecessor_road_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->predecessor_road_ids(i).data(), static_cast<int>(this->predecessor_road_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Road.predecessor_road_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->predecessor_road_ids(i), output);
  }

  // repeated string successor_road_ids = 10;
  for (int i = 0, n = this->successor_road_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->successor_road_ids(i).data(), static_cast<int>(this->successor_road_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Road.successor_road_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->successor_road_ids(i), output);
  }

  // string predecessor_junction_id = 11;
  if (this->predecessor_junction_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->predecessor_junction_id().data(), static_cast<int>(this->predecessor_junction_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Road.predecessor_junction_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->predecessor_junction_id(), output);
  }

  // string successor_junction_id = 12;
  if (this->successor_junction_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->successor_junction_id().data(), static_cast<int>(this->successor_junction_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Road.successor_junction_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->successor_junction_id(), output);
  }

  // repeated .metamoto.types.Elevation elevation = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elevation_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->elevation(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Road)
}

::google::protobuf::uint8* Road::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Road)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Road.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // float length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->length(), target);
  }

  // float speed_limit = 3;
  if (this->speed_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speed_limit(), target);
  }

  // bool one_way = 4;
  if (this->one_way() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->one_way(), target);
  }

  // repeated .metamoto.types.Geometry geometries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geometries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->geometries(static_cast<int>(i)), deterministic, target);
  }

  // repeated .metamoto.types.LaneSection lane_sections = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_sections_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->lane_sections(static_cast<int>(i)), deterministic, target);
  }

  // repeated .metamoto.types.Signal signals = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signals_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->signals(static_cast<int>(i)), deterministic, target);
  }

  // .metamoto.types.ConnectingRoad connecting_road = 8;
  if (this->has_connecting_road()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_connecting_road(), deterministic, target);
  }

  // repeated string predecessor_road_ids = 9;
  for (int i = 0, n = this->predecessor_road_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->predecessor_road_ids(i).data(), static_cast<int>(this->predecessor_road_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Road.predecessor_road_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->predecessor_road_ids(i), target);
  }

  // repeated string successor_road_ids = 10;
  for (int i = 0, n = this->successor_road_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->successor_road_ids(i).data(), static_cast<int>(this->successor_road_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Road.successor_road_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->successor_road_ids(i), target);
  }

  // string predecessor_junction_id = 11;
  if (this->predecessor_junction_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->predecessor_junction_id().data(), static_cast<int>(this->predecessor_junction_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Road.predecessor_junction_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->predecessor_junction_id(), target);
  }

  // string successor_junction_id = 12;
  if (this->successor_junction_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->successor_junction_id().data(), static_cast<int>(this->successor_junction_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Road.successor_junction_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->successor_junction_id(), target);
  }

  // repeated .metamoto.types.Elevation elevation = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elevation_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->elevation(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Road)
  return target;
}

size_t Road::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Road)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.Geometry geometries = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->geometries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->geometries(static_cast<int>(i)));
    }
  }

  // repeated .metamoto.types.LaneSection lane_sections = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_sections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_sections(static_cast<int>(i)));
    }
  }

  // repeated .metamoto.types.Signal signals = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->signals_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->signals(static_cast<int>(i)));
    }
  }

  // repeated string predecessor_road_ids = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->predecessor_road_ids_size());
  for (int i = 0, n = this->predecessor_road_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->predecessor_road_ids(i));
  }

  // repeated string successor_road_ids = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->successor_road_ids_size());
  for (int i = 0, n = this->successor_road_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->successor_road_ids(i));
  }

  // repeated .metamoto.types.Elevation elevation = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->elevation_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->elevation(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string predecessor_junction_id = 11;
  if (this->predecessor_junction_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->predecessor_junction_id());
  }

  // string successor_junction_id = 12;
  if (this->successor_junction_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->successor_junction_id());
  }

  // .metamoto.types.ConnectingRoad connecting_road = 8;
  if (this->has_connecting_road()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *connecting_road_);
  }

  // float length = 2;
  if (this->length() != 0) {
    total_size += 1 + 4;
  }

  // float speed_limit = 3;
  if (this->speed_limit() != 0) {
    total_size += 1 + 4;
  }

  // bool one_way = 4;
  if (this->one_way() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Road::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Road)
  GOOGLE_DCHECK_NE(&from, this);
  const Road* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Road>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Road)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Road)
    MergeFrom(*source);
  }
}

void Road::MergeFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Road)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geometries_.MergeFrom(from.geometries_);
  lane_sections_.MergeFrom(from.lane_sections_);
  signals_.MergeFrom(from.signals_);
  predecessor_road_ids_.MergeFrom(from.predecessor_road_ids_);
  successor_road_ids_.MergeFrom(from.successor_road_ids_);
  elevation_.MergeFrom(from.elevation_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.predecessor_junction_id().size() > 0) {

    predecessor_junction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.predecessor_junction_id_);
  }
  if (from.successor_junction_id().size() > 0) {

    successor_junction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.successor_junction_id_);
  }
  if (from.has_connecting_road()) {
    mutable_connecting_road()->::metamoto::types::ConnectingRoad::MergeFrom(from.connecting_road());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.speed_limit() != 0) {
    set_speed_limit(from.speed_limit());
  }
  if (from.one_way() != 0) {
    set_one_way(from.one_way());
  }
}

void Road::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Road::CopyFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Road::IsInitialized() const {
  return true;
}

void Road::Swap(Road* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Road::InternalSwap(Road* other) {
  using std::swap;
  CastToBase(&geometries_)->InternalSwap(CastToBase(&other->geometries_));
  CastToBase(&lane_sections_)->InternalSwap(CastToBase(&other->lane_sections_));
  CastToBase(&signals_)->InternalSwap(CastToBase(&other->signals_));
  predecessor_road_ids_.InternalSwap(CastToBase(&other->predecessor_road_ids_));
  successor_road_ids_.InternalSwap(CastToBase(&other->successor_road_ids_));
  CastToBase(&elevation_)->InternalSwap(CastToBase(&other->elevation_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  predecessor_junction_id_.Swap(&other->predecessor_junction_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  successor_junction_id_.Swap(&other->successor_junction_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(connecting_road_, other->connecting_road_);
  swap(length_, other->length_);
  swap(speed_limit_, other->speed_limit_);
  swap(one_way_, other->one_way_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Road::GetMetadata() const {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Junction_Connection_RoadLink::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Junction_Connection_RoadLink::kRoadIdFieldNumber;
const int Junction_Connection_RoadLink::kContactTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Junction_Connection_RoadLink::Junction_Connection_RoadLink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Junction_Connection_RoadLink.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Junction.Connection.RoadLink)
}
Junction_Connection_RoadLink::Junction_Connection_RoadLink(const Junction_Connection_RoadLink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  road_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.road_id().size() > 0) {
    road_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.road_id_);
  }
  contact_type_ = from.contact_type_;
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Junction.Connection.RoadLink)
}

void Junction_Connection_RoadLink::SharedCtor() {
  road_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contact_type_ = 0;
}

Junction_Connection_RoadLink::~Junction_Connection_RoadLink() {
  // @@protoc_insertion_point(destructor:metamoto.types.Junction.Connection.RoadLink)
  SharedDtor();
}

void Junction_Connection_RoadLink::SharedDtor() {
  road_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Junction_Connection_RoadLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Junction_Connection_RoadLink::descriptor() {
  ::protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Junction_Connection_RoadLink& Junction_Connection_RoadLink::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Junction_Connection_RoadLink.base);
  return *internal_default_instance();
}


void Junction_Connection_RoadLink::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Junction.Connection.RoadLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contact_type_ = 0;
  _internal_metadata_.Clear();
}

bool Junction_Connection_RoadLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Junction.Connection.RoadLink)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string road_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_road_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->road_id().data(), static_cast<int>(this->road_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Junction.Connection.RoadLink.road_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Junction.Connection.RoadLink.ContactType contact_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_contact_type(static_cast< ::metamoto::types::Junction_Connection_RoadLink_ContactType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Junction.Connection.RoadLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Junction.Connection.RoadLink)
  return false;
#undef DO_
}

void Junction_Connection_RoadLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Junction.Connection.RoadLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string road_id = 1;
  if (this->road_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->road_id().data(), static_cast<int>(this->road_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Junction.Connection.RoadLink.road_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->road_id(), output);
  }

  // .metamoto.types.Junction.Connection.RoadLink.ContactType contact_type = 2;
  if (this->contact_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->contact_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Junction.Connection.RoadLink)
}

::google::protobuf::uint8* Junction_Connection_RoadLink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Junction.Connection.RoadLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string road_id = 1;
  if (this->road_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->road_id().data(), static_cast<int>(this->road_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Junction.Connection.RoadLink.road_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->road_id(), target);
  }

  // .metamoto.types.Junction.Connection.RoadLink.ContactType contact_type = 2;
  if (this->contact_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->contact_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Junction.Connection.RoadLink)
  return target;
}

size_t Junction_Connection_RoadLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Junction.Connection.RoadLink)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string road_id = 1;
  if (this->road_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->road_id());
  }

  // .metamoto.types.Junction.Connection.RoadLink.ContactType contact_type = 2;
  if (this->contact_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->contact_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Junction_Connection_RoadLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Junction.Connection.RoadLink)
  GOOGLE_DCHECK_NE(&from, this);
  const Junction_Connection_RoadLink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Junction_Connection_RoadLink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Junction.Connection.RoadLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Junction.Connection.RoadLink)
    MergeFrom(*source);
  }
}

void Junction_Connection_RoadLink::MergeFrom(const Junction_Connection_RoadLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Junction.Connection.RoadLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.road_id().size() > 0) {

    road_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.road_id_);
  }
  if (from.contact_type() != 0) {
    set_contact_type(from.contact_type());
  }
}

void Junction_Connection_RoadLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Junction.Connection.RoadLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Junction_Connection_RoadLink::CopyFrom(const Junction_Connection_RoadLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Junction.Connection.RoadLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Junction_Connection_RoadLink::IsInitialized() const {
  return true;
}

void Junction_Connection_RoadLink::Swap(Junction_Connection_RoadLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Junction_Connection_RoadLink::InternalSwap(Junction_Connection_RoadLink* other) {
  using std::swap;
  road_id_.Swap(&other->road_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(contact_type_, other->contact_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Junction_Connection_RoadLink::GetMetadata() const {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Junction_Connection::InitAsDefaultInstance() {
  ::metamoto::types::_Junction_Connection_default_instance_._instance.get_mutable()->from_road_ = const_cast< ::metamoto::types::Junction_Connection_RoadLink*>(
      ::metamoto::types::Junction_Connection_RoadLink::internal_default_instance());
  ::metamoto::types::_Junction_Connection_default_instance_._instance.get_mutable()->to_road_ = const_cast< ::metamoto::types::Junction_Connection_RoadLink*>(
      ::metamoto::types::Junction_Connection_RoadLink::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Junction_Connection::kFromRoadFieldNumber;
const int Junction_Connection::kToRoadFieldNumber;
const int Junction_Connection::kConnectingRoadIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Junction_Connection::Junction_Connection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Junction_Connection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Junction.Connection)
}
Junction_Connection::Junction_Connection(const Junction_Connection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connecting_road_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.connecting_road_id().size() > 0) {
    connecting_road_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connecting_road_id_);
  }
  if (from.has_from_road()) {
    from_road_ = new ::metamoto::types::Junction_Connection_RoadLink(*from.from_road_);
  } else {
    from_road_ = NULL;
  }
  if (from.has_to_road()) {
    to_road_ = new ::metamoto::types::Junction_Connection_RoadLink(*from.to_road_);
  } else {
    to_road_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Junction.Connection)
}

void Junction_Connection::SharedCtor() {
  connecting_road_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_road_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_road_) -
      reinterpret_cast<char*>(&from_road_)) + sizeof(to_road_));
}

Junction_Connection::~Junction_Connection() {
  // @@protoc_insertion_point(destructor:metamoto.types.Junction.Connection)
  SharedDtor();
}

void Junction_Connection::SharedDtor() {
  connecting_road_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_road_;
  if (this != internal_default_instance()) delete to_road_;
}

void Junction_Connection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Junction_Connection::descriptor() {
  ::protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Junction_Connection& Junction_Connection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Junction_Connection.base);
  return *internal_default_instance();
}


void Junction_Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Junction.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connecting_road_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && from_road_ != NULL) {
    delete from_road_;
  }
  from_road_ = NULL;
  if (GetArenaNoVirtual() == NULL && to_road_ != NULL) {
    delete to_road_;
  }
  to_road_ = NULL;
  _internal_metadata_.Clear();
}

bool Junction_Connection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Junction.Connection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.Junction.Connection.RoadLink from_road = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_from_road()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Junction.Connection.RoadLink to_road = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_to_road()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string connecting_road_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connecting_road_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->connecting_road_id().data(), static_cast<int>(this->connecting_road_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Junction.Connection.connecting_road_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Junction.Connection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Junction.Connection)
  return false;
#undef DO_
}

void Junction_Connection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Junction.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Junction.Connection.RoadLink from_road = 1;
  if (this->has_from_road()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_from_road(), output);
  }

  // .metamoto.types.Junction.Connection.RoadLink to_road = 2;
  if (this->has_to_road()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_to_road(), output);
  }

  // string connecting_road_id = 3;
  if (this->connecting_road_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connecting_road_id().data(), static_cast<int>(this->connecting_road_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Junction.Connection.connecting_road_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->connecting_road_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Junction.Connection)
}

::google::protobuf::uint8* Junction_Connection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Junction.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Junction.Connection.RoadLink from_road = 1;
  if (this->has_from_road()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_from_road(), deterministic, target);
  }

  // .metamoto.types.Junction.Connection.RoadLink to_road = 2;
  if (this->has_to_road()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_to_road(), deterministic, target);
  }

  // string connecting_road_id = 3;
  if (this->connecting_road_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connecting_road_id().data(), static_cast<int>(this->connecting_road_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Junction.Connection.connecting_road_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->connecting_road_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Junction.Connection)
  return target;
}

size_t Junction_Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Junction.Connection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string connecting_road_id = 3;
  if (this->connecting_road_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->connecting_road_id());
  }

  // .metamoto.types.Junction.Connection.RoadLink from_road = 1;
  if (this->has_from_road()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *from_road_);
  }

  // .metamoto.types.Junction.Connection.RoadLink to_road = 2;
  if (this->has_to_road()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *to_road_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Junction_Connection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Junction.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  const Junction_Connection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Junction_Connection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Junction.Connection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Junction.Connection)
    MergeFrom(*source);
  }
}

void Junction_Connection::MergeFrom(const Junction_Connection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Junction.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connecting_road_id().size() > 0) {

    connecting_road_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connecting_road_id_);
  }
  if (from.has_from_road()) {
    mutable_from_road()->::metamoto::types::Junction_Connection_RoadLink::MergeFrom(from.from_road());
  }
  if (from.has_to_road()) {
    mutable_to_road()->::metamoto::types::Junction_Connection_RoadLink::MergeFrom(from.to_road());
  }
}

void Junction_Connection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Junction.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Junction_Connection::CopyFrom(const Junction_Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Junction.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Junction_Connection::IsInitialized() const {
  return true;
}

void Junction_Connection::Swap(Junction_Connection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Junction_Connection::InternalSwap(Junction_Connection* other) {
  using std::swap;
  connecting_road_id_.Swap(&other->connecting_road_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(from_road_, other->from_road_);
  swap(to_road_, other->to_road_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Junction_Connection::GetMetadata() const {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Junction::InitAsDefaultInstance() {
  ::metamoto::types::_Junction_default_instance_._instance.get_mutable()->approx_location_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
}
void Junction::clear_approx_location() {
  if (GetArenaNoVirtual() == NULL && approx_location_ != NULL) {
    delete approx_location_;
  }
  approx_location_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Junction::kIdFieldNumber;
const int Junction::kConnectionsFieldNumber;
const int Junction::kApproxLocationFieldNumber;
const int Junction::kVectorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Junction::Junction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Junction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Junction)
}
Junction::Junction(const Junction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      connections_(from.connections_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  vector_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vector_id().size() > 0) {
    vector_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vector_id_);
  }
  if (from.has_approx_location()) {
    approx_location_ = new ::metamoto::types::Vector3(*from.approx_location_);
  } else {
    approx_location_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Junction)
}

void Junction::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vector_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  approx_location_ = NULL;
}

Junction::~Junction() {
  // @@protoc_insertion_point(destructor:metamoto.types.Junction)
  SharedDtor();
}

void Junction::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vector_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete approx_location_;
}

void Junction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Junction::descriptor() {
  ::protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Junction& Junction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_Junction.base);
  return *internal_default_instance();
}


void Junction::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Junction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connections_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vector_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && approx_location_ != NULL) {
    delete approx_location_;
  }
  approx_location_ = NULL;
  _internal_metadata_.Clear();
}

bool Junction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Junction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Junction.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Junction.Connection connections = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_connections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 approx_location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_approx_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vector_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vector_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vector_id().data(), static_cast<int>(this->vector_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Junction.vector_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Junction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Junction)
  return false;
#undef DO_
}

void Junction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Junction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Junction.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .metamoto.types.Junction.Connection connections = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connections_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->connections(static_cast<int>(i)),
      output);
  }

  // .metamoto.types.Vector3 approx_location = 3;
  if (this->has_approx_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_approx_location(), output);
  }

  // string vector_id = 4;
  if (this->vector_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vector_id().data(), static_cast<int>(this->vector_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Junction.vector_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->vector_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Junction)
}

::google::protobuf::uint8* Junction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Junction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Junction.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .metamoto.types.Junction.Connection connections = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connections_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->connections(static_cast<int>(i)), deterministic, target);
  }

  // .metamoto.types.Vector3 approx_location = 3;
  if (this->has_approx_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_approx_location(), deterministic, target);
  }

  // string vector_id = 4;
  if (this->vector_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vector_id().data(), static_cast<int>(this->vector_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Junction.vector_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->vector_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Junction)
  return target;
}

size_t Junction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Junction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.Junction.Connection connections = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->connections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->connections(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string vector_id = 4;
  if (this->vector_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vector_id());
  }

  // .metamoto.types.Vector3 approx_location = 3;
  if (this->has_approx_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *approx_location_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Junction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Junction)
  GOOGLE_DCHECK_NE(&from, this);
  const Junction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Junction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Junction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Junction)
    MergeFrom(*source);
  }
}

void Junction::MergeFrom(const Junction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Junction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connections_.MergeFrom(from.connections_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.vector_id().size() > 0) {

    vector_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vector_id_);
  }
  if (from.has_approx_location()) {
    mutable_approx_location()->::metamoto::types::Vector3::MergeFrom(from.approx_location());
  }
}

void Junction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Junction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Junction::CopyFrom(const Junction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Junction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Junction::IsInitialized() const {
  return true;
}

void Junction::Swap(Junction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Junction::InternalSwap(Junction* other) {
  using std::swap;
  CastToBase(&connections_)->InternalSwap(CastToBase(&other->connections_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vector_id_.Swap(&other->vector_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(approx_location_, other->approx_location_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Junction::GetMetadata() const {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadNetwork::InitAsDefaultInstance() {
  ::metamoto::types::_RoadNetwork_default_instance_._instance.get_mutable()->origin_coordinates_ = const_cast< ::metamoto::types::GeoCoordinates*>(
      ::metamoto::types::GeoCoordinates::internal_default_instance());
}
void RoadNetwork::clear_origin_coordinates() {
  if (GetArenaNoVirtual() == NULL && origin_coordinates_ != NULL) {
    delete origin_coordinates_;
  }
  origin_coordinates_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadNetwork::kIdFieldNumber;
const int RoadNetwork::kRoadsFieldNumber;
const int RoadNetwork::kJunctionsFieldNumber;
const int RoadNetwork::kOriginCoordinatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadNetwork::RoadNetwork()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_RoadNetwork.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.RoadNetwork)
}
RoadNetwork::RoadNetwork(const RoadNetwork& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      roads_(from.roads_),
      junctions_(from.junctions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_origin_coordinates()) {
    origin_coordinates_ = new ::metamoto::types::GeoCoordinates(*from.origin_coordinates_);
  } else {
    origin_coordinates_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.types.RoadNetwork)
}

void RoadNetwork::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_coordinates_ = NULL;
}

RoadNetwork::~RoadNetwork() {
  // @@protoc_insertion_point(destructor:metamoto.types.RoadNetwork)
  SharedDtor();
}

void RoadNetwork::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete origin_coordinates_;
}

void RoadNetwork::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoadNetwork::descriptor() {
  ::protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadNetwork& RoadNetwork::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_RoadNetwork.base);
  return *internal_default_instance();
}


void RoadNetwork::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.RoadNetwork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roads_.Clear();
  junctions_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && origin_coordinates_ != NULL) {
    delete origin_coordinates_;
  }
  origin_coordinates_ = NULL;
  _internal_metadata_.Clear();
}

bool RoadNetwork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.RoadNetwork)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.RoadNetwork.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Road roads = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_roads()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Junction junctions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_junctions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.GeoCoordinates origin_coordinates = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_origin_coordinates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.RoadNetwork)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.RoadNetwork)
  return false;
#undef DO_
}

void RoadNetwork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.RoadNetwork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.RoadNetwork.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .metamoto.types.Road roads = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roads_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->roads(static_cast<int>(i)),
      output);
  }

  // repeated .metamoto.types.Junction junctions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->junctions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->junctions(static_cast<int>(i)),
      output);
  }

  // .metamoto.types.GeoCoordinates origin_coordinates = 4;
  if (this->has_origin_coordinates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_origin_coordinates(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.RoadNetwork)
}

::google::protobuf::uint8* RoadNetwork::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.RoadNetwork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.RoadNetwork.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .metamoto.types.Road roads = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roads_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->roads(static_cast<int>(i)), deterministic, target);
  }

  // repeated .metamoto.types.Junction junctions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->junctions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->junctions(static_cast<int>(i)), deterministic, target);
  }

  // .metamoto.types.GeoCoordinates origin_coordinates = 4;
  if (this->has_origin_coordinates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_origin_coordinates(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.RoadNetwork)
  return target;
}

size_t RoadNetwork::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.RoadNetwork)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.Road roads = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->roads_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->roads(static_cast<int>(i)));
    }
  }

  // repeated .metamoto.types.Junction junctions = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->junctions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->junctions(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .metamoto.types.GeoCoordinates origin_coordinates = 4;
  if (this->has_origin_coordinates()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *origin_coordinates_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadNetwork::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.RoadNetwork)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadNetwork* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadNetwork>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.RoadNetwork)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.RoadNetwork)
    MergeFrom(*source);
  }
}

void RoadNetwork::MergeFrom(const RoadNetwork& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.RoadNetwork)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roads_.MergeFrom(from.roads_);
  junctions_.MergeFrom(from.junctions_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_origin_coordinates()) {
    mutable_origin_coordinates()->::metamoto::types::GeoCoordinates::MergeFrom(from.origin_coordinates());
  }
}

void RoadNetwork::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.RoadNetwork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadNetwork::CopyFrom(const RoadNetwork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.RoadNetwork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadNetwork::IsInitialized() const {
  return true;
}

void RoadNetwork::Swap(RoadNetwork* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadNetwork::InternalSwap(RoadNetwork* other) {
  using std::swap;
  CastToBase(&roads_)->InternalSwap(CastToBase(&other->roads_));
  CastToBase(&junctions_)->InternalSwap(CastToBase(&other->junctions_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(origin_coordinates_, other->origin_coordinates_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoadNetwork::GetMetadata() const {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadPoint::InitAsDefaultInstance() {
  ::metamoto::types::_RoadPoint_default_instance_._instance.get_mutable()->world_position_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
}
void RoadPoint::clear_world_position() {
  if (GetArenaNoVirtual() == NULL && world_position_ != NULL) {
    delete world_position_;
  }
  world_position_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadPoint::kRoadIdFieldNumber;
const int RoadPoint::kLaneSectionIndexFieldNumber;
const int RoadPoint::kLaneIndexFieldNumber;
const int RoadPoint::kSFieldNumber;
const int RoadPoint::kTFieldNumber;
const int RoadPoint::kHeadingOffsetFieldNumber;
const int RoadPoint::kWorldPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadPoint::RoadPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_RoadPoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.RoadPoint)
}
RoadPoint::RoadPoint(const RoadPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  road_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.road_id().size() > 0) {
    road_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.road_id_);
  }
  if (from.has_world_position()) {
    world_position_ = new ::metamoto::types::Vector3(*from.world_position_);
  } else {
    world_position_ = NULL;
  }
  ::memcpy(&lane_section_index_, &from.lane_section_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_offset_) -
    reinterpret_cast<char*>(&lane_section_index_)) + sizeof(heading_offset_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.RoadPoint)
}

void RoadPoint::SharedCtor() {
  road_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&world_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_offset_) -
      reinterpret_cast<char*>(&world_position_)) + sizeof(heading_offset_));
}

RoadPoint::~RoadPoint() {
  // @@protoc_insertion_point(destructor:metamoto.types.RoadPoint)
  SharedDtor();
}

void RoadPoint::SharedDtor() {
  road_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete world_position_;
}

void RoadPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoadPoint::descriptor() {
  ::protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadPoint& RoadPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2froads_2eproto::scc_info_RoadPoint.base);
  return *internal_default_instance();
}


void RoadPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.RoadPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && world_position_ != NULL) {
    delete world_position_;
  }
  world_position_ = NULL;
  ::memset(&lane_section_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_offset_) -
      reinterpret_cast<char*>(&lane_section_index_)) + sizeof(heading_offset_));
  _internal_metadata_.Clear();
}

bool RoadPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.RoadPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string road_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_road_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->road_id().data(), static_cast<int>(this->road_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.RoadPoint.road_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_section_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_section_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float t = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading_offset = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 world_position = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_world_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.RoadPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.RoadPoint)
  return false;
#undef DO_
}

void RoadPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.RoadPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string road_id = 1;
  if (this->road_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->road_id().data(), static_cast<int>(this->road_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.RoadPoint.road_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->road_id(), output);
  }

  // int32 lane_section_index = 2;
  if (this->lane_section_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lane_section_index(), output);
  }

  // int32 lane_index = 3;
  if (this->lane_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lane_index(), output);
  }

  // float s = 4;
  if (this->s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->s(), output);
  }

  // float t = 5;
  if (this->t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->t(), output);
  }

  // float heading_offset = 6;
  if (this->heading_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->heading_offset(), output);
  }

  // .metamoto.types.Vector3 world_position = 7;
  if (this->has_world_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_world_position(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.RoadPoint)
}

::google::protobuf::uint8* RoadPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.RoadPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string road_id = 1;
  if (this->road_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->road_id().data(), static_cast<int>(this->road_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.RoadPoint.road_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->road_id(), target);
  }

  // int32 lane_section_index = 2;
  if (this->lane_section_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lane_section_index(), target);
  }

  // int32 lane_index = 3;
  if (this->lane_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lane_index(), target);
  }

  // float s = 4;
  if (this->s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->s(), target);
  }

  // float t = 5;
  if (this->t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->t(), target);
  }

  // float heading_offset = 6;
  if (this->heading_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->heading_offset(), target);
  }

  // .metamoto.types.Vector3 world_position = 7;
  if (this->has_world_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_world_position(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.RoadPoint)
  return target;
}

size_t RoadPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.RoadPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string road_id = 1;
  if (this->road_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->road_id());
  }

  // .metamoto.types.Vector3 world_position = 7;
  if (this->has_world_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *world_position_);
  }

  // int32 lane_section_index = 2;
  if (this->lane_section_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_section_index());
  }

  // int32 lane_index = 3;
  if (this->lane_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_index());
  }

  // float s = 4;
  if (this->s() != 0) {
    total_size += 1 + 4;
  }

  // float t = 5;
  if (this->t() != 0) {
    total_size += 1 + 4;
  }

  // float heading_offset = 6;
  if (this->heading_offset() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.RoadPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.RoadPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.RoadPoint)
    MergeFrom(*source);
  }
}

void RoadPoint::MergeFrom(const RoadPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.RoadPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.road_id().size() > 0) {

    road_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.road_id_);
  }
  if (from.has_world_position()) {
    mutable_world_position()->::metamoto::types::Vector3::MergeFrom(from.world_position());
  }
  if (from.lane_section_index() != 0) {
    set_lane_section_index(from.lane_section_index());
  }
  if (from.lane_index() != 0) {
    set_lane_index(from.lane_index());
  }
  if (from.s() != 0) {
    set_s(from.s());
  }
  if (from.t() != 0) {
    set_t(from.t());
  }
  if (from.heading_offset() != 0) {
    set_heading_offset(from.heading_offset());
  }
}

void RoadPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.RoadPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadPoint::CopyFrom(const RoadPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.RoadPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadPoint::IsInitialized() const {
  return true;
}

void RoadPoint::Swap(RoadPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadPoint::InternalSwap(RoadPoint* other) {
  using std::swap;
  road_id_.Swap(&other->road_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(world_position_, other->world_position_);
  swap(lane_section_index_, other->lane_section_index_);
  swap(lane_index_, other->lane_index_);
  swap(s_, other->s_);
  swap(t_, other->t_);
  swap(heading_offset_, other->heading_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoadPoint::GetMetadata() const {
  protobuf_metamoto_2ftypes_2froads_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2froads_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Elevation* Arena::CreateMaybeMessage< ::metamoto::types::Elevation >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Elevation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Geometry_Arc* Arena::CreateMaybeMessage< ::metamoto::types::Geometry_Arc >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Geometry_Arc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Geometry* Arena::CreateMaybeMessage< ::metamoto::types::Geometry >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Geometry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Marking* Arena::CreateMaybeMessage< ::metamoto::types::Marking >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Marking >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Lane* Arena::CreateMaybeMessage< ::metamoto::types::Lane >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Lane >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::LaneLink* Arena::CreateMaybeMessage< ::metamoto::types::LaneLink >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::LaneLink >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Signal_LaneValidity* Arena::CreateMaybeMessage< ::metamoto::types::Signal_LaneValidity >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Signal_LaneValidity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Signal* Arena::CreateMaybeMessage< ::metamoto::types::Signal >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Signal >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::ConnectingRoad* Arena::CreateMaybeMessage< ::metamoto::types::ConnectingRoad >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::ConnectingRoad >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::LaneSection* Arena::CreateMaybeMessage< ::metamoto::types::LaneSection >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::LaneSection >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Road* Arena::CreateMaybeMessage< ::metamoto::types::Road >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Road >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Junction_Connection_RoadLink* Arena::CreateMaybeMessage< ::metamoto::types::Junction_Connection_RoadLink >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Junction_Connection_RoadLink >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Junction_Connection* Arena::CreateMaybeMessage< ::metamoto::types::Junction_Connection >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Junction_Connection >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Junction* Arena::CreateMaybeMessage< ::metamoto::types::Junction >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Junction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::RoadNetwork* Arena::CreateMaybeMessage< ::metamoto::types::RoadNetwork >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::RoadNetwork >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::RoadPoint* Arena::CreateMaybeMessage< ::metamoto::types::RoadPoint >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::RoadPoint >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
