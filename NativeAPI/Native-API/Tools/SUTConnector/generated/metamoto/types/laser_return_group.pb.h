// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/laser_return_group.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2flaser_5freturn_5fgroup_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2flaser_5freturn_5fgroup_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/laser_return.pb.h"
#include "metamoto/types/pose.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2flaser_5freturn_5fgroup_2eproto 

namespace protobuf_metamoto_2ftypes_2flaser_5freturn_5fgroup_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2flaser_5freturn_5fgroup_2eproto
namespace metamoto {
namespace types {
class LaserReturnGroup;
class LaserReturnGroupDefaultTypeInternal;
extern LaserReturnGroupDefaultTypeInternal _LaserReturnGroup_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::LaserReturnGroup* Arena::CreateMaybeMessage<::metamoto::types::LaserReturnGroup>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

// ===================================================================

class LaserReturnGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.LaserReturnGroup) */ {
 public:
  LaserReturnGroup();
  virtual ~LaserReturnGroup();

  LaserReturnGroup(const LaserReturnGroup& from);

  inline LaserReturnGroup& operator=(const LaserReturnGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaserReturnGroup(LaserReturnGroup&& from) noexcept
    : LaserReturnGroup() {
    *this = ::std::move(from);
  }

  inline LaserReturnGroup& operator=(LaserReturnGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaserReturnGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaserReturnGroup* internal_default_instance() {
    return reinterpret_cast<const LaserReturnGroup*>(
               &_LaserReturnGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LaserReturnGroup* other);
  friend void swap(LaserReturnGroup& a, LaserReturnGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaserReturnGroup* New() const final {
    return CreateMaybeMessage<LaserReturnGroup>(NULL);
  }

  LaserReturnGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaserReturnGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaserReturnGroup& from);
  void MergeFrom(const LaserReturnGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaserReturnGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.LaserReturn returns = 3;
  int returns_size() const;
  void clear_returns();
  static const int kReturnsFieldNumber = 3;
  ::metamoto::types::LaserReturn* mutable_returns(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::LaserReturn >*
      mutable_returns();
  const ::metamoto::types::LaserReturn& returns(int index) const;
  ::metamoto::types::LaserReturn* add_returns();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::LaserReturn >&
      returns() const;

  // .metamoto.types.Pose pose = 1;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 1;
  private:
  const ::metamoto::types::Pose& _internal_pose() const;
  public:
  const ::metamoto::types::Pose& pose() const;
  ::metamoto::types::Pose* release_pose();
  ::metamoto::types::Pose* mutable_pose();
  void set_allocated_pose(::metamoto::types::Pose* pose);

  // float azimuth_angle = 2;
  void clear_azimuth_angle();
  static const int kAzimuthAngleFieldNumber = 2;
  float azimuth_angle() const;
  void set_azimuth_angle(float value);

  // @@protoc_insertion_point(class_scope:metamoto.types.LaserReturnGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::LaserReturn > returns_;
  ::metamoto::types::Pose* pose_;
  float azimuth_angle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2flaser_5freturn_5fgroup_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaserReturnGroup

// .metamoto.types.Pose pose = 1;
inline bool LaserReturnGroup::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::metamoto::types::Pose& LaserReturnGroup::_internal_pose() const {
  return *pose_;
}
inline const ::metamoto::types::Pose& LaserReturnGroup::pose() const {
  const ::metamoto::types::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:metamoto.types.LaserReturnGroup.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Pose*>(
      &::metamoto::types::_Pose_default_instance_);
}
inline ::metamoto::types::Pose* LaserReturnGroup::release_pose() {
  // @@protoc_insertion_point(field_release:metamoto.types.LaserReturnGroup.pose)
  
  ::metamoto::types::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::metamoto::types::Pose* LaserReturnGroup::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.LaserReturnGroup.pose)
  return pose_;
}
inline void LaserReturnGroup::set_allocated_pose(::metamoto::types::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.LaserReturnGroup.pose)
}

// float azimuth_angle = 2;
inline void LaserReturnGroup::clear_azimuth_angle() {
  azimuth_angle_ = 0;
}
inline float LaserReturnGroup::azimuth_angle() const {
  // @@protoc_insertion_point(field_get:metamoto.types.LaserReturnGroup.azimuth_angle)
  return azimuth_angle_;
}
inline void LaserReturnGroup::set_azimuth_angle(float value) {
  
  azimuth_angle_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.LaserReturnGroup.azimuth_angle)
}

// repeated .metamoto.types.LaserReturn returns = 3;
inline int LaserReturnGroup::returns_size() const {
  return returns_.size();
}
inline ::metamoto::types::LaserReturn* LaserReturnGroup::mutable_returns(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.LaserReturnGroup.returns)
  return returns_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::LaserReturn >*
LaserReturnGroup::mutable_returns() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.LaserReturnGroup.returns)
  return &returns_;
}
inline const ::metamoto::types::LaserReturn& LaserReturnGroup::returns(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.LaserReturnGroup.returns)
  return returns_.Get(index);
}
inline ::metamoto::types::LaserReturn* LaserReturnGroup::add_returns() {
  // @@protoc_insertion_point(field_add:metamoto.types.LaserReturnGroup.returns)
  return returns_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::LaserReturn >&
LaserReturnGroup::returns() const {
  // @@protoc_insertion_point(field_list:metamoto.types.LaserReturnGroup.returns)
  return returns_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2flaser_5freturn_5fgroup_2eproto
