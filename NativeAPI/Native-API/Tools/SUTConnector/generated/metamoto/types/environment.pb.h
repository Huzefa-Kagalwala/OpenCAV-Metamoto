// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/environment.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2fenvironment_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2fenvironment_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/pose.pb.h"
#include "metamoto/types/vector3.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fenvironment_2eproto 

namespace protobuf_metamoto_2ftypes_2fenvironment_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2fenvironment_2eproto
namespace metamoto {
namespace types {
class Environment;
class EnvironmentDefaultTypeInternal;
extern EnvironmentDefaultTypeInternal _Environment_default_instance_;
class EnvironmentObjectLibrary;
class EnvironmentObjectLibraryDefaultTypeInternal;
extern EnvironmentObjectLibraryDefaultTypeInternal _EnvironmentObjectLibrary_default_instance_;
class EnvironmentObjectLibrary_EnvironmentObjectTemplate;
class EnvironmentObjectLibrary_EnvironmentObjectTemplateDefaultTypeInternal;
extern EnvironmentObjectLibrary_EnvironmentObjectTemplateDefaultTypeInternal _EnvironmentObjectLibrary_EnvironmentObjectTemplate_default_instance_;
class Environment_EnvironmentObject;
class Environment_EnvironmentObjectDefaultTypeInternal;
extern Environment_EnvironmentObjectDefaultTypeInternal _Environment_EnvironmentObject_default_instance_;
class Environment_Lighting;
class Environment_LightingDefaultTypeInternal;
extern Environment_LightingDefaultTypeInternal _Environment_Lighting_default_instance_;
class Environment_RoadConditions;
class Environment_RoadConditionsDefaultTypeInternal;
extern Environment_RoadConditionsDefaultTypeInternal _Environment_RoadConditions_default_instance_;
class Environment_Weather;
class Environment_WeatherDefaultTypeInternal;
extern Environment_WeatherDefaultTypeInternal _Environment_Weather_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::Environment* Arena::CreateMaybeMessage<::metamoto::types::Environment>(Arena*);
template<> ::metamoto::types::EnvironmentObjectLibrary* Arena::CreateMaybeMessage<::metamoto::types::EnvironmentObjectLibrary>(Arena*);
template<> ::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate* Arena::CreateMaybeMessage<::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate>(Arena*);
template<> ::metamoto::types::Environment_EnvironmentObject* Arena::CreateMaybeMessage<::metamoto::types::Environment_EnvironmentObject>(Arena*);
template<> ::metamoto::types::Environment_Lighting* Arena::CreateMaybeMessage<::metamoto::types::Environment_Lighting>(Arena*);
template<> ::metamoto::types::Environment_RoadConditions* Arena::CreateMaybeMessage<::metamoto::types::Environment_RoadConditions>(Arena*);
template<> ::metamoto::types::Environment_Weather* Arena::CreateMaybeMessage<::metamoto::types::Environment_Weather>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

// ===================================================================

class Environment_Weather : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.Environment.Weather) */ {
 public:
  Environment_Weather();
  virtual ~Environment_Weather();

  Environment_Weather(const Environment_Weather& from);

  inline Environment_Weather& operator=(const Environment_Weather& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Environment_Weather(Environment_Weather&& from) noexcept
    : Environment_Weather() {
    *this = ::std::move(from);
  }

  inline Environment_Weather& operator=(Environment_Weather&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Environment_Weather& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Environment_Weather* internal_default_instance() {
    return reinterpret_cast<const Environment_Weather*>(
               &_Environment_Weather_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Environment_Weather* other);
  friend void swap(Environment_Weather& a, Environment_Weather& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Environment_Weather* New() const final {
    return CreateMaybeMessage<Environment_Weather>(NULL);
  }

  Environment_Weather* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Environment_Weather>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Environment_Weather& from);
  void MergeFrom(const Environment_Weather& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Environment_Weather* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float clouds = 1;
  void clear_clouds();
  static const int kCloudsFieldNumber = 1;
  float clouds() const;
  void set_clouds(float value);

  // float overcast = 2;
  void clear_overcast();
  static const int kOvercastFieldNumber = 2;
  float overcast() const;
  void set_overcast(float value);

  // float wind = 3;
  void clear_wind();
  static const int kWindFieldNumber = 3;
  float wind() const;
  void set_wind(float value);

  // float rain = 4;
  void clear_rain();
  static const int kRainFieldNumber = 4;
  float rain() const;
  void set_rain(float value);

  // float snow = 5;
  void clear_snow();
  static const int kSnowFieldNumber = 5;
  float snow() const;
  void set_snow(float value);

  // float hail = 6;
  void clear_hail();
  static const int kHailFieldNumber = 6;
  float hail() const;
  void set_hail(float value);

  // float fog = 7;
  void clear_fog();
  static const int kFogFieldNumber = 7;
  float fog() const;
  void set_fog(float value);

  // float temperature = 8;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 8;
  float temperature() const;
  void set_temperature(float value);

  // @@protoc_insertion_point(class_scope:metamoto.types.Environment.Weather)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float clouds_;
  float overcast_;
  float wind_;
  float rain_;
  float snow_;
  float hail_;
  float fog_;
  float temperature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Environment_RoadConditions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.Environment.RoadConditions) */ {
 public:
  Environment_RoadConditions();
  virtual ~Environment_RoadConditions();

  Environment_RoadConditions(const Environment_RoadConditions& from);

  inline Environment_RoadConditions& operator=(const Environment_RoadConditions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Environment_RoadConditions(Environment_RoadConditions&& from) noexcept
    : Environment_RoadConditions() {
    *this = ::std::move(from);
  }

  inline Environment_RoadConditions& operator=(Environment_RoadConditions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Environment_RoadConditions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Environment_RoadConditions* internal_default_instance() {
    return reinterpret_cast<const Environment_RoadConditions*>(
               &_Environment_RoadConditions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Environment_RoadConditions* other);
  friend void swap(Environment_RoadConditions& a, Environment_RoadConditions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Environment_RoadConditions* New() const final {
    return CreateMaybeMessage<Environment_RoadConditions>(NULL);
  }

  Environment_RoadConditions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Environment_RoadConditions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Environment_RoadConditions& from);
  void MergeFrom(const Environment_RoadConditions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Environment_RoadConditions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string road_id = 1;
  void clear_road_id();
  static const int kRoadIdFieldNumber = 1;
  const ::std::string& road_id() const;
  void set_road_id(const ::std::string& value);
  #if LANG_CXX11
  void set_road_id(::std::string&& value);
  #endif
  void set_road_id(const char* value);
  void set_road_id(const char* value, size_t size);
  ::std::string* mutable_road_id();
  ::std::string* release_road_id();
  void set_allocated_road_id(::std::string* road_id);

  // int32 lane_index = 2;
  void clear_lane_index();
  static const int kLaneIndexFieldNumber = 2;
  ::google::protobuf::int32 lane_index() const;
  void set_lane_index(::google::protobuf::int32 value);

  // float s_min = 3;
  void clear_s_min();
  static const int kSMinFieldNumber = 3;
  float s_min() const;
  void set_s_min(float value);

  // float s_max = 4;
  void clear_s_max();
  static const int kSMaxFieldNumber = 4;
  float s_max() const;
  void set_s_max(float value);

  // float wetness = 5;
  void clear_wetness();
  static const int kWetnessFieldNumber = 5;
  float wetness() const;
  void set_wetness(float value);

  // float puddles = 6;
  void clear_puddles();
  static const int kPuddlesFieldNumber = 6;
  float puddles() const;
  void set_puddles(float value);

  // float markings_deterioration = 7;
  void clear_markings_deterioration();
  static const int kMarkingsDeteriorationFieldNumber = 7;
  float markings_deterioration() const;
  void set_markings_deterioration(float value);

  // float cracks = 8;
  void clear_cracks();
  static const int kCracksFieldNumber = 8;
  float cracks() const;
  void set_cracks(float value);

  // float tar_snakes = 9;
  void clear_tar_snakes();
  static const int kTarSnakesFieldNumber = 9;
  float tar_snakes() const;
  void set_tar_snakes(float value);

  // float pot_holes = 10;
  void clear_pot_holes();
  static const int kPotHolesFieldNumber = 10;
  float pot_holes() const;
  void set_pot_holes(float value);

  // float surface_weathering = 11;
  void clear_surface_weathering();
  static const int kSurfaceWeatheringFieldNumber = 11;
  float surface_weathering() const;
  void set_surface_weathering(float value);

  // float surface_features = 12;
  void clear_surface_features();
  static const int kSurfaceFeaturesFieldNumber = 12;
  float surface_features() const;
  void set_surface_features(float value);

  // float stains = 13;
  void clear_stains();
  static const int kStainsFieldNumber = 13;
  float stains() const;
  void set_stains(float value);

  // float manholes = 14;
  void clear_manholes();
  static const int kManholesFieldNumber = 14;
  float manholes() const;
  void set_manholes(float value);

  // float drains = 15;
  void clear_drains();
  static const int kDrainsFieldNumber = 15;
  float drains() const;
  void set_drains(float value);

  // float patches = 16;
  void clear_patches();
  static const int kPatchesFieldNumber = 16;
  float patches() const;
  void set_patches(float value);

  // @@protoc_insertion_point(class_scope:metamoto.types.Environment.RoadConditions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr road_id_;
  ::google::protobuf::int32 lane_index_;
  float s_min_;
  float s_max_;
  float wetness_;
  float puddles_;
  float markings_deterioration_;
  float cracks_;
  float tar_snakes_;
  float pot_holes_;
  float surface_weathering_;
  float surface_features_;
  float stains_;
  float manholes_;
  float drains_;
  float patches_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Environment_Lighting : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.Environment.Lighting) */ {
 public:
  Environment_Lighting();
  virtual ~Environment_Lighting();

  Environment_Lighting(const Environment_Lighting& from);

  inline Environment_Lighting& operator=(const Environment_Lighting& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Environment_Lighting(Environment_Lighting&& from) noexcept
    : Environment_Lighting() {
    *this = ::std::move(from);
  }

  inline Environment_Lighting& operator=(Environment_Lighting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Environment_Lighting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Environment_Lighting* internal_default_instance() {
    return reinterpret_cast<const Environment_Lighting*>(
               &_Environment_Lighting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Environment_Lighting* other);
  friend void swap(Environment_Lighting& a, Environment_Lighting& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Environment_Lighting* New() const final {
    return CreateMaybeMessage<Environment_Lighting>(NULL);
  }

  Environment_Lighting* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Environment_Lighting>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Environment_Lighting& from);
  void MergeFrom(const Environment_Lighting& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Environment_Lighting* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float buildings = 1;
  void clear_buildings();
  static const int kBuildingsFieldNumber = 1;
  float buildings() const;
  void set_buildings(float value);

  // @@protoc_insertion_point(class_scope:metamoto.types.Environment.Lighting)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float buildings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Environment_EnvironmentObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.Environment.EnvironmentObject) */ {
 public:
  Environment_EnvironmentObject();
  virtual ~Environment_EnvironmentObject();

  Environment_EnvironmentObject(const Environment_EnvironmentObject& from);

  inline Environment_EnvironmentObject& operator=(const Environment_EnvironmentObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Environment_EnvironmentObject(Environment_EnvironmentObject&& from) noexcept
    : Environment_EnvironmentObject() {
    *this = ::std::move(from);
  }

  inline Environment_EnvironmentObject& operator=(Environment_EnvironmentObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Environment_EnvironmentObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Environment_EnvironmentObject* internal_default_instance() {
    return reinterpret_cast<const Environment_EnvironmentObject*>(
               &_Environment_EnvironmentObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Environment_EnvironmentObject* other);
  friend void swap(Environment_EnvironmentObject& a, Environment_EnvironmentObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Environment_EnvironmentObject* New() const final {
    return CreateMaybeMessage<Environment_EnvironmentObject>(NULL);
  }

  Environment_EnvironmentObject* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Environment_EnvironmentObject>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Environment_EnvironmentObject& from);
  void MergeFrom(const Environment_EnvironmentObject& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Environment_EnvironmentObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // .metamoto.types.Pose pose = 3;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 3;
  private:
  const ::metamoto::types::Pose& _internal_pose() const;
  public:
  const ::metamoto::types::Pose& pose() const;
  ::metamoto::types::Pose* release_pose();
  ::metamoto::types::Pose* mutable_pose();
  void set_allocated_pose(::metamoto::types::Pose* pose);

  // .metamoto.types.Vector3 scale = 4;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 4;
  private:
  const ::metamoto::types::Vector3& _internal_scale() const;
  public:
  const ::metamoto::types::Vector3& scale() const;
  ::metamoto::types::Vector3* release_scale();
  ::metamoto::types::Vector3* mutable_scale();
  void set_allocated_scale(::metamoto::types::Vector3* scale);

  // .metamoto.types.Vector3 scale_limits = 5;
  bool has_scale_limits() const;
  void clear_scale_limits();
  static const int kScaleLimitsFieldNumber = 5;
  private:
  const ::metamoto::types::Vector3& _internal_scale_limits() const;
  public:
  const ::metamoto::types::Vector3& scale_limits() const;
  ::metamoto::types::Vector3* release_scale_limits();
  ::metamoto::types::Vector3* mutable_scale_limits();
  void set_allocated_scale_limits(::metamoto::types::Vector3* scale_limits);

  // float speed_reduction = 6;
  void clear_speed_reduction();
  static const int kSpeedReductionFieldNumber = 6;
  float speed_reduction() const;
  void set_speed_reduction(float value);

  // @@protoc_insertion_point(class_scope:metamoto.types.Environment.EnvironmentObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::metamoto::types::Pose* pose_;
  ::metamoto::types::Vector3* scale_;
  ::metamoto::types::Vector3* scale_limits_;
  float speed_reduction_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Environment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.Environment) */ {
 public:
  Environment();
  virtual ~Environment();

  Environment(const Environment& from);

  inline Environment& operator=(const Environment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Environment(Environment&& from) noexcept
    : Environment() {
    *this = ::std::move(from);
  }

  inline Environment& operator=(Environment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Environment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Environment* internal_default_instance() {
    return reinterpret_cast<const Environment*>(
               &_Environment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Environment* other);
  friend void swap(Environment& a, Environment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Environment* New() const final {
    return CreateMaybeMessage<Environment>(NULL);
  }

  Environment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Environment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Environment& from);
  void MergeFrom(const Environment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Environment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Environment_Weather Weather;
  typedef Environment_RoadConditions RoadConditions;
  typedef Environment_Lighting Lighting;
  typedef Environment_EnvironmentObject EnvironmentObject;

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.Environment.RoadConditions road_conditions = 3;
  int road_conditions_size() const;
  void clear_road_conditions();
  static const int kRoadConditionsFieldNumber = 3;
  ::metamoto::types::Environment_RoadConditions* mutable_road_conditions(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Environment_RoadConditions >*
      mutable_road_conditions();
  const ::metamoto::types::Environment_RoadConditions& road_conditions(int index) const;
  ::metamoto::types::Environment_RoadConditions* add_road_conditions();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Environment_RoadConditions >&
      road_conditions() const;

  // repeated .metamoto.types.Environment.EnvironmentObject environment_objects = 5;
  int environment_objects_size() const;
  void clear_environment_objects();
  static const int kEnvironmentObjectsFieldNumber = 5;
  ::metamoto::types::Environment_EnvironmentObject* mutable_environment_objects(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Environment_EnvironmentObject >*
      mutable_environment_objects();
  const ::metamoto::types::Environment_EnvironmentObject& environment_objects(int index) const;
  ::metamoto::types::Environment_EnvironmentObject* add_environment_objects();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Environment_EnvironmentObject >&
      environment_objects() const;

  // .metamoto.types.Environment.Weather weather = 1;
  bool has_weather() const;
  void clear_weather();
  static const int kWeatherFieldNumber = 1;
  private:
  const ::metamoto::types::Environment_Weather& _internal_weather() const;
  public:
  const ::metamoto::types::Environment_Weather& weather() const;
  ::metamoto::types::Environment_Weather* release_weather();
  ::metamoto::types::Environment_Weather* mutable_weather();
  void set_allocated_weather(::metamoto::types::Environment_Weather* weather);

  // .metamoto.types.Environment.Lighting lighting = 4;
  bool has_lighting() const;
  void clear_lighting();
  static const int kLightingFieldNumber = 4;
  private:
  const ::metamoto::types::Environment_Lighting& _internal_lighting() const;
  public:
  const ::metamoto::types::Environment_Lighting& lighting() const;
  ::metamoto::types::Environment_Lighting* release_lighting();
  ::metamoto::types::Environment_Lighting* mutable_lighting();
  void set_allocated_lighting(::metamoto::types::Environment_Lighting* lighting);

  // float time_of_day = 2;
  void clear_time_of_day();
  static const int kTimeOfDayFieldNumber = 2;
  float time_of_day() const;
  void set_time_of_day(float value);

  // @@protoc_insertion_point(class_scope:metamoto.types.Environment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Environment_RoadConditions > road_conditions_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::Environment_EnvironmentObject > environment_objects_;
  ::metamoto::types::Environment_Weather* weather_;
  ::metamoto::types::Environment_Lighting* lighting_;
  float time_of_day_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EnvironmentObjectLibrary_EnvironmentObjectTemplate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate) */ {
 public:
  EnvironmentObjectLibrary_EnvironmentObjectTemplate();
  virtual ~EnvironmentObjectLibrary_EnvironmentObjectTemplate();

  EnvironmentObjectLibrary_EnvironmentObjectTemplate(const EnvironmentObjectLibrary_EnvironmentObjectTemplate& from);

  inline EnvironmentObjectLibrary_EnvironmentObjectTemplate& operator=(const EnvironmentObjectLibrary_EnvironmentObjectTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnvironmentObjectLibrary_EnvironmentObjectTemplate(EnvironmentObjectLibrary_EnvironmentObjectTemplate&& from) noexcept
    : EnvironmentObjectLibrary_EnvironmentObjectTemplate() {
    *this = ::std::move(from);
  }

  inline EnvironmentObjectLibrary_EnvironmentObjectTemplate& operator=(EnvironmentObjectLibrary_EnvironmentObjectTemplate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnvironmentObjectLibrary_EnvironmentObjectTemplate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvironmentObjectLibrary_EnvironmentObjectTemplate* internal_default_instance() {
    return reinterpret_cast<const EnvironmentObjectLibrary_EnvironmentObjectTemplate*>(
               &_EnvironmentObjectLibrary_EnvironmentObjectTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(EnvironmentObjectLibrary_EnvironmentObjectTemplate* other);
  friend void swap(EnvironmentObjectLibrary_EnvironmentObjectTemplate& a, EnvironmentObjectLibrary_EnvironmentObjectTemplate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnvironmentObjectLibrary_EnvironmentObjectTemplate* New() const final {
    return CreateMaybeMessage<EnvironmentObjectLibrary_EnvironmentObjectTemplate>(NULL);
  }

  EnvironmentObjectLibrary_EnvironmentObjectTemplate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnvironmentObjectLibrary_EnvironmentObjectTemplate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EnvironmentObjectLibrary_EnvironmentObjectTemplate& from);
  void MergeFrom(const EnvironmentObjectLibrary_EnvironmentObjectTemplate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentObjectLibrary_EnvironmentObjectTemplate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string prefab = 2;
  void clear_prefab();
  static const int kPrefabFieldNumber = 2;
  const ::std::string& prefab() const;
  void set_prefab(const ::std::string& value);
  #if LANG_CXX11
  void set_prefab(::std::string&& value);
  #endif
  void set_prefab(const char* value);
  void set_prefab(const char* value, size_t size);
  ::std::string* mutable_prefab();
  ::std::string* release_prefab();
  void set_allocated_prefab(::std::string* prefab);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string bundle = 4;
  void clear_bundle();
  static const int kBundleFieldNumber = 4;
  const ::std::string& bundle() const;
  void set_bundle(const ::std::string& value);
  #if LANG_CXX11
  void set_bundle(::std::string&& value);
  #endif
  void set_bundle(const char* value);
  void set_bundle(const char* value, size_t size);
  ::std::string* mutable_bundle();
  ::std::string* release_bundle();
  void set_allocated_bundle(::std::string* bundle);

  // string image = 6;
  void clear_image();
  static const int kImageFieldNumber = 6;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // .metamoto.types.Vector3 scale_limits = 5;
  bool has_scale_limits() const;
  void clear_scale_limits();
  static const int kScaleLimitsFieldNumber = 5;
  private:
  const ::metamoto::types::Vector3& _internal_scale_limits() const;
  public:
  const ::metamoto::types::Vector3& scale_limits() const;
  ::metamoto::types::Vector3* release_scale_limits();
  ::metamoto::types::Vector3* mutable_scale_limits();
  void set_allocated_scale_limits(::metamoto::types::Vector3* scale_limits);

  // float speed_reduction = 7;
  void clear_speed_reduction();
  static const int kSpeedReductionFieldNumber = 7;
  float speed_reduction() const;
  void set_speed_reduction(float value);

  // @@protoc_insertion_point(class_scope:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr prefab_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr bundle_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::metamoto::types::Vector3* scale_limits_;
  float speed_reduction_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EnvironmentObjectLibrary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.EnvironmentObjectLibrary) */ {
 public:
  EnvironmentObjectLibrary();
  virtual ~EnvironmentObjectLibrary();

  EnvironmentObjectLibrary(const EnvironmentObjectLibrary& from);

  inline EnvironmentObjectLibrary& operator=(const EnvironmentObjectLibrary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnvironmentObjectLibrary(EnvironmentObjectLibrary&& from) noexcept
    : EnvironmentObjectLibrary() {
    *this = ::std::move(from);
  }

  inline EnvironmentObjectLibrary& operator=(EnvironmentObjectLibrary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnvironmentObjectLibrary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvironmentObjectLibrary* internal_default_instance() {
    return reinterpret_cast<const EnvironmentObjectLibrary*>(
               &_EnvironmentObjectLibrary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(EnvironmentObjectLibrary* other);
  friend void swap(EnvironmentObjectLibrary& a, EnvironmentObjectLibrary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnvironmentObjectLibrary* New() const final {
    return CreateMaybeMessage<EnvironmentObjectLibrary>(NULL);
  }

  EnvironmentObjectLibrary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnvironmentObjectLibrary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EnvironmentObjectLibrary& from);
  void MergeFrom(const EnvironmentObjectLibrary& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentObjectLibrary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EnvironmentObjectLibrary_EnvironmentObjectTemplate EnvironmentObjectTemplate;

  // accessors -------------------------------------------------------

  // repeated .metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate objects = 1;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 1;
  ::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate* mutable_objects(int index);
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate >*
      mutable_objects();
  const ::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate& objects(int index) const;
  ::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate* add_objects();
  const ::google::protobuf::RepeatedPtrField< ::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate >&
      objects() const;

  // @@protoc_insertion_point(class_scope:metamoto.types.EnvironmentObjectLibrary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate > objects_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2fenvironment_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Environment_Weather

// float clouds = 1;
inline void Environment_Weather::clear_clouds() {
  clouds_ = 0;
}
inline float Environment_Weather::clouds() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.Weather.clouds)
  return clouds_;
}
inline void Environment_Weather::set_clouds(float value) {
  
  clouds_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.Weather.clouds)
}

// float overcast = 2;
inline void Environment_Weather::clear_overcast() {
  overcast_ = 0;
}
inline float Environment_Weather::overcast() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.Weather.overcast)
  return overcast_;
}
inline void Environment_Weather::set_overcast(float value) {
  
  overcast_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.Weather.overcast)
}

// float wind = 3;
inline void Environment_Weather::clear_wind() {
  wind_ = 0;
}
inline float Environment_Weather::wind() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.Weather.wind)
  return wind_;
}
inline void Environment_Weather::set_wind(float value) {
  
  wind_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.Weather.wind)
}

// float rain = 4;
inline void Environment_Weather::clear_rain() {
  rain_ = 0;
}
inline float Environment_Weather::rain() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.Weather.rain)
  return rain_;
}
inline void Environment_Weather::set_rain(float value) {
  
  rain_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.Weather.rain)
}

// float snow = 5;
inline void Environment_Weather::clear_snow() {
  snow_ = 0;
}
inline float Environment_Weather::snow() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.Weather.snow)
  return snow_;
}
inline void Environment_Weather::set_snow(float value) {
  
  snow_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.Weather.snow)
}

// float hail = 6;
inline void Environment_Weather::clear_hail() {
  hail_ = 0;
}
inline float Environment_Weather::hail() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.Weather.hail)
  return hail_;
}
inline void Environment_Weather::set_hail(float value) {
  
  hail_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.Weather.hail)
}

// float fog = 7;
inline void Environment_Weather::clear_fog() {
  fog_ = 0;
}
inline float Environment_Weather::fog() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.Weather.fog)
  return fog_;
}
inline void Environment_Weather::set_fog(float value) {
  
  fog_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.Weather.fog)
}

// float temperature = 8;
inline void Environment_Weather::clear_temperature() {
  temperature_ = 0;
}
inline float Environment_Weather::temperature() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.Weather.temperature)
  return temperature_;
}
inline void Environment_Weather::set_temperature(float value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.Weather.temperature)
}

// -------------------------------------------------------------------

// Environment_RoadConditions

// string road_id = 1;
inline void Environment_RoadConditions::clear_road_id() {
  road_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Environment_RoadConditions::road_id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.RoadConditions.road_id)
  return road_id_.GetNoArena();
}
inline void Environment_RoadConditions::set_road_id(const ::std::string& value) {
  
  road_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.RoadConditions.road_id)
}
#if LANG_CXX11
inline void Environment_RoadConditions::set_road_id(::std::string&& value) {
  
  road_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.Environment.RoadConditions.road_id)
}
#endif
inline void Environment_RoadConditions::set_road_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  road_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.Environment.RoadConditions.road_id)
}
inline void Environment_RoadConditions::set_road_id(const char* value, size_t size) {
  
  road_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Environment.RoadConditions.road_id)
}
inline ::std::string* Environment_RoadConditions::mutable_road_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.Environment.RoadConditions.road_id)
  return road_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Environment_RoadConditions::release_road_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.Environment.RoadConditions.road_id)
  
  return road_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Environment_RoadConditions::set_allocated_road_id(::std::string* road_id) {
  if (road_id != NULL) {
    
  } else {
    
  }
  road_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), road_id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Environment.RoadConditions.road_id)
}

// int32 lane_index = 2;
inline void Environment_RoadConditions::clear_lane_index() {
  lane_index_ = 0;
}
inline ::google::protobuf::int32 Environment_RoadConditions::lane_index() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.RoadConditions.lane_index)
  return lane_index_;
}
inline void Environment_RoadConditions::set_lane_index(::google::protobuf::int32 value) {
  
  lane_index_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.RoadConditions.lane_index)
}

// float s_min = 3;
inline void Environment_RoadConditions::clear_s_min() {
  s_min_ = 0;
}
inline float Environment_RoadConditions::s_min() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.RoadConditions.s_min)
  return s_min_;
}
inline void Environment_RoadConditions::set_s_min(float value) {
  
  s_min_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.RoadConditions.s_min)
}

// float s_max = 4;
inline void Environment_RoadConditions::clear_s_max() {
  s_max_ = 0;
}
inline float Environment_RoadConditions::s_max() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.RoadConditions.s_max)
  return s_max_;
}
inline void Environment_RoadConditions::set_s_max(float value) {
  
  s_max_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.RoadConditions.s_max)
}

// float wetness = 5;
inline void Environment_RoadConditions::clear_wetness() {
  wetness_ = 0;
}
inline float Environment_RoadConditions::wetness() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.RoadConditions.wetness)
  return wetness_;
}
inline void Environment_RoadConditions::set_wetness(float value) {
  
  wetness_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.RoadConditions.wetness)
}

// float puddles = 6;
inline void Environment_RoadConditions::clear_puddles() {
  puddles_ = 0;
}
inline float Environment_RoadConditions::puddles() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.RoadConditions.puddles)
  return puddles_;
}
inline void Environment_RoadConditions::set_puddles(float value) {
  
  puddles_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.RoadConditions.puddles)
}

// float surface_weathering = 11;
inline void Environment_RoadConditions::clear_surface_weathering() {
  surface_weathering_ = 0;
}
inline float Environment_RoadConditions::surface_weathering() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.RoadConditions.surface_weathering)
  return surface_weathering_;
}
inline void Environment_RoadConditions::set_surface_weathering(float value) {
  
  surface_weathering_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.RoadConditions.surface_weathering)
}

// float surface_features = 12;
inline void Environment_RoadConditions::clear_surface_features() {
  surface_features_ = 0;
}
inline float Environment_RoadConditions::surface_features() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.RoadConditions.surface_features)
  return surface_features_;
}
inline void Environment_RoadConditions::set_surface_features(float value) {
  
  surface_features_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.RoadConditions.surface_features)
}

// float markings_deterioration = 7;
inline void Environment_RoadConditions::clear_markings_deterioration() {
  markings_deterioration_ = 0;
}
inline float Environment_RoadConditions::markings_deterioration() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.RoadConditions.markings_deterioration)
  return markings_deterioration_;
}
inline void Environment_RoadConditions::set_markings_deterioration(float value) {
  
  markings_deterioration_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.RoadConditions.markings_deterioration)
}

// float cracks = 8;
inline void Environment_RoadConditions::clear_cracks() {
  cracks_ = 0;
}
inline float Environment_RoadConditions::cracks() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.RoadConditions.cracks)
  return cracks_;
}
inline void Environment_RoadConditions::set_cracks(float value) {
  
  cracks_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.RoadConditions.cracks)
}

// float stains = 13;
inline void Environment_RoadConditions::clear_stains() {
  stains_ = 0;
}
inline float Environment_RoadConditions::stains() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.RoadConditions.stains)
  return stains_;
}
inline void Environment_RoadConditions::set_stains(float value) {
  
  stains_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.RoadConditions.stains)
}

// float tar_snakes = 9;
inline void Environment_RoadConditions::clear_tar_snakes() {
  tar_snakes_ = 0;
}
inline float Environment_RoadConditions::tar_snakes() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.RoadConditions.tar_snakes)
  return tar_snakes_;
}
inline void Environment_RoadConditions::set_tar_snakes(float value) {
  
  tar_snakes_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.RoadConditions.tar_snakes)
}

// float pot_holes = 10;
inline void Environment_RoadConditions::clear_pot_holes() {
  pot_holes_ = 0;
}
inline float Environment_RoadConditions::pot_holes() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.RoadConditions.pot_holes)
  return pot_holes_;
}
inline void Environment_RoadConditions::set_pot_holes(float value) {
  
  pot_holes_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.RoadConditions.pot_holes)
}

// float manholes = 14;
inline void Environment_RoadConditions::clear_manholes() {
  manholes_ = 0;
}
inline float Environment_RoadConditions::manholes() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.RoadConditions.manholes)
  return manholes_;
}
inline void Environment_RoadConditions::set_manholes(float value) {
  
  manholes_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.RoadConditions.manholes)
}

// float drains = 15;
inline void Environment_RoadConditions::clear_drains() {
  drains_ = 0;
}
inline float Environment_RoadConditions::drains() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.RoadConditions.drains)
  return drains_;
}
inline void Environment_RoadConditions::set_drains(float value) {
  
  drains_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.RoadConditions.drains)
}

// float patches = 16;
inline void Environment_RoadConditions::clear_patches() {
  patches_ = 0;
}
inline float Environment_RoadConditions::patches() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.RoadConditions.patches)
  return patches_;
}
inline void Environment_RoadConditions::set_patches(float value) {
  
  patches_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.RoadConditions.patches)
}

// -------------------------------------------------------------------

// Environment_Lighting

// float buildings = 1;
inline void Environment_Lighting::clear_buildings() {
  buildings_ = 0;
}
inline float Environment_Lighting::buildings() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.Lighting.buildings)
  return buildings_;
}
inline void Environment_Lighting::set_buildings(float value) {
  
  buildings_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.Lighting.buildings)
}

// -------------------------------------------------------------------

// Environment_EnvironmentObject

// string name = 1;
inline void Environment_EnvironmentObject::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Environment_EnvironmentObject::name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.EnvironmentObject.name)
  return name_.GetNoArena();
}
inline void Environment_EnvironmentObject::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.EnvironmentObject.name)
}
#if LANG_CXX11
inline void Environment_EnvironmentObject::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.Environment.EnvironmentObject.name)
}
#endif
inline void Environment_EnvironmentObject::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.Environment.EnvironmentObject.name)
}
inline void Environment_EnvironmentObject::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Environment.EnvironmentObject.name)
}
inline ::std::string* Environment_EnvironmentObject::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.Environment.EnvironmentObject.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Environment_EnvironmentObject::release_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.Environment.EnvironmentObject.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Environment_EnvironmentObject::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Environment.EnvironmentObject.name)
}

// string display_name = 2;
inline void Environment_EnvironmentObject::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Environment_EnvironmentObject::display_name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.EnvironmentObject.display_name)
  return display_name_.GetNoArena();
}
inline void Environment_EnvironmentObject::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.EnvironmentObject.display_name)
}
#if LANG_CXX11
inline void Environment_EnvironmentObject::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.Environment.EnvironmentObject.display_name)
}
#endif
inline void Environment_EnvironmentObject::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.Environment.EnvironmentObject.display_name)
}
inline void Environment_EnvironmentObject::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.Environment.EnvironmentObject.display_name)
}
inline ::std::string* Environment_EnvironmentObject::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.Environment.EnvironmentObject.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Environment_EnvironmentObject::release_display_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.Environment.EnvironmentObject.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Environment_EnvironmentObject::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Environment.EnvironmentObject.display_name)
}

// .metamoto.types.Pose pose = 3;
inline bool Environment_EnvironmentObject::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::metamoto::types::Pose& Environment_EnvironmentObject::_internal_pose() const {
  return *pose_;
}
inline const ::metamoto::types::Pose& Environment_EnvironmentObject::pose() const {
  const ::metamoto::types::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.EnvironmentObject.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Pose*>(
      &::metamoto::types::_Pose_default_instance_);
}
inline ::metamoto::types::Pose* Environment_EnvironmentObject::release_pose() {
  // @@protoc_insertion_point(field_release:metamoto.types.Environment.EnvironmentObject.pose)
  
  ::metamoto::types::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::metamoto::types::Pose* Environment_EnvironmentObject::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Environment.EnvironmentObject.pose)
  return pose_;
}
inline void Environment_EnvironmentObject::set_allocated_pose(::metamoto::types::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Environment.EnvironmentObject.pose)
}

// .metamoto.types.Vector3 scale = 4;
inline bool Environment_EnvironmentObject::has_scale() const {
  return this != internal_default_instance() && scale_ != NULL;
}
inline const ::metamoto::types::Vector3& Environment_EnvironmentObject::_internal_scale() const {
  return *scale_;
}
inline const ::metamoto::types::Vector3& Environment_EnvironmentObject::scale() const {
  const ::metamoto::types::Vector3* p = scale_;
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.EnvironmentObject.scale)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* Environment_EnvironmentObject::release_scale() {
  // @@protoc_insertion_point(field_release:metamoto.types.Environment.EnvironmentObject.scale)
  
  ::metamoto::types::Vector3* temp = scale_;
  scale_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* Environment_EnvironmentObject::mutable_scale() {
  
  if (scale_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    scale_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Environment.EnvironmentObject.scale)
  return scale_;
}
inline void Environment_EnvironmentObject::set_allocated_scale(::metamoto::types::Vector3* scale) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scale_);
  }
  if (scale) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scale = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Environment.EnvironmentObject.scale)
}

// .metamoto.types.Vector3 scale_limits = 5;
inline bool Environment_EnvironmentObject::has_scale_limits() const {
  return this != internal_default_instance() && scale_limits_ != NULL;
}
inline const ::metamoto::types::Vector3& Environment_EnvironmentObject::_internal_scale_limits() const {
  return *scale_limits_;
}
inline const ::metamoto::types::Vector3& Environment_EnvironmentObject::scale_limits() const {
  const ::metamoto::types::Vector3* p = scale_limits_;
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.EnvironmentObject.scale_limits)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* Environment_EnvironmentObject::release_scale_limits() {
  // @@protoc_insertion_point(field_release:metamoto.types.Environment.EnvironmentObject.scale_limits)
  
  ::metamoto::types::Vector3* temp = scale_limits_;
  scale_limits_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* Environment_EnvironmentObject::mutable_scale_limits() {
  
  if (scale_limits_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    scale_limits_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Environment.EnvironmentObject.scale_limits)
  return scale_limits_;
}
inline void Environment_EnvironmentObject::set_allocated_scale_limits(::metamoto::types::Vector3* scale_limits) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scale_limits_);
  }
  if (scale_limits) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scale_limits = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scale_limits, submessage_arena);
    }
    
  } else {
    
  }
  scale_limits_ = scale_limits;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Environment.EnvironmentObject.scale_limits)
}

// float speed_reduction = 6;
inline void Environment_EnvironmentObject::clear_speed_reduction() {
  speed_reduction_ = 0;
}
inline float Environment_EnvironmentObject::speed_reduction() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.EnvironmentObject.speed_reduction)
  return speed_reduction_;
}
inline void Environment_EnvironmentObject::set_speed_reduction(float value) {
  
  speed_reduction_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.EnvironmentObject.speed_reduction)
}

// -------------------------------------------------------------------

// Environment

// .metamoto.types.Environment.Weather weather = 1;
inline bool Environment::has_weather() const {
  return this != internal_default_instance() && weather_ != NULL;
}
inline void Environment::clear_weather() {
  if (GetArenaNoVirtual() == NULL && weather_ != NULL) {
    delete weather_;
  }
  weather_ = NULL;
}
inline const ::metamoto::types::Environment_Weather& Environment::_internal_weather() const {
  return *weather_;
}
inline const ::metamoto::types::Environment_Weather& Environment::weather() const {
  const ::metamoto::types::Environment_Weather* p = weather_;
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.weather)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Environment_Weather*>(
      &::metamoto::types::_Environment_Weather_default_instance_);
}
inline ::metamoto::types::Environment_Weather* Environment::release_weather() {
  // @@protoc_insertion_point(field_release:metamoto.types.Environment.weather)
  
  ::metamoto::types::Environment_Weather* temp = weather_;
  weather_ = NULL;
  return temp;
}
inline ::metamoto::types::Environment_Weather* Environment::mutable_weather() {
  
  if (weather_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Environment_Weather>(GetArenaNoVirtual());
    weather_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Environment.weather)
  return weather_;
}
inline void Environment::set_allocated_weather(::metamoto::types::Environment_Weather* weather) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weather_;
  }
  if (weather) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weather = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weather, submessage_arena);
    }
    
  } else {
    
  }
  weather_ = weather;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Environment.weather)
}

// float time_of_day = 2;
inline void Environment::clear_time_of_day() {
  time_of_day_ = 0;
}
inline float Environment::time_of_day() const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.time_of_day)
  return time_of_day_;
}
inline void Environment::set_time_of_day(float value) {
  
  time_of_day_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.Environment.time_of_day)
}

// repeated .metamoto.types.Environment.RoadConditions road_conditions = 3;
inline int Environment::road_conditions_size() const {
  return road_conditions_.size();
}
inline void Environment::clear_road_conditions() {
  road_conditions_.Clear();
}
inline ::metamoto::types::Environment_RoadConditions* Environment::mutable_road_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.Environment.road_conditions)
  return road_conditions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::Environment_RoadConditions >*
Environment::mutable_road_conditions() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.Environment.road_conditions)
  return &road_conditions_;
}
inline const ::metamoto::types::Environment_RoadConditions& Environment::road_conditions(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.road_conditions)
  return road_conditions_.Get(index);
}
inline ::metamoto::types::Environment_RoadConditions* Environment::add_road_conditions() {
  // @@protoc_insertion_point(field_add:metamoto.types.Environment.road_conditions)
  return road_conditions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Environment_RoadConditions >&
Environment::road_conditions() const {
  // @@protoc_insertion_point(field_list:metamoto.types.Environment.road_conditions)
  return road_conditions_;
}

// .metamoto.types.Environment.Lighting lighting = 4;
inline bool Environment::has_lighting() const {
  return this != internal_default_instance() && lighting_ != NULL;
}
inline void Environment::clear_lighting() {
  if (GetArenaNoVirtual() == NULL && lighting_ != NULL) {
    delete lighting_;
  }
  lighting_ = NULL;
}
inline const ::metamoto::types::Environment_Lighting& Environment::_internal_lighting() const {
  return *lighting_;
}
inline const ::metamoto::types::Environment_Lighting& Environment::lighting() const {
  const ::metamoto::types::Environment_Lighting* p = lighting_;
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.lighting)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Environment_Lighting*>(
      &::metamoto::types::_Environment_Lighting_default_instance_);
}
inline ::metamoto::types::Environment_Lighting* Environment::release_lighting() {
  // @@protoc_insertion_point(field_release:metamoto.types.Environment.lighting)
  
  ::metamoto::types::Environment_Lighting* temp = lighting_;
  lighting_ = NULL;
  return temp;
}
inline ::metamoto::types::Environment_Lighting* Environment::mutable_lighting() {
  
  if (lighting_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Environment_Lighting>(GetArenaNoVirtual());
    lighting_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Environment.lighting)
  return lighting_;
}
inline void Environment::set_allocated_lighting(::metamoto::types::Environment_Lighting* lighting) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lighting_;
  }
  if (lighting) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lighting = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lighting, submessage_arena);
    }
    
  } else {
    
  }
  lighting_ = lighting;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Environment.lighting)
}

// repeated .metamoto.types.Environment.EnvironmentObject environment_objects = 5;
inline int Environment::environment_objects_size() const {
  return environment_objects_.size();
}
inline void Environment::clear_environment_objects() {
  environment_objects_.Clear();
}
inline ::metamoto::types::Environment_EnvironmentObject* Environment::mutable_environment_objects(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.Environment.environment_objects)
  return environment_objects_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::Environment_EnvironmentObject >*
Environment::mutable_environment_objects() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.Environment.environment_objects)
  return &environment_objects_;
}
inline const ::metamoto::types::Environment_EnvironmentObject& Environment::environment_objects(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.Environment.environment_objects)
  return environment_objects_.Get(index);
}
inline ::metamoto::types::Environment_EnvironmentObject* Environment::add_environment_objects() {
  // @@protoc_insertion_point(field_add:metamoto.types.Environment.environment_objects)
  return environment_objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::Environment_EnvironmentObject >&
Environment::environment_objects() const {
  // @@protoc_insertion_point(field_list:metamoto.types.Environment.environment_objects)
  return environment_objects_;
}

// -------------------------------------------------------------------

// EnvironmentObjectLibrary_EnvironmentObjectTemplate

// string name = 1;
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnvironmentObjectLibrary_EnvironmentObjectTemplate::name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.name)
  return name_.GetNoArena();
}
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.name)
}
#if LANG_CXX11
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.name)
}
#endif
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.name)
}
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.name)
}
inline ::std::string* EnvironmentObjectLibrary_EnvironmentObjectTemplate::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnvironmentObjectLibrary_EnvironmentObjectTemplate::release_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.name)
}

// string prefab = 2;
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::clear_prefab() {
  prefab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnvironmentObjectLibrary_EnvironmentObjectTemplate::prefab() const {
  // @@protoc_insertion_point(field_get:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.prefab)
  return prefab_.GetNoArena();
}
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_prefab(const ::std::string& value) {
  
  prefab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.prefab)
}
#if LANG_CXX11
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_prefab(::std::string&& value) {
  
  prefab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.prefab)
}
#endif
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_prefab(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prefab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.prefab)
}
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_prefab(const char* value, size_t size) {
  
  prefab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.prefab)
}
inline ::std::string* EnvironmentObjectLibrary_EnvironmentObjectTemplate::mutable_prefab() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.prefab)
  return prefab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnvironmentObjectLibrary_EnvironmentObjectTemplate::release_prefab() {
  // @@protoc_insertion_point(field_release:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.prefab)
  
  return prefab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_allocated_prefab(::std::string* prefab) {
  if (prefab != NULL) {
    
  } else {
    
  }
  prefab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefab);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.prefab)
}

// string description = 3;
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnvironmentObjectLibrary_EnvironmentObjectTemplate::description() const {
  // @@protoc_insertion_point(field_get:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.description)
  return description_.GetNoArena();
}
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.description)
}
#if LANG_CXX11
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.description)
}
#endif
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.description)
}
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.description)
}
inline ::std::string* EnvironmentObjectLibrary_EnvironmentObjectTemplate::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnvironmentObjectLibrary_EnvironmentObjectTemplate::release_description() {
  // @@protoc_insertion_point(field_release:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.description)
}

// string bundle = 4;
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::clear_bundle() {
  bundle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnvironmentObjectLibrary_EnvironmentObjectTemplate::bundle() const {
  // @@protoc_insertion_point(field_get:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.bundle)
  return bundle_.GetNoArena();
}
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_bundle(const ::std::string& value) {
  
  bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.bundle)
}
#if LANG_CXX11
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_bundle(::std::string&& value) {
  
  bundle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.bundle)
}
#endif
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_bundle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.bundle)
}
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_bundle(const char* value, size_t size) {
  
  bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.bundle)
}
inline ::std::string* EnvironmentObjectLibrary_EnvironmentObjectTemplate::mutable_bundle() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.bundle)
  return bundle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnvironmentObjectLibrary_EnvironmentObjectTemplate::release_bundle() {
  // @@protoc_insertion_point(field_release:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.bundle)
  
  return bundle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_allocated_bundle(::std::string* bundle) {
  if (bundle != NULL) {
    
  } else {
    
  }
  bundle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bundle);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.bundle)
}

// .metamoto.types.Vector3 scale_limits = 5;
inline bool EnvironmentObjectLibrary_EnvironmentObjectTemplate::has_scale_limits() const {
  return this != internal_default_instance() && scale_limits_ != NULL;
}
inline const ::metamoto::types::Vector3& EnvironmentObjectLibrary_EnvironmentObjectTemplate::_internal_scale_limits() const {
  return *scale_limits_;
}
inline const ::metamoto::types::Vector3& EnvironmentObjectLibrary_EnvironmentObjectTemplate::scale_limits() const {
  const ::metamoto::types::Vector3* p = scale_limits_;
  // @@protoc_insertion_point(field_get:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.scale_limits)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* EnvironmentObjectLibrary_EnvironmentObjectTemplate::release_scale_limits() {
  // @@protoc_insertion_point(field_release:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.scale_limits)
  
  ::metamoto::types::Vector3* temp = scale_limits_;
  scale_limits_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* EnvironmentObjectLibrary_EnvironmentObjectTemplate::mutable_scale_limits() {
  
  if (scale_limits_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    scale_limits_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.scale_limits)
  return scale_limits_;
}
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_allocated_scale_limits(::metamoto::types::Vector3* scale_limits) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scale_limits_);
  }
  if (scale_limits) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scale_limits = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scale_limits, submessage_arena);
    }
    
  } else {
    
  }
  scale_limits_ = scale_limits;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.scale_limits)
}

// string image = 6;
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnvironmentObjectLibrary_EnvironmentObjectTemplate::image() const {
  // @@protoc_insertion_point(field_get:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.image)
  return image_.GetNoArena();
}
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.image)
}
#if LANG_CXX11
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_image(::std::string&& value) {
  
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.image)
}
#endif
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.image)
}
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_image(const char* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.image)
}
inline ::std::string* EnvironmentObjectLibrary_EnvironmentObjectTemplate::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnvironmentObjectLibrary_EnvironmentObjectTemplate::release_image() {
  // @@protoc_insertion_point(field_release:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.image)
}

// float speed_reduction = 7;
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::clear_speed_reduction() {
  speed_reduction_ = 0;
}
inline float EnvironmentObjectLibrary_EnvironmentObjectTemplate::speed_reduction() const {
  // @@protoc_insertion_point(field_get:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.speed_reduction)
  return speed_reduction_;
}
inline void EnvironmentObjectLibrary_EnvironmentObjectTemplate::set_speed_reduction(float value) {
  
  speed_reduction_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate.speed_reduction)
}

// -------------------------------------------------------------------

// EnvironmentObjectLibrary

// repeated .metamoto.types.EnvironmentObjectLibrary.EnvironmentObjectTemplate objects = 1;
inline int EnvironmentObjectLibrary::objects_size() const {
  return objects_.size();
}
inline void EnvironmentObjectLibrary::clear_objects() {
  objects_.Clear();
}
inline ::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate* EnvironmentObjectLibrary::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:metamoto.types.EnvironmentObjectLibrary.objects)
  return objects_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate >*
EnvironmentObjectLibrary::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:metamoto.types.EnvironmentObjectLibrary.objects)
  return &objects_;
}
inline const ::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate& EnvironmentObjectLibrary::objects(int index) const {
  // @@protoc_insertion_point(field_get:metamoto.types.EnvironmentObjectLibrary.objects)
  return objects_.Get(index);
}
inline ::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate* EnvironmentObjectLibrary::add_objects() {
  // @@protoc_insertion_point(field_add:metamoto.types.EnvironmentObjectLibrary.objects)
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metamoto::types::EnvironmentObjectLibrary_EnvironmentObjectTemplate >&
EnvironmentObjectLibrary::objects() const {
  // @@protoc_insertion_point(field_list:metamoto.types.EnvironmentObjectLibrary.objects)
  return objects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2fenvironment_2eproto
