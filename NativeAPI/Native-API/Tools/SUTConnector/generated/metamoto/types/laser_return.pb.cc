// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/laser_return.proto

#include "metamoto/types/laser_return.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace metamoto {
namespace types {
class LaserReturnDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaserReturn>
      _instance;
} _LaserReturn_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace protobuf_metamoto_2ftypes_2flaser_5freturn_2eproto {
static void InitDefaultsLaserReturn() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_LaserReturn_default_instance_;
    new (ptr) ::metamoto::types::LaserReturn();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::LaserReturn::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LaserReturn =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLaserReturn}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LaserReturn.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::LaserReturn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::LaserReturn, elevation_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::LaserReturn, ranges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::LaserReturn, intensities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::LaserReturn, object_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::LaserReturn, object_types_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::types::LaserReturn)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_LaserReturn_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/types/laser_return.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!metamoto/types/laser_return.proto\022\016met"
      "amoto.types\032!metamoto/types/enumerations"
      ".proto\"\221\001\n\013LaserReturn\022\027\n\017elevation_angl"
      "e\030\001 \001(\002\022\016\n\006ranges\030\002 \003(\002\022\023\n\013intensities\030\003"
      " \003(\002\022\022\n\nobject_ids\030\004 \003(\r\0220\n\014object_types"
      "\030\005 \003(\0162\032.metamoto.types.ObjectTypeB\021\252\002\016M"
      "etamoto.Typesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 261);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/types/laser_return.proto", &protobuf_RegisterTypes);
  ::protobuf_metamoto_2ftypes_2fenumerations_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2ftypes_2flaser_5freturn_2eproto
namespace metamoto {
namespace types {

// ===================================================================

void LaserReturn::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaserReturn::kElevationAngleFieldNumber;
const int LaserReturn::kRangesFieldNumber;
const int LaserReturn::kIntensitiesFieldNumber;
const int LaserReturn::kObjectIdsFieldNumber;
const int LaserReturn::kObjectTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaserReturn::LaserReturn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2flaser_5freturn_2eproto::scc_info_LaserReturn.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.LaserReturn)
}
LaserReturn::LaserReturn(const LaserReturn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ranges_(from.ranges_),
      intensities_(from.intensities_),
      object_ids_(from.object_ids_),
      object_types_(from.object_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  elevation_angle_ = from.elevation_angle_;
  // @@protoc_insertion_point(copy_constructor:metamoto.types.LaserReturn)
}

void LaserReturn::SharedCtor() {
  elevation_angle_ = 0;
}

LaserReturn::~LaserReturn() {
  // @@protoc_insertion_point(destructor:metamoto.types.LaserReturn)
  SharedDtor();
}

void LaserReturn::SharedDtor() {
}

void LaserReturn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaserReturn::descriptor() {
  ::protobuf_metamoto_2ftypes_2flaser_5freturn_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2flaser_5freturn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaserReturn& LaserReturn::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2flaser_5freturn_2eproto::scc_info_LaserReturn.base);
  return *internal_default_instance();
}


void LaserReturn::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.LaserReturn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranges_.Clear();
  intensities_.Clear();
  object_ids_.Clear();
  object_types_.Clear();
  elevation_angle_ = 0;
  _internal_metadata_.Clear();
}

bool LaserReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.LaserReturn)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float elevation_angle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elevation_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float ranges = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ranges())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_ranges())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float intensities = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_intensities())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_intensities())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 object_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_object_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_object_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.ObjectType object_types = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_object_types(static_cast< ::metamoto::types::ObjectType >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_object_types(static_cast< ::metamoto::types::ObjectType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.LaserReturn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.LaserReturn)
  return false;
#undef DO_
}

void LaserReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.LaserReturn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float elevation_angle = 1;
  if (this->elevation_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->elevation_angle(), output);
  }

  // repeated float ranges = 2;
  if (this->ranges_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _ranges_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->ranges().data(), this->ranges_size(), output);
  }

  // repeated float intensities = 3;
  if (this->intensities_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _intensities_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->intensities().data(), this->intensities_size(), output);
  }

  // repeated uint32 object_ids = 4;
  if (this->object_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _object_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->object_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->object_ids(i), output);
  }

  // repeated .metamoto.types.ObjectType object_types = 5;
  if (this->object_types_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_object_types_cached_byte_size_));
  }
  for (int i = 0, n = this->object_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->object_types(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.LaserReturn)
}

::google::protobuf::uint8* LaserReturn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.LaserReturn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float elevation_angle = 1;
  if (this->elevation_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->elevation_angle(), target);
  }

  // repeated float ranges = 2;
  if (this->ranges_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _ranges_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->ranges_, target);
  }

  // repeated float intensities = 3;
  if (this->intensities_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _intensities_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->intensities_, target);
  }

  // repeated uint32 object_ids = 4;
  if (this->object_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _object_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->object_ids_, target);
  }

  // repeated .metamoto.types.ObjectType object_types = 5;
  if (this->object_types_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _object_types_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->object_types_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.LaserReturn)
  return target;
}

size_t LaserReturn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.LaserReturn)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float ranges = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->ranges_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ranges_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float intensities = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->intensities_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _intensities_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 object_ids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->object_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _object_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .metamoto.types.ObjectType object_types = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->object_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->object_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _object_types_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // float elevation_angle = 1;
  if (this->elevation_angle() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaserReturn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.LaserReturn)
  GOOGLE_DCHECK_NE(&from, this);
  const LaserReturn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaserReturn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.LaserReturn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.LaserReturn)
    MergeFrom(*source);
  }
}

void LaserReturn::MergeFrom(const LaserReturn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.LaserReturn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranges_.MergeFrom(from.ranges_);
  intensities_.MergeFrom(from.intensities_);
  object_ids_.MergeFrom(from.object_ids_);
  object_types_.MergeFrom(from.object_types_);
  if (from.elevation_angle() != 0) {
    set_elevation_angle(from.elevation_angle());
  }
}

void LaserReturn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.LaserReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaserReturn::CopyFrom(const LaserReturn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.LaserReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaserReturn::IsInitialized() const {
  return true;
}

void LaserReturn::Swap(LaserReturn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaserReturn::InternalSwap(LaserReturn* other) {
  using std::swap;
  ranges_.InternalSwap(&other->ranges_);
  intensities_.InternalSwap(&other->intensities_);
  object_ids_.InternalSwap(&other->object_ids_);
  object_types_.InternalSwap(&other->object_types_);
  swap(elevation_angle_, other->elevation_angle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaserReturn::GetMetadata() const {
  protobuf_metamoto_2ftypes_2flaser_5freturn_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2flaser_5freturn_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::LaserReturn* Arena::CreateMaybeMessage< ::metamoto::types::LaserReturn >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::LaserReturn >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
