// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/radar_object.proto

#include "metamoto/types/radar_object.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace metamoto {
namespace types {
class RadarObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RadarObject>
      _instance;
} _RadarObject_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace protobuf_metamoto_2ftypes_2fradar_5fobject_2eproto {
static void InitDefaultsRadarObject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_RadarObject_default_instance_;
    new (ptr) ::metamoto::types::RadarObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::RadarObject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RadarObject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRadarObject}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RadarObject.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RadarObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RadarObject, internal_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RadarObject, object_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RadarObject, object_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RadarObject, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RadarObject, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RadarObject, range_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RadarObject, range_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RadarObject, angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RadarObject, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RadarObject, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RadarObject, position_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RadarObject, position_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RadarObject, velocity_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RadarObject, velocity_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RadarObject, acceleration_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RadarObject, rcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::RadarObject, snr_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::types::RadarObject)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_RadarObject_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/types/radar_object.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!metamoto/types/radar_object.proto\022\016met"
      "amoto.types\032!metamoto/types/enumerations"
      ".proto\"\352\003\n\013RadarObject\022\023\n\013internal_id\030\001 "
      "\001(\r\022\021\n\tobject_id\030\002 \001(\r\022/\n\013object_type\030\003 "
      "\001(\0162\032.metamoto.types.ObjectType\0222\n\006statu"
      "s\030\004 \001(\0162\".metamoto.types.RadarObject.Sta"
      "tus\022\r\n\005range\030\005 \001(\002\022\022\n\nrange_rate\030\006 \001(\002\022\032"
      "\n\022range_acceleration\030\007 \001(\002\022\r\n\005angle\030\010 \001("
      "\002\022\r\n\005width\030\t \001(\002\022\016\n\006length\030\n \001(\002\022\022\n\nposi"
      "tion_x\030\013 \001(\002\022\022\n\nposition_z\030\014 \001(\002\022\022\n\nvelo"
      "city_x\030\r \001(\002\022\022\n\nvelocity_z\030\016 \001(\002\022\026\n\016acce"
      "leration_z\030\017 \001(\002\022\013\n\003rcs\030\020 \001(\002\022\013\n\003snr\030\021 \001"
      "(\002\"_\n\006Status\022\022\n\016STATUS_UNKNOWN\020\000\022\025\n\021STAT"
      "US_NEW_OBJECT\020\001\022\022\n\016STATUS_UPDATED\020\002\022\026\n\022S"
      "TATUS_NOT_UPDATED\020\003B\021\252\002\016Metamoto.Typesb\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 606);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/types/radar_object.proto", &protobuf_RegisterTypes);
  ::protobuf_metamoto_2ftypes_2fenumerations_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2ftypes_2fradar_5fobject_2eproto
namespace metamoto {
namespace types {
const ::google::protobuf::EnumDescriptor* RadarObject_Status_descriptor() {
  protobuf_metamoto_2ftypes_2fradar_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2fradar_5fobject_2eproto::file_level_enum_descriptors[0];
}
bool RadarObject_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RadarObject_Status RadarObject::STATUS_UNKNOWN;
const RadarObject_Status RadarObject::STATUS_NEW_OBJECT;
const RadarObject_Status RadarObject::STATUS_UPDATED;
const RadarObject_Status RadarObject::STATUS_NOT_UPDATED;
const RadarObject_Status RadarObject::Status_MIN;
const RadarObject_Status RadarObject::Status_MAX;
const int RadarObject::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void RadarObject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarObject::kInternalIdFieldNumber;
const int RadarObject::kObjectIdFieldNumber;
const int RadarObject::kObjectTypeFieldNumber;
const int RadarObject::kStatusFieldNumber;
const int RadarObject::kRangeFieldNumber;
const int RadarObject::kRangeRateFieldNumber;
const int RadarObject::kRangeAccelerationFieldNumber;
const int RadarObject::kAngleFieldNumber;
const int RadarObject::kWidthFieldNumber;
const int RadarObject::kLengthFieldNumber;
const int RadarObject::kPositionXFieldNumber;
const int RadarObject::kPositionZFieldNumber;
const int RadarObject::kVelocityXFieldNumber;
const int RadarObject::kVelocityZFieldNumber;
const int RadarObject::kAccelerationZFieldNumber;
const int RadarObject::kRcsFieldNumber;
const int RadarObject::kSnrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarObject::RadarObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fradar_5fobject_2eproto::scc_info_RadarObject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.RadarObject)
}
RadarObject::RadarObject(const RadarObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&internal_id_, &from.internal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&snr_) -
    reinterpret_cast<char*>(&internal_id_)) + sizeof(snr_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.RadarObject)
}

void RadarObject::SharedCtor() {
  ::memset(&internal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&snr_) -
      reinterpret_cast<char*>(&internal_id_)) + sizeof(snr_));
}

RadarObject::~RadarObject() {
  // @@protoc_insertion_point(destructor:metamoto.types.RadarObject)
  SharedDtor();
}

void RadarObject::SharedDtor() {
}

void RadarObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RadarObject::descriptor() {
  ::protobuf_metamoto_2ftypes_2fradar_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fradar_5fobject_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RadarObject& RadarObject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fradar_5fobject_2eproto::scc_info_RadarObject.base);
  return *internal_default_instance();
}


void RadarObject::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.RadarObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&internal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&snr_) -
      reinterpret_cast<char*>(&internal_id_)) + sizeof(snr_));
  _internal_metadata_.Clear();
}

bool RadarObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.RadarObject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 internal_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &internal_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 object_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &object_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.ObjectType object_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_object_type(static_cast< ::metamoto::types::ObjectType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.RadarObject.Status status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::metamoto::types::RadarObject_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float range = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float range_rate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float range_acceleration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float position_x = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float position_z = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float velocity_x = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float velocity_z = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acceleration_z = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acceleration_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rcs = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rcs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float snr = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &snr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.RadarObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.RadarObject)
  return false;
#undef DO_
}

void RadarObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.RadarObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 internal_id = 1;
  if (this->internal_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->internal_id(), output);
  }

  // uint32 object_id = 2;
  if (this->object_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->object_id(), output);
  }

  // .metamoto.types.ObjectType object_type = 3;
  if (this->object_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->object_type(), output);
  }

  // .metamoto.types.RadarObject.Status status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // float range = 5;
  if (this->range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->range(), output);
  }

  // float range_rate = 6;
  if (this->range_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->range_rate(), output);
  }

  // float range_acceleration = 7;
  if (this->range_acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->range_acceleration(), output);
  }

  // float angle = 8;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->angle(), output);
  }

  // float width = 9;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->width(), output);
  }

  // float length = 10;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->length(), output);
  }

  // float position_x = 11;
  if (this->position_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->position_x(), output);
  }

  // float position_z = 12;
  if (this->position_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->position_z(), output);
  }

  // float velocity_x = 13;
  if (this->velocity_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->velocity_x(), output);
  }

  // float velocity_z = 14;
  if (this->velocity_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->velocity_z(), output);
  }

  // float acceleration_z = 15;
  if (this->acceleration_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->acceleration_z(), output);
  }

  // float rcs = 16;
  if (this->rcs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->rcs(), output);
  }

  // float snr = 17;
  if (this->snr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->snr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.RadarObject)
}

::google::protobuf::uint8* RadarObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.RadarObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 internal_id = 1;
  if (this->internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->internal_id(), target);
  }

  // uint32 object_id = 2;
  if (this->object_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->object_id(), target);
  }

  // .metamoto.types.ObjectType object_type = 3;
  if (this->object_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->object_type(), target);
  }

  // .metamoto.types.RadarObject.Status status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // float range = 5;
  if (this->range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->range(), target);
  }

  // float range_rate = 6;
  if (this->range_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->range_rate(), target);
  }

  // float range_acceleration = 7;
  if (this->range_acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->range_acceleration(), target);
  }

  // float angle = 8;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->angle(), target);
  }

  // float width = 9;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->width(), target);
  }

  // float length = 10;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->length(), target);
  }

  // float position_x = 11;
  if (this->position_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->position_x(), target);
  }

  // float position_z = 12;
  if (this->position_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->position_z(), target);
  }

  // float velocity_x = 13;
  if (this->velocity_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->velocity_x(), target);
  }

  // float velocity_z = 14;
  if (this->velocity_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->velocity_z(), target);
  }

  // float acceleration_z = 15;
  if (this->acceleration_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->acceleration_z(), target);
  }

  // float rcs = 16;
  if (this->rcs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->rcs(), target);
  }

  // float snr = 17;
  if (this->snr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->snr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.RadarObject)
  return target;
}

size_t RadarObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.RadarObject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 internal_id = 1;
  if (this->internal_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->internal_id());
  }

  // uint32 object_id = 2;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->object_id());
  }

  // .metamoto.types.ObjectType object_type = 3;
  if (this->object_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->object_type());
  }

  // .metamoto.types.RadarObject.Status status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // float range = 5;
  if (this->range() != 0) {
    total_size += 1 + 4;
  }

  // float range_rate = 6;
  if (this->range_rate() != 0) {
    total_size += 1 + 4;
  }

  // float range_acceleration = 7;
  if (this->range_acceleration() != 0) {
    total_size += 1 + 4;
  }

  // float angle = 8;
  if (this->angle() != 0) {
    total_size += 1 + 4;
  }

  // float width = 9;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // float length = 10;
  if (this->length() != 0) {
    total_size += 1 + 4;
  }

  // float position_x = 11;
  if (this->position_x() != 0) {
    total_size += 1 + 4;
  }

  // float position_z = 12;
  if (this->position_z() != 0) {
    total_size += 1 + 4;
  }

  // float velocity_x = 13;
  if (this->velocity_x() != 0) {
    total_size += 1 + 4;
  }

  // float velocity_z = 14;
  if (this->velocity_z() != 0) {
    total_size += 1 + 4;
  }

  // float acceleration_z = 15;
  if (this->acceleration_z() != 0) {
    total_size += 1 + 4;
  }

  // float rcs = 16;
  if (this->rcs() != 0) {
    total_size += 2 + 4;
  }

  // float snr = 17;
  if (this->snr() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.RadarObject)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.RadarObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.RadarObject)
    MergeFrom(*source);
  }
}

void RadarObject::MergeFrom(const RadarObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.RadarObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.internal_id() != 0) {
    set_internal_id(from.internal_id());
  }
  if (from.object_id() != 0) {
    set_object_id(from.object_id());
  }
  if (from.object_type() != 0) {
    set_object_type(from.object_type());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.range() != 0) {
    set_range(from.range());
  }
  if (from.range_rate() != 0) {
    set_range_rate(from.range_rate());
  }
  if (from.range_acceleration() != 0) {
    set_range_acceleration(from.range_acceleration());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.position_x() != 0) {
    set_position_x(from.position_x());
  }
  if (from.position_z() != 0) {
    set_position_z(from.position_z());
  }
  if (from.velocity_x() != 0) {
    set_velocity_x(from.velocity_x());
  }
  if (from.velocity_z() != 0) {
    set_velocity_z(from.velocity_z());
  }
  if (from.acceleration_z() != 0) {
    set_acceleration_z(from.acceleration_z());
  }
  if (from.rcs() != 0) {
    set_rcs(from.rcs());
  }
  if (from.snr() != 0) {
    set_snr(from.snr());
  }
}

void RadarObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.RadarObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarObject::CopyFrom(const RadarObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.RadarObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarObject::IsInitialized() const {
  return true;
}

void RadarObject::Swap(RadarObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarObject::InternalSwap(RadarObject* other) {
  using std::swap;
  swap(internal_id_, other->internal_id_);
  swap(object_id_, other->object_id_);
  swap(object_type_, other->object_type_);
  swap(status_, other->status_);
  swap(range_, other->range_);
  swap(range_rate_, other->range_rate_);
  swap(range_acceleration_, other->range_acceleration_);
  swap(angle_, other->angle_);
  swap(width_, other->width_);
  swap(length_, other->length_);
  swap(position_x_, other->position_x_);
  swap(position_z_, other->position_z_);
  swap(velocity_x_, other->velocity_x_);
  swap(velocity_z_, other->velocity_z_);
  swap(acceleration_z_, other->acceleration_z_);
  swap(rcs_, other->rcs_);
  swap(snr_, other->snr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RadarObject::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fradar_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fradar_5fobject_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::RadarObject* Arena::CreateMaybeMessage< ::metamoto::types::RadarObject >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::RadarObject >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
