// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/visual_path.proto

#include "metamoto/types/visual_path.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_metamoto_2ftypes_2fvector3_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fvector3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3;
}  // namespace protobuf_metamoto_2ftypes_2fvector3_2eproto
namespace protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VisualPathPoint;
}  // namespace protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto
namespace metamoto {
namespace types {
class VisualPathPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VisualPathPoint>
      _instance;
} _VisualPathPoint_default_instance_;
class VisualPathDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VisualPath>
      _instance;
} _VisualPath_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto {
static void InitDefaultsVisualPathPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_VisualPathPoint_default_instance_;
    new (ptr) ::metamoto::types::VisualPathPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::VisualPathPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VisualPathPoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVisualPathPoint}, {
      &protobuf_metamoto_2ftypes_2fvector3_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsVisualPath() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_VisualPath_default_instance_;
    new (ptr) ::metamoto::types::VisualPath();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::VisualPath::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VisualPath =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVisualPath}, {
      &protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto::scc_info_VisualPathPoint.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_VisualPathPoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VisualPath.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VisualPathPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VisualPathPoint, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VisualPathPoint, normal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VisualPathPoint, smoothness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VisualPathPoint, glue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VisualPathPoint, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VisualPathPoint, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VisualPathPoint, transparency_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VisualPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VisualPath, path_points_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::types::VisualPathPoint)},
  { 12, -1, sizeof(::metamoto::types::VisualPath)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_VisualPathPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_VisualPath_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/types/visual_path.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n metamoto/types/visual_path.proto\022\016meta"
      "moto.types\032\034metamoto/types/vector3.proto"
      "\"\273\001\n\017VisualPathPoint\022)\n\010position\030\001 \001(\0132\027"
      ".metamoto.types.Vector3\022\'\n\006normal\030\002 \001(\0132"
      "\027.metamoto.types.Vector3\022\022\n\nsmoothness\030\003"
      " \001(\r\022\014\n\004glue\030\004 \001(\010\022\r\n\005width\030\005 \001(\002\022\r\n\005col"
      "or\030\006 \001(\t\022\024\n\014transparency\030\007 \001(\002\"B\n\nVisual"
      "Path\0224\n\013path_points\030\001 \003(\0132\037.metamoto.typ"
      "es.VisualPathPointB\021\252\002\016Metamoto.Typesb\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 365);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/types/visual_path.proto", &protobuf_RegisterTypes);
  ::protobuf_metamoto_2ftypes_2fvector3_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto
namespace metamoto {
namespace types {

// ===================================================================

void VisualPathPoint::InitAsDefaultInstance() {
  ::metamoto::types::_VisualPathPoint_default_instance_._instance.get_mutable()->position_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
  ::metamoto::types::_VisualPathPoint_default_instance_._instance.get_mutable()->normal_ = const_cast< ::metamoto::types::Vector3*>(
      ::metamoto::types::Vector3::internal_default_instance());
}
void VisualPathPoint::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
void VisualPathPoint::clear_normal() {
  if (GetArenaNoVirtual() == NULL && normal_ != NULL) {
    delete normal_;
  }
  normal_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisualPathPoint::kPositionFieldNumber;
const int VisualPathPoint::kNormalFieldNumber;
const int VisualPathPoint::kSmoothnessFieldNumber;
const int VisualPathPoint::kGlueFieldNumber;
const int VisualPathPoint::kWidthFieldNumber;
const int VisualPathPoint::kColorFieldNumber;
const int VisualPathPoint::kTransparencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisualPathPoint::VisualPathPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto::scc_info_VisualPathPoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.VisualPathPoint)
}
VisualPathPoint::VisualPathPoint(const VisualPathPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.color().size() > 0) {
    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  if (from.has_position()) {
    position_ = new ::metamoto::types::Vector3(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_normal()) {
    normal_ = new ::metamoto::types::Vector3(*from.normal_);
  } else {
    normal_ = NULL;
  }
  ::memcpy(&smoothness_, &from.smoothness_,
    static_cast<size_t>(reinterpret_cast<char*>(&transparency_) -
    reinterpret_cast<char*>(&smoothness_)) + sizeof(transparency_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.VisualPathPoint)
}

void VisualPathPoint::SharedCtor() {
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transparency_) -
      reinterpret_cast<char*>(&position_)) + sizeof(transparency_));
}

VisualPathPoint::~VisualPathPoint() {
  // @@protoc_insertion_point(destructor:metamoto.types.VisualPathPoint)
  SharedDtor();
}

void VisualPathPoint::SharedDtor() {
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete normal_;
}

void VisualPathPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VisualPathPoint::descriptor() {
  ::protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VisualPathPoint& VisualPathPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto::scc_info_VisualPathPoint.base);
  return *internal_default_instance();
}


void VisualPathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.VisualPathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && normal_ != NULL) {
    delete normal_;
  }
  normal_ = NULL;
  ::memset(&smoothness_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transparency_) -
      reinterpret_cast<char*>(&smoothness_)) + sizeof(transparency_));
  _internal_metadata_.Clear();
}

bool VisualPathPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.VisualPathPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.Vector3 position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Vector3 normal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 smoothness = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &smoothness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool glue = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &glue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string color = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->color().data(), static_cast<int>(this->color().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.VisualPathPoint.color"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float transparency = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transparency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.VisualPathPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.VisualPathPoint)
  return false;
#undef DO_
}

void VisualPathPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.VisualPathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Vector3 position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_position(), output);
  }

  // .metamoto.types.Vector3 normal = 2;
  if (this->has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_normal(), output);
  }

  // uint32 smoothness = 3;
  if (this->smoothness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->smoothness(), output);
  }

  // bool glue = 4;
  if (this->glue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->glue(), output);
  }

  // float width = 5;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->width(), output);
  }

  // string color = 6;
  if (this->color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->color().data(), static_cast<int>(this->color().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.VisualPathPoint.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->color(), output);
  }

  // float transparency = 7;
  if (this->transparency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->transparency(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.VisualPathPoint)
}

::google::protobuf::uint8* VisualPathPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.VisualPathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.Vector3 position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_position(), deterministic, target);
  }

  // .metamoto.types.Vector3 normal = 2;
  if (this->has_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_normal(), deterministic, target);
  }

  // uint32 smoothness = 3;
  if (this->smoothness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->smoothness(), target);
  }

  // bool glue = 4;
  if (this->glue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->glue(), target);
  }

  // float width = 5;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->width(), target);
  }

  // string color = 6;
  if (this->color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->color().data(), static_cast<int>(this->color().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.VisualPathPoint.color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->color(), target);
  }

  // float transparency = 7;
  if (this->transparency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->transparency(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.VisualPathPoint)
  return target;
}

size_t VisualPathPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.VisualPathPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string color = 6;
  if (this->color().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->color());
  }

  // .metamoto.types.Vector3 position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .metamoto.types.Vector3 normal = 2;
  if (this->has_normal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *normal_);
  }

  // uint32 smoothness = 3;
  if (this->smoothness() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->smoothness());
  }

  // bool glue = 4;
  if (this->glue() != 0) {
    total_size += 1 + 1;
  }

  // float width = 5;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // float transparency = 7;
  if (this->transparency() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisualPathPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.VisualPathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const VisualPathPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VisualPathPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.VisualPathPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.VisualPathPoint)
    MergeFrom(*source);
  }
}

void VisualPathPoint::MergeFrom(const VisualPathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.VisualPathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.color().size() > 0) {

    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  if (from.has_position()) {
    mutable_position()->::metamoto::types::Vector3::MergeFrom(from.position());
  }
  if (from.has_normal()) {
    mutable_normal()->::metamoto::types::Vector3::MergeFrom(from.normal());
  }
  if (from.smoothness() != 0) {
    set_smoothness(from.smoothness());
  }
  if (from.glue() != 0) {
    set_glue(from.glue());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.transparency() != 0) {
    set_transparency(from.transparency());
  }
}

void VisualPathPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.VisualPathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisualPathPoint::CopyFrom(const VisualPathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.VisualPathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualPathPoint::IsInitialized() const {
  return true;
}

void VisualPathPoint::Swap(VisualPathPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisualPathPoint::InternalSwap(VisualPathPoint* other) {
  using std::swap;
  color_.Swap(&other->color_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(normal_, other->normal_);
  swap(smoothness_, other->smoothness_);
  swap(glue_, other->glue_);
  swap(width_, other->width_);
  swap(transparency_, other->transparency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VisualPathPoint::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VisualPath::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisualPath::kPathPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisualPath::VisualPath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto::scc_info_VisualPath.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.VisualPath)
}
VisualPath::VisualPath(const VisualPath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      path_points_(from.path_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metamoto.types.VisualPath)
}

void VisualPath::SharedCtor() {
}

VisualPath::~VisualPath() {
  // @@protoc_insertion_point(destructor:metamoto.types.VisualPath)
  SharedDtor();
}

void VisualPath::SharedDtor() {
}

void VisualPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VisualPath::descriptor() {
  ::protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VisualPath& VisualPath::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto::scc_info_VisualPath.base);
  return *internal_default_instance();
}


void VisualPath::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.VisualPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_points_.Clear();
  _internal_metadata_.Clear();
}

bool VisualPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.VisualPath)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metamoto.types.VisualPathPoint path_points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_path_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.VisualPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.VisualPath)
  return false;
#undef DO_
}

void VisualPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.VisualPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.VisualPathPoint path_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->path_points(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.VisualPath)
}

::google::protobuf::uint8* VisualPath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.VisualPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metamoto.types.VisualPathPoint path_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->path_points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.VisualPath)
  return target;
}

size_t VisualPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.VisualPath)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.VisualPathPoint path_points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->path_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->path_points(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisualPath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.VisualPath)
  GOOGLE_DCHECK_NE(&from, this);
  const VisualPath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VisualPath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.VisualPath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.VisualPath)
    MergeFrom(*source);
  }
}

void VisualPath::MergeFrom(const VisualPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.VisualPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_points_.MergeFrom(from.path_points_);
}

void VisualPath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.VisualPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisualPath::CopyFrom(const VisualPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.VisualPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualPath::IsInitialized() const {
  return true;
}

void VisualPath::Swap(VisualPath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisualPath::InternalSwap(VisualPath* other) {
  using std::swap;
  CastToBase(&path_points_)->InternalSwap(CastToBase(&other->path_points_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VisualPath::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fvisual_5fpath_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::VisualPathPoint* Arena::CreateMaybeMessage< ::metamoto::types::VisualPathPoint >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::VisualPathPoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::VisualPath* Arena::CreateMaybeMessage< ::metamoto::types::VisualPath >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::VisualPath >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
