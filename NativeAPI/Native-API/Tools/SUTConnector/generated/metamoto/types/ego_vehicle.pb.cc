// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/ego_vehicle.proto

#include "metamoto/types/ego_vehicle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fstruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fstruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ListValue;
}  // namespace protobuf_google_2fprotobuf_2fstruct_2eproto
namespace protobuf_metamoto_2ftypes_2fasset_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fasset_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Asset;
}  // namespace protobuf_metamoto_2ftypes_2fasset_2eproto
namespace protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemUnderTest_Container;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VehicleDynamics_ContactPatch;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VehicleDynamics_Skeleton;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Controller_RangesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EgoVehicle_RangesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SensorMount_MountPoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SensorMount_RangesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Sensor_RangesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SystemUnderTest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VehicleDynamics_RangesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_SensorMount;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Controller;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_Sensor;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_VehicleDynamics;
}  // namespace protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto
namespace protobuf_metamoto_2ftypes_2fnormal_5fdistribution_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fnormal_5fdistribution_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NormalDistribution;
}  // namespace protobuf_metamoto_2ftypes_2fnormal_5fdistribution_2eproto
namespace protobuf_metamoto_2ftypes_2fpose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fpose_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Pose;
}  // namespace protobuf_metamoto_2ftypes_2fpose_2eproto
namespace protobuf_metamoto_2ftypes_2frange_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2frange_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Range;
}  // namespace protobuf_metamoto_2ftypes_2frange_2eproto
namespace protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VehicleInstance_Body;
}  // namespace protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto
namespace protobuf_metamoto_2ftypes_2fversion_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2fversion_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Version;
}  // namespace protobuf_metamoto_2ftypes_2fversion_2eproto
namespace metamoto {
namespace types {
class SystemUnderTest_ContainerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemUnderTest_Container>
      _instance;
} _SystemUnderTest_Container_default_instance_;
class SystemUnderTestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemUnderTest>
      _instance;
} _SystemUnderTest_default_instance_;
class Controller_RangesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Controller_RangesEntry_DoNotUse>
      _instance;
} _Controller_RangesEntry_DoNotUse_default_instance_;
class ControllerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Controller>
      _instance;
} _Controller_default_instance_;
class Sensor_RangesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sensor_RangesEntry_DoNotUse>
      _instance;
} _Sensor_RangesEntry_DoNotUse_default_instance_;
class SensorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sensor>
      _instance;
} _Sensor_default_instance_;
class SensorMount_MountPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorMount_MountPoint>
      _instance;
} _SensorMount_MountPoint_default_instance_;
class SensorMount_RangesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorMount_RangesEntry_DoNotUse>
      _instance;
} _SensorMount_RangesEntry_DoNotUse_default_instance_;
class SensorMountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorMount>
      _instance;
} _SensorMount_default_instance_;
class VehicleDynamics_ContactPatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleDynamics_ContactPatch>
      _instance;
} _VehicleDynamics_ContactPatch_default_instance_;
class VehicleDynamics_SkeletonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleDynamics_Skeleton>
      _instance;
} _VehicleDynamics_Skeleton_default_instance_;
class VehicleDynamics_RangesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleDynamics_RangesEntry_DoNotUse>
      _instance;
} _VehicleDynamics_RangesEntry_DoNotUse_default_instance_;
class VehicleDynamicsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleDynamics>
      _instance;
} _VehicleDynamics_default_instance_;
class EgoVehicle_RangesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EgoVehicle_RangesEntry_DoNotUse>
      _instance;
} _EgoVehicle_RangesEntry_DoNotUse_default_instance_;
class EgoVehicleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EgoVehicle>
      _instance;
} _EgoVehicle_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto {
static void InitDefaultsSystemUnderTest_Container() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_SystemUnderTest_Container_default_instance_;
    new (ptr) ::metamoto::types::SystemUnderTest_Container();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::SystemUnderTest_Container::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemUnderTest_Container =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemUnderTest_Container}, {}};

static void InitDefaultsSystemUnderTest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_SystemUnderTest_default_instance_;
    new (ptr) ::metamoto::types::SystemUnderTest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::SystemUnderTest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SystemUnderTest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSystemUnderTest}, {
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_SystemUnderTest_Container.base,}};

static void InitDefaultsController_RangesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Controller_RangesEntry_DoNotUse_default_instance_;
    new (ptr) ::metamoto::types::Controller_RangesEntry_DoNotUse();
  }
  ::metamoto::types::Controller_RangesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Controller_RangesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsController_RangesEntry_DoNotUse}, {
      &protobuf_metamoto_2ftypes_2frange_2eproto::scc_info_Range.base,}};

static void InitDefaultsController() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Controller_default_instance_;
    new (ptr) ::metamoto::types::Controller();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Controller::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Controller =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsController}, {
      &protobuf_metamoto_2ftypes_2fversion_2eproto::scc_info_Version.base,
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_SystemUnderTest.base,
      &protobuf_metamoto_2ftypes_2fnormal_5fdistribution_2eproto::scc_info_NormalDistribution.base,
      &protobuf_google_2fprotobuf_2fstruct_2eproto::scc_info_ListValue.base,
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_Controller_RangesEntry_DoNotUse.base,}};

static void InitDefaultsSensor_RangesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Sensor_RangesEntry_DoNotUse_default_instance_;
    new (ptr) ::metamoto::types::Sensor_RangesEntry_DoNotUse();
  }
  ::metamoto::types::Sensor_RangesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Sensor_RangesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSensor_RangesEntry_DoNotUse}, {
      &protobuf_metamoto_2ftypes_2frange_2eproto::scc_info_Range.base,}};

static void InitDefaultsSensor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_Sensor_default_instance_;
    new (ptr) ::metamoto::types::Sensor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::Sensor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_Sensor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsSensor}, {
      &protobuf_metamoto_2ftypes_2fversion_2eproto::scc_info_Version.base,
      &protobuf_metamoto_2ftypes_2fpose_2eproto::scc_info_Pose.base,
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_SystemUnderTest.base,
      &protobuf_metamoto_2ftypes_2fnormal_5fdistribution_2eproto::scc_info_NormalDistribution.base,
      &protobuf_google_2fprotobuf_2fstruct_2eproto::scc_info_ListValue.base,
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_Sensor_RangesEntry_DoNotUse.base,}};

static void InitDefaultsSensorMount_MountPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_SensorMount_MountPoint_default_instance_;
    new (ptr) ::metamoto::types::SensorMount_MountPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::SensorMount_MountPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SensorMount_MountPoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSensorMount_MountPoint}, {
      &protobuf_metamoto_2ftypes_2fpose_2eproto::scc_info_Pose.base,}};

static void InitDefaultsSensorMount_RangesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_SensorMount_RangesEntry_DoNotUse_default_instance_;
    new (ptr) ::metamoto::types::SensorMount_RangesEntry_DoNotUse();
  }
  ::metamoto::types::SensorMount_RangesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SensorMount_RangesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSensorMount_RangesEntry_DoNotUse}, {
      &protobuf_metamoto_2ftypes_2frange_2eproto::scc_info_Range.base,}};

static void InitDefaultsSensorMount() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_SensorMount_default_instance_;
    new (ptr) ::metamoto::types::SensorMount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::SensorMount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SensorMount =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSensorMount}, {
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_SensorMount_MountPoint.base,
      &protobuf_metamoto_2ftypes_2fpose_2eproto::scc_info_Pose.base,
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_SensorMount_RangesEntry_DoNotUse.base,}};

static void InitDefaultsVehicleDynamics_ContactPatch() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_VehicleDynamics_ContactPatch_default_instance_;
    new (ptr) ::metamoto::types::VehicleDynamics_ContactPatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::VehicleDynamics_ContactPatch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VehicleDynamics_ContactPatch =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVehicleDynamics_ContactPatch}, {}};

static void InitDefaultsVehicleDynamics_Skeleton() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_VehicleDynamics_Skeleton_default_instance_;
    new (ptr) ::metamoto::types::VehicleDynamics_Skeleton();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::VehicleDynamics_Skeleton::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VehicleDynamics_Skeleton =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVehicleDynamics_Skeleton}, {}};

static void InitDefaultsVehicleDynamics_RangesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_VehicleDynamics_RangesEntry_DoNotUse_default_instance_;
    new (ptr) ::metamoto::types::VehicleDynamics_RangesEntry_DoNotUse();
  }
  ::metamoto::types::VehicleDynamics_RangesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VehicleDynamics_RangesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVehicleDynamics_RangesEntry_DoNotUse}, {
      &protobuf_metamoto_2ftypes_2frange_2eproto::scc_info_Range.base,}};

static void InitDefaultsVehicleDynamics() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_VehicleDynamics_default_instance_;
    new (ptr) ::metamoto::types::VehicleDynamics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::VehicleDynamics::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_VehicleDynamics =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsVehicleDynamics}, {
      &protobuf_metamoto_2ftypes_2fversion_2eproto::scc_info_Version.base,
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_SystemUnderTest.base,
      &protobuf_google_2fprotobuf_2fstruct_2eproto::scc_info_ListValue.base,
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_VehicleDynamics_ContactPatch.base,
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_VehicleDynamics_Skeleton.base,
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_VehicleDynamics_RangesEntry_DoNotUse.base,}};

static void InitDefaultsEgoVehicle_RangesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_EgoVehicle_RangesEntry_DoNotUse_default_instance_;
    new (ptr) ::metamoto::types::EgoVehicle_RangesEntry_DoNotUse();
  }
  ::metamoto::types::EgoVehicle_RangesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EgoVehicle_RangesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEgoVehicle_RangesEntry_DoNotUse}, {
      &protobuf_metamoto_2ftypes_2frange_2eproto::scc_info_Range.base,}};

static void InitDefaultsEgoVehicle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metamoto::types::_EgoVehicle_default_instance_;
    new (ptr) ::metamoto::types::EgoVehicle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metamoto::types::EgoVehicle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_EgoVehicle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsEgoVehicle}, {
      &protobuf_metamoto_2ftypes_2fversion_2eproto::scc_info_Version.base,
      &protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::scc_info_VehicleInstance_Body.base,
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_Controller.base,
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_Sensor.base,
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_SensorMount.base,
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_VehicleDynamics.base,
      &protobuf_metamoto_2ftypes_2fasset_2eproto::scc_info_Asset.base,
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_EgoVehicle_RangesEntry_DoNotUse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SystemUnderTest_Container.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemUnderTest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Controller_RangesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Controller.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sensor_RangesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sensor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorMount_MountPoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorMount_RangesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorMount.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleDynamics_ContactPatch.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleDynamics_Skeleton.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleDynamics_RangesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleDynamics.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EgoVehicle_RangesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EgoVehicle.base);
}

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SystemUnderTest_Container, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SystemUnderTest_Container, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SystemUnderTest_Container, command_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SystemUnderTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SystemUnderTest, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SystemUnderTest, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SystemUnderTest, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SystemUnderTest, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SystemUnderTest, hosts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SystemUnderTest, ports_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SystemUnderTest, containers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Controller_RangesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Controller_RangesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Controller_RangesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Controller_RangesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Controller, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Controller, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Controller, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Controller, internal_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Controller, read_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Controller, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Controller, disabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Controller, sut_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Controller, publish_topics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Controller, data_latency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Controller, parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Controller, ranges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor_RangesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor_RangesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor_RangesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor_RangesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor, internal_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor, prefab_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor, model_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor, read_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor, disabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor, sensor_mount_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor, mount_point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor, sut_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor, publish_topics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor, data_latency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor, parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor, save_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::Sensor, ranges_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SensorMount_MountPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SensorMount_MountPoint, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SensorMount_MountPoint, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SensorMount_MountPoint, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SensorMount_RangesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SensorMount_RangesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SensorMount_RangesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SensorMount_RangesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SensorMount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SensorMount, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SensorMount, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SensorMount, prefab_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SensorMount, read_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SensorMount, mount_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SensorMount, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::SensorMount, ranges_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics_ContactPatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics_ContactPatch, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics_ContactPatch, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics_ContactPatch, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics_ContactPatch, sampling_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics_ContactPatch, edge_points_weight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics_Skeleton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics_Skeleton, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics_Skeleton, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics_Skeleton, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics_Skeleton, axles_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics_Skeleton, axle_wheels_diameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics_RangesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics_RangesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics_RangesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics_RangesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics, internal_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics, read_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics, disabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics, sut_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics, parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics, contact_patch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics, skeletons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::VehicleDynamics, ranges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EgoVehicle_RangesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EgoVehicle_RangesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EgoVehicle_RangesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EgoVehicle_RangesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EgoVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EgoVehicle, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EgoVehicle, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EgoVehicle, model_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EgoVehicle, read_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EgoVehicle, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EgoVehicle, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EgoVehicle, controllers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EgoVehicle, sensors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EgoVehicle, sensor_mounts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EgoVehicle, vehicle_dynamics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EgoVehicle, assets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::metamoto::types::EgoVehicle, ranges_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metamoto::types::SystemUnderTest_Container)},
  { 7, -1, sizeof(::metamoto::types::SystemUnderTest)},
  { 19, 26, sizeof(::metamoto::types::Controller_RangesEntry_DoNotUse)},
  { 28, -1, sizeof(::metamoto::types::Controller)},
  { 44, 51, sizeof(::metamoto::types::Sensor_RangesEntry_DoNotUse)},
  { 53, -1, sizeof(::metamoto::types::Sensor)},
  { 76, -1, sizeof(::metamoto::types::SensorMount_MountPoint)},
  { 84, 91, sizeof(::metamoto::types::SensorMount_RangesEntry_DoNotUse)},
  { 93, -1, sizeof(::metamoto::types::SensorMount)},
  { 105, -1, sizeof(::metamoto::types::VehicleDynamics_ContactPatch)},
  { 115, -1, sizeof(::metamoto::types::VehicleDynamics_Skeleton)},
  { 125, 132, sizeof(::metamoto::types::VehicleDynamics_RangesEntry_DoNotUse)},
  { 134, -1, sizeof(::metamoto::types::VehicleDynamics)},
  { 150, 157, sizeof(::metamoto::types::EgoVehicle_RangesEntry_DoNotUse)},
  { 159, -1, sizeof(::metamoto::types::EgoVehicle)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_SystemUnderTest_Container_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_SystemUnderTest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Controller_RangesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Controller_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Sensor_RangesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_Sensor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_SensorMount_MountPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_SensorMount_RangesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_SensorMount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_VehicleDynamics_ContactPatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_VehicleDynamics_Skeleton_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_VehicleDynamics_RangesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_VehicleDynamics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_EgoVehicle_RangesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metamoto::types::_EgoVehicle_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "metamoto/types/ego_vehicle.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n metamoto/types/ego_vehicle.proto\022\016meta"
      "moto.types\032\034google/protobuf/struct.proto"
      "\032\032metamoto/types/asset.proto\032(metamoto/t"
      "ypes/normal_distribution.proto\032\031metamoto"
      "/types/pose.proto\032\032metamoto/types/range."
      "proto\032%metamoto/types/vehicle_instance.p"
      "roto\032\034metamoto/types/version.proto\"\327\001\n\017S"
      "ystemUnderTest\022\014\n\004host\030\001 \001(\t\022\014\n\004port\030\002 \001"
      "(\005\022\r\n\005image\030\003 \001(\t\022\017\n\007command\030\004 \003(\t\022\r\n\005ho"
      "sts\030\005 \003(\t\022\r\n\005ports\030\006 \003(\005\022=\n\ncontainers\030\007"
      " \003(\0132).metamoto.types.SystemUnderTest.Co"
      "ntainer\032+\n\tContainer\022\r\n\005image\030\001 \001(\t\022\017\n\007c"
      "ommand\030\002 \003(\t\"\277\003\n\nController\022\n\n\002id\030\001 \001(\t\022"
      "\024\n\014display_name\030\002 \001(\t\022\025\n\rinternal_name\030\003"
      " \001(\t\022\021\n\tread_only\030\004 \001(\010\022(\n\007version\030\005 \001(\013"
      "2\027.metamoto.types.Version\022\020\n\010disabled\030\006 "
      "\001(\010\022,\n\003sut\030\007 \001(\0132\037.metamoto.types.System"
      "UnderTest\022\026\n\016publish_topics\030\010 \003(\t\0228\n\014dat"
      "a_latency\030\t \001(\0132\".metamoto.types.NormalD"
      "istribution\022+\n\nparameters\030\n \001(\0132\027.google"
      ".protobuf.Struct\0226\n\006ranges\030d \003(\0132&.metam"
      "oto.types.Controller.RangesEntry\032D\n\013Rang"
      "esEntry\022\013\n\003key\030\001 \001(\t\022$\n\005value\030\002 \001(\0132\025.me"
      "tamoto.types.Range:\0028\001\"\332\004\n\006Sensor\022\n\n\002id\030"
      "\001 \001(\t\022\024\n\014display_name\030\002 \001(\t\022\025\n\rinternal_"
      "name\030\003 \001(\t\022\023\n\013prefab_name\030\004 \001(\t\022\022\n\nmodel"
      "_name\030\021 \001(\t\022\021\n\tread_only\030\005 \001(\010\022(\n\007versio"
      "n\030\006 \001(\0132\027.metamoto.types.Version\022\020\n\010disa"
      "bled\030\007 \001(\010\022\"\n\004pose\030\010 \001(\0132\024.metamoto.type"
      "s.Pose\022\027\n\017sensor_mount_id\030\t \001(\t\022\026\n\016mount"
      "_point_id\030\n \001(\t\022,\n\003sut\030\013 \001(\0132\037.metamoto."
      "types.SystemUnderTest\022\026\n\016publish_topics\030"
      "\014 \003(\t\0228\n\014data_latency\030\r \001(\0132\".metamoto.t"
      "ypes.NormalDistribution\022+\n\nparameters\030\016 "
      "\001(\0132\027.google.protobuf.Struct\022\020\n\010priority"
      "\030\017 \001(\r\022\021\n\tsave_data\030\020 \001(\010\0222\n\006ranges\030d \003("
      "\0132\".metamoto.types.Sensor.RangesEntry\032D\n"
      "\013RangesEntry\022\013\n\003key\030\001 \001(\t\022$\n\005value\030\002 \001(\013"
      "2\025.metamoto.types.Range:\0028\001\"\364\003\n\013SensorMo"
      "unt\022\n\n\002id\030\001 \001(\t\022\024\n\014display_name\030\002 \001(\t\022\023\n"
      "\013prefab_name\030\003 \001(\t\022\021\n\tread_only\030\004 \001(\010\022<\n"
      "\014mount_points\030\005 \003(\0132&.metamoto.types.Sen"
      "sorMount.MountPoint\022\"\n\004pose\030\006 \001(\0132\024.meta"
      "moto.types.Pose\0227\n\006ranges\030d \003(\0132\'.metamo"
      "to.types.SensorMount.RangesEntry\032\271\001\n\nMou"
      "ntPoint\022\n\n\002id\030\001 \001(\t\0229\n\004type\030\002 \001(\0162+.meta"
      "moto.types.SensorMount.MountPoint.Type\022\""
      "\n\004pose\030\003 \001(\0132\024.metamoto.types.Pose\"@\n\004Ty"
      "pe\022\013\n\007UNKNOWN\020\000\022\t\n\005OTHER\020\001\022\n\n\006CAMERA\020\002\022\t"
      "\n\005LIDAR\020\003\022\t\n\005RADAR\020\004\032D\n\013RangesEntry\022\013\n\003k"
      "ey\030\001 \001(\t\022$\n\005value\030\002 \001(\0132\025.metamoto.types"
      ".Range:\0028\001\"\266\006\n\017VehicleDynamics\022\n\n\002id\030\001 \001"
      "(\t\022\024\n\014display_name\030\002 \001(\t\022\025\n\rinternal_nam"
      "e\030\003 \001(\t\022\021\n\tread_only\030\004 \001(\010\022(\n\007version\030\005 "
      "\001(\0132\027.metamoto.types.Version\022\020\n\010disabled"
      "\030\006 \001(\010\022,\n\003sut\030\007 \001(\0132\037.metamoto.types.Sys"
      "temUnderTest\022+\n\nparameters\030\010 \001(\0132\027.googl"
      "e.protobuf.Struct\022C\n\rcontact_patch\030\t \001(\013"
      "2,.metamoto.types.VehicleDynamics.Contac"
      "tPatch\022;\n\tskeletons\030\n \003(\0132(.metamoto.typ"
      "es.VehicleDynamics.Skeleton\022;\n\006ranges\030d "
      "\003(\0132+.metamoto.types.VehicleDynamics.Ran"
      "gesEntry\032\312\001\n\014ContactPatch\022A\n\005shape\030\001 \001(\016"
      "22.metamoto.types.VehicleDynamics.Contac"
      "tPatch.Shape\022\016\n\006length\030\002 \001(\002\022\r\n\005width\030\003 "
      "\001(\002\022\027\n\017sampling_points\030\004 \001(\005\022\032\n\022edge_poi"
      "nts_weight\030\005 \001(\002\"#\n\005Shape\022\r\n\tRECTANGLE\020\000"
      "\022\013\n\007ELLIPSE\020\001\032n\n\010Skeleton\022\016\n\006length\030\001 \001("
      "\002\022\r\n\005width\030\002 \001(\002\022\016\n\006height\030\003 \001(\002\022\024\n\014axle"
      "s_offset\030\004 \003(\002\022\035\n\025axle_wheels_diameters\030"
      "\005 \003(\002\032D\n\013RangesEntry\022\013\n\003key\030\001 \001(\t\022$\n\005val"
      "ue\030\002 \001(\0132\025.metamoto.types.Range:\0028\001\"\241\004\n\n"
      "EgoVehicle\022\n\n\002id\030\001 \001(\t\022\024\n\014display_name\030\002"
      " \001(\t\022\022\n\nmodel_name\030\003 \001(\t\022\021\n\tread_only\030\004 "
      "\001(\010\022(\n\007version\030\013 \001(\0132\027.metamoto.types.Ve"
      "rsion\0222\n\004body\030\005 \001(\0132$.metamoto.types.Veh"
      "icleInstance.Body\022/\n\013controllers\030\006 \003(\0132\032"
      ".metamoto.types.Controller\022\'\n\007sensors\030\007 "
      "\003(\0132\026.metamoto.types.Sensor\0222\n\rsensor_mo"
      "unts\030\010 \003(\0132\033.metamoto.types.SensorMount\022"
      "9\n\020vehicle_dynamics\030\t \001(\0132\037.metamoto.typ"
      "es.VehicleDynamics\022%\n\006assets\030\n \003(\0132\025.met"
      "amoto.types.Asset\0226\n\006ranges\030d \003(\0132&.meta"
      "moto.types.EgoVehicle.RangesEntry\032D\n\013Ran"
      "gesEntry\022\013\n\003key\030\001 \001(\t\022$\n\005value\030\002 \001(\0132\025.m"
      "etamoto.types.Range:\0028\001B\021\252\002\016Metamoto.Typ"
      "esb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3450);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metamoto/types/ego_vehicle.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fasset_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fnormal_5fdistribution_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fpose_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2frange_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fvehicle_5finstance_2eproto::AddDescriptors();
  ::protobuf_metamoto_2ftypes_2fversion_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto
namespace metamoto {
namespace types {
const ::google::protobuf::EnumDescriptor* SensorMount_MountPoint_Type_descriptor() {
  protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_enum_descriptors[0];
}
bool SensorMount_MountPoint_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SensorMount_MountPoint_Type SensorMount_MountPoint::UNKNOWN;
const SensorMount_MountPoint_Type SensorMount_MountPoint::OTHER;
const SensorMount_MountPoint_Type SensorMount_MountPoint::CAMERA;
const SensorMount_MountPoint_Type SensorMount_MountPoint::LIDAR;
const SensorMount_MountPoint_Type SensorMount_MountPoint::RADAR;
const SensorMount_MountPoint_Type SensorMount_MountPoint::Type_MIN;
const SensorMount_MountPoint_Type SensorMount_MountPoint::Type_MAX;
const int SensorMount_MountPoint::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VehicleDynamics_ContactPatch_Shape_descriptor() {
  protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_enum_descriptors[1];
}
bool VehicleDynamics_ContactPatch_Shape_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleDynamics_ContactPatch_Shape VehicleDynamics_ContactPatch::RECTANGLE;
const VehicleDynamics_ContactPatch_Shape VehicleDynamics_ContactPatch::ELLIPSE;
const VehicleDynamics_ContactPatch_Shape VehicleDynamics_ContactPatch::Shape_MIN;
const VehicleDynamics_ContactPatch_Shape VehicleDynamics_ContactPatch::Shape_MAX;
const int VehicleDynamics_ContactPatch::Shape_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void SystemUnderTest_Container::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemUnderTest_Container::kImageFieldNumber;
const int SystemUnderTest_Container::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemUnderTest_Container::SystemUnderTest_Container()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_SystemUnderTest_Container.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.SystemUnderTest.Container)
}
SystemUnderTest_Container::SystemUnderTest_Container(const SystemUnderTest_Container& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      command_(from.command_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  // @@protoc_insertion_point(copy_constructor:metamoto.types.SystemUnderTest.Container)
}

void SystemUnderTest_Container::SharedCtor() {
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SystemUnderTest_Container::~SystemUnderTest_Container() {
  // @@protoc_insertion_point(destructor:metamoto.types.SystemUnderTest.Container)
  SharedDtor();
}

void SystemUnderTest_Container::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SystemUnderTest_Container::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SystemUnderTest_Container::descriptor() {
  ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SystemUnderTest_Container& SystemUnderTest_Container::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_SystemUnderTest_Container.base);
  return *internal_default_instance();
}


void SystemUnderTest_Container::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.SystemUnderTest.Container)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_.Clear();
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SystemUnderTest_Container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.SystemUnderTest.Container)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.SystemUnderTest.Container.image"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string command = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_command()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->command(this->command_size() - 1).data(),
            static_cast<int>(this->command(this->command_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.SystemUnderTest.Container.command"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.SystemUnderTest.Container)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.SystemUnderTest.Container)
  return false;
#undef DO_
}

void SystemUnderTest_Container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.SystemUnderTest.Container)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image = 1;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SystemUnderTest.Container.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image(), output);
  }

  // repeated string command = 2;
  for (int i = 0, n = this->command_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command(i).data(), static_cast<int>(this->command(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SystemUnderTest.Container.command");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->command(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.SystemUnderTest.Container)
}

::google::protobuf::uint8* SystemUnderTest_Container::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.SystemUnderTest.Container)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image = 1;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SystemUnderTest.Container.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image(), target);
  }

  // repeated string command = 2;
  for (int i = 0, n = this->command_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command(i).data(), static_cast<int>(this->command(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SystemUnderTest.Container.command");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->command(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.SystemUnderTest.Container)
  return target;
}

size_t SystemUnderTest_Container::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.SystemUnderTest.Container)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string command = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->command_size());
  for (int i = 0, n = this->command_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->command(i));
  }

  // string image = 1;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemUnderTest_Container::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.SystemUnderTest.Container)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemUnderTest_Container* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemUnderTest_Container>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.SystemUnderTest.Container)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.SystemUnderTest.Container)
    MergeFrom(*source);
  }
}

void SystemUnderTest_Container::MergeFrom(const SystemUnderTest_Container& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.SystemUnderTest.Container)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_.MergeFrom(from.command_);
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
}

void SystemUnderTest_Container::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.SystemUnderTest.Container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemUnderTest_Container::CopyFrom(const SystemUnderTest_Container& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.SystemUnderTest.Container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemUnderTest_Container::IsInitialized() const {
  return true;
}

void SystemUnderTest_Container::Swap(SystemUnderTest_Container* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemUnderTest_Container::InternalSwap(SystemUnderTest_Container* other) {
  using std::swap;
  command_.InternalSwap(CastToBase(&other->command_));
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SystemUnderTest_Container::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SystemUnderTest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemUnderTest::kHostFieldNumber;
const int SystemUnderTest::kPortFieldNumber;
const int SystemUnderTest::kImageFieldNumber;
const int SystemUnderTest::kCommandFieldNumber;
const int SystemUnderTest::kHostsFieldNumber;
const int SystemUnderTest::kPortsFieldNumber;
const int SystemUnderTest::kContainersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemUnderTest::SystemUnderTest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_SystemUnderTest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.SystemUnderTest)
}
SystemUnderTest::SystemUnderTest(const SystemUnderTest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      command_(from.command_),
      hosts_(from.hosts_),
      ports_(from.ports_),
      containers_(from.containers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:metamoto.types.SystemUnderTest)
}

void SystemUnderTest::SharedCtor() {
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

SystemUnderTest::~SystemUnderTest() {
  // @@protoc_insertion_point(destructor:metamoto.types.SystemUnderTest)
  SharedDtor();
}

void SystemUnderTest::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SystemUnderTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SystemUnderTest::descriptor() {
  ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SystemUnderTest& SystemUnderTest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_SystemUnderTest.base);
  return *internal_default_instance();
}


void SystemUnderTest::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.SystemUnderTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_.Clear();
  hosts_.Clear();
  ports_.Clear();
  containers_.Clear();
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  _internal_metadata_.Clear();
}

bool SystemUnderTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.SystemUnderTest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.SystemUnderTest.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.SystemUnderTest.image"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string command = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_command()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->command(this->command_size() - 1).data(),
            static_cast<int>(this->command(this->command_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.SystemUnderTest.command"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string hosts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hosts()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hosts(this->hosts_size() - 1).data(),
            static_cast<int>(this->hosts(this->hosts_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.SystemUnderTest.hosts"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 ports = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ports())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_ports())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.SystemUnderTest.Container containers = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_containers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.SystemUnderTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.SystemUnderTest)
  return false;
#undef DO_
}

void SystemUnderTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.SystemUnderTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SystemUnderTest.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // string image = 3;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SystemUnderTest.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->image(), output);
  }

  // repeated string command = 4;
  for (int i = 0, n = this->command_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command(i).data(), static_cast<int>(this->command(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SystemUnderTest.command");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->command(i), output);
  }

  // repeated string hosts = 5;
  for (int i = 0, n = this->hosts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hosts(i).data(), static_cast<int>(this->hosts(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SystemUnderTest.hosts");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->hosts(i), output);
  }

  // repeated int32 ports = 6;
  if (this->ports_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _ports_cached_byte_size_));
  }
  for (int i = 0, n = this->ports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->ports(i), output);
  }

  // repeated .metamoto.types.SystemUnderTest.Container containers = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->containers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->containers(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.SystemUnderTest)
}

::google::protobuf::uint8* SystemUnderTest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.SystemUnderTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SystemUnderTest.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // string image = 3;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SystemUnderTest.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->image(), target);
  }

  // repeated string command = 4;
  for (int i = 0, n = this->command_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command(i).data(), static_cast<int>(this->command(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SystemUnderTest.command");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->command(i), target);
  }

  // repeated string hosts = 5;
  for (int i = 0, n = this->hosts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hosts(i).data(), static_cast<int>(this->hosts(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SystemUnderTest.hosts");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->hosts(i), target);
  }

  // repeated int32 ports = 6;
  if (this->ports_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _ports_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ports_, target);
  }

  // repeated .metamoto.types.SystemUnderTest.Container containers = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->containers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->containers(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.SystemUnderTest)
  return target;
}

size_t SystemUnderTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.SystemUnderTest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string command = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->command_size());
  for (int i = 0, n = this->command_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->command(i));
  }

  // repeated string hosts = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hosts_size());
  for (int i = 0, n = this->hosts_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hosts(i));
  }

  // repeated int32 ports = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->ports_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ports_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .metamoto.types.SystemUnderTest.Container containers = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->containers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->containers(static_cast<int>(i)));
    }
  }

  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string image = 3;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemUnderTest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.SystemUnderTest)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemUnderTest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemUnderTest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.SystemUnderTest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.SystemUnderTest)
    MergeFrom(*source);
  }
}

void SystemUnderTest::MergeFrom(const SystemUnderTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.SystemUnderTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_.MergeFrom(from.command_);
  hosts_.MergeFrom(from.hosts_);
  ports_.MergeFrom(from.ports_);
  containers_.MergeFrom(from.containers_);
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void SystemUnderTest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.SystemUnderTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemUnderTest::CopyFrom(const SystemUnderTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.SystemUnderTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemUnderTest::IsInitialized() const {
  return true;
}

void SystemUnderTest::Swap(SystemUnderTest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemUnderTest::InternalSwap(SystemUnderTest* other) {
  using std::swap;
  command_.InternalSwap(CastToBase(&other->command_));
  hosts_.InternalSwap(CastToBase(&other->hosts_));
  ports_.InternalSwap(&other->ports_);
  CastToBase(&containers_)->InternalSwap(CastToBase(&other->containers_));
  host_.Swap(&other->host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SystemUnderTest::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Controller_RangesEntry_DoNotUse::Controller_RangesEntry_DoNotUse() {}
Controller_RangesEntry_DoNotUse::Controller_RangesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Controller_RangesEntry_DoNotUse::MergeFrom(const Controller_RangesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Controller_RangesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[2];
}
void Controller_RangesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Controller::InitAsDefaultInstance() {
  ::metamoto::types::_Controller_default_instance_._instance.get_mutable()->version_ = const_cast< ::metamoto::types::Version*>(
      ::metamoto::types::Version::internal_default_instance());
  ::metamoto::types::_Controller_default_instance_._instance.get_mutable()->sut_ = const_cast< ::metamoto::types::SystemUnderTest*>(
      ::metamoto::types::SystemUnderTest::internal_default_instance());
  ::metamoto::types::_Controller_default_instance_._instance.get_mutable()->data_latency_ = const_cast< ::metamoto::types::NormalDistribution*>(
      ::metamoto::types::NormalDistribution::internal_default_instance());
  ::metamoto::types::_Controller_default_instance_._instance.get_mutable()->parameters_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
}
void Controller::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
}
void Controller::clear_data_latency() {
  if (GetArenaNoVirtual() == NULL && data_latency_ != NULL) {
    delete data_latency_;
  }
  data_latency_ = NULL;
}
void Controller::clear_parameters() {
  if (GetArenaNoVirtual() == NULL && parameters_ != NULL) {
    delete parameters_;
  }
  parameters_ = NULL;
}
void Controller::clear_ranges() {
  ranges_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Controller::kIdFieldNumber;
const int Controller::kDisplayNameFieldNumber;
const int Controller::kInternalNameFieldNumber;
const int Controller::kReadOnlyFieldNumber;
const int Controller::kVersionFieldNumber;
const int Controller::kDisabledFieldNumber;
const int Controller::kSutFieldNumber;
const int Controller::kPublishTopicsFieldNumber;
const int Controller::kDataLatencyFieldNumber;
const int Controller::kParametersFieldNumber;
const int Controller::kRangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Controller::Controller()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_Controller.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Controller)
}
Controller::Controller(const Controller& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      publish_topics_(from.publish_topics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ranges_.MergeFrom(from.ranges_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  internal_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.internal_name().size() > 0) {
    internal_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_name_);
  }
  if (from.has_version()) {
    version_ = new ::metamoto::types::Version(*from.version_);
  } else {
    version_ = NULL;
  }
  if (from.has_sut()) {
    sut_ = new ::metamoto::types::SystemUnderTest(*from.sut_);
  } else {
    sut_ = NULL;
  }
  if (from.has_data_latency()) {
    data_latency_ = new ::metamoto::types::NormalDistribution(*from.data_latency_);
  } else {
    data_latency_ = NULL;
  }
  if (from.has_parameters()) {
    parameters_ = new ::google::protobuf::Struct(*from.parameters_);
  } else {
    parameters_ = NULL;
  }
  ::memcpy(&read_only_, &from.read_only_,
    static_cast<size_t>(reinterpret_cast<char*>(&disabled_) -
    reinterpret_cast<char*>(&read_only_)) + sizeof(disabled_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Controller)
}

void Controller::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disabled_) -
      reinterpret_cast<char*>(&version_)) + sizeof(disabled_));
}

Controller::~Controller() {
  // @@protoc_insertion_point(destructor:metamoto.types.Controller)
  SharedDtor();
}

void Controller::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete sut_;
  if (this != internal_default_instance()) delete data_latency_;
  if (this != internal_default_instance()) delete parameters_;
}

void Controller::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Controller::descriptor() {
  ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Controller& Controller::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_Controller.base);
  return *internal_default_instance();
}


void Controller::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Controller)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publish_topics_.Clear();
  ranges_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
  if (GetArenaNoVirtual() == NULL && sut_ != NULL) {
    delete sut_;
  }
  sut_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_latency_ != NULL) {
    delete data_latency_;
  }
  data_latency_ = NULL;
  if (GetArenaNoVirtual() == NULL && parameters_ != NULL) {
    delete parameters_;
  }
  parameters_ = NULL;
  ::memset(&read_only_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disabled_) -
      reinterpret_cast<char*>(&read_only_)) + sizeof(disabled_));
  _internal_metadata_.Clear();
}

bool Controller::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Controller)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Controller.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Controller.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string internal_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internal_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->internal_name().data(), static_cast<int>(this->internal_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Controller.internal_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool read_only = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Version version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disabled = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.SystemUnderTest sut = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sut()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string publish_topics = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_publish_topics()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->publish_topics(this->publish_topics_size() - 1).data(),
            static_cast<int>(this->publish_topics(this->publish_topics_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Controller.publish_topics"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.NormalDistribution data_latency = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_latency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct parameters = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .metamoto.types.Range> ranges = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          Controller_RangesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Controller_RangesEntry_DoNotUse,
              ::std::string, ::metamoto::types::Range,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::metamoto::types::Range > > parser(&ranges_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Controller.RangesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Controller)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Controller)
  return false;
#undef DO_
}

void Controller::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Controller)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Controller.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Controller.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // string internal_name = 3;
  if (this->internal_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internal_name().data(), static_cast<int>(this->internal_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Controller.internal_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->internal_name(), output);
  }

  // bool read_only = 4;
  if (this->read_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->read_only(), output);
  }

  // .metamoto.types.Version version = 5;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_version(), output);
  }

  // bool disabled = 6;
  if (this->disabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->disabled(), output);
  }

  // .metamoto.types.SystemUnderTest sut = 7;
  if (this->has_sut()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_sut(), output);
  }

  // repeated string publish_topics = 8;
  for (int i = 0, n = this->publish_topics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publish_topics(i).data(), static_cast<int>(this->publish_topics(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Controller.publish_topics");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->publish_topics(i), output);
  }

  // .metamoto.types.NormalDistribution data_latency = 9;
  if (this->has_data_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_data_latency(), output);
  }

  // .google.protobuf.Struct parameters = 10;
  if (this->has_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_parameters(), output);
  }

  // map<string, .metamoto.types.Range> ranges = 100;
  if (!this->ranges().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Controller.RangesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ranges().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ranges().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Controller_RangesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ranges_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            100, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Controller_RangesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it) {
        entry.reset(ranges_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            100, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Controller)
}

::google::protobuf::uint8* Controller::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Controller)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Controller.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Controller.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // string internal_name = 3;
  if (this->internal_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internal_name().data(), static_cast<int>(this->internal_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Controller.internal_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->internal_name(), target);
  }

  // bool read_only = 4;
  if (this->read_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->read_only(), target);
  }

  // .metamoto.types.Version version = 5;
  if (this->has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_version(), deterministic, target);
  }

  // bool disabled = 6;
  if (this->disabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->disabled(), target);
  }

  // .metamoto.types.SystemUnderTest sut = 7;
  if (this->has_sut()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_sut(), deterministic, target);
  }

  // repeated string publish_topics = 8;
  for (int i = 0, n = this->publish_topics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publish_topics(i).data(), static_cast<int>(this->publish_topics(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Controller.publish_topics");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->publish_topics(i), target);
  }

  // .metamoto.types.NormalDistribution data_latency = 9;
  if (this->has_data_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_data_latency(), deterministic, target);
  }

  // .google.protobuf.Struct parameters = 10;
  if (this->has_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_parameters(), deterministic, target);
  }

  // map<string, .metamoto.types.Range> ranges = 100;
  if (!this->ranges().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Controller.RangesEntry.key");
      }
    };

    if (deterministic &&
        this->ranges().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ranges().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Controller_RangesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ranges_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       100, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Controller_RangesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it) {
        entry.reset(ranges_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       100, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Controller)
  return target;
}

size_t Controller::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Controller)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string publish_topics = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->publish_topics_size());
  for (int i = 0, n = this->publish_topics_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->publish_topics(i));
  }

  // map<string, .metamoto.types.Range> ranges = 100;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->ranges_size());
  {
    ::std::unique_ptr<Controller_RangesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
        it = this->ranges().begin();
        it != this->ranges().end(); ++it) {
      entry.reset(ranges_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // string internal_name = 3;
  if (this->internal_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->internal_name());
  }

  // .metamoto.types.Version version = 5;
  if (this->has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .metamoto.types.SystemUnderTest sut = 7;
  if (this->has_sut()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sut_);
  }

  // .metamoto.types.NormalDistribution data_latency = 9;
  if (this->has_data_latency()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_latency_);
  }

  // .google.protobuf.Struct parameters = 10;
  if (this->has_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *parameters_);
  }

  // bool read_only = 4;
  if (this->read_only() != 0) {
    total_size += 1 + 1;
  }

  // bool disabled = 6;
  if (this->disabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Controller::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Controller)
  GOOGLE_DCHECK_NE(&from, this);
  const Controller* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Controller>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Controller)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Controller)
    MergeFrom(*source);
  }
}

void Controller::MergeFrom(const Controller& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Controller)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publish_topics_.MergeFrom(from.publish_topics_);
  ranges_.MergeFrom(from.ranges_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.internal_name().size() > 0) {

    internal_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_name_);
  }
  if (from.has_version()) {
    mutable_version()->::metamoto::types::Version::MergeFrom(from.version());
  }
  if (from.has_sut()) {
    mutable_sut()->::metamoto::types::SystemUnderTest::MergeFrom(from.sut());
  }
  if (from.has_data_latency()) {
    mutable_data_latency()->::metamoto::types::NormalDistribution::MergeFrom(from.data_latency());
  }
  if (from.has_parameters()) {
    mutable_parameters()->::google::protobuf::Struct::MergeFrom(from.parameters());
  }
  if (from.read_only() != 0) {
    set_read_only(from.read_only());
  }
  if (from.disabled() != 0) {
    set_disabled(from.disabled());
  }
}

void Controller::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Controller)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Controller::CopyFrom(const Controller& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Controller)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Controller::IsInitialized() const {
  return true;
}

void Controller::Swap(Controller* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Controller::InternalSwap(Controller* other) {
  using std::swap;
  publish_topics_.InternalSwap(CastToBase(&other->publish_topics_));
  ranges_.Swap(&other->ranges_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  internal_name_.Swap(&other->internal_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(sut_, other->sut_);
  swap(data_latency_, other->data_latency_);
  swap(parameters_, other->parameters_);
  swap(read_only_, other->read_only_);
  swap(disabled_, other->disabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Controller::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Sensor_RangesEntry_DoNotUse::Sensor_RangesEntry_DoNotUse() {}
Sensor_RangesEntry_DoNotUse::Sensor_RangesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Sensor_RangesEntry_DoNotUse::MergeFrom(const Sensor_RangesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Sensor_RangesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[4];
}
void Sensor_RangesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Sensor::InitAsDefaultInstance() {
  ::metamoto::types::_Sensor_default_instance_._instance.get_mutable()->version_ = const_cast< ::metamoto::types::Version*>(
      ::metamoto::types::Version::internal_default_instance());
  ::metamoto::types::_Sensor_default_instance_._instance.get_mutable()->pose_ = const_cast< ::metamoto::types::Pose*>(
      ::metamoto::types::Pose::internal_default_instance());
  ::metamoto::types::_Sensor_default_instance_._instance.get_mutable()->sut_ = const_cast< ::metamoto::types::SystemUnderTest*>(
      ::metamoto::types::SystemUnderTest::internal_default_instance());
  ::metamoto::types::_Sensor_default_instance_._instance.get_mutable()->data_latency_ = const_cast< ::metamoto::types::NormalDistribution*>(
      ::metamoto::types::NormalDistribution::internal_default_instance());
  ::metamoto::types::_Sensor_default_instance_._instance.get_mutable()->parameters_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
}
void Sensor::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
}
void Sensor::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
void Sensor::clear_data_latency() {
  if (GetArenaNoVirtual() == NULL && data_latency_ != NULL) {
    delete data_latency_;
  }
  data_latency_ = NULL;
}
void Sensor::clear_parameters() {
  if (GetArenaNoVirtual() == NULL && parameters_ != NULL) {
    delete parameters_;
  }
  parameters_ = NULL;
}
void Sensor::clear_ranges() {
  ranges_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sensor::kIdFieldNumber;
const int Sensor::kDisplayNameFieldNumber;
const int Sensor::kInternalNameFieldNumber;
const int Sensor::kPrefabNameFieldNumber;
const int Sensor::kModelNameFieldNumber;
const int Sensor::kReadOnlyFieldNumber;
const int Sensor::kVersionFieldNumber;
const int Sensor::kDisabledFieldNumber;
const int Sensor::kPoseFieldNumber;
const int Sensor::kSensorMountIdFieldNumber;
const int Sensor::kMountPointIdFieldNumber;
const int Sensor::kSutFieldNumber;
const int Sensor::kPublishTopicsFieldNumber;
const int Sensor::kDataLatencyFieldNumber;
const int Sensor::kParametersFieldNumber;
const int Sensor::kPriorityFieldNumber;
const int Sensor::kSaveDataFieldNumber;
const int Sensor::kRangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sensor::Sensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_Sensor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.Sensor)
}
Sensor::Sensor(const Sensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      publish_topics_(from.publish_topics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ranges_.MergeFrom(from.ranges_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  internal_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.internal_name().size() > 0) {
    internal_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_name_);
  }
  prefab_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prefab_name().size() > 0) {
    prefab_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefab_name_);
  }
  sensor_mount_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sensor_mount_id().size() > 0) {
    sensor_mount_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_mount_id_);
  }
  mount_point_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mount_point_id().size() > 0) {
    mount_point_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mount_point_id_);
  }
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_name().size() > 0) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  if (from.has_version()) {
    version_ = new ::metamoto::types::Version(*from.version_);
  } else {
    version_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::metamoto::types::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_sut()) {
    sut_ = new ::metamoto::types::SystemUnderTest(*from.sut_);
  } else {
    sut_ = NULL;
  }
  if (from.has_data_latency()) {
    data_latency_ = new ::metamoto::types::NormalDistribution(*from.data_latency_);
  } else {
    data_latency_ = NULL;
  }
  if (from.has_parameters()) {
    parameters_ = new ::google::protobuf::Struct(*from.parameters_);
  } else {
    parameters_ = NULL;
  }
  ::memcpy(&read_only_, &from.read_only_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&read_only_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.Sensor)
}

void Sensor::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefab_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_mount_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mount_point_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&version_)) + sizeof(priority_));
}

Sensor::~Sensor() {
  // @@protoc_insertion_point(destructor:metamoto.types.Sensor)
  SharedDtor();
}

void Sensor::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefab_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_mount_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mount_point_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete sut_;
  if (this != internal_default_instance()) delete data_latency_;
  if (this != internal_default_instance()) delete parameters_;
}

void Sensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sensor::descriptor() {
  ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sensor& Sensor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_Sensor.base);
  return *internal_default_instance();
}


void Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publish_topics_.Clear();
  ranges_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefab_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_mount_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mount_point_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && sut_ != NULL) {
    delete sut_;
  }
  sut_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_latency_ != NULL) {
    delete data_latency_;
  }
  data_latency_ = NULL;
  if (GetArenaNoVirtual() == NULL && parameters_ != NULL) {
    delete parameters_;
  }
  parameters_ = NULL;
  ::memset(&read_only_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&read_only_)) + sizeof(priority_));
  _internal_metadata_.Clear();
}

bool Sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.Sensor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Sensor.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Sensor.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string internal_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internal_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->internal_name().data(), static_cast<int>(this->internal_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Sensor.internal_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prefab_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefab_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefab_name().data(), static_cast<int>(this->prefab_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Sensor.prefab_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool read_only = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Version version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disabled = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Pose pose = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sensor_mount_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_mount_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensor_mount_id().data(), static_cast<int>(this->sensor_mount_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Sensor.sensor_mount_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mount_point_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mount_point_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mount_point_id().data(), static_cast<int>(this->mount_point_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Sensor.mount_point_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.SystemUnderTest sut = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sut()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string publish_topics = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_publish_topics()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->publish_topics(this->publish_topics_size() - 1).data(),
            static_cast<int>(this->publish_topics(this->publish_topics_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Sensor.publish_topics"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.NormalDistribution data_latency = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_latency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct parameters = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 priority = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool save_data = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_name = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Sensor.model_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .metamoto.types.Range> ranges = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          Sensor_RangesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Sensor_RangesEntry_DoNotUse,
              ::std::string, ::metamoto::types::Range,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::metamoto::types::Range > > parser(&ranges_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.Sensor.RangesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.Sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.Sensor)
  return false;
#undef DO_
}

void Sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Sensor.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Sensor.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // string internal_name = 3;
  if (this->internal_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internal_name().data(), static_cast<int>(this->internal_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Sensor.internal_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->internal_name(), output);
  }

  // string prefab_name = 4;
  if (this->prefab_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefab_name().data(), static_cast<int>(this->prefab_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Sensor.prefab_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->prefab_name(), output);
  }

  // bool read_only = 5;
  if (this->read_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->read_only(), output);
  }

  // .metamoto.types.Version version = 6;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_version(), output);
  }

  // bool disabled = 7;
  if (this->disabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->disabled(), output);
  }

  // .metamoto.types.Pose pose = 8;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_pose(), output);
  }

  // string sensor_mount_id = 9;
  if (this->sensor_mount_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensor_mount_id().data(), static_cast<int>(this->sensor_mount_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Sensor.sensor_mount_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sensor_mount_id(), output);
  }

  // string mount_point_id = 10;
  if (this->mount_point_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mount_point_id().data(), static_cast<int>(this->mount_point_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Sensor.mount_point_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->mount_point_id(), output);
  }

  // .metamoto.types.SystemUnderTest sut = 11;
  if (this->has_sut()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_sut(), output);
  }

  // repeated string publish_topics = 12;
  for (int i = 0, n = this->publish_topics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publish_topics(i).data(), static_cast<int>(this->publish_topics(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Sensor.publish_topics");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->publish_topics(i), output);
  }

  // .metamoto.types.NormalDistribution data_latency = 13;
  if (this->has_data_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_data_latency(), output);
  }

  // .google.protobuf.Struct parameters = 14;
  if (this->has_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_parameters(), output);
  }

  // uint32 priority = 15;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->priority(), output);
  }

  // bool save_data = 16;
  if (this->save_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->save_data(), output);
  }

  // string model_name = 17;
  if (this->model_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Sensor.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->model_name(), output);
  }

  // map<string, .metamoto.types.Range> ranges = 100;
  if (!this->ranges().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Sensor.RangesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ranges().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ranges().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Sensor_RangesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ranges_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            100, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Sensor_RangesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it) {
        entry.reset(ranges_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            100, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.Sensor)
}

::google::protobuf::uint8* Sensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Sensor.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Sensor.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // string internal_name = 3;
  if (this->internal_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internal_name().data(), static_cast<int>(this->internal_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Sensor.internal_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->internal_name(), target);
  }

  // string prefab_name = 4;
  if (this->prefab_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefab_name().data(), static_cast<int>(this->prefab_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Sensor.prefab_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->prefab_name(), target);
  }

  // bool read_only = 5;
  if (this->read_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->read_only(), target);
  }

  // .metamoto.types.Version version = 6;
  if (this->has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_version(), deterministic, target);
  }

  // bool disabled = 7;
  if (this->disabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->disabled(), target);
  }

  // .metamoto.types.Pose pose = 8;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_pose(), deterministic, target);
  }

  // string sensor_mount_id = 9;
  if (this->sensor_mount_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensor_mount_id().data(), static_cast<int>(this->sensor_mount_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Sensor.sensor_mount_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sensor_mount_id(), target);
  }

  // string mount_point_id = 10;
  if (this->mount_point_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mount_point_id().data(), static_cast<int>(this->mount_point_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Sensor.mount_point_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mount_point_id(), target);
  }

  // .metamoto.types.SystemUnderTest sut = 11;
  if (this->has_sut()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_sut(), deterministic, target);
  }

  // repeated string publish_topics = 12;
  for (int i = 0, n = this->publish_topics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publish_topics(i).data(), static_cast<int>(this->publish_topics(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Sensor.publish_topics");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->publish_topics(i), target);
  }

  // .metamoto.types.NormalDistribution data_latency = 13;
  if (this->has_data_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_data_latency(), deterministic, target);
  }

  // .google.protobuf.Struct parameters = 14;
  if (this->has_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_parameters(), deterministic, target);
  }

  // uint32 priority = 15;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->priority(), target);
  }

  // bool save_data = 16;
  if (this->save_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->save_data(), target);
  }

  // string model_name = 17;
  if (this->model_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.Sensor.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->model_name(), target);
  }

  // map<string, .metamoto.types.Range> ranges = 100;
  if (!this->ranges().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.Sensor.RangesEntry.key");
      }
    };

    if (deterministic &&
        this->ranges().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ranges().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Sensor_RangesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ranges_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       100, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Sensor_RangesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it) {
        entry.reset(ranges_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       100, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.Sensor)
  return target;
}

size_t Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.Sensor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string publish_topics = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->publish_topics_size());
  for (int i = 0, n = this->publish_topics_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->publish_topics(i));
  }

  // map<string, .metamoto.types.Range> ranges = 100;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->ranges_size());
  {
    ::std::unique_ptr<Sensor_RangesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
        it = this->ranges().begin();
        it != this->ranges().end(); ++it) {
      entry.reset(ranges_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // string internal_name = 3;
  if (this->internal_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->internal_name());
  }

  // string prefab_name = 4;
  if (this->prefab_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefab_name());
  }

  // string sensor_mount_id = 9;
  if (this->sensor_mount_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensor_mount_id());
  }

  // string mount_point_id = 10;
  if (this->mount_point_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mount_point_id());
  }

  // string model_name = 17;
  if (this->model_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  // .metamoto.types.Version version = 6;
  if (this->has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .metamoto.types.Pose pose = 8;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .metamoto.types.SystemUnderTest sut = 11;
  if (this->has_sut()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sut_);
  }

  // .metamoto.types.NormalDistribution data_latency = 13;
  if (this->has_data_latency()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_latency_);
  }

  // .google.protobuf.Struct parameters = 14;
  if (this->has_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *parameters_);
  }

  // bool read_only = 5;
  if (this->read_only() != 0) {
    total_size += 1 + 1;
  }

  // bool disabled = 7;
  if (this->disabled() != 0) {
    total_size += 1 + 1;
  }

  // bool save_data = 16;
  if (this->save_data() != 0) {
    total_size += 2 + 1;
  }

  // uint32 priority = 15;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  const Sensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.Sensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.Sensor)
    MergeFrom(*source);
  }
}

void Sensor::MergeFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publish_topics_.MergeFrom(from.publish_topics_);
  ranges_.MergeFrom(from.ranges_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.internal_name().size() > 0) {

    internal_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_name_);
  }
  if (from.prefab_name().size() > 0) {

    prefab_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefab_name_);
  }
  if (from.sensor_mount_id().size() > 0) {

    sensor_mount_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_mount_id_);
  }
  if (from.mount_point_id().size() > 0) {

    mount_point_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mount_point_id_);
  }
  if (from.model_name().size() > 0) {

    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  if (from.has_version()) {
    mutable_version()->::metamoto::types::Version::MergeFrom(from.version());
  }
  if (from.has_pose()) {
    mutable_pose()->::metamoto::types::Pose::MergeFrom(from.pose());
  }
  if (from.has_sut()) {
    mutable_sut()->::metamoto::types::SystemUnderTest::MergeFrom(from.sut());
  }
  if (from.has_data_latency()) {
    mutable_data_latency()->::metamoto::types::NormalDistribution::MergeFrom(from.data_latency());
  }
  if (from.has_parameters()) {
    mutable_parameters()->::google::protobuf::Struct::MergeFrom(from.parameters());
  }
  if (from.read_only() != 0) {
    set_read_only(from.read_only());
  }
  if (from.disabled() != 0) {
    set_disabled(from.disabled());
  }
  if (from.save_data() != 0) {
    set_save_data(from.save_data());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
}

void Sensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sensor::CopyFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor::IsInitialized() const {
  return true;
}

void Sensor::Swap(Sensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sensor::InternalSwap(Sensor* other) {
  using std::swap;
  publish_topics_.InternalSwap(CastToBase(&other->publish_topics_));
  ranges_.Swap(&other->ranges_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  internal_name_.Swap(&other->internal_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prefab_name_.Swap(&other->prefab_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sensor_mount_id_.Swap(&other->sensor_mount_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mount_point_id_.Swap(&other->mount_point_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(pose_, other->pose_);
  swap(sut_, other->sut_);
  swap(data_latency_, other->data_latency_);
  swap(parameters_, other->parameters_);
  swap(read_only_, other->read_only_);
  swap(disabled_, other->disabled_);
  swap(save_data_, other->save_data_);
  swap(priority_, other->priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sensor::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorMount_MountPoint::InitAsDefaultInstance() {
  ::metamoto::types::_SensorMount_MountPoint_default_instance_._instance.get_mutable()->pose_ = const_cast< ::metamoto::types::Pose*>(
      ::metamoto::types::Pose::internal_default_instance());
}
void SensorMount_MountPoint::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorMount_MountPoint::kIdFieldNumber;
const int SensorMount_MountPoint::kTypeFieldNumber;
const int SensorMount_MountPoint::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorMount_MountPoint::SensorMount_MountPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_SensorMount_MountPoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.SensorMount.MountPoint)
}
SensorMount_MountPoint::SensorMount_MountPoint(const SensorMount_MountPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_pose()) {
    pose_ = new ::metamoto::types::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:metamoto.types.SensorMount.MountPoint)
}

void SensorMount_MountPoint::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(type_));
}

SensorMount_MountPoint::~SensorMount_MountPoint() {
  // @@protoc_insertion_point(destructor:metamoto.types.SensorMount.MountPoint)
  SharedDtor();
}

void SensorMount_MountPoint::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
}

void SensorMount_MountPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorMount_MountPoint::descriptor() {
  ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorMount_MountPoint& SensorMount_MountPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_SensorMount_MountPoint.base);
  return *internal_default_instance();
}


void SensorMount_MountPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.SensorMount.MountPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool SensorMount_MountPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.SensorMount.MountPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.SensorMount.MountPoint.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.SensorMount.MountPoint.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::metamoto::types::SensorMount_MountPoint_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Pose pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.SensorMount.MountPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.SensorMount.MountPoint)
  return false;
#undef DO_
}

void SensorMount_MountPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.SensorMount.MountPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SensorMount.MountPoint.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .metamoto.types.SensorMount.MountPoint.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .metamoto.types.Pose pose = 3;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_pose(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.SensorMount.MountPoint)
}

::google::protobuf::uint8* SensorMount_MountPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.SensorMount.MountPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SensorMount.MountPoint.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .metamoto.types.SensorMount.MountPoint.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .metamoto.types.Pose pose = 3;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_pose(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.SensorMount.MountPoint)
  return target;
}

size_t SensorMount_MountPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.SensorMount.MountPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .metamoto.types.Pose pose = 3;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .metamoto.types.SensorMount.MountPoint.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorMount_MountPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.SensorMount.MountPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorMount_MountPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorMount_MountPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.SensorMount.MountPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.SensorMount.MountPoint)
    MergeFrom(*source);
  }
}

void SensorMount_MountPoint::MergeFrom(const SensorMount_MountPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.SensorMount.MountPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_pose()) {
    mutable_pose()->::metamoto::types::Pose::MergeFrom(from.pose());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SensorMount_MountPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.SensorMount.MountPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorMount_MountPoint::CopyFrom(const SensorMount_MountPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.SensorMount.MountPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMount_MountPoint::IsInitialized() const {
  return true;
}

void SensorMount_MountPoint::Swap(SensorMount_MountPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorMount_MountPoint::InternalSwap(SensorMount_MountPoint* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pose_, other->pose_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorMount_MountPoint::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

SensorMount_RangesEntry_DoNotUse::SensorMount_RangesEntry_DoNotUse() {}
SensorMount_RangesEntry_DoNotUse::SensorMount_RangesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SensorMount_RangesEntry_DoNotUse::MergeFrom(const SensorMount_RangesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SensorMount_RangesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[7];
}
void SensorMount_RangesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void SensorMount::InitAsDefaultInstance() {
  ::metamoto::types::_SensorMount_default_instance_._instance.get_mutable()->pose_ = const_cast< ::metamoto::types::Pose*>(
      ::metamoto::types::Pose::internal_default_instance());
}
void SensorMount::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
void SensorMount::clear_ranges() {
  ranges_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorMount::kIdFieldNumber;
const int SensorMount::kDisplayNameFieldNumber;
const int SensorMount::kPrefabNameFieldNumber;
const int SensorMount::kReadOnlyFieldNumber;
const int SensorMount::kMountPointsFieldNumber;
const int SensorMount::kPoseFieldNumber;
const int SensorMount::kRangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorMount::SensorMount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_SensorMount.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.SensorMount)
}
SensorMount::SensorMount(const SensorMount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mount_points_(from.mount_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ranges_.MergeFrom(from.ranges_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  prefab_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prefab_name().size() > 0) {
    prefab_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefab_name_);
  }
  if (from.has_pose()) {
    pose_ = new ::metamoto::types::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  read_only_ = from.read_only_;
  // @@protoc_insertion_point(copy_constructor:metamoto.types.SensorMount)
}

void SensorMount::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefab_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_only_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(read_only_));
}

SensorMount::~SensorMount() {
  // @@protoc_insertion_point(destructor:metamoto.types.SensorMount)
  SharedDtor();
}

void SensorMount::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefab_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
}

void SensorMount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorMount::descriptor() {
  ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorMount& SensorMount::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_SensorMount.base);
  return *internal_default_instance();
}


void SensorMount::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.SensorMount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mount_points_.Clear();
  ranges_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefab_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  read_only_ = false;
  _internal_metadata_.Clear();
}

bool SensorMount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.SensorMount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.SensorMount.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.SensorMount.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prefab_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefab_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefab_name().data(), static_cast<int>(this->prefab_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.SensorMount.prefab_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool read_only = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.SensorMount.MountPoint mount_points = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_mount_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Pose pose = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .metamoto.types.Range> ranges = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          SensorMount_RangesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SensorMount_RangesEntry_DoNotUse,
              ::std::string, ::metamoto::types::Range,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::metamoto::types::Range > > parser(&ranges_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.SensorMount.RangesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.SensorMount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.SensorMount)
  return false;
#undef DO_
}

void SensorMount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.SensorMount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SensorMount.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SensorMount.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // string prefab_name = 3;
  if (this->prefab_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefab_name().data(), static_cast<int>(this->prefab_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SensorMount.prefab_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->prefab_name(), output);
  }

  // bool read_only = 4;
  if (this->read_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->read_only(), output);
  }

  // repeated .metamoto.types.SensorMount.MountPoint mount_points = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mount_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->mount_points(static_cast<int>(i)),
      output);
  }

  // .metamoto.types.Pose pose = 6;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_pose(), output);
  }

  // map<string, .metamoto.types.Range> ranges = 100;
  if (!this->ranges().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.SensorMount.RangesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ranges().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ranges().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SensorMount_RangesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ranges_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            100, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SensorMount_RangesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it) {
        entry.reset(ranges_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            100, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.SensorMount)
}

::google::protobuf::uint8* SensorMount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.SensorMount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SensorMount.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SensorMount.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // string prefab_name = 3;
  if (this->prefab_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefab_name().data(), static_cast<int>(this->prefab_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.SensorMount.prefab_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->prefab_name(), target);
  }

  // bool read_only = 4;
  if (this->read_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->read_only(), target);
  }

  // repeated .metamoto.types.SensorMount.MountPoint mount_points = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mount_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->mount_points(static_cast<int>(i)), deterministic, target);
  }

  // .metamoto.types.Pose pose = 6;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_pose(), deterministic, target);
  }

  // map<string, .metamoto.types.Range> ranges = 100;
  if (!this->ranges().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.SensorMount.RangesEntry.key");
      }
    };

    if (deterministic &&
        this->ranges().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ranges().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SensorMount_RangesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ranges_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       100, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SensorMount_RangesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it) {
        entry.reset(ranges_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       100, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.SensorMount)
  return target;
}

size_t SensorMount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.SensorMount)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.SensorMount.MountPoint mount_points = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->mount_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mount_points(static_cast<int>(i)));
    }
  }

  // map<string, .metamoto.types.Range> ranges = 100;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->ranges_size());
  {
    ::std::unique_ptr<SensorMount_RangesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
        it = this->ranges().begin();
        it != this->ranges().end(); ++it) {
      entry.reset(ranges_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // string prefab_name = 3;
  if (this->prefab_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefab_name());
  }

  // .metamoto.types.Pose pose = 6;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // bool read_only = 4;
  if (this->read_only() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorMount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.SensorMount)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorMount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorMount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.SensorMount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.SensorMount)
    MergeFrom(*source);
  }
}

void SensorMount::MergeFrom(const SensorMount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.SensorMount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mount_points_.MergeFrom(from.mount_points_);
  ranges_.MergeFrom(from.ranges_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.prefab_name().size() > 0) {

    prefab_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefab_name_);
  }
  if (from.has_pose()) {
    mutable_pose()->::metamoto::types::Pose::MergeFrom(from.pose());
  }
  if (from.read_only() != 0) {
    set_read_only(from.read_only());
  }
}

void SensorMount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.SensorMount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorMount::CopyFrom(const SensorMount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.SensorMount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMount::IsInitialized() const {
  return true;
}

void SensorMount::Swap(SensorMount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorMount::InternalSwap(SensorMount* other) {
  using std::swap;
  CastToBase(&mount_points_)->InternalSwap(CastToBase(&other->mount_points_));
  ranges_.Swap(&other->ranges_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prefab_name_.Swap(&other->prefab_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pose_, other->pose_);
  swap(read_only_, other->read_only_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorMount::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleDynamics_ContactPatch::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleDynamics_ContactPatch::kShapeFieldNumber;
const int VehicleDynamics_ContactPatch::kLengthFieldNumber;
const int VehicleDynamics_ContactPatch::kWidthFieldNumber;
const int VehicleDynamics_ContactPatch::kSamplingPointsFieldNumber;
const int VehicleDynamics_ContactPatch::kEdgePointsWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleDynamics_ContactPatch::VehicleDynamics_ContactPatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_VehicleDynamics_ContactPatch.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.VehicleDynamics.ContactPatch)
}
VehicleDynamics_ContactPatch::VehicleDynamics_ContactPatch(const VehicleDynamics_ContactPatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shape_, &from.shape_,
    static_cast<size_t>(reinterpret_cast<char*>(&edge_points_weight_) -
    reinterpret_cast<char*>(&shape_)) + sizeof(edge_points_weight_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.VehicleDynamics.ContactPatch)
}

void VehicleDynamics_ContactPatch::SharedCtor() {
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edge_points_weight_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(edge_points_weight_));
}

VehicleDynamics_ContactPatch::~VehicleDynamics_ContactPatch() {
  // @@protoc_insertion_point(destructor:metamoto.types.VehicleDynamics.ContactPatch)
  SharedDtor();
}

void VehicleDynamics_ContactPatch::SharedDtor() {
}

void VehicleDynamics_ContactPatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleDynamics_ContactPatch::descriptor() {
  ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleDynamics_ContactPatch& VehicleDynamics_ContactPatch::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_VehicleDynamics_ContactPatch.base);
  return *internal_default_instance();
}


void VehicleDynamics_ContactPatch::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.VehicleDynamics.ContactPatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edge_points_weight_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(edge_points_weight_));
  _internal_metadata_.Clear();
}

bool VehicleDynamics_ContactPatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.VehicleDynamics.ContactPatch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metamoto.types.VehicleDynamics.ContactPatch.Shape shape = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_shape(static_cast< ::metamoto::types::VehicleDynamics_ContactPatch_Shape >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sampling_points = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sampling_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float edge_points_weight = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &edge_points_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.VehicleDynamics.ContactPatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.VehicleDynamics.ContactPatch)
  return false;
#undef DO_
}

void VehicleDynamics_ContactPatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.VehicleDynamics.ContactPatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.VehicleDynamics.ContactPatch.Shape shape = 1;
  if (this->shape() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->shape(), output);
  }

  // float length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->length(), output);
  }

  // float width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->width(), output);
  }

  // int32 sampling_points = 4;
  if (this->sampling_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sampling_points(), output);
  }

  // float edge_points_weight = 5;
  if (this->edge_points_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->edge_points_weight(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.VehicleDynamics.ContactPatch)
}

::google::protobuf::uint8* VehicleDynamics_ContactPatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.VehicleDynamics.ContactPatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metamoto.types.VehicleDynamics.ContactPatch.Shape shape = 1;
  if (this->shape() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->shape(), target);
  }

  // float length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->length(), target);
  }

  // float width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->width(), target);
  }

  // int32 sampling_points = 4;
  if (this->sampling_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sampling_points(), target);
  }

  // float edge_points_weight = 5;
  if (this->edge_points_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->edge_points_weight(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.VehicleDynamics.ContactPatch)
  return target;
}

size_t VehicleDynamics_ContactPatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.VehicleDynamics.ContactPatch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metamoto.types.VehicleDynamics.ContactPatch.Shape shape = 1;
  if (this->shape() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->shape());
  }

  // float length = 2;
  if (this->length() != 0) {
    total_size += 1 + 4;
  }

  // float width = 3;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // int32 sampling_points = 4;
  if (this->sampling_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sampling_points());
  }

  // float edge_points_weight = 5;
  if (this->edge_points_weight() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleDynamics_ContactPatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.VehicleDynamics.ContactPatch)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleDynamics_ContactPatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleDynamics_ContactPatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.VehicleDynamics.ContactPatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.VehicleDynamics.ContactPatch)
    MergeFrom(*source);
  }
}

void VehicleDynamics_ContactPatch::MergeFrom(const VehicleDynamics_ContactPatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.VehicleDynamics.ContactPatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shape() != 0) {
    set_shape(from.shape());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.sampling_points() != 0) {
    set_sampling_points(from.sampling_points());
  }
  if (from.edge_points_weight() != 0) {
    set_edge_points_weight(from.edge_points_weight());
  }
}

void VehicleDynamics_ContactPatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.VehicleDynamics.ContactPatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleDynamics_ContactPatch::CopyFrom(const VehicleDynamics_ContactPatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.VehicleDynamics.ContactPatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleDynamics_ContactPatch::IsInitialized() const {
  return true;
}

void VehicleDynamics_ContactPatch::Swap(VehicleDynamics_ContactPatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleDynamics_ContactPatch::InternalSwap(VehicleDynamics_ContactPatch* other) {
  using std::swap;
  swap(shape_, other->shape_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(sampling_points_, other->sampling_points_);
  swap(edge_points_weight_, other->edge_points_weight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleDynamics_ContactPatch::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleDynamics_Skeleton::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleDynamics_Skeleton::kLengthFieldNumber;
const int VehicleDynamics_Skeleton::kWidthFieldNumber;
const int VehicleDynamics_Skeleton::kHeightFieldNumber;
const int VehicleDynamics_Skeleton::kAxlesOffsetFieldNumber;
const int VehicleDynamics_Skeleton::kAxleWheelsDiametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleDynamics_Skeleton::VehicleDynamics_Skeleton()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_VehicleDynamics_Skeleton.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.VehicleDynamics.Skeleton)
}
VehicleDynamics_Skeleton::VehicleDynamics_Skeleton(const VehicleDynamics_Skeleton& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      axles_offset_(from.axles_offset_),
      axle_wheels_diameters_(from.axle_wheels_diameters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&length_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.VehicleDynamics.Skeleton)
}

void VehicleDynamics_Skeleton::SharedCtor() {
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&length_)) + sizeof(height_));
}

VehicleDynamics_Skeleton::~VehicleDynamics_Skeleton() {
  // @@protoc_insertion_point(destructor:metamoto.types.VehicleDynamics.Skeleton)
  SharedDtor();
}

void VehicleDynamics_Skeleton::SharedDtor() {
}

void VehicleDynamics_Skeleton::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleDynamics_Skeleton::descriptor() {
  ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleDynamics_Skeleton& VehicleDynamics_Skeleton::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_VehicleDynamics_Skeleton.base);
  return *internal_default_instance();
}


void VehicleDynamics_Skeleton::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.VehicleDynamics.Skeleton)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  axles_offset_.Clear();
  axle_wheels_diameters_.Clear();
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&length_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool VehicleDynamics_Skeleton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.VehicleDynamics.Skeleton)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float axles_offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_axles_offset())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_axles_offset())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float axle_wheels_diameters = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_axle_wheels_diameters())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_axle_wheels_diameters())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.VehicleDynamics.Skeleton)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.VehicleDynamics.Skeleton)
  return false;
#undef DO_
}

void VehicleDynamics_Skeleton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.VehicleDynamics.Skeleton)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float length = 1;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->length(), output);
  }

  // float width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->width(), output);
  }

  // float height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->height(), output);
  }

  // repeated float axles_offset = 4;
  if (this->axles_offset_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _axles_offset_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->axles_offset().data(), this->axles_offset_size(), output);
  }

  // repeated float axle_wheels_diameters = 5;
  if (this->axle_wheels_diameters_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _axle_wheels_diameters_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->axle_wheels_diameters().data(), this->axle_wheels_diameters_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.VehicleDynamics.Skeleton)
}

::google::protobuf::uint8* VehicleDynamics_Skeleton::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.VehicleDynamics.Skeleton)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float length = 1;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->length(), target);
  }

  // float width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->width(), target);
  }

  // float height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->height(), target);
  }

  // repeated float axles_offset = 4;
  if (this->axles_offset_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _axles_offset_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->axles_offset_, target);
  }

  // repeated float axle_wheels_diameters = 5;
  if (this->axle_wheels_diameters_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _axle_wheels_diameters_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->axle_wheels_diameters_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.VehicleDynamics.Skeleton)
  return target;
}

size_t VehicleDynamics_Skeleton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.VehicleDynamics.Skeleton)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float axles_offset = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->axles_offset_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _axles_offset_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float axle_wheels_diameters = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->axle_wheels_diameters_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _axle_wheels_diameters_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // float length = 1;
  if (this->length() != 0) {
    total_size += 1 + 4;
  }

  // float width = 2;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // float height = 3;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleDynamics_Skeleton::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.VehicleDynamics.Skeleton)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleDynamics_Skeleton* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleDynamics_Skeleton>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.VehicleDynamics.Skeleton)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.VehicleDynamics.Skeleton)
    MergeFrom(*source);
  }
}

void VehicleDynamics_Skeleton::MergeFrom(const VehicleDynamics_Skeleton& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.VehicleDynamics.Skeleton)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  axles_offset_.MergeFrom(from.axles_offset_);
  axle_wheels_diameters_.MergeFrom(from.axle_wheels_diameters_);
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void VehicleDynamics_Skeleton::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.VehicleDynamics.Skeleton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleDynamics_Skeleton::CopyFrom(const VehicleDynamics_Skeleton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.VehicleDynamics.Skeleton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleDynamics_Skeleton::IsInitialized() const {
  return true;
}

void VehicleDynamics_Skeleton::Swap(VehicleDynamics_Skeleton* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleDynamics_Skeleton::InternalSwap(VehicleDynamics_Skeleton* other) {
  using std::swap;
  axles_offset_.InternalSwap(&other->axles_offset_);
  axle_wheels_diameters_.InternalSwap(&other->axle_wheels_diameters_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleDynamics_Skeleton::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

VehicleDynamics_RangesEntry_DoNotUse::VehicleDynamics_RangesEntry_DoNotUse() {}
VehicleDynamics_RangesEntry_DoNotUse::VehicleDynamics_RangesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void VehicleDynamics_RangesEntry_DoNotUse::MergeFrom(const VehicleDynamics_RangesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata VehicleDynamics_RangesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[11];
}
void VehicleDynamics_RangesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void VehicleDynamics::InitAsDefaultInstance() {
  ::metamoto::types::_VehicleDynamics_default_instance_._instance.get_mutable()->version_ = const_cast< ::metamoto::types::Version*>(
      ::metamoto::types::Version::internal_default_instance());
  ::metamoto::types::_VehicleDynamics_default_instance_._instance.get_mutable()->sut_ = const_cast< ::metamoto::types::SystemUnderTest*>(
      ::metamoto::types::SystemUnderTest::internal_default_instance());
  ::metamoto::types::_VehicleDynamics_default_instance_._instance.get_mutable()->parameters_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
  ::metamoto::types::_VehicleDynamics_default_instance_._instance.get_mutable()->contact_patch_ = const_cast< ::metamoto::types::VehicleDynamics_ContactPatch*>(
      ::metamoto::types::VehicleDynamics_ContactPatch::internal_default_instance());
}
void VehicleDynamics::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
}
void VehicleDynamics::clear_parameters() {
  if (GetArenaNoVirtual() == NULL && parameters_ != NULL) {
    delete parameters_;
  }
  parameters_ = NULL;
}
void VehicleDynamics::clear_ranges() {
  ranges_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleDynamics::kIdFieldNumber;
const int VehicleDynamics::kDisplayNameFieldNumber;
const int VehicleDynamics::kInternalNameFieldNumber;
const int VehicleDynamics::kReadOnlyFieldNumber;
const int VehicleDynamics::kVersionFieldNumber;
const int VehicleDynamics::kDisabledFieldNumber;
const int VehicleDynamics::kSutFieldNumber;
const int VehicleDynamics::kParametersFieldNumber;
const int VehicleDynamics::kContactPatchFieldNumber;
const int VehicleDynamics::kSkeletonsFieldNumber;
const int VehicleDynamics::kRangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleDynamics::VehicleDynamics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_VehicleDynamics.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.VehicleDynamics)
}
VehicleDynamics::VehicleDynamics(const VehicleDynamics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      skeletons_(from.skeletons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ranges_.MergeFrom(from.ranges_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  internal_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.internal_name().size() > 0) {
    internal_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_name_);
  }
  if (from.has_version()) {
    version_ = new ::metamoto::types::Version(*from.version_);
  } else {
    version_ = NULL;
  }
  if (from.has_sut()) {
    sut_ = new ::metamoto::types::SystemUnderTest(*from.sut_);
  } else {
    sut_ = NULL;
  }
  if (from.has_parameters()) {
    parameters_ = new ::google::protobuf::Struct(*from.parameters_);
  } else {
    parameters_ = NULL;
  }
  if (from.has_contact_patch()) {
    contact_patch_ = new ::metamoto::types::VehicleDynamics_ContactPatch(*from.contact_patch_);
  } else {
    contact_patch_ = NULL;
  }
  ::memcpy(&read_only_, &from.read_only_,
    static_cast<size_t>(reinterpret_cast<char*>(&disabled_) -
    reinterpret_cast<char*>(&read_only_)) + sizeof(disabled_));
  // @@protoc_insertion_point(copy_constructor:metamoto.types.VehicleDynamics)
}

void VehicleDynamics::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disabled_) -
      reinterpret_cast<char*>(&version_)) + sizeof(disabled_));
}

VehicleDynamics::~VehicleDynamics() {
  // @@protoc_insertion_point(destructor:metamoto.types.VehicleDynamics)
  SharedDtor();
}

void VehicleDynamics::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete sut_;
  if (this != internal_default_instance()) delete parameters_;
  if (this != internal_default_instance()) delete contact_patch_;
}

void VehicleDynamics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleDynamics::descriptor() {
  ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleDynamics& VehicleDynamics::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_VehicleDynamics.base);
  return *internal_default_instance();
}


void VehicleDynamics::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.VehicleDynamics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skeletons_.Clear();
  ranges_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
  if (GetArenaNoVirtual() == NULL && sut_ != NULL) {
    delete sut_;
  }
  sut_ = NULL;
  if (GetArenaNoVirtual() == NULL && parameters_ != NULL) {
    delete parameters_;
  }
  parameters_ = NULL;
  if (GetArenaNoVirtual() == NULL && contact_patch_ != NULL) {
    delete contact_patch_;
  }
  contact_patch_ = NULL;
  ::memset(&read_only_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disabled_) -
      reinterpret_cast<char*>(&read_only_)) + sizeof(disabled_));
  _internal_metadata_.Clear();
}

bool VehicleDynamics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.VehicleDynamics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.VehicleDynamics.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.VehicleDynamics.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string internal_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internal_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->internal_name().data(), static_cast<int>(this->internal_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.VehicleDynamics.internal_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool read_only = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Version version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disabled = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.SystemUnderTest sut = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sut()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct parameters = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.VehicleDynamics.ContactPatch contact_patch = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_contact_patch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.VehicleDynamics.Skeleton skeletons = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_skeletons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .metamoto.types.Range> ranges = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          VehicleDynamics_RangesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              VehicleDynamics_RangesEntry_DoNotUse,
              ::std::string, ::metamoto::types::Range,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::metamoto::types::Range > > parser(&ranges_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.VehicleDynamics.RangesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.VehicleDynamics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.VehicleDynamics)
  return false;
#undef DO_
}

void VehicleDynamics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.VehicleDynamics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.VehicleDynamics.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.VehicleDynamics.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // string internal_name = 3;
  if (this->internal_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internal_name().data(), static_cast<int>(this->internal_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.VehicleDynamics.internal_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->internal_name(), output);
  }

  // bool read_only = 4;
  if (this->read_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->read_only(), output);
  }

  // .metamoto.types.Version version = 5;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_version(), output);
  }

  // bool disabled = 6;
  if (this->disabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->disabled(), output);
  }

  // .metamoto.types.SystemUnderTest sut = 7;
  if (this->has_sut()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_sut(), output);
  }

  // .google.protobuf.Struct parameters = 8;
  if (this->has_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_parameters(), output);
  }

  // .metamoto.types.VehicleDynamics.ContactPatch contact_patch = 9;
  if (this->has_contact_patch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_contact_patch(), output);
  }

  // repeated .metamoto.types.VehicleDynamics.Skeleton skeletons = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skeletons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->skeletons(static_cast<int>(i)),
      output);
  }

  // map<string, .metamoto.types.Range> ranges = 100;
  if (!this->ranges().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.VehicleDynamics.RangesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ranges().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ranges().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<VehicleDynamics_RangesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ranges_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            100, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<VehicleDynamics_RangesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it) {
        entry.reset(ranges_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            100, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.VehicleDynamics)
}

::google::protobuf::uint8* VehicleDynamics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.VehicleDynamics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.VehicleDynamics.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.VehicleDynamics.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // string internal_name = 3;
  if (this->internal_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internal_name().data(), static_cast<int>(this->internal_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.VehicleDynamics.internal_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->internal_name(), target);
  }

  // bool read_only = 4;
  if (this->read_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->read_only(), target);
  }

  // .metamoto.types.Version version = 5;
  if (this->has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_version(), deterministic, target);
  }

  // bool disabled = 6;
  if (this->disabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->disabled(), target);
  }

  // .metamoto.types.SystemUnderTest sut = 7;
  if (this->has_sut()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_sut(), deterministic, target);
  }

  // .google.protobuf.Struct parameters = 8;
  if (this->has_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_parameters(), deterministic, target);
  }

  // .metamoto.types.VehicleDynamics.ContactPatch contact_patch = 9;
  if (this->has_contact_patch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_contact_patch(), deterministic, target);
  }

  // repeated .metamoto.types.VehicleDynamics.Skeleton skeletons = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skeletons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->skeletons(static_cast<int>(i)), deterministic, target);
  }

  // map<string, .metamoto.types.Range> ranges = 100;
  if (!this->ranges().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.VehicleDynamics.RangesEntry.key");
      }
    };

    if (deterministic &&
        this->ranges().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ranges().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<VehicleDynamics_RangesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ranges_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       100, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<VehicleDynamics_RangesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it) {
        entry.reset(ranges_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       100, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.VehicleDynamics)
  return target;
}

size_t VehicleDynamics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.VehicleDynamics)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.VehicleDynamics.Skeleton skeletons = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->skeletons_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->skeletons(static_cast<int>(i)));
    }
  }

  // map<string, .metamoto.types.Range> ranges = 100;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->ranges_size());
  {
    ::std::unique_ptr<VehicleDynamics_RangesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
        it = this->ranges().begin();
        it != this->ranges().end(); ++it) {
      entry.reset(ranges_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // string internal_name = 3;
  if (this->internal_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->internal_name());
  }

  // .metamoto.types.Version version = 5;
  if (this->has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .metamoto.types.SystemUnderTest sut = 7;
  if (this->has_sut()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sut_);
  }

  // .google.protobuf.Struct parameters = 8;
  if (this->has_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *parameters_);
  }

  // .metamoto.types.VehicleDynamics.ContactPatch contact_patch = 9;
  if (this->has_contact_patch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *contact_patch_);
  }

  // bool read_only = 4;
  if (this->read_only() != 0) {
    total_size += 1 + 1;
  }

  // bool disabled = 6;
  if (this->disabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleDynamics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.VehicleDynamics)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleDynamics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleDynamics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.VehicleDynamics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.VehicleDynamics)
    MergeFrom(*source);
  }
}

void VehicleDynamics::MergeFrom(const VehicleDynamics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.VehicleDynamics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skeletons_.MergeFrom(from.skeletons_);
  ranges_.MergeFrom(from.ranges_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.internal_name().size() > 0) {

    internal_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_name_);
  }
  if (from.has_version()) {
    mutable_version()->::metamoto::types::Version::MergeFrom(from.version());
  }
  if (from.has_sut()) {
    mutable_sut()->::metamoto::types::SystemUnderTest::MergeFrom(from.sut());
  }
  if (from.has_parameters()) {
    mutable_parameters()->::google::protobuf::Struct::MergeFrom(from.parameters());
  }
  if (from.has_contact_patch()) {
    mutable_contact_patch()->::metamoto::types::VehicleDynamics_ContactPatch::MergeFrom(from.contact_patch());
  }
  if (from.read_only() != 0) {
    set_read_only(from.read_only());
  }
  if (from.disabled() != 0) {
    set_disabled(from.disabled());
  }
}

void VehicleDynamics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.VehicleDynamics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleDynamics::CopyFrom(const VehicleDynamics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.VehicleDynamics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleDynamics::IsInitialized() const {
  return true;
}

void VehicleDynamics::Swap(VehicleDynamics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleDynamics::InternalSwap(VehicleDynamics* other) {
  using std::swap;
  CastToBase(&skeletons_)->InternalSwap(CastToBase(&other->skeletons_));
  ranges_.Swap(&other->ranges_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  internal_name_.Swap(&other->internal_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(sut_, other->sut_);
  swap(parameters_, other->parameters_);
  swap(contact_patch_, other->contact_patch_);
  swap(read_only_, other->read_only_);
  swap(disabled_, other->disabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleDynamics::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

EgoVehicle_RangesEntry_DoNotUse::EgoVehicle_RangesEntry_DoNotUse() {}
EgoVehicle_RangesEntry_DoNotUse::EgoVehicle_RangesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void EgoVehicle_RangesEntry_DoNotUse::MergeFrom(const EgoVehicle_RangesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata EgoVehicle_RangesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[13];
}
void EgoVehicle_RangesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void EgoVehicle::InitAsDefaultInstance() {
  ::metamoto::types::_EgoVehicle_default_instance_._instance.get_mutable()->version_ = const_cast< ::metamoto::types::Version*>(
      ::metamoto::types::Version::internal_default_instance());
  ::metamoto::types::_EgoVehicle_default_instance_._instance.get_mutable()->body_ = const_cast< ::metamoto::types::VehicleInstance_Body*>(
      ::metamoto::types::VehicleInstance_Body::internal_default_instance());
  ::metamoto::types::_EgoVehicle_default_instance_._instance.get_mutable()->vehicle_dynamics_ = const_cast< ::metamoto::types::VehicleDynamics*>(
      ::metamoto::types::VehicleDynamics::internal_default_instance());
}
void EgoVehicle::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
}
void EgoVehicle::clear_body() {
  if (GetArenaNoVirtual() == NULL && body_ != NULL) {
    delete body_;
  }
  body_ = NULL;
}
void EgoVehicle::clear_assets() {
  assets_.Clear();
}
void EgoVehicle::clear_ranges() {
  ranges_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgoVehicle::kIdFieldNumber;
const int EgoVehicle::kDisplayNameFieldNumber;
const int EgoVehicle::kModelNameFieldNumber;
const int EgoVehicle::kReadOnlyFieldNumber;
const int EgoVehicle::kVersionFieldNumber;
const int EgoVehicle::kBodyFieldNumber;
const int EgoVehicle::kControllersFieldNumber;
const int EgoVehicle::kSensorsFieldNumber;
const int EgoVehicle::kSensorMountsFieldNumber;
const int EgoVehicle::kVehicleDynamicsFieldNumber;
const int EgoVehicle::kAssetsFieldNumber;
const int EgoVehicle::kRangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgoVehicle::EgoVehicle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_EgoVehicle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metamoto.types.EgoVehicle)
}
EgoVehicle::EgoVehicle(const EgoVehicle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      controllers_(from.controllers_),
      sensors_(from.sensors_),
      sensor_mounts_(from.sensor_mounts_),
      assets_(from.assets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ranges_.MergeFrom(from.ranges_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_name().size() > 0) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  if (from.has_body()) {
    body_ = new ::metamoto::types::VehicleInstance_Body(*from.body_);
  } else {
    body_ = NULL;
  }
  if (from.has_vehicle_dynamics()) {
    vehicle_dynamics_ = new ::metamoto::types::VehicleDynamics(*from.vehicle_dynamics_);
  } else {
    vehicle_dynamics_ = NULL;
  }
  if (from.has_version()) {
    version_ = new ::metamoto::types::Version(*from.version_);
  } else {
    version_ = NULL;
  }
  read_only_ = from.read_only_;
  // @@protoc_insertion_point(copy_constructor:metamoto.types.EgoVehicle)
}

void EgoVehicle::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&body_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_only_) -
      reinterpret_cast<char*>(&body_)) + sizeof(read_only_));
}

EgoVehicle::~EgoVehicle() {
  // @@protoc_insertion_point(destructor:metamoto.types.EgoVehicle)
  SharedDtor();
}

void EgoVehicle::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete body_;
  if (this != internal_default_instance()) delete vehicle_dynamics_;
  if (this != internal_default_instance()) delete version_;
}

void EgoVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EgoVehicle::descriptor() {
  ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EgoVehicle& EgoVehicle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::scc_info_EgoVehicle.base);
  return *internal_default_instance();
}


void EgoVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:metamoto.types.EgoVehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controllers_.Clear();
  sensors_.Clear();
  sensor_mounts_.Clear();
  assets_.Clear();
  ranges_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && body_ != NULL) {
    delete body_;
  }
  body_ = NULL;
  if (GetArenaNoVirtual() == NULL && vehicle_dynamics_ != NULL) {
    delete vehicle_dynamics_;
  }
  vehicle_dynamics_ = NULL;
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
  read_only_ = false;
  _internal_metadata_.Clear();
}

bool EgoVehicle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metamoto.types.EgoVehicle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.EgoVehicle.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.EgoVehicle.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.EgoVehicle.model_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool read_only = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.VehicleInstance.Body body = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Controller controllers = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_controllers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Sensor sensors = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sensors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.SensorMount sensor_mounts = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sensor_mounts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.VehicleDynamics vehicle_dynamics = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_dynamics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metamoto.types.Asset assets = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_assets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metamoto.types.Version version = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .metamoto.types.Range> ranges = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          EgoVehicle_RangesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              EgoVehicle_RangesEntry_DoNotUse,
              ::std::string, ::metamoto::types::Range,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::metamoto::types::Range > > parser(&ranges_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "metamoto.types.EgoVehicle.RangesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metamoto.types.EgoVehicle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metamoto.types.EgoVehicle)
  return false;
#undef DO_
}

void EgoVehicle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metamoto.types.EgoVehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.EgoVehicle.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.EgoVehicle.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // string model_name = 3;
  if (this->model_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.EgoVehicle.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model_name(), output);
  }

  // bool read_only = 4;
  if (this->read_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->read_only(), output);
  }

  // .metamoto.types.VehicleInstance.Body body = 5;
  if (this->has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_body(), output);
  }

  // repeated .metamoto.types.Controller controllers = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->controllers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->controllers(static_cast<int>(i)),
      output);
  }

  // repeated .metamoto.types.Sensor sensors = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->sensors(static_cast<int>(i)),
      output);
  }

  // repeated .metamoto.types.SensorMount sensor_mounts = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_mounts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->sensor_mounts(static_cast<int>(i)),
      output);
  }

  // .metamoto.types.VehicleDynamics vehicle_dynamics = 9;
  if (this->has_vehicle_dynamics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_vehicle_dynamics(), output);
  }

  // repeated .metamoto.types.Asset assets = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->assets(static_cast<int>(i)),
      output);
  }

  // .metamoto.types.Version version = 11;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_version(), output);
  }

  // map<string, .metamoto.types.Range> ranges = 100;
  if (!this->ranges().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.EgoVehicle.RangesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ranges().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ranges().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<EgoVehicle_RangesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ranges_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            100, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<EgoVehicle_RangesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it) {
        entry.reset(ranges_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            100, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:metamoto.types.EgoVehicle)
}

::google::protobuf::uint8* EgoVehicle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metamoto.types.EgoVehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.EgoVehicle.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.EgoVehicle.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // string model_name = 3;
  if (this->model_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "metamoto.types.EgoVehicle.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model_name(), target);
  }

  // bool read_only = 4;
  if (this->read_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->read_only(), target);
  }

  // .metamoto.types.VehicleInstance.Body body = 5;
  if (this->has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_body(), deterministic, target);
  }

  // repeated .metamoto.types.Controller controllers = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->controllers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->controllers(static_cast<int>(i)), deterministic, target);
  }

  // repeated .metamoto.types.Sensor sensors = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->sensors(static_cast<int>(i)), deterministic, target);
  }

  // repeated .metamoto.types.SensorMount sensor_mounts = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_mounts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->sensor_mounts(static_cast<int>(i)), deterministic, target);
  }

  // .metamoto.types.VehicleDynamics vehicle_dynamics = 9;
  if (this->has_vehicle_dynamics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_vehicle_dynamics(), deterministic, target);
  }

  // repeated .metamoto.types.Asset assets = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->assets(static_cast<int>(i)), deterministic, target);
  }

  // .metamoto.types.Version version = 11;
  if (this->has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_version(), deterministic, target);
  }

  // map<string, .metamoto.types.Range> ranges = 100;
  if (!this->ranges().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "metamoto.types.EgoVehicle.RangesEntry.key");
      }
    };

    if (deterministic &&
        this->ranges().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ranges().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<EgoVehicle_RangesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ranges_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       100, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<EgoVehicle_RangesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
          it = this->ranges().begin();
          it != this->ranges().end(); ++it) {
        entry.reset(ranges_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       100, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metamoto.types.EgoVehicle)
  return target;
}

size_t EgoVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metamoto.types.EgoVehicle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metamoto.types.Controller controllers = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->controllers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->controllers(static_cast<int>(i)));
    }
  }

  // repeated .metamoto.types.Sensor sensors = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->sensors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sensors(static_cast<int>(i)));
    }
  }

  // repeated .metamoto.types.SensorMount sensor_mounts = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_mounts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sensor_mounts(static_cast<int>(i)));
    }
  }

  // repeated .metamoto.types.Asset assets = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->assets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->assets(static_cast<int>(i)));
    }
  }

  // map<string, .metamoto.types.Range> ranges = 100;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->ranges_size());
  {
    ::std::unique_ptr<EgoVehicle_RangesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::metamoto::types::Range >::const_iterator
        it = this->ranges().begin();
        it != this->ranges().end(); ++it) {
      entry.reset(ranges_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // string model_name = 3;
  if (this->model_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  // .metamoto.types.VehicleInstance.Body body = 5;
  if (this->has_body()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *body_);
  }

  // .metamoto.types.VehicleDynamics vehicle_dynamics = 9;
  if (this->has_vehicle_dynamics()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vehicle_dynamics_);
  }

  // .metamoto.types.Version version = 11;
  if (this->has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // bool read_only = 4;
  if (this->read_only() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EgoVehicle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metamoto.types.EgoVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const EgoVehicle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgoVehicle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metamoto.types.EgoVehicle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metamoto.types.EgoVehicle)
    MergeFrom(*source);
  }
}

void EgoVehicle::MergeFrom(const EgoVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metamoto.types.EgoVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  controllers_.MergeFrom(from.controllers_);
  sensors_.MergeFrom(from.sensors_);
  sensor_mounts_.MergeFrom(from.sensor_mounts_);
  assets_.MergeFrom(from.assets_);
  ranges_.MergeFrom(from.ranges_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.model_name().size() > 0) {

    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  if (from.has_body()) {
    mutable_body()->::metamoto::types::VehicleInstance_Body::MergeFrom(from.body());
  }
  if (from.has_vehicle_dynamics()) {
    mutable_vehicle_dynamics()->::metamoto::types::VehicleDynamics::MergeFrom(from.vehicle_dynamics());
  }
  if (from.has_version()) {
    mutable_version()->::metamoto::types::Version::MergeFrom(from.version());
  }
  if (from.read_only() != 0) {
    set_read_only(from.read_only());
  }
}

void EgoVehicle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metamoto.types.EgoVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgoVehicle::CopyFrom(const EgoVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metamoto.types.EgoVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EgoVehicle::IsInitialized() const {
  return true;
}

void EgoVehicle::Swap(EgoVehicle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgoVehicle::InternalSwap(EgoVehicle* other) {
  using std::swap;
  CastToBase(&controllers_)->InternalSwap(CastToBase(&other->controllers_));
  CastToBase(&sensors_)->InternalSwap(CastToBase(&other->sensors_));
  CastToBase(&sensor_mounts_)->InternalSwap(CastToBase(&other->sensor_mounts_));
  CastToBase(&assets_)->InternalSwap(CastToBase(&other->assets_));
  ranges_.Swap(&other->ranges_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(body_, other->body_);
  swap(vehicle_dynamics_, other->vehicle_dynamics_);
  swap(version_, other->version_);
  swap(read_only_, other->read_only_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EgoVehicle::GetMetadata() const {
  protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_metamoto_2ftypes_2fego_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::SystemUnderTest_Container* Arena::CreateMaybeMessage< ::metamoto::types::SystemUnderTest_Container >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::SystemUnderTest_Container >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::SystemUnderTest* Arena::CreateMaybeMessage< ::metamoto::types::SystemUnderTest >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::SystemUnderTest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Controller_RangesEntry_DoNotUse* Arena::CreateMaybeMessage< ::metamoto::types::Controller_RangesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Controller_RangesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Controller* Arena::CreateMaybeMessage< ::metamoto::types::Controller >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Controller >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Sensor_RangesEntry_DoNotUse* Arena::CreateMaybeMessage< ::metamoto::types::Sensor_RangesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Sensor_RangesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::Sensor* Arena::CreateMaybeMessage< ::metamoto::types::Sensor >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::Sensor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::SensorMount_MountPoint* Arena::CreateMaybeMessage< ::metamoto::types::SensorMount_MountPoint >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::SensorMount_MountPoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::SensorMount_RangesEntry_DoNotUse* Arena::CreateMaybeMessage< ::metamoto::types::SensorMount_RangesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::SensorMount_RangesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::SensorMount* Arena::CreateMaybeMessage< ::metamoto::types::SensorMount >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::SensorMount >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::VehicleDynamics_ContactPatch* Arena::CreateMaybeMessage< ::metamoto::types::VehicleDynamics_ContactPatch >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::VehicleDynamics_ContactPatch >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::VehicleDynamics_Skeleton* Arena::CreateMaybeMessage< ::metamoto::types::VehicleDynamics_Skeleton >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::VehicleDynamics_Skeleton >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::VehicleDynamics_RangesEntry_DoNotUse* Arena::CreateMaybeMessage< ::metamoto::types::VehicleDynamics_RangesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::VehicleDynamics_RangesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::VehicleDynamics* Arena::CreateMaybeMessage< ::metamoto::types::VehicleDynamics >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::VehicleDynamics >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::EgoVehicle_RangesEntry_DoNotUse* Arena::CreateMaybeMessage< ::metamoto::types::EgoVehicle_RangesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::EgoVehicle_RangesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metamoto::types::EgoVehicle* Arena::CreateMaybeMessage< ::metamoto::types::EgoVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::metamoto::types::EgoVehicle >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
