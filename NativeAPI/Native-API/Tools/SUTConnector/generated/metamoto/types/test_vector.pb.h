// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/test_vector.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2ftest_5fvector_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2ftest_5fvector_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/ego_vehicle.pb.h"
#include "metamoto/types/range.pb.h"
#include "metamoto/types/scenario.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2ftest_5fvector_2eproto 

namespace protobuf_metamoto_2ftypes_2ftest_5fvector_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2ftest_5fvector_2eproto
namespace metamoto {
namespace types {
class TestVector;
class TestVectorDefaultTypeInternal;
extern TestVectorDefaultTypeInternal _TestVector_default_instance_;
class TestVector_ParametersEntry_DoNotUse;
class TestVector_ParametersEntry_DoNotUseDefaultTypeInternal;
extern TestVector_ParametersEntry_DoNotUseDefaultTypeInternal _TestVector_ParametersEntry_DoNotUse_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::TestVector* Arena::CreateMaybeMessage<::metamoto::types::TestVector>(Arena*);
template<> ::metamoto::types::TestVector_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage<::metamoto::types::TestVector_ParametersEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

enum TestVector_Strategy {
  TestVector_Strategy_UNKNOWN = 0,
  TestVector_Strategy_OTHER = 1,
  TestVector_Strategy_SINGLE = 2,
  TestVector_Strategy_EXHAUSTIVE = 3,
  TestVector_Strategy_RANDOM = 4,
  TestVector_Strategy_EDGES = 5,
  TestVector_Strategy_TestVector_Strategy_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TestVector_Strategy_TestVector_Strategy_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TestVector_Strategy_IsValid(int value);
const TestVector_Strategy TestVector_Strategy_Strategy_MIN = TestVector_Strategy_UNKNOWN;
const TestVector_Strategy TestVector_Strategy_Strategy_MAX = TestVector_Strategy_EDGES;
const int TestVector_Strategy_Strategy_ARRAYSIZE = TestVector_Strategy_Strategy_MAX + 1;

const ::google::protobuf::EnumDescriptor* TestVector_Strategy_descriptor();
inline const ::std::string& TestVector_Strategy_Name(TestVector_Strategy value) {
  return ::google::protobuf::internal::NameOfEnum(
    TestVector_Strategy_descriptor(), value);
}
inline bool TestVector_Strategy_Parse(
    const ::std::string& name, TestVector_Strategy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TestVector_Strategy>(
    TestVector_Strategy_descriptor(), name, value);
}
// ===================================================================

class TestVector_ParametersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TestVector_ParametersEntry_DoNotUse, 
    ::std::string, ::metamoto::types::Parameter,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<TestVector_ParametersEntry_DoNotUse, 
    ::std::string, ::metamoto::types::Parameter,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  TestVector_ParametersEntry_DoNotUse();
  TestVector_ParametersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TestVector_ParametersEntry_DoNotUse& other);
  static const TestVector_ParametersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestVector_ParametersEntry_DoNotUse*>(&_TestVector_ParametersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TestVector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.TestVector) */ {
 public:
  TestVector();
  virtual ~TestVector();

  TestVector(const TestVector& from);

  inline TestVector& operator=(const TestVector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestVector(TestVector&& from) noexcept
    : TestVector() {
    *this = ::std::move(from);
  }

  inline TestVector& operator=(TestVector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestVector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestVector* internal_default_instance() {
    return reinterpret_cast<const TestVector*>(
               &_TestVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TestVector* other);
  friend void swap(TestVector& a, TestVector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestVector* New() const final {
    return CreateMaybeMessage<TestVector>(NULL);
  }

  TestVector* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestVector>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestVector& from);
  void MergeFrom(const TestVector& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestVector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef TestVector_Strategy Strategy;
  static const Strategy UNKNOWN =
    TestVector_Strategy_UNKNOWN;
  static const Strategy OTHER =
    TestVector_Strategy_OTHER;
  static const Strategy SINGLE =
    TestVector_Strategy_SINGLE;
  static const Strategy EXHAUSTIVE =
    TestVector_Strategy_EXHAUSTIVE;
  static const Strategy RANDOM =
    TestVector_Strategy_RANDOM;
  static const Strategy EDGES =
    TestVector_Strategy_EDGES;
  static inline bool Strategy_IsValid(int value) {
    return TestVector_Strategy_IsValid(value);
  }
  static const Strategy Strategy_MIN =
    TestVector_Strategy_Strategy_MIN;
  static const Strategy Strategy_MAX =
    TestVector_Strategy_Strategy_MAX;
  static const int Strategy_ARRAYSIZE =
    TestVector_Strategy_Strategy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Strategy_descriptor() {
    return TestVector_Strategy_descriptor();
  }
  static inline const ::std::string& Strategy_Name(Strategy value) {
    return TestVector_Strategy_Name(value);
  }
  static inline bool Strategy_Parse(const ::std::string& name,
      Strategy* value) {
    return TestVector_Strategy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // map<string, .metamoto.types.Parameter> parameters = 100;
  int parameters_size() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 100;
  const ::google::protobuf::Map< ::std::string, ::metamoto::types::Parameter >&
      parameters() const;
  ::google::protobuf::Map< ::std::string, ::metamoto::types::Parameter >*
      mutable_parameters();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .metamoto.types.Scenario scenario = 5;
  bool has_scenario() const;
  void clear_scenario();
  static const int kScenarioFieldNumber = 5;
  private:
  const ::metamoto::types::Scenario& _internal_scenario() const;
  public:
  const ::metamoto::types::Scenario& scenario() const;
  ::metamoto::types::Scenario* release_scenario();
  ::metamoto::types::Scenario* mutable_scenario();
  void set_allocated_scenario(::metamoto::types::Scenario* scenario);

  // .metamoto.types.EgoVehicle ego_vehicle = 6;
  bool has_ego_vehicle() const;
  void clear_ego_vehicle();
  static const int kEgoVehicleFieldNumber = 6;
  private:
  const ::metamoto::types::EgoVehicle& _internal_ego_vehicle() const;
  public:
  const ::metamoto::types::EgoVehicle& ego_vehicle() const;
  ::metamoto::types::EgoVehicle* release_ego_vehicle();
  ::metamoto::types::EgoVehicle* mutable_ego_vehicle();
  void set_allocated_ego_vehicle(::metamoto::types::EgoVehicle* ego_vehicle);

  // .metamoto.types.TestVector.Strategy strategy = 3;
  void clear_strategy();
  static const int kStrategyFieldNumber = 3;
  ::metamoto::types::TestVector_Strategy strategy() const;
  void set_strategy(::metamoto::types::TestVector_Strategy value);

  // int32 num_tests = 4;
  void clear_num_tests();
  static const int kNumTestsFieldNumber = 4;
  ::google::protobuf::int32 num_tests() const;
  void set_num_tests(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:metamoto.types.TestVector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      TestVector_ParametersEntry_DoNotUse,
      ::std::string, ::metamoto::types::Parameter,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > parameters_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::metamoto::types::Scenario* scenario_;
  ::metamoto::types::EgoVehicle* ego_vehicle_;
  int strategy_;
  ::google::protobuf::int32 num_tests_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2ftest_5fvector_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TestVector

// string id = 1;
inline void TestVector::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestVector::id() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestVector.id)
  return id_.GetNoArena();
}
inline void TestVector::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestVector.id)
}
#if LANG_CXX11
inline void TestVector::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestVector.id)
}
#endif
inline void TestVector::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestVector.id)
}
inline void TestVector::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestVector.id)
}
inline ::std::string* TestVector::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestVector.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestVector::release_id() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestVector.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestVector::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestVector.id)
}

// string name = 2;
inline void TestVector::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestVector::name() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestVector.name)
  return name_.GetNoArena();
}
inline void TestVector::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metamoto.types.TestVector.name)
}
#if LANG_CXX11
inline void TestVector::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metamoto.types.TestVector.name)
}
#endif
inline void TestVector::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metamoto.types.TestVector.name)
}
inline void TestVector::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metamoto.types.TestVector.name)
}
inline ::std::string* TestVector::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestVector.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestVector::release_name() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestVector.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestVector::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestVector.name)
}

// .metamoto.types.TestVector.Strategy strategy = 3;
inline void TestVector::clear_strategy() {
  strategy_ = 0;
}
inline ::metamoto::types::TestVector_Strategy TestVector::strategy() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestVector.strategy)
  return static_cast< ::metamoto::types::TestVector_Strategy >(strategy_);
}
inline void TestVector::set_strategy(::metamoto::types::TestVector_Strategy value) {
  
  strategy_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestVector.strategy)
}

// int32 num_tests = 4;
inline void TestVector::clear_num_tests() {
  num_tests_ = 0;
}
inline ::google::protobuf::int32 TestVector::num_tests() const {
  // @@protoc_insertion_point(field_get:metamoto.types.TestVector.num_tests)
  return num_tests_;
}
inline void TestVector::set_num_tests(::google::protobuf::int32 value) {
  
  num_tests_ = value;
  // @@protoc_insertion_point(field_set:metamoto.types.TestVector.num_tests)
}

// .metamoto.types.Scenario scenario = 5;
inline bool TestVector::has_scenario() const {
  return this != internal_default_instance() && scenario_ != NULL;
}
inline const ::metamoto::types::Scenario& TestVector::_internal_scenario() const {
  return *scenario_;
}
inline const ::metamoto::types::Scenario& TestVector::scenario() const {
  const ::metamoto::types::Scenario* p = scenario_;
  // @@protoc_insertion_point(field_get:metamoto.types.TestVector.scenario)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Scenario*>(
      &::metamoto::types::_Scenario_default_instance_);
}
inline ::metamoto::types::Scenario* TestVector::release_scenario() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestVector.scenario)
  
  ::metamoto::types::Scenario* temp = scenario_;
  scenario_ = NULL;
  return temp;
}
inline ::metamoto::types::Scenario* TestVector::mutable_scenario() {
  
  if (scenario_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Scenario>(GetArenaNoVirtual());
    scenario_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestVector.scenario)
  return scenario_;
}
inline void TestVector::set_allocated_scenario(::metamoto::types::Scenario* scenario) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scenario_);
  }
  if (scenario) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scenario = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scenario, submessage_arena);
    }
    
  } else {
    
  }
  scenario_ = scenario;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestVector.scenario)
}

// .metamoto.types.EgoVehicle ego_vehicle = 6;
inline bool TestVector::has_ego_vehicle() const {
  return this != internal_default_instance() && ego_vehicle_ != NULL;
}
inline const ::metamoto::types::EgoVehicle& TestVector::_internal_ego_vehicle() const {
  return *ego_vehicle_;
}
inline const ::metamoto::types::EgoVehicle& TestVector::ego_vehicle() const {
  const ::metamoto::types::EgoVehicle* p = ego_vehicle_;
  // @@protoc_insertion_point(field_get:metamoto.types.TestVector.ego_vehicle)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::EgoVehicle*>(
      &::metamoto::types::_EgoVehicle_default_instance_);
}
inline ::metamoto::types::EgoVehicle* TestVector::release_ego_vehicle() {
  // @@protoc_insertion_point(field_release:metamoto.types.TestVector.ego_vehicle)
  
  ::metamoto::types::EgoVehicle* temp = ego_vehicle_;
  ego_vehicle_ = NULL;
  return temp;
}
inline ::metamoto::types::EgoVehicle* TestVector::mutable_ego_vehicle() {
  
  if (ego_vehicle_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::EgoVehicle>(GetArenaNoVirtual());
    ego_vehicle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.TestVector.ego_vehicle)
  return ego_vehicle_;
}
inline void TestVector::set_allocated_ego_vehicle(::metamoto::types::EgoVehicle* ego_vehicle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ego_vehicle_);
  }
  if (ego_vehicle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ego_vehicle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ego_vehicle, submessage_arena);
    }
    
  } else {
    
  }
  ego_vehicle_ = ego_vehicle;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.TestVector.ego_vehicle)
}

// map<string, .metamoto.types.Parameter> parameters = 100;
inline int TestVector::parameters_size() const {
  return parameters_.size();
}
inline const ::google::protobuf::Map< ::std::string, ::metamoto::types::Parameter >&
TestVector::parameters() const {
  // @@protoc_insertion_point(field_map:metamoto.types.TestVector.parameters)
  return parameters_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::metamoto::types::Parameter >*
TestVector::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_map:metamoto.types.TestVector.parameters)
  return parameters_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::metamoto::types::TestVector_Strategy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metamoto::types::TestVector_Strategy>() {
  return ::metamoto::types::TestVector_Strategy_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2ftest_5fvector_2eproto
