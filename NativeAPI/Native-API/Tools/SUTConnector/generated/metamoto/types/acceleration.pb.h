// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamoto/types/acceleration.proto

#ifndef PROTOBUF_INCLUDED_metamoto_2ftypes_2facceleration_2eproto
#define PROTOBUF_INCLUDED_metamoto_2ftypes_2facceleration_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metamoto/types/vector3.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metamoto_2ftypes_2facceleration_2eproto 

namespace protobuf_metamoto_2ftypes_2facceleration_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metamoto_2ftypes_2facceleration_2eproto
namespace metamoto {
namespace types {
class Acceleration;
class AccelerationDefaultTypeInternal;
extern AccelerationDefaultTypeInternal _Acceleration_default_instance_;
}  // namespace types
}  // namespace metamoto
namespace google {
namespace protobuf {
template<> ::metamoto::types::Acceleration* Arena::CreateMaybeMessage<::metamoto::types::Acceleration>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metamoto {
namespace types {

// ===================================================================

class Acceleration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metamoto.types.Acceleration) */ {
 public:
  Acceleration();
  virtual ~Acceleration();

  Acceleration(const Acceleration& from);

  inline Acceleration& operator=(const Acceleration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Acceleration(Acceleration&& from) noexcept
    : Acceleration() {
    *this = ::std::move(from);
  }

  inline Acceleration& operator=(Acceleration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Acceleration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Acceleration* internal_default_instance() {
    return reinterpret_cast<const Acceleration*>(
               &_Acceleration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Acceleration* other);
  friend void swap(Acceleration& a, Acceleration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Acceleration* New() const final {
    return CreateMaybeMessage<Acceleration>(NULL);
  }

  Acceleration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Acceleration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Acceleration& from);
  void MergeFrom(const Acceleration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Acceleration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metamoto.types.Vector3 linear = 1;
  bool has_linear() const;
  void clear_linear();
  static const int kLinearFieldNumber = 1;
  private:
  const ::metamoto::types::Vector3& _internal_linear() const;
  public:
  const ::metamoto::types::Vector3& linear() const;
  ::metamoto::types::Vector3* release_linear();
  ::metamoto::types::Vector3* mutable_linear();
  void set_allocated_linear(::metamoto::types::Vector3* linear);

  // .metamoto.types.Vector3 angular = 2;
  bool has_angular() const;
  void clear_angular();
  static const int kAngularFieldNumber = 2;
  private:
  const ::metamoto::types::Vector3& _internal_angular() const;
  public:
  const ::metamoto::types::Vector3& angular() const;
  ::metamoto::types::Vector3* release_angular();
  ::metamoto::types::Vector3* mutable_angular();
  void set_allocated_angular(::metamoto::types::Vector3* angular);

  // @@protoc_insertion_point(class_scope:metamoto.types.Acceleration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metamoto::types::Vector3* linear_;
  ::metamoto::types::Vector3* angular_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_metamoto_2ftypes_2facceleration_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Acceleration

// .metamoto.types.Vector3 linear = 1;
inline bool Acceleration::has_linear() const {
  return this != internal_default_instance() && linear_ != NULL;
}
inline const ::metamoto::types::Vector3& Acceleration::_internal_linear() const {
  return *linear_;
}
inline const ::metamoto::types::Vector3& Acceleration::linear() const {
  const ::metamoto::types::Vector3* p = linear_;
  // @@protoc_insertion_point(field_get:metamoto.types.Acceleration.linear)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* Acceleration::release_linear() {
  // @@protoc_insertion_point(field_release:metamoto.types.Acceleration.linear)
  
  ::metamoto::types::Vector3* temp = linear_;
  linear_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* Acceleration::mutable_linear() {
  
  if (linear_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    linear_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Acceleration.linear)
  return linear_;
}
inline void Acceleration::set_allocated_linear(::metamoto::types::Vector3* linear) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_);
  }
  if (linear) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    
  } else {
    
  }
  linear_ = linear;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Acceleration.linear)
}

// .metamoto.types.Vector3 angular = 2;
inline bool Acceleration::has_angular() const {
  return this != internal_default_instance() && angular_ != NULL;
}
inline const ::metamoto::types::Vector3& Acceleration::_internal_angular() const {
  return *angular_;
}
inline const ::metamoto::types::Vector3& Acceleration::angular() const {
  const ::metamoto::types::Vector3* p = angular_;
  // @@protoc_insertion_point(field_get:metamoto.types.Acceleration.angular)
  return p != NULL ? *p : *reinterpret_cast<const ::metamoto::types::Vector3*>(
      &::metamoto::types::_Vector3_default_instance_);
}
inline ::metamoto::types::Vector3* Acceleration::release_angular() {
  // @@protoc_insertion_point(field_release:metamoto.types.Acceleration.angular)
  
  ::metamoto::types::Vector3* temp = angular_;
  angular_ = NULL;
  return temp;
}
inline ::metamoto::types::Vector3* Acceleration::mutable_angular() {
  
  if (angular_ == NULL) {
    auto* p = CreateMaybeMessage<::metamoto::types::Vector3>(GetArenaNoVirtual());
    angular_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metamoto.types.Acceleration.angular)
  return angular_;
}
inline void Acceleration::set_allocated_angular(::metamoto::types::Vector3* angular) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(angular_);
  }
  if (angular) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      angular = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, angular, submessage_arena);
    }
    
  } else {
    
  }
  angular_ = angular;
  // @@protoc_insertion_point(field_set_allocated:metamoto.types.Acceleration.angular)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace metamoto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metamoto_2ftypes_2facceleration_2eproto
