# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from metamoto.services import vehicle_dynamics_pb2 as metamoto_dot_services_dot_vehicle__dynamics__pb2


class VehicleDynamicsStub(object):
  """The vehicle dynamics service provides the ability to control the kinematics of the Ego Vehicle as a Co-simulation.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Initialize = channel.unary_unary(
        '/metamoto.services.VehicleDynamics/Initialize',
        request_serializer=metamoto_dot_services_dot_vehicle__dynamics__pb2.VehicleDynamicsInitializeRequest.SerializeToString,
        response_deserializer=metamoto_dot_services_dot_vehicle__dynamics__pb2.VehicleDynamicsInitializeReply.FromString,
        )
    self.Update = channel.unary_unary(
        '/metamoto.services.VehicleDynamics/Update',
        request_serializer=metamoto_dot_services_dot_vehicle__dynamics__pb2.VehicleDynamicsUpdateRequest.SerializeToString,
        response_deserializer=metamoto_dot_services_dot_vehicle__dynamics__pb2.VehicleDynamicsUpdateReply.FromString,
        )
    self.Close = channel.unary_unary(
        '/metamoto.services.VehicleDynamics/Close',
        request_serializer=metamoto_dot_services_dot_vehicle__dynamics__pb2.VehicleDynamicsCloseRequest.SerializeToString,
        response_deserializer=metamoto_dot_services_dot_vehicle__dynamics__pb2.VehicleDynamicsCloseReply.FromString,
        )


class VehicleDynamicsServicer(object):
  """The vehicle dynamics service provides the ability to control the kinematics of the Ego Vehicle as a Co-simulation.
  """

  def Initialize(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Update(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Close(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_VehicleDynamicsServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Initialize': grpc.unary_unary_rpc_method_handler(
          servicer.Initialize,
          request_deserializer=metamoto_dot_services_dot_vehicle__dynamics__pb2.VehicleDynamicsInitializeRequest.FromString,
          response_serializer=metamoto_dot_services_dot_vehicle__dynamics__pb2.VehicleDynamicsInitializeReply.SerializeToString,
      ),
      'Update': grpc.unary_unary_rpc_method_handler(
          servicer.Update,
          request_deserializer=metamoto_dot_services_dot_vehicle__dynamics__pb2.VehicleDynamicsUpdateRequest.FromString,
          response_serializer=metamoto_dot_services_dot_vehicle__dynamics__pb2.VehicleDynamicsUpdateReply.SerializeToString,
      ),
      'Close': grpc.unary_unary_rpc_method_handler(
          servicer.Close,
          request_deserializer=metamoto_dot_services_dot_vehicle__dynamics__pb2.VehicleDynamicsCloseRequest.FromString,
          response_serializer=metamoto_dot_services_dot_vehicle__dynamics__pb2.VehicleDynamicsCloseReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'metamoto.services.VehicleDynamics', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
