# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from metamoto.services import ray_tracer_pb2 as metamoto_dot_services_dot_ray__tracer__pb2


class RayTracerStub(object):
  """The ray tracer service provides the ability to fire rays/beams into the simulation scene
  from a System Under Test, often used in the development of sensor models. A Beam is a collection
  of rays. The properties of the collection is either defined through beam widening parameters
  or through setting radiation patterns described below. Beams have the same data type as rays.

  The Trace command takes a list of rays/beams and returns a list of hits in the scene. Each hit
  includes the hit position, intensity, material information, and ground truth information.

  The ray tracer supports simulating beam radiation patterns where each beam provided to the Trace
  command is expanded into multiple rays. Two different options for beam radiation simulation are
  available. The first is beam widening. Beam widening generates multiple rays for each beam to
  simulate the widening of the beam over distance and is defined by specifying a beam waist, the divergence
  angle and number of rays. The second option is to specify custom radiation patterns. The SetPatterns
  request is used at initialization to establish one or more patterns to be used in the simulation.
  Each pattern includes a list of intensities and directions. Patterns are used by specifying the pattern 
  index (the index into the list provided to SetPatterns) for each ray provided to Trace.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SetPatterns = channel.unary_unary(
        '/metamoto.services.RayTracer/SetPatterns',
        request_serializer=metamoto_dot_services_dot_ray__tracer__pb2.RayTracerSetPatternsRequest.SerializeToString,
        response_deserializer=metamoto_dot_services_dot_ray__tracer__pb2.RayTracerSetPatternsReply.FromString,
        )
    self.Trace = channel.unary_unary(
        '/metamoto.services.RayTracer/Trace',
        request_serializer=metamoto_dot_services_dot_ray__tracer__pb2.RayTracerTraceRequest.SerializeToString,
        response_deserializer=metamoto_dot_services_dot_ray__tracer__pb2.RayTracerTraceReply.FromString,
        )


class RayTracerServicer(object):
  """The ray tracer service provides the ability to fire rays/beams into the simulation scene
  from a System Under Test, often used in the development of sensor models. A Beam is a collection
  of rays. The properties of the collection is either defined through beam widening parameters
  or through setting radiation patterns described below. Beams have the same data type as rays.

  The Trace command takes a list of rays/beams and returns a list of hits in the scene. Each hit
  includes the hit position, intensity, material information, and ground truth information.

  The ray tracer supports simulating beam radiation patterns where each beam provided to the Trace
  command is expanded into multiple rays. Two different options for beam radiation simulation are
  available. The first is beam widening. Beam widening generates multiple rays for each beam to
  simulate the widening of the beam over distance and is defined by specifying a beam waist, the divergence
  angle and number of rays. The second option is to specify custom radiation patterns. The SetPatterns
  request is used at initialization to establish one or more patterns to be used in the simulation.
  Each pattern includes a list of intensities and directions. Patterns are used by specifying the pattern 
  index (the index into the list provided to SetPatterns) for each ray provided to Trace.
  """

  def SetPatterns(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Trace(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RayTracerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SetPatterns': grpc.unary_unary_rpc_method_handler(
          servicer.SetPatterns,
          request_deserializer=metamoto_dot_services_dot_ray__tracer__pb2.RayTracerSetPatternsRequest.FromString,
          response_serializer=metamoto_dot_services_dot_ray__tracer__pb2.RayTracerSetPatternsReply.SerializeToString,
      ),
      'Trace': grpc.unary_unary_rpc_method_handler(
          servicer.Trace,
          request_deserializer=metamoto_dot_services_dot_ray__tracer__pb2.RayTracerTraceRequest.FromString,
          response_serializer=metamoto_dot_services_dot_ray__tracer__pb2.RayTracerTraceReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'metamoto.services.RayTracer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
