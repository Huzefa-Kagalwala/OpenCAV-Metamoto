// Copyright (c) 2018-2020 Metamoto, Inc. All Rights Reserved.

syntax = "proto3";
package metamoto.services;
option csharp_namespace = "Metamoto.Services";

import "google/protobuf/struct.proto";
import "metamoto/types/pose.proto";
import "metamoto/types/result_metadata.proto";
import "metamoto/types/scenario.proto";
import "metamoto/types/service_description.proto";
import "metamoto/types/test_case.proto";
import "metamoto/types/vehicle_info.proto";
import "metamoto/types/waypoint.proto";


service Sensor {
  rpc Setup (SensorSetupRequest) returns (SensorSetupReply) {}
  rpc Initialize (SensorInitializeRequest) returns (SensorInitializeReply) {}
  rpc Update (SensorUpdateRequest) returns (SensorUpdateReply) {}
  rpc Close (SensorCloseRequest) returns (SensorCloseReply) {}
}

message SensorSetupRequest {
  google.protobuf.Struct parameters = 1;
  repeated metamoto.types.ServiceDescription services = 2;
  metamoto.types.TestCase test_case = 3;
}

message SensorSetupReply {
}

message SensorInitializeRequest {
  // User-defined parameters for this sensors. Parameter names are expected to be in camelCase.
  google.protobuf.Struct parameters = 1;
  
  repeated string publish_topics = 2;
  string results_directory = 3;
  repeated metamoto.types.ServiceDescription services = 4;
  
  // Position and orientation of the sensor relative to the vehicle origin.
  metamoto.types.Pose pose = 5;

  repeated metamoto.types.Waypoint ego_vehicle_path = 6;
  metamoto.types.VehicleInfo ego_vehicle_info = 7;

  // The ID assigned to this ego vehicle. When a scenario includes multiple ego vehicles, use this ID with data bus and reporting service requests and to find the ego vehicle in ground truth.
  string ego_vehicle_id = 8;

  metamoto.types.TestCase test_case = 9;
}

message SensorInitializeReply {
  string name = 1;
  string version = 2;

  // How frequently to call Update, in Hz. If not specified, the default physics update rate of 100 Hz is used.
  double update_rate = 3;

  // Set to true to indicate that the ray tracer service is required.
  bool requires_ray_tracing = 4;
  
  // The timeout (seconds) used for updates. Zero indicates to use the default value of 10 seconds.
  uint32 update_timeout = 5;
}

message SensorUpdateRequest {
  // The current timestamps (in seconds)
  double time = 1;
  
  // The timestamps of the last physics update which may be different from the last timestamps of this Sensor update
  double last_step_time = 2;
  
  // The timestamps of the next physics update which may be different from the next timestamps of this Sensor update
  double next_step_time = 3;

  // An event related to this sensor.
  metamoto.types.Event event = 4;
}

message SensorUpdateReply {
  // Next time at which to call Update. This overrides the frequency dictated by update_rate.
  double next_update_time = 1;
}

message SensorCloseRequest {
}

message SensorCloseReply {
  repeated metamoto.types.ResultMetadata results = 1;
}

