// Copyright (c) 2018-2020 Metamoto, Inc. All Rights Reserved.

syntax = "proto3";
package metamoto.services;
option csharp_namespace = "Metamoto.Services";

import "google/protobuf/struct.proto";
import "metamoto/types/result_metadata.proto";
import "metamoto/types/scenario.proto";
import "metamoto/types/service_description.proto";
import "metamoto/types/test_case.proto";
import "metamoto/types/vehicle_info.proto";
import "metamoto/types/waypoint.proto";


service Controller {
  rpc Setup (ControllerSetupRequest) returns (ControllerSetupReply) {}
  rpc Initialize (ControllerInitializeRequest) returns (ControllerInitializeReply) {}
  rpc Update (ControllerUpdateRequest) returns (ControllerUpdateReply) {}
  rpc Close (ControllerCloseRequest) returns (ControllerCloseReply) {}
}

message ControllerSetupRequest {
  google.protobuf.Struct parameters = 1;
  repeated metamoto.types.ServiceDescription services = 2;
  metamoto.types.TestCase test_case = 3;
}

message ControllerSetupReply {
}

message ControllerInitializeRequest {
  // User-defined parameters for this controller. Parameter names are expected to be in camelCase.
  google.protobuf.Struct parameters = 1;
  
  repeated string publish_topics = 2;
  string results_directory = 3;
  repeated metamoto.types.ServiceDescription services = 4;
  repeated metamoto.types.Waypoint ego_vehicle_path = 5;
  metamoto.types.VehicleInfo ego_vehicle_info = 6;
  
  // The ID assigned to this ego vehicle. When a scenario includes multiple ego vehicles, use this ID with data bus and reporting service requests and to find the ego vehicle in ground truth.
  string ego_vehicle_id = 7;  

  metamoto.types.TestCase test_case = 8;
}

message ControllerInitializeReply {
  string name = 1;
  string version = 2;

  // How frequently to call Update, in Hz. If not specified, the default physics update rate of 100 Hz is used.
  double update_rate = 3;
  
  // The timeout (seconds) to wait for Updates. Zero indicates to use the default value of 60 seconds.
  uint32 update_timeout = 4;
}

message ControllerUpdateRequest {
  // The current timestamps (in seconds)
  double time = 1;
  
  // The timestamps of the last physics update which may be different from the last timestamps of this Controller update
  double last_step_time = 2;
  
  // The timestamps of the next physics update which may be different from the next timestamps of this Controller update
  double next_step_time = 3;

  // An event related to this controller.
  metamoto.types.Event event = 4;
}

message ControllerUpdateReply {
  // Next time at which to call Update. This overrides the frequency dictated by update_rate.
  double next_update_time = 1;
}

message ControllerCloseRequest {
}

message ControllerCloseReply {
  repeated metamoto.types.ResultMetadata results = 1;
}
