// Copyright (c) 2018-2020 Metamoto, Inc. All Rights Reserved.

syntax = "proto3";
package metamoto.services;
option csharp_namespace = "Metamoto.Services";

import "metamoto/types/enumerations.proto";
import "metamoto/types/vector3.proto";

// The ray tracer service provides the ability to fire rays/beams into the simulation scene
// from a System Under Test, often used in the development of sensor models. A Beam is a collection
// of rays. The properties of the collection is either defined through beam widening parameters
// or through setting radiation patterns described below. Beams have the same data type as rays.
//
// The Trace command takes a list of rays/beams and returns a list of hits in the scene. Each hit
// includes the hit position, intensity, material information, and ground truth information.
//
// The ray tracer supports simulating beam radiation patterns where each beam provided to the Trace
// command is expanded into multiple rays. Two different options for beam radiation simulation are
// available. The first is beam widening. Beam widening generates multiple rays for each beam to
// simulate the widening of the beam over distance and is defined by specifying a beam waist, the divergence
// angle and number of rays. The second option is to specify custom radiation patterns. The SetPatterns
// request is used at initialization to establish one or more patterns to be used in the simulation.
// Each pattern includes a list of intensities and directions. Patterns are used by specifying the pattern 
// index (the index into the list provided to SetPatterns) for each ray provided to Trace.
service RayTracer {
  rpc SetPatterns (RayTracerSetPatternsRequest) returns (RayTracerSetPatternsReply) {}
  rpc Trace (RayTracerTraceRequest) returns (RayTracerTraceReply) {}
}

// Holds a radiation pattern. The radiation pattern consists of directions and associated intensities used to generate
// the rays that will simulate the radiation pattern. The lengths of the intensity and direction lists must be equal.
// The directions are set with respect to (0,0,1). For each Ray that defines a radiation pattern (called the "central ray") 
// we generate a set of rays which are transformed from (0,0,1) to the central ray direction. 
// Some examples:
//  - central ray (0,0,1)  -->  generated rays will have exactly the same directions as the specified directions in the pattern
//  - central ray (1,0,0)  -->  the directions specified in the pattern are all rotated by 90 degrees around (0,1,0)
//  - central ray (0, sqrt(3)/2, 0.5)  -->  the directions specified in the pattern are all rotated by -60 degrees around (1,0,0).  
message RayTracerRadiationPattern {
  // List of intensities.
  repeated float intensity = 1;
  
  // List of directions.  Directions are relative to the (0,0,1) direction.
  repeated metamoto.types.Vector3 direction = 2;
}

message RayTracerSetPatternsRequest {
  // The patterns.
  repeated RayTracerRadiationPattern pattern = 1;
}

message RayTracerSetPatternsReply {
  // The ID assigned to the set of radiation patterns. This ID is used by Trace requests.
  string id = 1;
}

// Specifies the rays, some scene parameters and beam-widening/radiation pattern parameters.
// Note: At most one of the 'use_beam_widening' and 'use_radiation_pattern' parameters can be set to true.
message RayTracerTraceRequest {
  // Rays/beams to trace into the scene.
  repeated Ray rays = 1;
  
  // Maximum distance (in meters) to trace a ray.
  double maximum_distance = 2;
  
  // Minimum distance (in meters) of a hit.
  double minimum_distance = 3;
  
  // Maximum number of returns per ray.
  uint32 number_of_returns = 4;
  
  // Wavelength of rays (in meters).
  double wavelength = 5;
  
  // Intensity of the beams.
  double beam_intensity = 6;

  // Enable or disable simulation of beam widening.
  bool use_beam_widening = 7;

  // If true, the intensity of the rays will follow the Gaussian beam profile. If false, all rays will have the same intensities.
  bool gaussian_beam_profile = 8;
  
  // Number of rays to use for beam widening.
  uint32 number_of_rays = 9;
  
  // Beam waist value (in meters) to use for beam widening.
  double beam_waist = 10;
  
  // Beam divergence angle (in degrees) to use for beam widening.
  double beam_divergence_angle = 11;
    
  // Enable or disable simulation of radiation pattern.
  bool use_radiation_pattern = 12;

  // ID of the radiation pattern set.
  string radiation_pattern_id = 13;
  
  // Return raw data for all rays generated using patterns or beam-widening instead of grouping them into few returns.
  bool return_raw_data = 14;
  
  // The permeability of transparent materials (such as glass) between 0 (fully opaque) and 1 (fully transparent).
  float transparent_permeability = 15;
  
  // The cutoff angle (between 0 and 90 degrees) where the material is reflective. This applies only to transparent materials.
  // The permeability is 1 for any incidence angle above the cutoff angle.
  float transparent_cutoff_angle = 16;
  
  message OutputFields {
    // Whether the `object_id` field in the RayHit message is populated.
    bool object_id = 1;
    
    // Whether the `object_type` field in the RayHit message is populated.
    bool object_type = 2;
  
    // Whether the `material` and `color` fields in the RayHit message are populated.
    bool material = 3;
    
    // Whether the `cos_incidence_angle` field in the RayHit message is populated.
    bool angle = 4;
  }
  
  // The populated fields in the RayHit message.
  OutputFields output_fields = 17;
  
  // The range error standard deviation (in meters).
  float range_error_stdev = 18;
}

// Reply to the Trace request.  Contains a list of ray hits.
message RayTracerTraceReply {
  // The list of hits.
  repeated RayHit hits = 1;
}

// Holds a ray/beam.
message Ray {
  // Ray origin in the world coordinate system.
  metamoto.types.Vector3 origin = 1;
  
  // Ray direction in the world coordinate system (should be normalized).
  metamoto.types.Vector3 direction = 2;
  
  // The radiation pattern index to use. This is the zero-based index in the list of patterns defined in the RayTracerSetPatternsRequest.
  // This has to be set only when the 'use_radiation_pattern' is set to true in RayTracerTraceRequest.
  // This ray is the central ray for the corresponding radiation pattern.
  uint32 radiation_pattern_index = 3;
}

// Holds information about a ray hit.
message RayHit {
  // Index of ray associated with this hit.
  uint32 ray_index = 1;
  
  // Hit position in world coordinates.
  metamoto.types.Vector3 position = 2;
  
  // Return intensity of hit.
  float intensity = 3;

  // The type of object hit.
  metamoto.types.ObjectType object_type = 4;
  
  // The ground truth ID of the object hit.
  uint32 object_id = 5;
  
  // The type of the material hit.
  metamoto.types.MaterialType material = 6;
  
  // The gray-scale color of the material hit
  float color = 7;
  
  // The cosine of the incidence angle between the ray and the hit object's geometric normal.
  float cos_incidence_angle = 8;
}
