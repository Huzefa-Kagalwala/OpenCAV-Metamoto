#include <chrono>
#include <csignal>
#include <ctime>
#include <fstream>
#include <iostream>
#include <sstream>
#include <thread>

#ifndef _WIN32
#include <termios.h>
#include <unistd.h>
#endif

#include "sut_connector_client.h"
#include "token.h"
#include "version.h"

using namespace metamoto::services;
using namespace std;

bool _quit;
#ifdef _WIN32
BOOL WINAPI SignalHandler(DWORD type) {
  if (type == CTRL_C_EVENT) {
    _quit = true;
    return true;
  }
  return false;
}
#else
void SignalHandler(int s) {
  _quit = true;
}
#endif

void SetStdinEcho(bool enable = true) {
#ifdef _WIN32
  HANDLE hStdin = GetStdHandle(STD_INPUT_HANDLE);
  DWORD mode;
  GetConsoleMode(hStdin, &mode);

  if (!enable)
    mode &= ~ENABLE_ECHO_INPUT;
  else
    mode |= ENABLE_ECHO_INPUT;

  SetConsoleMode(hStdin, mode);

#else
  struct termios tty;
  tcgetattr(STDIN_FILENO, &tty);
  if (!enable)
    tty.c_lflag &= ~ECHO;
  else
    tty.c_lflag |= ECHO;

  (void)tcsetattr(STDIN_FILENO, TCSANOW, &tty);
#endif
}

string ToString(SUTConnectorConnectRequest::SUTType type) {
  switch (type) {
  case SUTConnectorConnectRequest::SUT_TYPE_UNKNOWN:
    return "Unknown";

  case SUTConnectorConnectRequest::SUT_TYPE_CONTROLLER:
    return "Controller";

  case SUTConnectorConnectRequest::SUT_TYPE_SENSOR:
    return "Sensor";

  default:
    return "???";
  }
}

bool FileExists(const string &filename) {
  fstream file(filename.c_str(), ios::in | ios::binary);
  return file.good();
}

 
int main(int argc, char** argv) {
  string serverURI, rootCerts, id, username, password;
  unsigned short sutPort = 0;
  SUTConnectorConnectRequest::SUTType type = SUTConnectorConnectRequest::SUT_TYPE_CONTROLLER;

  ostringstream usage;
  usage
    << "usage: sc-client [OPTIONS]" << endl
    << "  --server-uri <server-uri>  Required. Format: host:port" << endl
    << "  --sut-port <sut-port>   Required." << endl
    << "  --sut-type <sut-type>  Format: 1 = controller (default), 2 = sensor" << endl
    << "  --sut-id <sut-id>  Format: string. Autogenerated if not provided." << endl
    << "  --username <username>  Required. Metamoto account username. Prompted if not provided." << endl
    << "  --password <password>  Required. Metamoto account password. Prompted if not provided." << endl
    << "  --trusted-certs <filename>  Required. Filename of PEM encoded trusted root certificates. " << endl;

  for(int i = 1; i < argc; ++i) {
    string arg = argv[i];

    if ((arg == "-h") || (arg == "-?") || (arg == "--help")) {
      cout << usage.str() << endl;
      return 0;
    } else if ((arg == "-v") || (arg == "--version")) {
      cout << "Version " << VERSION_MAJOR << "." << VERSION_MINOR << "." << VERSION_PATCH << " Build " << VERSION_BUILD << " " << VERSION_TIMESTAMP << endl;
      return 0;
    }

    i++;
    if (i >= argc) {
      cout << "Value missing for argument '" << arg << "'." << endl;
      std::cout << usage.str() << endl;
      return -1;
    }

    string value = argv[i];

    if (arg == "--server-uri") {
      serverURI = value;
    } else if (arg == "--sut-port") {
      istringstream iss;
      iss.str(value);
      iss >> sutPort;
    } else if (arg == "--sut-type") {
      unsigned int iType;
      istringstream iss;
      iss.str(value);
      iss >> iType;

      if (iType == SUTConnectorConnectRequest::SUT_TYPE_CONTROLLER) {
        type = SUTConnectorConnectRequest::SUT_TYPE_CONTROLLER;
      } else if (iType == SUTConnectorConnectRequest::SUT_TYPE_SENSOR) {
        type = SUTConnectorConnectRequest::SUT_TYPE_SENSOR;
      } else {
        cout << "Invalid type. Use 0 for a controller and 1 for a sensor." << endl;
        cout << usage.str() << endl;
        return -1;
      }
    } else if (arg == "--sut-id") {
      id = value;
    } else if (arg == "--trusted-certs") {
      rootCerts = value;
    } else if (arg == "--username") {
      username = value;
    } else if (arg == "--password") {
      password = value;
    } else {
      cout << "Unknown argument: " << arg << endl;
      cout << usage.str() << endl;
      return -1;
    }
  }

  if (serverURI.empty()) {
    cout << "Server URI is required." << endl << usage.str() << endl;
    return -1;
  }

  if (sutPort == 0) {
    cout << "SUT port is required." << endl << usage.str() << endl;
    return -1;
  }

  if (rootCerts.empty()) {
    cout << "Trusted certificates filename is required." << endl << usage.str() << endl;
    return -1;
  } else if (!FileExists(rootCerts)) {
    cout << "Trusted certificates file does not exist: " << rootCerts << endl;
    return -1;
  }

  if (username.empty()) {
    cout << "Username: " << flush;
    cin >> username;
  }

  if (password.empty()) {
    cout << "Password: " << flush;
    SetStdinEcho(false);
    cin >> password;
    SetStdinEcho(true);
    cout << endl;
  }

  Token token;
  if (!token.Request(username, password)) {
    cout << "Token request failed." << endl;
    return -1;
  }

  if (id.empty()) {
    srand((unsigned int)time(NULL));
    for (int i = 0; i < 8; i++) {
      int r = rand() % 36;
      id += (char)((r < 10) ? (r + 48) : (r + 87));
    }
  }

  ostringstream sutURI;
  sutURI << "127.0.0.1:" << sutPort;

  cout << "Parameters: " << endl
    << "  ID: " << id << endl
    << "  Type: " << ToString(type) << endl
    << "  SUT Port: " << sutPort << endl
    << "  Server URI: " << serverURI << endl
    << "  Username: " << username << endl
    << "  Root Certificates: " << rootCerts << endl << endl;

#ifdef _WIN32
  SetConsoleCtrlHandler(NULL, false);
  SetConsoleCtrlHandler(SignalHandler, true);
#else
  std::signal(SIGINT, SignalHandler);
#endif

  SUTConnectorClient client;

  client.SetTraceEnabled(true);

  if (!client.Connect(serverURI, sutURI.str(), id, type, rootCerts, token.GetAccessToken())) {
    cout << "Failed to connect to SUT connector server." << endl;
    return -1;
  }

  cout << "Connected to server. ID: " << id << endl;

  _quit = false;

  while (!_quit && client.IsConnected()) {
    this_thread::sleep_for(chrono::seconds(1));
  }

  client.Disconnect();

  return 0;
}

