classdef RadarTrack < ros.Message
    %RadarTrack MATLAB implementation of radar_msgs/RadarTrack
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'radar_msgs/RadarTrack' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '371627dd284ddde5489009ee4498d083' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPolygonClass = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Polygon') % Dispatch to MATLAB class for message type geometry_msgs/Polygon
        GeometryMsgsVector3Class = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
    end
    
    properties (Dependent)
        TrackId
        TrackShape
        LinearVelocity
        LinearAcceleration
    end
    
    properties (Access = protected)
        Cache = struct('TrackShape', [], 'LinearVelocity', [], 'LinearAcceleration', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'LinearAcceleration', 'LinearVelocity', 'TrackId', 'TrackShape'} % List of non-constant message properties
        ROSPropertyList = {'linear_acceleration', 'linear_velocity', 'track_id', 'track_shape'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = RadarTrack(msg)
            %RadarTrack Construct the message object RadarTrack
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function trackid = get.TrackId(obj)
            %get.TrackId Get the value for property TrackId
            trackid = typecast(int16(obj.JavaMessage.getTrackId), 'uint16');
        end
        
        function set.TrackId(obj, trackid)
            %set.TrackId Set the value for property TrackId
            validateattributes(trackid, {'numeric'}, {'nonempty', 'scalar'}, 'RadarTrack', 'TrackId');
            
            obj.JavaMessage.setTrackId(trackid);
        end
        
        function trackshape = get.TrackShape(obj)
            %get.TrackShape Get the value for property TrackShape
            if isempty(obj.Cache.TrackShape)
                obj.Cache.TrackShape = feval(obj.GeometryMsgsPolygonClass, obj.JavaMessage.getTrackShape);
            end
            trackshape = obj.Cache.TrackShape;
        end
        
        function set.TrackShape(obj, trackshape)
            %set.TrackShape Set the value for property TrackShape
            validateattributes(trackshape, {obj.GeometryMsgsPolygonClass}, {'nonempty', 'scalar'}, 'RadarTrack', 'TrackShape');
            
            obj.JavaMessage.setTrackShape(trackshape.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.TrackShape)
                obj.Cache.TrackShape.setJavaObject(trackshape.getJavaObject);
            end
        end
        
        function linearvelocity = get.LinearVelocity(obj)
            %get.LinearVelocity Get the value for property LinearVelocity
            if isempty(obj.Cache.LinearVelocity)
                obj.Cache.LinearVelocity = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getLinearVelocity);
            end
            linearvelocity = obj.Cache.LinearVelocity;
        end
        
        function set.LinearVelocity(obj, linearvelocity)
            %set.LinearVelocity Set the value for property LinearVelocity
            validateattributes(linearvelocity, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'RadarTrack', 'LinearVelocity');
            
            obj.JavaMessage.setLinearVelocity(linearvelocity.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.LinearVelocity)
                obj.Cache.LinearVelocity.setJavaObject(linearvelocity.getJavaObject);
            end
        end
        
        function linearacceleration = get.LinearAcceleration(obj)
            %get.LinearAcceleration Get the value for property LinearAcceleration
            if isempty(obj.Cache.LinearAcceleration)
                obj.Cache.LinearAcceleration = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getLinearAcceleration);
            end
            linearacceleration = obj.Cache.LinearAcceleration;
        end
        
        function set.LinearAcceleration(obj, linearacceleration)
            %set.LinearAcceleration Set the value for property LinearAcceleration
            validateattributes(linearacceleration, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'RadarTrack', 'LinearAcceleration');
            
            obj.JavaMessage.setLinearAcceleration(linearacceleration.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.LinearAcceleration)
                obj.Cache.LinearAcceleration.setJavaObject(linearacceleration.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.TrackShape = [];
            obj.Cache.LinearVelocity = [];
            obj.Cache.LinearAcceleration = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.TrackId = obj.TrackId;
            
            % Recursively copy compound properties
            cpObj.TrackShape = copy(obj.TrackShape);
            cpObj.LinearVelocity = copy(obj.LinearVelocity);
            cpObj.LinearAcceleration = copy(obj.LinearAcceleration);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.TrackId = strObj.TrackId;
            obj.TrackShape = feval([obj.GeometryMsgsPolygonClass '.loadobj'], strObj.TrackShape);
            obj.LinearVelocity = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.LinearVelocity);
            obj.LinearAcceleration = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.LinearAcceleration);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.TrackId = obj.TrackId;
            strObj.TrackShape = saveobj(obj.TrackShape);
            strObj.LinearVelocity = saveobj(obj.LinearVelocity);
            strObj.LinearAcceleration = saveobj(obj.LinearAcceleration);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.radar_msgs.RadarTrack.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.radar_msgs.RadarTrack;
            obj.reload(strObj);
        end
    end
end
