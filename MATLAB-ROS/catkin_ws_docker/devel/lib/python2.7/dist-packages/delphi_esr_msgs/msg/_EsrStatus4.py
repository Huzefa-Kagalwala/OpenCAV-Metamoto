# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from delphi_esr_msgs/EsrStatus4.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class EsrStatus4(genpy.Message):
  _md5sum = "f7cf3bcce6d7e6a3b7b68f3a7c2726e4"
  _type = "delphi_esr_msgs/EsrStatus4"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

# ESR status4
string      canmsg
uint8       rolling_count3
uint8       mrlr_mode
bool        patial_blockage
bool        side_lobe_blockage
bool        lr_only_grating_lobe_det
bool        truck_target_det
uint8       path_id_acc
uint8       path_id_cmmb_move
uint8       path_id_cmmb_stat
uint8       path_id_fcw_move
uint8       path_id_fcw_stat
uint8       path_id_acc_stat
float32     auto_algin_angle



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','canmsg','rolling_count3','mrlr_mode','patial_blockage','side_lobe_blockage','lr_only_grating_lobe_det','truck_target_det','path_id_acc','path_id_cmmb_move','path_id_cmmb_stat','path_id_fcw_move','path_id_fcw_stat','path_id_acc_stat','auto_algin_angle']
  _slot_types = ['std_msgs/Header','string','uint8','uint8','bool','bool','bool','bool','uint8','uint8','uint8','uint8','uint8','uint8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,canmsg,rolling_count3,mrlr_mode,patial_blockage,side_lobe_blockage,lr_only_grating_lobe_det,truck_target_det,path_id_acc,path_id_cmmb_move,path_id_cmmb_stat,path_id_fcw_move,path_id_fcw_stat,path_id_acc_stat,auto_algin_angle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EsrStatus4, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.canmsg is None:
        self.canmsg = ''
      if self.rolling_count3 is None:
        self.rolling_count3 = 0
      if self.mrlr_mode is None:
        self.mrlr_mode = 0
      if self.patial_blockage is None:
        self.patial_blockage = False
      if self.side_lobe_blockage is None:
        self.side_lobe_blockage = False
      if self.lr_only_grating_lobe_det is None:
        self.lr_only_grating_lobe_det = False
      if self.truck_target_det is None:
        self.truck_target_det = False
      if self.path_id_acc is None:
        self.path_id_acc = 0
      if self.path_id_cmmb_move is None:
        self.path_id_cmmb_move = 0
      if self.path_id_cmmb_stat is None:
        self.path_id_cmmb_stat = 0
      if self.path_id_fcw_move is None:
        self.path_id_fcw_move = 0
      if self.path_id_fcw_stat is None:
        self.path_id_fcw_stat = 0
      if self.path_id_acc_stat is None:
        self.path_id_acc_stat = 0
      if self.auto_algin_angle is None:
        self.auto_algin_angle = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.canmsg = ''
      self.rolling_count3 = 0
      self.mrlr_mode = 0
      self.patial_blockage = False
      self.side_lobe_blockage = False
      self.lr_only_grating_lobe_det = False
      self.truck_target_det = False
      self.path_id_acc = 0
      self.path_id_cmmb_move = 0
      self.path_id_cmmb_stat = 0
      self.path_id_fcw_move = 0
      self.path_id_fcw_stat = 0
      self.path_id_acc_stat = 0
      self.auto_algin_angle = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.canmsg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_12Bf().pack(_x.rolling_count3, _x.mrlr_mode, _x.patial_blockage, _x.side_lobe_blockage, _x.lr_only_grating_lobe_det, _x.truck_target_det, _x.path_id_acc, _x.path_id_cmmb_move, _x.path_id_cmmb_stat, _x.path_id_fcw_move, _x.path_id_fcw_stat, _x.path_id_acc_stat, _x.auto_algin_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.canmsg = str[start:end].decode('utf-8')
      else:
        self.canmsg = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.rolling_count3, _x.mrlr_mode, _x.patial_blockage, _x.side_lobe_blockage, _x.lr_only_grating_lobe_det, _x.truck_target_det, _x.path_id_acc, _x.path_id_cmmb_move, _x.path_id_cmmb_stat, _x.path_id_fcw_move, _x.path_id_fcw_stat, _x.path_id_acc_stat, _x.auto_algin_angle,) = _get_struct_12Bf().unpack(str[start:end])
      self.patial_blockage = bool(self.patial_blockage)
      self.side_lobe_blockage = bool(self.side_lobe_blockage)
      self.lr_only_grating_lobe_det = bool(self.lr_only_grating_lobe_det)
      self.truck_target_det = bool(self.truck_target_det)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.canmsg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_12Bf().pack(_x.rolling_count3, _x.mrlr_mode, _x.patial_blockage, _x.side_lobe_blockage, _x.lr_only_grating_lobe_det, _x.truck_target_det, _x.path_id_acc, _x.path_id_cmmb_move, _x.path_id_cmmb_stat, _x.path_id_fcw_move, _x.path_id_fcw_stat, _x.path_id_acc_stat, _x.auto_algin_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.canmsg = str[start:end].decode('utf-8')
      else:
        self.canmsg = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.rolling_count3, _x.mrlr_mode, _x.patial_blockage, _x.side_lobe_blockage, _x.lr_only_grating_lobe_det, _x.truck_target_det, _x.path_id_acc, _x.path_id_cmmb_move, _x.path_id_cmmb_stat, _x.path_id_fcw_move, _x.path_id_fcw_stat, _x.path_id_acc_stat, _x.auto_algin_angle,) = _get_struct_12Bf().unpack(str[start:end])
      self.patial_blockage = bool(self.patial_blockage)
      self.side_lobe_blockage = bool(self.side_lobe_blockage)
      self.lr_only_grating_lobe_det = bool(self.lr_only_grating_lobe_det)
      self.truck_target_det = bool(self.truck_target_det)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12Bf = None
def _get_struct_12Bf():
    global _struct_12Bf
    if _struct_12Bf is None:
        _struct_12Bf = struct.Struct("<12Bf")
    return _struct_12Bf
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
