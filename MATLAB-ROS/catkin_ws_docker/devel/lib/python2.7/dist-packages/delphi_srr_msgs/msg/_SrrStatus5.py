# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from delphi_srr_msgs/SrrStatus5.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SrrStatus5(genpy.Message):
  _md5sum = "cd86757abd1063dffe9941dbe3f4362f"
  _type = "delphi_srr_msgs/SrrStatus5"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Message file for srr_status5

std_msgs/Header header

bool      disable_auto_align

uint8     can_tx_yaw_rate_ref_qf
uint8     CAN_TX_YAW_RATE_REF_QF_UNDEFINED=0
uint8     CAN_TX_YAW_RATE_REF_QF_TEMP_UNDEFINED=1
uint8     CAN_TX_YAW_RATE_REF_QF_NOT_ACCURATE=2
uint8     CAN_TX_YAW_RATE_REF_QF_ACCURATE=3

uint8     can_tx_yaw_rate_raw_qf
uint8     CAN_TX_YAW_RATE_RAW_QF_UNDEFINED=0
uint8     CAN_TX_YAW_RATE_RAW_QF_TEMP_UNDEFINED=1
uint8     CAN_TX_YAW_RATE_RAW_QF_NOT_ACCURATE=2
uint8     CAN_TX_YAW_RATE_RAW_QF_ACCURATE=3

float32   can_tx_yaw_rate_reference                # deg/s
float32   can_tx_yaw_rate_raw                      # deg/s

uint8     can_tx_system_status
uint8     CAN_TX_SYSTEM_STATUS_CONFIGURATION=0
uint8     CAN_TX_SYSTEM_STATUS_STARTUP=1
uint8     CAN_TX_SYSTEM_STATUS_RUNNING=2
uint8     CAN_TX_SYSTEM_STATUS_BLOCKED=3
uint8     CAN_TX_SYSTEM_STATUS_FAULTY=4
uint8     CAN_TX_SYSTEM_STATUS_SHUTDOWN=5
uint8     CAN_TX_SYSTEM_STATUS_HOT=6

int16     can_tx_outside_temperature               # degc
bool      can_blockage_mnr_blocked
bool      can_blockage_bb_blocked
bool      can_blockage_radar_blocked
bool      can_td_blocked
bool      radar_tx_power_error
bool      radar_lo_power_error
bool      radar_data_sync_error
bool      linearizer_spi_transfer_error
bool      saturated_tuning_freq_error
bool      rtn_spi_transfer_error
bool      rrn_spi_transfer_error
bool      video_port_capture_error
bool      vertical_misalignment_error
bool      tx_temperature_fault
bool      transmitter_id_error
bool      dsp_unit_cal_checksum_error
bool      dsp_unit_cal_block_chcksm_error
bool      dsp_tuning_sensitivity_error
bool      dsp_loop_overrun_error
bool      adc_spi_transfer_error

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  # Pseudo-constants
  CAN_TX_YAW_RATE_REF_QF_UNDEFINED = 0
  CAN_TX_YAW_RATE_REF_QF_TEMP_UNDEFINED = 1
  CAN_TX_YAW_RATE_REF_QF_NOT_ACCURATE = 2
  CAN_TX_YAW_RATE_REF_QF_ACCURATE = 3
  CAN_TX_YAW_RATE_RAW_QF_UNDEFINED = 0
  CAN_TX_YAW_RATE_RAW_QF_TEMP_UNDEFINED = 1
  CAN_TX_YAW_RATE_RAW_QF_NOT_ACCURATE = 2
  CAN_TX_YAW_RATE_RAW_QF_ACCURATE = 3
  CAN_TX_SYSTEM_STATUS_CONFIGURATION = 0
  CAN_TX_SYSTEM_STATUS_STARTUP = 1
  CAN_TX_SYSTEM_STATUS_RUNNING = 2
  CAN_TX_SYSTEM_STATUS_BLOCKED = 3
  CAN_TX_SYSTEM_STATUS_FAULTY = 4
  CAN_TX_SYSTEM_STATUS_SHUTDOWN = 5
  CAN_TX_SYSTEM_STATUS_HOT = 6

  __slots__ = ['header','disable_auto_align','can_tx_yaw_rate_ref_qf','can_tx_yaw_rate_raw_qf','can_tx_yaw_rate_reference','can_tx_yaw_rate_raw','can_tx_system_status','can_tx_outside_temperature','can_blockage_mnr_blocked','can_blockage_bb_blocked','can_blockage_radar_blocked','can_td_blocked','radar_tx_power_error','radar_lo_power_error','radar_data_sync_error','linearizer_spi_transfer_error','saturated_tuning_freq_error','rtn_spi_transfer_error','rrn_spi_transfer_error','video_port_capture_error','vertical_misalignment_error','tx_temperature_fault','transmitter_id_error','dsp_unit_cal_checksum_error','dsp_unit_cal_block_chcksm_error','dsp_tuning_sensitivity_error','dsp_loop_overrun_error','adc_spi_transfer_error']
  _slot_types = ['std_msgs/Header','bool','uint8','uint8','float32','float32','uint8','int16','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,disable_auto_align,can_tx_yaw_rate_ref_qf,can_tx_yaw_rate_raw_qf,can_tx_yaw_rate_reference,can_tx_yaw_rate_raw,can_tx_system_status,can_tx_outside_temperature,can_blockage_mnr_blocked,can_blockage_bb_blocked,can_blockage_radar_blocked,can_td_blocked,radar_tx_power_error,radar_lo_power_error,radar_data_sync_error,linearizer_spi_transfer_error,saturated_tuning_freq_error,rtn_spi_transfer_error,rrn_spi_transfer_error,video_port_capture_error,vertical_misalignment_error,tx_temperature_fault,transmitter_id_error,dsp_unit_cal_checksum_error,dsp_unit_cal_block_chcksm_error,dsp_tuning_sensitivity_error,dsp_loop_overrun_error,adc_spi_transfer_error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SrrStatus5, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.disable_auto_align is None:
        self.disable_auto_align = False
      if self.can_tx_yaw_rate_ref_qf is None:
        self.can_tx_yaw_rate_ref_qf = 0
      if self.can_tx_yaw_rate_raw_qf is None:
        self.can_tx_yaw_rate_raw_qf = 0
      if self.can_tx_yaw_rate_reference is None:
        self.can_tx_yaw_rate_reference = 0.
      if self.can_tx_yaw_rate_raw is None:
        self.can_tx_yaw_rate_raw = 0.
      if self.can_tx_system_status is None:
        self.can_tx_system_status = 0
      if self.can_tx_outside_temperature is None:
        self.can_tx_outside_temperature = 0
      if self.can_blockage_mnr_blocked is None:
        self.can_blockage_mnr_blocked = False
      if self.can_blockage_bb_blocked is None:
        self.can_blockage_bb_blocked = False
      if self.can_blockage_radar_blocked is None:
        self.can_blockage_radar_blocked = False
      if self.can_td_blocked is None:
        self.can_td_blocked = False
      if self.radar_tx_power_error is None:
        self.radar_tx_power_error = False
      if self.radar_lo_power_error is None:
        self.radar_lo_power_error = False
      if self.radar_data_sync_error is None:
        self.radar_data_sync_error = False
      if self.linearizer_spi_transfer_error is None:
        self.linearizer_spi_transfer_error = False
      if self.saturated_tuning_freq_error is None:
        self.saturated_tuning_freq_error = False
      if self.rtn_spi_transfer_error is None:
        self.rtn_spi_transfer_error = False
      if self.rrn_spi_transfer_error is None:
        self.rrn_spi_transfer_error = False
      if self.video_port_capture_error is None:
        self.video_port_capture_error = False
      if self.vertical_misalignment_error is None:
        self.vertical_misalignment_error = False
      if self.tx_temperature_fault is None:
        self.tx_temperature_fault = False
      if self.transmitter_id_error is None:
        self.transmitter_id_error = False
      if self.dsp_unit_cal_checksum_error is None:
        self.dsp_unit_cal_checksum_error = False
      if self.dsp_unit_cal_block_chcksm_error is None:
        self.dsp_unit_cal_block_chcksm_error = False
      if self.dsp_tuning_sensitivity_error is None:
        self.dsp_tuning_sensitivity_error = False
      if self.dsp_loop_overrun_error is None:
        self.dsp_loop_overrun_error = False
      if self.adc_spi_transfer_error is None:
        self.adc_spi_transfer_error = False
    else:
      self.header = std_msgs.msg.Header()
      self.disable_auto_align = False
      self.can_tx_yaw_rate_ref_qf = 0
      self.can_tx_yaw_rate_raw_qf = 0
      self.can_tx_yaw_rate_reference = 0.
      self.can_tx_yaw_rate_raw = 0.
      self.can_tx_system_status = 0
      self.can_tx_outside_temperature = 0
      self.can_blockage_mnr_blocked = False
      self.can_blockage_bb_blocked = False
      self.can_blockage_radar_blocked = False
      self.can_td_blocked = False
      self.radar_tx_power_error = False
      self.radar_lo_power_error = False
      self.radar_data_sync_error = False
      self.linearizer_spi_transfer_error = False
      self.saturated_tuning_freq_error = False
      self.rtn_spi_transfer_error = False
      self.rrn_spi_transfer_error = False
      self.video_port_capture_error = False
      self.vertical_misalignment_error = False
      self.tx_temperature_fault = False
      self.transmitter_id_error = False
      self.dsp_unit_cal_checksum_error = False
      self.dsp_unit_cal_block_chcksm_error = False
      self.dsp_tuning_sensitivity_error = False
      self.dsp_loop_overrun_error = False
      self.adc_spi_transfer_error = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B2fBh20B().pack(_x.disable_auto_align, _x.can_tx_yaw_rate_ref_qf, _x.can_tx_yaw_rate_raw_qf, _x.can_tx_yaw_rate_reference, _x.can_tx_yaw_rate_raw, _x.can_tx_system_status, _x.can_tx_outside_temperature, _x.can_blockage_mnr_blocked, _x.can_blockage_bb_blocked, _x.can_blockage_radar_blocked, _x.can_td_blocked, _x.radar_tx_power_error, _x.radar_lo_power_error, _x.radar_data_sync_error, _x.linearizer_spi_transfer_error, _x.saturated_tuning_freq_error, _x.rtn_spi_transfer_error, _x.rrn_spi_transfer_error, _x.video_port_capture_error, _x.vertical_misalignment_error, _x.tx_temperature_fault, _x.transmitter_id_error, _x.dsp_unit_cal_checksum_error, _x.dsp_unit_cal_block_chcksm_error, _x.dsp_tuning_sensitivity_error, _x.dsp_loop_overrun_error, _x.adc_spi_transfer_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.disable_auto_align, _x.can_tx_yaw_rate_ref_qf, _x.can_tx_yaw_rate_raw_qf, _x.can_tx_yaw_rate_reference, _x.can_tx_yaw_rate_raw, _x.can_tx_system_status, _x.can_tx_outside_temperature, _x.can_blockage_mnr_blocked, _x.can_blockage_bb_blocked, _x.can_blockage_radar_blocked, _x.can_td_blocked, _x.radar_tx_power_error, _x.radar_lo_power_error, _x.radar_data_sync_error, _x.linearizer_spi_transfer_error, _x.saturated_tuning_freq_error, _x.rtn_spi_transfer_error, _x.rrn_spi_transfer_error, _x.video_port_capture_error, _x.vertical_misalignment_error, _x.tx_temperature_fault, _x.transmitter_id_error, _x.dsp_unit_cal_checksum_error, _x.dsp_unit_cal_block_chcksm_error, _x.dsp_tuning_sensitivity_error, _x.dsp_loop_overrun_error, _x.adc_spi_transfer_error,) = _get_struct_3B2fBh20B().unpack(str[start:end])
      self.disable_auto_align = bool(self.disable_auto_align)
      self.can_blockage_mnr_blocked = bool(self.can_blockage_mnr_blocked)
      self.can_blockage_bb_blocked = bool(self.can_blockage_bb_blocked)
      self.can_blockage_radar_blocked = bool(self.can_blockage_radar_blocked)
      self.can_td_blocked = bool(self.can_td_blocked)
      self.radar_tx_power_error = bool(self.radar_tx_power_error)
      self.radar_lo_power_error = bool(self.radar_lo_power_error)
      self.radar_data_sync_error = bool(self.radar_data_sync_error)
      self.linearizer_spi_transfer_error = bool(self.linearizer_spi_transfer_error)
      self.saturated_tuning_freq_error = bool(self.saturated_tuning_freq_error)
      self.rtn_spi_transfer_error = bool(self.rtn_spi_transfer_error)
      self.rrn_spi_transfer_error = bool(self.rrn_spi_transfer_error)
      self.video_port_capture_error = bool(self.video_port_capture_error)
      self.vertical_misalignment_error = bool(self.vertical_misalignment_error)
      self.tx_temperature_fault = bool(self.tx_temperature_fault)
      self.transmitter_id_error = bool(self.transmitter_id_error)
      self.dsp_unit_cal_checksum_error = bool(self.dsp_unit_cal_checksum_error)
      self.dsp_unit_cal_block_chcksm_error = bool(self.dsp_unit_cal_block_chcksm_error)
      self.dsp_tuning_sensitivity_error = bool(self.dsp_tuning_sensitivity_error)
      self.dsp_loop_overrun_error = bool(self.dsp_loop_overrun_error)
      self.adc_spi_transfer_error = bool(self.adc_spi_transfer_error)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B2fBh20B().pack(_x.disable_auto_align, _x.can_tx_yaw_rate_ref_qf, _x.can_tx_yaw_rate_raw_qf, _x.can_tx_yaw_rate_reference, _x.can_tx_yaw_rate_raw, _x.can_tx_system_status, _x.can_tx_outside_temperature, _x.can_blockage_mnr_blocked, _x.can_blockage_bb_blocked, _x.can_blockage_radar_blocked, _x.can_td_blocked, _x.radar_tx_power_error, _x.radar_lo_power_error, _x.radar_data_sync_error, _x.linearizer_spi_transfer_error, _x.saturated_tuning_freq_error, _x.rtn_spi_transfer_error, _x.rrn_spi_transfer_error, _x.video_port_capture_error, _x.vertical_misalignment_error, _x.tx_temperature_fault, _x.transmitter_id_error, _x.dsp_unit_cal_checksum_error, _x.dsp_unit_cal_block_chcksm_error, _x.dsp_tuning_sensitivity_error, _x.dsp_loop_overrun_error, _x.adc_spi_transfer_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.disable_auto_align, _x.can_tx_yaw_rate_ref_qf, _x.can_tx_yaw_rate_raw_qf, _x.can_tx_yaw_rate_reference, _x.can_tx_yaw_rate_raw, _x.can_tx_system_status, _x.can_tx_outside_temperature, _x.can_blockage_mnr_blocked, _x.can_blockage_bb_blocked, _x.can_blockage_radar_blocked, _x.can_td_blocked, _x.radar_tx_power_error, _x.radar_lo_power_error, _x.radar_data_sync_error, _x.linearizer_spi_transfer_error, _x.saturated_tuning_freq_error, _x.rtn_spi_transfer_error, _x.rrn_spi_transfer_error, _x.video_port_capture_error, _x.vertical_misalignment_error, _x.tx_temperature_fault, _x.transmitter_id_error, _x.dsp_unit_cal_checksum_error, _x.dsp_unit_cal_block_chcksm_error, _x.dsp_tuning_sensitivity_error, _x.dsp_loop_overrun_error, _x.adc_spi_transfer_error,) = _get_struct_3B2fBh20B().unpack(str[start:end])
      self.disable_auto_align = bool(self.disable_auto_align)
      self.can_blockage_mnr_blocked = bool(self.can_blockage_mnr_blocked)
      self.can_blockage_bb_blocked = bool(self.can_blockage_bb_blocked)
      self.can_blockage_radar_blocked = bool(self.can_blockage_radar_blocked)
      self.can_td_blocked = bool(self.can_td_blocked)
      self.radar_tx_power_error = bool(self.radar_tx_power_error)
      self.radar_lo_power_error = bool(self.radar_lo_power_error)
      self.radar_data_sync_error = bool(self.radar_data_sync_error)
      self.linearizer_spi_transfer_error = bool(self.linearizer_spi_transfer_error)
      self.saturated_tuning_freq_error = bool(self.saturated_tuning_freq_error)
      self.rtn_spi_transfer_error = bool(self.rtn_spi_transfer_error)
      self.rrn_spi_transfer_error = bool(self.rrn_spi_transfer_error)
      self.video_port_capture_error = bool(self.video_port_capture_error)
      self.vertical_misalignment_error = bool(self.vertical_misalignment_error)
      self.tx_temperature_fault = bool(self.tx_temperature_fault)
      self.transmitter_id_error = bool(self.transmitter_id_error)
      self.dsp_unit_cal_checksum_error = bool(self.dsp_unit_cal_checksum_error)
      self.dsp_unit_cal_block_chcksm_error = bool(self.dsp_unit_cal_block_chcksm_error)
      self.dsp_tuning_sensitivity_error = bool(self.dsp_tuning_sensitivity_error)
      self.dsp_loop_overrun_error = bool(self.dsp_loop_overrun_error)
      self.adc_spi_transfer_error = bool(self.adc_spi_transfer_error)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3B2fBh20B = None
def _get_struct_3B2fBh20B():
    global _struct_3B2fBh20B
    if _struct_3B2fBh20B is None:
        _struct_3B2fBh20B = struct.Struct("<3B2fBh20B")
    return _struct_3B2fBh20B
