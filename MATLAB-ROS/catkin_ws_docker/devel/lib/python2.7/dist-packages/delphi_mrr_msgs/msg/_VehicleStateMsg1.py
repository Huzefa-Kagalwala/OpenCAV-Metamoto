# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from delphi_mrr_msgs/VehicleStateMsg1.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class VehicleStateMsg1(genpy.Message):
  _md5sum = "4e618541e68575b49921e9828f3c74e1"
  _type = "delphi_mrr_msgs/VehicleStateMsg1"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

uint8  can_fcw_sensitivity_level
bool   can_vehicle_stationary
uint8  can_intf_minor_version
uint8  can_intf_major_version
uint8  can_brake_pedal
bool   can_high_wheel_slip
bool   can_washer_front_cmd
bool   can_wiper_front_cmd
uint8  can_wiper_speed_info
bool   can_reverse_gear
uint8  can_beam_shape_actual_right
uint8  can_beam_shape_actual_left
bool   can_main_beam_indication
uint16 can_vehicle_index

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','can_fcw_sensitivity_level','can_vehicle_stationary','can_intf_minor_version','can_intf_major_version','can_brake_pedal','can_high_wheel_slip','can_washer_front_cmd','can_wiper_front_cmd','can_wiper_speed_info','can_reverse_gear','can_beam_shape_actual_right','can_beam_shape_actual_left','can_main_beam_indication','can_vehicle_index']
  _slot_types = ['std_msgs/Header','uint8','bool','uint8','uint8','uint8','bool','bool','bool','uint8','bool','uint8','uint8','bool','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,can_fcw_sensitivity_level,can_vehicle_stationary,can_intf_minor_version,can_intf_major_version,can_brake_pedal,can_high_wheel_slip,can_washer_front_cmd,can_wiper_front_cmd,can_wiper_speed_info,can_reverse_gear,can_beam_shape_actual_right,can_beam_shape_actual_left,can_main_beam_indication,can_vehicle_index

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleStateMsg1, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.can_fcw_sensitivity_level is None:
        self.can_fcw_sensitivity_level = 0
      if self.can_vehicle_stationary is None:
        self.can_vehicle_stationary = False
      if self.can_intf_minor_version is None:
        self.can_intf_minor_version = 0
      if self.can_intf_major_version is None:
        self.can_intf_major_version = 0
      if self.can_brake_pedal is None:
        self.can_brake_pedal = 0
      if self.can_high_wheel_slip is None:
        self.can_high_wheel_slip = False
      if self.can_washer_front_cmd is None:
        self.can_washer_front_cmd = False
      if self.can_wiper_front_cmd is None:
        self.can_wiper_front_cmd = False
      if self.can_wiper_speed_info is None:
        self.can_wiper_speed_info = 0
      if self.can_reverse_gear is None:
        self.can_reverse_gear = False
      if self.can_beam_shape_actual_right is None:
        self.can_beam_shape_actual_right = 0
      if self.can_beam_shape_actual_left is None:
        self.can_beam_shape_actual_left = 0
      if self.can_main_beam_indication is None:
        self.can_main_beam_indication = False
      if self.can_vehicle_index is None:
        self.can_vehicle_index = 0
    else:
      self.header = std_msgs.msg.Header()
      self.can_fcw_sensitivity_level = 0
      self.can_vehicle_stationary = False
      self.can_intf_minor_version = 0
      self.can_intf_major_version = 0
      self.can_brake_pedal = 0
      self.can_high_wheel_slip = False
      self.can_washer_front_cmd = False
      self.can_wiper_front_cmd = False
      self.can_wiper_speed_info = 0
      self.can_reverse_gear = False
      self.can_beam_shape_actual_right = 0
      self.can_beam_shape_actual_left = 0
      self.can_main_beam_indication = False
      self.can_vehicle_index = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_13BH().pack(_x.can_fcw_sensitivity_level, _x.can_vehicle_stationary, _x.can_intf_minor_version, _x.can_intf_major_version, _x.can_brake_pedal, _x.can_high_wheel_slip, _x.can_washer_front_cmd, _x.can_wiper_front_cmd, _x.can_wiper_speed_info, _x.can_reverse_gear, _x.can_beam_shape_actual_right, _x.can_beam_shape_actual_left, _x.can_main_beam_indication, _x.can_vehicle_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.can_fcw_sensitivity_level, _x.can_vehicle_stationary, _x.can_intf_minor_version, _x.can_intf_major_version, _x.can_brake_pedal, _x.can_high_wheel_slip, _x.can_washer_front_cmd, _x.can_wiper_front_cmd, _x.can_wiper_speed_info, _x.can_reverse_gear, _x.can_beam_shape_actual_right, _x.can_beam_shape_actual_left, _x.can_main_beam_indication, _x.can_vehicle_index,) = _get_struct_13BH().unpack(str[start:end])
      self.can_vehicle_stationary = bool(self.can_vehicle_stationary)
      self.can_high_wheel_slip = bool(self.can_high_wheel_slip)
      self.can_washer_front_cmd = bool(self.can_washer_front_cmd)
      self.can_wiper_front_cmd = bool(self.can_wiper_front_cmd)
      self.can_reverse_gear = bool(self.can_reverse_gear)
      self.can_main_beam_indication = bool(self.can_main_beam_indication)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_13BH().pack(_x.can_fcw_sensitivity_level, _x.can_vehicle_stationary, _x.can_intf_minor_version, _x.can_intf_major_version, _x.can_brake_pedal, _x.can_high_wheel_slip, _x.can_washer_front_cmd, _x.can_wiper_front_cmd, _x.can_wiper_speed_info, _x.can_reverse_gear, _x.can_beam_shape_actual_right, _x.can_beam_shape_actual_left, _x.can_main_beam_indication, _x.can_vehicle_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.can_fcw_sensitivity_level, _x.can_vehicle_stationary, _x.can_intf_minor_version, _x.can_intf_major_version, _x.can_brake_pedal, _x.can_high_wheel_slip, _x.can_washer_front_cmd, _x.can_wiper_front_cmd, _x.can_wiper_speed_info, _x.can_reverse_gear, _x.can_beam_shape_actual_right, _x.can_beam_shape_actual_left, _x.can_main_beam_indication, _x.can_vehicle_index,) = _get_struct_13BH().unpack(str[start:end])
      self.can_vehicle_stationary = bool(self.can_vehicle_stationary)
      self.can_high_wheel_slip = bool(self.can_high_wheel_slip)
      self.can_washer_front_cmd = bool(self.can_washer_front_cmd)
      self.can_wiper_front_cmd = bool(self.can_wiper_front_cmd)
      self.can_reverse_gear = bool(self.can_reverse_gear)
      self.can_main_beam_indication = bool(self.can_main_beam_indication)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_13BH = None
def _get_struct_13BH():
    global _struct_13BH
    if _struct_13BH is None:
        _struct_13BH = struct.Struct("<13BH")
    return _struct_13BH
