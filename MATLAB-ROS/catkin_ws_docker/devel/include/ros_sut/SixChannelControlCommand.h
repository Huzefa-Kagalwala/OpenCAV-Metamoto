// Generated by gencpp from file ros_sut/SixChannelControlCommand.msg
// DO NOT EDIT!


#ifndef ROS_SUT_MESSAGE_SIXCHANNELCONTROLCOMMAND_H
#define ROS_SUT_MESSAGE_SIXCHANNELCONTROLCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ros_sut
{
template <class ContainerAllocator>
struct SixChannelControlCommand_
{
  typedef SixChannelControlCommand_<ContainerAllocator> Type;

  SixChannelControlCommand_()
    : header()
    , fl_rpm(0.0)
    , fr_rpm(0.0)
    , rl_rpm(0.0)
    , rr_rpm(0.0)
    , fl_steer(0.0)
    , fr_steer(0.0)
    , brake(0.0)
    , throttle(0.0)  {
    }
  SixChannelControlCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , fl_rpm(0.0)
    , fr_rpm(0.0)
    , rl_rpm(0.0)
    , rr_rpm(0.0)
    , fl_steer(0.0)
    , fr_steer(0.0)
    , brake(0.0)
    , throttle(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _fl_rpm_type;
  _fl_rpm_type fl_rpm;

   typedef float _fr_rpm_type;
  _fr_rpm_type fr_rpm;

   typedef float _rl_rpm_type;
  _rl_rpm_type rl_rpm;

   typedef float _rr_rpm_type;
  _rr_rpm_type rr_rpm;

   typedef float _fl_steer_type;
  _fl_steer_type fl_steer;

   typedef float _fr_steer_type;
  _fr_steer_type fr_steer;

   typedef float _brake_type;
  _brake_type brake;

   typedef float _throttle_type;
  _throttle_type throttle;





  typedef boost::shared_ptr< ::ros_sut::SixChannelControlCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sut::SixChannelControlCommand_<ContainerAllocator> const> ConstPtr;

}; // struct SixChannelControlCommand_

typedef ::ros_sut::SixChannelControlCommand_<std::allocator<void> > SixChannelControlCommand;

typedef boost::shared_ptr< ::ros_sut::SixChannelControlCommand > SixChannelControlCommandPtr;
typedef boost::shared_ptr< ::ros_sut::SixChannelControlCommand const> SixChannelControlCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sut::SixChannelControlCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sut::SixChannelControlCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sut

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ros_sut': ['/metamoto/catkin_ws/src/ros_sut/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sut::SixChannelControlCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sut::SixChannelControlCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sut::SixChannelControlCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sut::SixChannelControlCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sut::SixChannelControlCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sut::SixChannelControlCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sut::SixChannelControlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f55685654ce18486e93ee8817c0a1ab";
  }

  static const char* value(const ::ros_sut::SixChannelControlCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f55685654ce1848ULL;
  static const uint64_t static_value2 = 0x6e93ee8817c0a1abULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sut::SixChannelControlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sut/SixChannelControlCommand";
  }

  static const char* value(const ::ros_sut::SixChannelControlCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sut::SixChannelControlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
\n\
# 4 wheel speeds in rpm\n\
float32 fl_rpm\n\
float32 fr_rpm\n\
float32 rl_rpm\n\
float32 rr_rpm\n\
\n\
# front 2 wheel steer angles in degrees, left is positive\n\
float32 fl_steer\n\
float32 fr_steer\n\
\n\
# Brake value from 0 to 1\n\
float32 brake\n\
\n\
# Throttle value from 0 to 1\n\
float32 throttle\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::ros_sut::SixChannelControlCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sut::SixChannelControlCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.fl_rpm);
      stream.next(m.fr_rpm);
      stream.next(m.rl_rpm);
      stream.next(m.rr_rpm);
      stream.next(m.fl_steer);
      stream.next(m.fr_steer);
      stream.next(m.brake);
      stream.next(m.throttle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SixChannelControlCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sut::SixChannelControlCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sut::SixChannelControlCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "fl_rpm: ";
    Printer<float>::stream(s, indent + "  ", v.fl_rpm);
    s << indent << "fr_rpm: ";
    Printer<float>::stream(s, indent + "  ", v.fr_rpm);
    s << indent << "rl_rpm: ";
    Printer<float>::stream(s, indent + "  ", v.rl_rpm);
    s << indent << "rr_rpm: ";
    Printer<float>::stream(s, indent + "  ", v.rr_rpm);
    s << indent << "fl_steer: ";
    Printer<float>::stream(s, indent + "  ", v.fl_steer);
    s << indent << "fr_steer: ";
    Printer<float>::stream(s, indent + "  ", v.fr_steer);
    s << indent << "brake: ";
    Printer<float>::stream(s, indent + "  ", v.brake);
    s << indent << "throttle: ";
    Printer<float>::stream(s, indent + "  ", v.throttle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SUT_MESSAGE_SIXCHANNELCONTROLCOMMAND_H
