// Generated by gencpp from file delphi_mrr_msgs/SystemAlignment2.msg
// DO NOT EDIT!


#ifndef DELPHI_MRR_MSGS_MESSAGE_SYSTEMALIGNMENT2_H
#define DELPHI_MRR_MSGS_MESSAGE_SYSTEMALIGNMENT2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_mrr_msgs
{
template <class ContainerAllocator>
struct SystemAlignment2_
{
  typedef SystemAlignment2_<ContainerAllocator> Type;

  SystemAlignment2_()
    : header()
    , can_serv_align_updates_need(0)
    , can_serv_align_type(false)
    , can_radar_height(0)
    , can_radar_fov_mr(0)
    , can_radar_fov_rr(0)
    , can_align_enable(0)
    , can_angle_mounting_hoffset(0.0)
    , can_aalign_avg_ctr_total(0)  {
    }
  SystemAlignment2_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , can_serv_align_updates_need(0)
    , can_serv_align_type(false)
    , can_radar_height(0)
    , can_radar_fov_mr(0)
    , can_radar_fov_rr(0)
    , can_align_enable(0)
    , can_angle_mounting_hoffset(0.0)
    , can_aalign_avg_ctr_total(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _can_serv_align_updates_need_type;
  _can_serv_align_updates_need_type can_serv_align_updates_need;

   typedef uint8_t _can_serv_align_type_type;
  _can_serv_align_type_type can_serv_align_type;

   typedef uint8_t _can_radar_height_type;
  _can_radar_height_type can_radar_height;

   typedef uint8_t _can_radar_fov_mr_type;
  _can_radar_fov_mr_type can_radar_fov_mr;

   typedef uint8_t _can_radar_fov_rr_type;
  _can_radar_fov_rr_type can_radar_fov_rr;

   typedef uint8_t _can_align_enable_type;
  _can_align_enable_type can_align_enable;

   typedef float _can_angle_mounting_hoffset_type;
  _can_angle_mounting_hoffset_type can_angle_mounting_hoffset;

   typedef uint8_t _can_aalign_avg_ctr_total_type;
  _can_aalign_avg_ctr_total_type can_aalign_avg_ctr_total;





  typedef boost::shared_ptr< ::delphi_mrr_msgs::SystemAlignment2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_mrr_msgs::SystemAlignment2_<ContainerAllocator> const> ConstPtr;

}; // struct SystemAlignment2_

typedef ::delphi_mrr_msgs::SystemAlignment2_<std::allocator<void> > SystemAlignment2;

typedef boost::shared_ptr< ::delphi_mrr_msgs::SystemAlignment2 > SystemAlignment2Ptr;
typedef boost::shared_ptr< ::delphi_mrr_msgs::SystemAlignment2 const> SystemAlignment2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_mrr_msgs::SystemAlignment2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_mrr_msgs::SystemAlignment2_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace delphi_mrr_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'delphi_mrr_msgs': ['/metamoto/catkin_ws/src/astuff_sensor_msgs/delphi_mrr_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::delphi_mrr_msgs::SystemAlignment2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_mrr_msgs::SystemAlignment2_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_mrr_msgs::SystemAlignment2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_mrr_msgs::SystemAlignment2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_mrr_msgs::SystemAlignment2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_mrr_msgs::SystemAlignment2_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_mrr_msgs::SystemAlignment2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fab1b79e32d15c3fd6d3030b565850a5";
  }

  static const char* value(const ::delphi_mrr_msgs::SystemAlignment2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfab1b79e32d15c3fULL;
  static const uint64_t static_value2 = 0xd6d3030b565850a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_mrr_msgs::SystemAlignment2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_mrr_msgs/SystemAlignment2";
  }

  static const char* value(const ::delphi_mrr_msgs::SystemAlignment2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_mrr_msgs::SystemAlignment2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
\n\
uint8 	 can_serv_align_updates_need\n\
bool     can_serv_align_type\n\
uint8 	 can_radar_height\n\
uint8 	 can_radar_fov_mr\n\
uint8 	 can_radar_fov_rr\n\
uint8 	 can_align_enable\n\
float32  can_angle_mounting_hoffset\n\
uint8 	 can_aalign_avg_ctr_total\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::delphi_mrr_msgs::SystemAlignment2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_mrr_msgs::SystemAlignment2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.can_serv_align_updates_need);
      stream.next(m.can_serv_align_type);
      stream.next(m.can_radar_height);
      stream.next(m.can_radar_fov_mr);
      stream.next(m.can_radar_fov_rr);
      stream.next(m.can_align_enable);
      stream.next(m.can_angle_mounting_hoffset);
      stream.next(m.can_aalign_avg_ctr_total);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SystemAlignment2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_mrr_msgs::SystemAlignment2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_mrr_msgs::SystemAlignment2_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "can_serv_align_updates_need: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_serv_align_updates_need);
    s << indent << "can_serv_align_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_serv_align_type);
    s << indent << "can_radar_height: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_radar_height);
    s << indent << "can_radar_fov_mr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_radar_fov_mr);
    s << indent << "can_radar_fov_rr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_radar_fov_rr);
    s << indent << "can_align_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_align_enable);
    s << indent << "can_angle_mounting_hoffset: ";
    Printer<float>::stream(s, indent + "  ", v.can_angle_mounting_hoffset);
    s << indent << "can_aalign_avg_ctr_total: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_aalign_avg_ctr_total);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_MRR_MSGS_MESSAGE_SYSTEMALIGNMENT2_H
