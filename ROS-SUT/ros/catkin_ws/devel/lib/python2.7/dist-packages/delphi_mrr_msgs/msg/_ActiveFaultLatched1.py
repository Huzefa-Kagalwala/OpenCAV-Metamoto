# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from delphi_mrr_msgs/ActiveFaultLatched1.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ActiveFaultLatched1(genpy.Message):
  _md5sum = "5994984ee721acb9bf8573f88abcd9bc"
  _type = "delphi_mrr_msgs/ActiveFaultLatched1"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

bool active_flt_latched_byte7_bit7
bool active_flt_latched_byte7_bit6
bool active_flt_latched_byte7_bit5
bool active_flt_latched_byte7_bit4
bool arm_to_dsp_chksum_fault
bool dsp_to_arm_chksum_fault
bool host_to_arm_chksum_fault
bool arm_to_host_chksum_fault
bool loop_bw_outof_range
bool dsp_overrun_fault
bool active_flt_latched_byte6_bit5
bool tuning_sensitivity_fault
bool saturated_tuning_freq_fault
bool local_osc_power_fault
bool transmitter_power_fault
bool active_flt_latched_byte6_bit0
bool active_flt_latched_byte5_bit7
bool active_flt_latched_byte5_bit6
bool xcvr_device_spi_fault
bool freq_synthesizer_spi_fault
bool analog_converter_devic_spi_fault
bool side_lobe_blockage
bool active_flt_latched_byte5_bit1
bool mnr_blocked
bool ecu_temp_high_fault
bool transmitter_temp_high_fault
bool alignment_routine_failed_fault
bool unreasonable_radar_data
bool microprocessor_temp_high_fault
bool vertical_alignment_outof_range
bool horizontal_alignment_outof_range
bool factory_alignment_mode
bool battery_low_fault
bool battery_high_fault
bool v1_p25_supply_outof_range
bool active_flt_latched_byte3_bit4
bool thermistor_outof_range
bool v3_p3_dac_supply_outof_range
bool v3_p3_raw_supply_outof_range
bool v5_supply_outof_range
bool transmitter_id_fault
bool active_flt_latched_byte2_bit6
bool active_flt_latched_byte2_bit5
bool active_flt_latched_byte2_bit4
bool active_flt_latched_byte2_bit3
bool active_flt_latched_byte2_bit2
bool pcan_missing_msg_fault
bool pcan_bus_off
bool active_flt_latched_byte1_bit7
bool active_flt_latched_byte1_bit6
bool instruction_set_check_fault
bool stack_overflow_fault
bool watchdog_fault
bool pll_lock_fault
bool active_flt_latched_byte1_bit1
bool ram_memory_test_fault
bool usc_validation_fault
bool active_flt_latched_byte0_bit6
bool active_flt_latched_byte0_bit5
bool active_flt_latched_byte0_bit4
bool active_flt_latched_byte0_bit3
bool keep_alive_checksum_fault
bool program_calibration_flash_checksum
bool application_flash_checksum_fault

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','active_flt_latched_byte7_bit7','active_flt_latched_byte7_bit6','active_flt_latched_byte7_bit5','active_flt_latched_byte7_bit4','arm_to_dsp_chksum_fault','dsp_to_arm_chksum_fault','host_to_arm_chksum_fault','arm_to_host_chksum_fault','loop_bw_outof_range','dsp_overrun_fault','active_flt_latched_byte6_bit5','tuning_sensitivity_fault','saturated_tuning_freq_fault','local_osc_power_fault','transmitter_power_fault','active_flt_latched_byte6_bit0','active_flt_latched_byte5_bit7','active_flt_latched_byte5_bit6','xcvr_device_spi_fault','freq_synthesizer_spi_fault','analog_converter_devic_spi_fault','side_lobe_blockage','active_flt_latched_byte5_bit1','mnr_blocked','ecu_temp_high_fault','transmitter_temp_high_fault','alignment_routine_failed_fault','unreasonable_radar_data','microprocessor_temp_high_fault','vertical_alignment_outof_range','horizontal_alignment_outof_range','factory_alignment_mode','battery_low_fault','battery_high_fault','v1_p25_supply_outof_range','active_flt_latched_byte3_bit4','thermistor_outof_range','v3_p3_dac_supply_outof_range','v3_p3_raw_supply_outof_range','v5_supply_outof_range','transmitter_id_fault','active_flt_latched_byte2_bit6','active_flt_latched_byte2_bit5','active_flt_latched_byte2_bit4','active_flt_latched_byte2_bit3','active_flt_latched_byte2_bit2','pcan_missing_msg_fault','pcan_bus_off','active_flt_latched_byte1_bit7','active_flt_latched_byte1_bit6','instruction_set_check_fault','stack_overflow_fault','watchdog_fault','pll_lock_fault','active_flt_latched_byte1_bit1','ram_memory_test_fault','usc_validation_fault','active_flt_latched_byte0_bit6','active_flt_latched_byte0_bit5','active_flt_latched_byte0_bit4','active_flt_latched_byte0_bit3','keep_alive_checksum_fault','program_calibration_flash_checksum','application_flash_checksum_fault']
  _slot_types = ['std_msgs/Header','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,active_flt_latched_byte7_bit7,active_flt_latched_byte7_bit6,active_flt_latched_byte7_bit5,active_flt_latched_byte7_bit4,arm_to_dsp_chksum_fault,dsp_to_arm_chksum_fault,host_to_arm_chksum_fault,arm_to_host_chksum_fault,loop_bw_outof_range,dsp_overrun_fault,active_flt_latched_byte6_bit5,tuning_sensitivity_fault,saturated_tuning_freq_fault,local_osc_power_fault,transmitter_power_fault,active_flt_latched_byte6_bit0,active_flt_latched_byte5_bit7,active_flt_latched_byte5_bit6,xcvr_device_spi_fault,freq_synthesizer_spi_fault,analog_converter_devic_spi_fault,side_lobe_blockage,active_flt_latched_byte5_bit1,mnr_blocked,ecu_temp_high_fault,transmitter_temp_high_fault,alignment_routine_failed_fault,unreasonable_radar_data,microprocessor_temp_high_fault,vertical_alignment_outof_range,horizontal_alignment_outof_range,factory_alignment_mode,battery_low_fault,battery_high_fault,v1_p25_supply_outof_range,active_flt_latched_byte3_bit4,thermistor_outof_range,v3_p3_dac_supply_outof_range,v3_p3_raw_supply_outof_range,v5_supply_outof_range,transmitter_id_fault,active_flt_latched_byte2_bit6,active_flt_latched_byte2_bit5,active_flt_latched_byte2_bit4,active_flt_latched_byte2_bit3,active_flt_latched_byte2_bit2,pcan_missing_msg_fault,pcan_bus_off,active_flt_latched_byte1_bit7,active_flt_latched_byte1_bit6,instruction_set_check_fault,stack_overflow_fault,watchdog_fault,pll_lock_fault,active_flt_latched_byte1_bit1,ram_memory_test_fault,usc_validation_fault,active_flt_latched_byte0_bit6,active_flt_latched_byte0_bit5,active_flt_latched_byte0_bit4,active_flt_latched_byte0_bit3,keep_alive_checksum_fault,program_calibration_flash_checksum,application_flash_checksum_fault

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ActiveFaultLatched1, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.active_flt_latched_byte7_bit7 is None:
        self.active_flt_latched_byte7_bit7 = False
      if self.active_flt_latched_byte7_bit6 is None:
        self.active_flt_latched_byte7_bit6 = False
      if self.active_flt_latched_byte7_bit5 is None:
        self.active_flt_latched_byte7_bit5 = False
      if self.active_flt_latched_byte7_bit4 is None:
        self.active_flt_latched_byte7_bit4 = False
      if self.arm_to_dsp_chksum_fault is None:
        self.arm_to_dsp_chksum_fault = False
      if self.dsp_to_arm_chksum_fault is None:
        self.dsp_to_arm_chksum_fault = False
      if self.host_to_arm_chksum_fault is None:
        self.host_to_arm_chksum_fault = False
      if self.arm_to_host_chksum_fault is None:
        self.arm_to_host_chksum_fault = False
      if self.loop_bw_outof_range is None:
        self.loop_bw_outof_range = False
      if self.dsp_overrun_fault is None:
        self.dsp_overrun_fault = False
      if self.active_flt_latched_byte6_bit5 is None:
        self.active_flt_latched_byte6_bit5 = False
      if self.tuning_sensitivity_fault is None:
        self.tuning_sensitivity_fault = False
      if self.saturated_tuning_freq_fault is None:
        self.saturated_tuning_freq_fault = False
      if self.local_osc_power_fault is None:
        self.local_osc_power_fault = False
      if self.transmitter_power_fault is None:
        self.transmitter_power_fault = False
      if self.active_flt_latched_byte6_bit0 is None:
        self.active_flt_latched_byte6_bit0 = False
      if self.active_flt_latched_byte5_bit7 is None:
        self.active_flt_latched_byte5_bit7 = False
      if self.active_flt_latched_byte5_bit6 is None:
        self.active_flt_latched_byte5_bit6 = False
      if self.xcvr_device_spi_fault is None:
        self.xcvr_device_spi_fault = False
      if self.freq_synthesizer_spi_fault is None:
        self.freq_synthesizer_spi_fault = False
      if self.analog_converter_devic_spi_fault is None:
        self.analog_converter_devic_spi_fault = False
      if self.side_lobe_blockage is None:
        self.side_lobe_blockage = False
      if self.active_flt_latched_byte5_bit1 is None:
        self.active_flt_latched_byte5_bit1 = False
      if self.mnr_blocked is None:
        self.mnr_blocked = False
      if self.ecu_temp_high_fault is None:
        self.ecu_temp_high_fault = False
      if self.transmitter_temp_high_fault is None:
        self.transmitter_temp_high_fault = False
      if self.alignment_routine_failed_fault is None:
        self.alignment_routine_failed_fault = False
      if self.unreasonable_radar_data is None:
        self.unreasonable_radar_data = False
      if self.microprocessor_temp_high_fault is None:
        self.microprocessor_temp_high_fault = False
      if self.vertical_alignment_outof_range is None:
        self.vertical_alignment_outof_range = False
      if self.horizontal_alignment_outof_range is None:
        self.horizontal_alignment_outof_range = False
      if self.factory_alignment_mode is None:
        self.factory_alignment_mode = False
      if self.battery_low_fault is None:
        self.battery_low_fault = False
      if self.battery_high_fault is None:
        self.battery_high_fault = False
      if self.v1_p25_supply_outof_range is None:
        self.v1_p25_supply_outof_range = False
      if self.active_flt_latched_byte3_bit4 is None:
        self.active_flt_latched_byte3_bit4 = False
      if self.thermistor_outof_range is None:
        self.thermistor_outof_range = False
      if self.v3_p3_dac_supply_outof_range is None:
        self.v3_p3_dac_supply_outof_range = False
      if self.v3_p3_raw_supply_outof_range is None:
        self.v3_p3_raw_supply_outof_range = False
      if self.v5_supply_outof_range is None:
        self.v5_supply_outof_range = False
      if self.transmitter_id_fault is None:
        self.transmitter_id_fault = False
      if self.active_flt_latched_byte2_bit6 is None:
        self.active_flt_latched_byte2_bit6 = False
      if self.active_flt_latched_byte2_bit5 is None:
        self.active_flt_latched_byte2_bit5 = False
      if self.active_flt_latched_byte2_bit4 is None:
        self.active_flt_latched_byte2_bit4 = False
      if self.active_flt_latched_byte2_bit3 is None:
        self.active_flt_latched_byte2_bit3 = False
      if self.active_flt_latched_byte2_bit2 is None:
        self.active_flt_latched_byte2_bit2 = False
      if self.pcan_missing_msg_fault is None:
        self.pcan_missing_msg_fault = False
      if self.pcan_bus_off is None:
        self.pcan_bus_off = False
      if self.active_flt_latched_byte1_bit7 is None:
        self.active_flt_latched_byte1_bit7 = False
      if self.active_flt_latched_byte1_bit6 is None:
        self.active_flt_latched_byte1_bit6 = False
      if self.instruction_set_check_fault is None:
        self.instruction_set_check_fault = False
      if self.stack_overflow_fault is None:
        self.stack_overflow_fault = False
      if self.watchdog_fault is None:
        self.watchdog_fault = False
      if self.pll_lock_fault is None:
        self.pll_lock_fault = False
      if self.active_flt_latched_byte1_bit1 is None:
        self.active_flt_latched_byte1_bit1 = False
      if self.ram_memory_test_fault is None:
        self.ram_memory_test_fault = False
      if self.usc_validation_fault is None:
        self.usc_validation_fault = False
      if self.active_flt_latched_byte0_bit6 is None:
        self.active_flt_latched_byte0_bit6 = False
      if self.active_flt_latched_byte0_bit5 is None:
        self.active_flt_latched_byte0_bit5 = False
      if self.active_flt_latched_byte0_bit4 is None:
        self.active_flt_latched_byte0_bit4 = False
      if self.active_flt_latched_byte0_bit3 is None:
        self.active_flt_latched_byte0_bit3 = False
      if self.keep_alive_checksum_fault is None:
        self.keep_alive_checksum_fault = False
      if self.program_calibration_flash_checksum is None:
        self.program_calibration_flash_checksum = False
      if self.application_flash_checksum_fault is None:
        self.application_flash_checksum_fault = False
    else:
      self.header = std_msgs.msg.Header()
      self.active_flt_latched_byte7_bit7 = False
      self.active_flt_latched_byte7_bit6 = False
      self.active_flt_latched_byte7_bit5 = False
      self.active_flt_latched_byte7_bit4 = False
      self.arm_to_dsp_chksum_fault = False
      self.dsp_to_arm_chksum_fault = False
      self.host_to_arm_chksum_fault = False
      self.arm_to_host_chksum_fault = False
      self.loop_bw_outof_range = False
      self.dsp_overrun_fault = False
      self.active_flt_latched_byte6_bit5 = False
      self.tuning_sensitivity_fault = False
      self.saturated_tuning_freq_fault = False
      self.local_osc_power_fault = False
      self.transmitter_power_fault = False
      self.active_flt_latched_byte6_bit0 = False
      self.active_flt_latched_byte5_bit7 = False
      self.active_flt_latched_byte5_bit6 = False
      self.xcvr_device_spi_fault = False
      self.freq_synthesizer_spi_fault = False
      self.analog_converter_devic_spi_fault = False
      self.side_lobe_blockage = False
      self.active_flt_latched_byte5_bit1 = False
      self.mnr_blocked = False
      self.ecu_temp_high_fault = False
      self.transmitter_temp_high_fault = False
      self.alignment_routine_failed_fault = False
      self.unreasonable_radar_data = False
      self.microprocessor_temp_high_fault = False
      self.vertical_alignment_outof_range = False
      self.horizontal_alignment_outof_range = False
      self.factory_alignment_mode = False
      self.battery_low_fault = False
      self.battery_high_fault = False
      self.v1_p25_supply_outof_range = False
      self.active_flt_latched_byte3_bit4 = False
      self.thermistor_outof_range = False
      self.v3_p3_dac_supply_outof_range = False
      self.v3_p3_raw_supply_outof_range = False
      self.v5_supply_outof_range = False
      self.transmitter_id_fault = False
      self.active_flt_latched_byte2_bit6 = False
      self.active_flt_latched_byte2_bit5 = False
      self.active_flt_latched_byte2_bit4 = False
      self.active_flt_latched_byte2_bit3 = False
      self.active_flt_latched_byte2_bit2 = False
      self.pcan_missing_msg_fault = False
      self.pcan_bus_off = False
      self.active_flt_latched_byte1_bit7 = False
      self.active_flt_latched_byte1_bit6 = False
      self.instruction_set_check_fault = False
      self.stack_overflow_fault = False
      self.watchdog_fault = False
      self.pll_lock_fault = False
      self.active_flt_latched_byte1_bit1 = False
      self.ram_memory_test_fault = False
      self.usc_validation_fault = False
      self.active_flt_latched_byte0_bit6 = False
      self.active_flt_latched_byte0_bit5 = False
      self.active_flt_latched_byte0_bit4 = False
      self.active_flt_latched_byte0_bit3 = False
      self.keep_alive_checksum_fault = False
      self.program_calibration_flash_checksum = False
      self.application_flash_checksum_fault = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_64B().pack(_x.active_flt_latched_byte7_bit7, _x.active_flt_latched_byte7_bit6, _x.active_flt_latched_byte7_bit5, _x.active_flt_latched_byte7_bit4, _x.arm_to_dsp_chksum_fault, _x.dsp_to_arm_chksum_fault, _x.host_to_arm_chksum_fault, _x.arm_to_host_chksum_fault, _x.loop_bw_outof_range, _x.dsp_overrun_fault, _x.active_flt_latched_byte6_bit5, _x.tuning_sensitivity_fault, _x.saturated_tuning_freq_fault, _x.local_osc_power_fault, _x.transmitter_power_fault, _x.active_flt_latched_byte6_bit0, _x.active_flt_latched_byte5_bit7, _x.active_flt_latched_byte5_bit6, _x.xcvr_device_spi_fault, _x.freq_synthesizer_spi_fault, _x.analog_converter_devic_spi_fault, _x.side_lobe_blockage, _x.active_flt_latched_byte5_bit1, _x.mnr_blocked, _x.ecu_temp_high_fault, _x.transmitter_temp_high_fault, _x.alignment_routine_failed_fault, _x.unreasonable_radar_data, _x.microprocessor_temp_high_fault, _x.vertical_alignment_outof_range, _x.horizontal_alignment_outof_range, _x.factory_alignment_mode, _x.battery_low_fault, _x.battery_high_fault, _x.v1_p25_supply_outof_range, _x.active_flt_latched_byte3_bit4, _x.thermistor_outof_range, _x.v3_p3_dac_supply_outof_range, _x.v3_p3_raw_supply_outof_range, _x.v5_supply_outof_range, _x.transmitter_id_fault, _x.active_flt_latched_byte2_bit6, _x.active_flt_latched_byte2_bit5, _x.active_flt_latched_byte2_bit4, _x.active_flt_latched_byte2_bit3, _x.active_flt_latched_byte2_bit2, _x.pcan_missing_msg_fault, _x.pcan_bus_off, _x.active_flt_latched_byte1_bit7, _x.active_flt_latched_byte1_bit6, _x.instruction_set_check_fault, _x.stack_overflow_fault, _x.watchdog_fault, _x.pll_lock_fault, _x.active_flt_latched_byte1_bit1, _x.ram_memory_test_fault, _x.usc_validation_fault, _x.active_flt_latched_byte0_bit6, _x.active_flt_latched_byte0_bit5, _x.active_flt_latched_byte0_bit4, _x.active_flt_latched_byte0_bit3, _x.keep_alive_checksum_fault, _x.program_calibration_flash_checksum, _x.application_flash_checksum_fault))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.active_flt_latched_byte7_bit7, _x.active_flt_latched_byte7_bit6, _x.active_flt_latched_byte7_bit5, _x.active_flt_latched_byte7_bit4, _x.arm_to_dsp_chksum_fault, _x.dsp_to_arm_chksum_fault, _x.host_to_arm_chksum_fault, _x.arm_to_host_chksum_fault, _x.loop_bw_outof_range, _x.dsp_overrun_fault, _x.active_flt_latched_byte6_bit5, _x.tuning_sensitivity_fault, _x.saturated_tuning_freq_fault, _x.local_osc_power_fault, _x.transmitter_power_fault, _x.active_flt_latched_byte6_bit0, _x.active_flt_latched_byte5_bit7, _x.active_flt_latched_byte5_bit6, _x.xcvr_device_spi_fault, _x.freq_synthesizer_spi_fault, _x.analog_converter_devic_spi_fault, _x.side_lobe_blockage, _x.active_flt_latched_byte5_bit1, _x.mnr_blocked, _x.ecu_temp_high_fault, _x.transmitter_temp_high_fault, _x.alignment_routine_failed_fault, _x.unreasonable_radar_data, _x.microprocessor_temp_high_fault, _x.vertical_alignment_outof_range, _x.horizontal_alignment_outof_range, _x.factory_alignment_mode, _x.battery_low_fault, _x.battery_high_fault, _x.v1_p25_supply_outof_range, _x.active_flt_latched_byte3_bit4, _x.thermistor_outof_range, _x.v3_p3_dac_supply_outof_range, _x.v3_p3_raw_supply_outof_range, _x.v5_supply_outof_range, _x.transmitter_id_fault, _x.active_flt_latched_byte2_bit6, _x.active_flt_latched_byte2_bit5, _x.active_flt_latched_byte2_bit4, _x.active_flt_latched_byte2_bit3, _x.active_flt_latched_byte2_bit2, _x.pcan_missing_msg_fault, _x.pcan_bus_off, _x.active_flt_latched_byte1_bit7, _x.active_flt_latched_byte1_bit6, _x.instruction_set_check_fault, _x.stack_overflow_fault, _x.watchdog_fault, _x.pll_lock_fault, _x.active_flt_latched_byte1_bit1, _x.ram_memory_test_fault, _x.usc_validation_fault, _x.active_flt_latched_byte0_bit6, _x.active_flt_latched_byte0_bit5, _x.active_flt_latched_byte0_bit4, _x.active_flt_latched_byte0_bit3, _x.keep_alive_checksum_fault, _x.program_calibration_flash_checksum, _x.application_flash_checksum_fault,) = _get_struct_64B().unpack(str[start:end])
      self.active_flt_latched_byte7_bit7 = bool(self.active_flt_latched_byte7_bit7)
      self.active_flt_latched_byte7_bit6 = bool(self.active_flt_latched_byte7_bit6)
      self.active_flt_latched_byte7_bit5 = bool(self.active_flt_latched_byte7_bit5)
      self.active_flt_latched_byte7_bit4 = bool(self.active_flt_latched_byte7_bit4)
      self.arm_to_dsp_chksum_fault = bool(self.arm_to_dsp_chksum_fault)
      self.dsp_to_arm_chksum_fault = bool(self.dsp_to_arm_chksum_fault)
      self.host_to_arm_chksum_fault = bool(self.host_to_arm_chksum_fault)
      self.arm_to_host_chksum_fault = bool(self.arm_to_host_chksum_fault)
      self.loop_bw_outof_range = bool(self.loop_bw_outof_range)
      self.dsp_overrun_fault = bool(self.dsp_overrun_fault)
      self.active_flt_latched_byte6_bit5 = bool(self.active_flt_latched_byte6_bit5)
      self.tuning_sensitivity_fault = bool(self.tuning_sensitivity_fault)
      self.saturated_tuning_freq_fault = bool(self.saturated_tuning_freq_fault)
      self.local_osc_power_fault = bool(self.local_osc_power_fault)
      self.transmitter_power_fault = bool(self.transmitter_power_fault)
      self.active_flt_latched_byte6_bit0 = bool(self.active_flt_latched_byte6_bit0)
      self.active_flt_latched_byte5_bit7 = bool(self.active_flt_latched_byte5_bit7)
      self.active_flt_latched_byte5_bit6 = bool(self.active_flt_latched_byte5_bit6)
      self.xcvr_device_spi_fault = bool(self.xcvr_device_spi_fault)
      self.freq_synthesizer_spi_fault = bool(self.freq_synthesizer_spi_fault)
      self.analog_converter_devic_spi_fault = bool(self.analog_converter_devic_spi_fault)
      self.side_lobe_blockage = bool(self.side_lobe_blockage)
      self.active_flt_latched_byte5_bit1 = bool(self.active_flt_latched_byte5_bit1)
      self.mnr_blocked = bool(self.mnr_blocked)
      self.ecu_temp_high_fault = bool(self.ecu_temp_high_fault)
      self.transmitter_temp_high_fault = bool(self.transmitter_temp_high_fault)
      self.alignment_routine_failed_fault = bool(self.alignment_routine_failed_fault)
      self.unreasonable_radar_data = bool(self.unreasonable_radar_data)
      self.microprocessor_temp_high_fault = bool(self.microprocessor_temp_high_fault)
      self.vertical_alignment_outof_range = bool(self.vertical_alignment_outof_range)
      self.horizontal_alignment_outof_range = bool(self.horizontal_alignment_outof_range)
      self.factory_alignment_mode = bool(self.factory_alignment_mode)
      self.battery_low_fault = bool(self.battery_low_fault)
      self.battery_high_fault = bool(self.battery_high_fault)
      self.v1_p25_supply_outof_range = bool(self.v1_p25_supply_outof_range)
      self.active_flt_latched_byte3_bit4 = bool(self.active_flt_latched_byte3_bit4)
      self.thermistor_outof_range = bool(self.thermistor_outof_range)
      self.v3_p3_dac_supply_outof_range = bool(self.v3_p3_dac_supply_outof_range)
      self.v3_p3_raw_supply_outof_range = bool(self.v3_p3_raw_supply_outof_range)
      self.v5_supply_outof_range = bool(self.v5_supply_outof_range)
      self.transmitter_id_fault = bool(self.transmitter_id_fault)
      self.active_flt_latched_byte2_bit6 = bool(self.active_flt_latched_byte2_bit6)
      self.active_flt_latched_byte2_bit5 = bool(self.active_flt_latched_byte2_bit5)
      self.active_flt_latched_byte2_bit4 = bool(self.active_flt_latched_byte2_bit4)
      self.active_flt_latched_byte2_bit3 = bool(self.active_flt_latched_byte2_bit3)
      self.active_flt_latched_byte2_bit2 = bool(self.active_flt_latched_byte2_bit2)
      self.pcan_missing_msg_fault = bool(self.pcan_missing_msg_fault)
      self.pcan_bus_off = bool(self.pcan_bus_off)
      self.active_flt_latched_byte1_bit7 = bool(self.active_flt_latched_byte1_bit7)
      self.active_flt_latched_byte1_bit6 = bool(self.active_flt_latched_byte1_bit6)
      self.instruction_set_check_fault = bool(self.instruction_set_check_fault)
      self.stack_overflow_fault = bool(self.stack_overflow_fault)
      self.watchdog_fault = bool(self.watchdog_fault)
      self.pll_lock_fault = bool(self.pll_lock_fault)
      self.active_flt_latched_byte1_bit1 = bool(self.active_flt_latched_byte1_bit1)
      self.ram_memory_test_fault = bool(self.ram_memory_test_fault)
      self.usc_validation_fault = bool(self.usc_validation_fault)
      self.active_flt_latched_byte0_bit6 = bool(self.active_flt_latched_byte0_bit6)
      self.active_flt_latched_byte0_bit5 = bool(self.active_flt_latched_byte0_bit5)
      self.active_flt_latched_byte0_bit4 = bool(self.active_flt_latched_byte0_bit4)
      self.active_flt_latched_byte0_bit3 = bool(self.active_flt_latched_byte0_bit3)
      self.keep_alive_checksum_fault = bool(self.keep_alive_checksum_fault)
      self.program_calibration_flash_checksum = bool(self.program_calibration_flash_checksum)
      self.application_flash_checksum_fault = bool(self.application_flash_checksum_fault)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_64B().pack(_x.active_flt_latched_byte7_bit7, _x.active_flt_latched_byte7_bit6, _x.active_flt_latched_byte7_bit5, _x.active_flt_latched_byte7_bit4, _x.arm_to_dsp_chksum_fault, _x.dsp_to_arm_chksum_fault, _x.host_to_arm_chksum_fault, _x.arm_to_host_chksum_fault, _x.loop_bw_outof_range, _x.dsp_overrun_fault, _x.active_flt_latched_byte6_bit5, _x.tuning_sensitivity_fault, _x.saturated_tuning_freq_fault, _x.local_osc_power_fault, _x.transmitter_power_fault, _x.active_flt_latched_byte6_bit0, _x.active_flt_latched_byte5_bit7, _x.active_flt_latched_byte5_bit6, _x.xcvr_device_spi_fault, _x.freq_synthesizer_spi_fault, _x.analog_converter_devic_spi_fault, _x.side_lobe_blockage, _x.active_flt_latched_byte5_bit1, _x.mnr_blocked, _x.ecu_temp_high_fault, _x.transmitter_temp_high_fault, _x.alignment_routine_failed_fault, _x.unreasonable_radar_data, _x.microprocessor_temp_high_fault, _x.vertical_alignment_outof_range, _x.horizontal_alignment_outof_range, _x.factory_alignment_mode, _x.battery_low_fault, _x.battery_high_fault, _x.v1_p25_supply_outof_range, _x.active_flt_latched_byte3_bit4, _x.thermistor_outof_range, _x.v3_p3_dac_supply_outof_range, _x.v3_p3_raw_supply_outof_range, _x.v5_supply_outof_range, _x.transmitter_id_fault, _x.active_flt_latched_byte2_bit6, _x.active_flt_latched_byte2_bit5, _x.active_flt_latched_byte2_bit4, _x.active_flt_latched_byte2_bit3, _x.active_flt_latched_byte2_bit2, _x.pcan_missing_msg_fault, _x.pcan_bus_off, _x.active_flt_latched_byte1_bit7, _x.active_flt_latched_byte1_bit6, _x.instruction_set_check_fault, _x.stack_overflow_fault, _x.watchdog_fault, _x.pll_lock_fault, _x.active_flt_latched_byte1_bit1, _x.ram_memory_test_fault, _x.usc_validation_fault, _x.active_flt_latched_byte0_bit6, _x.active_flt_latched_byte0_bit5, _x.active_flt_latched_byte0_bit4, _x.active_flt_latched_byte0_bit3, _x.keep_alive_checksum_fault, _x.program_calibration_flash_checksum, _x.application_flash_checksum_fault))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.active_flt_latched_byte7_bit7, _x.active_flt_latched_byte7_bit6, _x.active_flt_latched_byte7_bit5, _x.active_flt_latched_byte7_bit4, _x.arm_to_dsp_chksum_fault, _x.dsp_to_arm_chksum_fault, _x.host_to_arm_chksum_fault, _x.arm_to_host_chksum_fault, _x.loop_bw_outof_range, _x.dsp_overrun_fault, _x.active_flt_latched_byte6_bit5, _x.tuning_sensitivity_fault, _x.saturated_tuning_freq_fault, _x.local_osc_power_fault, _x.transmitter_power_fault, _x.active_flt_latched_byte6_bit0, _x.active_flt_latched_byte5_bit7, _x.active_flt_latched_byte5_bit6, _x.xcvr_device_spi_fault, _x.freq_synthesizer_spi_fault, _x.analog_converter_devic_spi_fault, _x.side_lobe_blockage, _x.active_flt_latched_byte5_bit1, _x.mnr_blocked, _x.ecu_temp_high_fault, _x.transmitter_temp_high_fault, _x.alignment_routine_failed_fault, _x.unreasonable_radar_data, _x.microprocessor_temp_high_fault, _x.vertical_alignment_outof_range, _x.horizontal_alignment_outof_range, _x.factory_alignment_mode, _x.battery_low_fault, _x.battery_high_fault, _x.v1_p25_supply_outof_range, _x.active_flt_latched_byte3_bit4, _x.thermistor_outof_range, _x.v3_p3_dac_supply_outof_range, _x.v3_p3_raw_supply_outof_range, _x.v5_supply_outof_range, _x.transmitter_id_fault, _x.active_flt_latched_byte2_bit6, _x.active_flt_latched_byte2_bit5, _x.active_flt_latched_byte2_bit4, _x.active_flt_latched_byte2_bit3, _x.active_flt_latched_byte2_bit2, _x.pcan_missing_msg_fault, _x.pcan_bus_off, _x.active_flt_latched_byte1_bit7, _x.active_flt_latched_byte1_bit6, _x.instruction_set_check_fault, _x.stack_overflow_fault, _x.watchdog_fault, _x.pll_lock_fault, _x.active_flt_latched_byte1_bit1, _x.ram_memory_test_fault, _x.usc_validation_fault, _x.active_flt_latched_byte0_bit6, _x.active_flt_latched_byte0_bit5, _x.active_flt_latched_byte0_bit4, _x.active_flt_latched_byte0_bit3, _x.keep_alive_checksum_fault, _x.program_calibration_flash_checksum, _x.application_flash_checksum_fault,) = _get_struct_64B().unpack(str[start:end])
      self.active_flt_latched_byte7_bit7 = bool(self.active_flt_latched_byte7_bit7)
      self.active_flt_latched_byte7_bit6 = bool(self.active_flt_latched_byte7_bit6)
      self.active_flt_latched_byte7_bit5 = bool(self.active_flt_latched_byte7_bit5)
      self.active_flt_latched_byte7_bit4 = bool(self.active_flt_latched_byte7_bit4)
      self.arm_to_dsp_chksum_fault = bool(self.arm_to_dsp_chksum_fault)
      self.dsp_to_arm_chksum_fault = bool(self.dsp_to_arm_chksum_fault)
      self.host_to_arm_chksum_fault = bool(self.host_to_arm_chksum_fault)
      self.arm_to_host_chksum_fault = bool(self.arm_to_host_chksum_fault)
      self.loop_bw_outof_range = bool(self.loop_bw_outof_range)
      self.dsp_overrun_fault = bool(self.dsp_overrun_fault)
      self.active_flt_latched_byte6_bit5 = bool(self.active_flt_latched_byte6_bit5)
      self.tuning_sensitivity_fault = bool(self.tuning_sensitivity_fault)
      self.saturated_tuning_freq_fault = bool(self.saturated_tuning_freq_fault)
      self.local_osc_power_fault = bool(self.local_osc_power_fault)
      self.transmitter_power_fault = bool(self.transmitter_power_fault)
      self.active_flt_latched_byte6_bit0 = bool(self.active_flt_latched_byte6_bit0)
      self.active_flt_latched_byte5_bit7 = bool(self.active_flt_latched_byte5_bit7)
      self.active_flt_latched_byte5_bit6 = bool(self.active_flt_latched_byte5_bit6)
      self.xcvr_device_spi_fault = bool(self.xcvr_device_spi_fault)
      self.freq_synthesizer_spi_fault = bool(self.freq_synthesizer_spi_fault)
      self.analog_converter_devic_spi_fault = bool(self.analog_converter_devic_spi_fault)
      self.side_lobe_blockage = bool(self.side_lobe_blockage)
      self.active_flt_latched_byte5_bit1 = bool(self.active_flt_latched_byte5_bit1)
      self.mnr_blocked = bool(self.mnr_blocked)
      self.ecu_temp_high_fault = bool(self.ecu_temp_high_fault)
      self.transmitter_temp_high_fault = bool(self.transmitter_temp_high_fault)
      self.alignment_routine_failed_fault = bool(self.alignment_routine_failed_fault)
      self.unreasonable_radar_data = bool(self.unreasonable_radar_data)
      self.microprocessor_temp_high_fault = bool(self.microprocessor_temp_high_fault)
      self.vertical_alignment_outof_range = bool(self.vertical_alignment_outof_range)
      self.horizontal_alignment_outof_range = bool(self.horizontal_alignment_outof_range)
      self.factory_alignment_mode = bool(self.factory_alignment_mode)
      self.battery_low_fault = bool(self.battery_low_fault)
      self.battery_high_fault = bool(self.battery_high_fault)
      self.v1_p25_supply_outof_range = bool(self.v1_p25_supply_outof_range)
      self.active_flt_latched_byte3_bit4 = bool(self.active_flt_latched_byte3_bit4)
      self.thermistor_outof_range = bool(self.thermistor_outof_range)
      self.v3_p3_dac_supply_outof_range = bool(self.v3_p3_dac_supply_outof_range)
      self.v3_p3_raw_supply_outof_range = bool(self.v3_p3_raw_supply_outof_range)
      self.v5_supply_outof_range = bool(self.v5_supply_outof_range)
      self.transmitter_id_fault = bool(self.transmitter_id_fault)
      self.active_flt_latched_byte2_bit6 = bool(self.active_flt_latched_byte2_bit6)
      self.active_flt_latched_byte2_bit5 = bool(self.active_flt_latched_byte2_bit5)
      self.active_flt_latched_byte2_bit4 = bool(self.active_flt_latched_byte2_bit4)
      self.active_flt_latched_byte2_bit3 = bool(self.active_flt_latched_byte2_bit3)
      self.active_flt_latched_byte2_bit2 = bool(self.active_flt_latched_byte2_bit2)
      self.pcan_missing_msg_fault = bool(self.pcan_missing_msg_fault)
      self.pcan_bus_off = bool(self.pcan_bus_off)
      self.active_flt_latched_byte1_bit7 = bool(self.active_flt_latched_byte1_bit7)
      self.active_flt_latched_byte1_bit6 = bool(self.active_flt_latched_byte1_bit6)
      self.instruction_set_check_fault = bool(self.instruction_set_check_fault)
      self.stack_overflow_fault = bool(self.stack_overflow_fault)
      self.watchdog_fault = bool(self.watchdog_fault)
      self.pll_lock_fault = bool(self.pll_lock_fault)
      self.active_flt_latched_byte1_bit1 = bool(self.active_flt_latched_byte1_bit1)
      self.ram_memory_test_fault = bool(self.ram_memory_test_fault)
      self.usc_validation_fault = bool(self.usc_validation_fault)
      self.active_flt_latched_byte0_bit6 = bool(self.active_flt_latched_byte0_bit6)
      self.active_flt_latched_byte0_bit5 = bool(self.active_flt_latched_byte0_bit5)
      self.active_flt_latched_byte0_bit4 = bool(self.active_flt_latched_byte0_bit4)
      self.active_flt_latched_byte0_bit3 = bool(self.active_flt_latched_byte0_bit3)
      self.keep_alive_checksum_fault = bool(self.keep_alive_checksum_fault)
      self.program_calibration_flash_checksum = bool(self.program_calibration_flash_checksum)
      self.application_flash_checksum_fault = bool(self.application_flash_checksum_fault)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_64B = None
def _get_struct_64B():
    global _struct_64B
    if _struct_64B is None:
        _struct_64B = struct.Struct("<64B")
    return _struct_64B
