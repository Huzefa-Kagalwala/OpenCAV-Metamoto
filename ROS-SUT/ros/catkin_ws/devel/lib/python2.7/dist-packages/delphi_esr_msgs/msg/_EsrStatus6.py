# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from delphi_esr_msgs/EsrStatus6.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class EsrStatus6(genpy.Message):
  _md5sum = "d0f0f9e72f36d0edc6c699e8188282b7"
  _type = "delphi_esr_msgs/EsrStatus6"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

# ESR status6
string      canmsg
uint8       supply_1p_8v
uint8       supply_n_5v
uint8       wave_diff_a2d
uint8       sw_version_dsp_3rd_byte
bool        vertical_algin_updated
uint8       system_power_mode
bool        found_target
bool        recommend_unconverge
uint8       factory_algin_status1
uint8       factory_algin_status2
float32     factory_mis_alginment
uint8       serv_algin_updates_done
float32     vertical_mis_alginment

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','canmsg','supply_1p_8v','supply_n_5v','wave_diff_a2d','sw_version_dsp_3rd_byte','vertical_algin_updated','system_power_mode','found_target','recommend_unconverge','factory_algin_status1','factory_algin_status2','factory_mis_alginment','serv_algin_updates_done','vertical_mis_alginment']
  _slot_types = ['std_msgs/Header','string','uint8','uint8','uint8','uint8','bool','uint8','bool','bool','uint8','uint8','float32','uint8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,canmsg,supply_1p_8v,supply_n_5v,wave_diff_a2d,sw_version_dsp_3rd_byte,vertical_algin_updated,system_power_mode,found_target,recommend_unconverge,factory_algin_status1,factory_algin_status2,factory_mis_alginment,serv_algin_updates_done,vertical_mis_alginment

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EsrStatus6, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.canmsg is None:
        self.canmsg = ''
      if self.supply_1p_8v is None:
        self.supply_1p_8v = 0
      if self.supply_n_5v is None:
        self.supply_n_5v = 0
      if self.wave_diff_a2d is None:
        self.wave_diff_a2d = 0
      if self.sw_version_dsp_3rd_byte is None:
        self.sw_version_dsp_3rd_byte = 0
      if self.vertical_algin_updated is None:
        self.vertical_algin_updated = False
      if self.system_power_mode is None:
        self.system_power_mode = 0
      if self.found_target is None:
        self.found_target = False
      if self.recommend_unconverge is None:
        self.recommend_unconverge = False
      if self.factory_algin_status1 is None:
        self.factory_algin_status1 = 0
      if self.factory_algin_status2 is None:
        self.factory_algin_status2 = 0
      if self.factory_mis_alginment is None:
        self.factory_mis_alginment = 0.
      if self.serv_algin_updates_done is None:
        self.serv_algin_updates_done = 0
      if self.vertical_mis_alginment is None:
        self.vertical_mis_alginment = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.canmsg = ''
      self.supply_1p_8v = 0
      self.supply_n_5v = 0
      self.wave_diff_a2d = 0
      self.sw_version_dsp_3rd_byte = 0
      self.vertical_algin_updated = False
      self.system_power_mode = 0
      self.found_target = False
      self.recommend_unconverge = False
      self.factory_algin_status1 = 0
      self.factory_algin_status2 = 0
      self.factory_mis_alginment = 0.
      self.serv_algin_updates_done = 0
      self.vertical_mis_alginment = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.canmsg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10BfBf().pack(_x.supply_1p_8v, _x.supply_n_5v, _x.wave_diff_a2d, _x.sw_version_dsp_3rd_byte, _x.vertical_algin_updated, _x.system_power_mode, _x.found_target, _x.recommend_unconverge, _x.factory_algin_status1, _x.factory_algin_status2, _x.factory_mis_alginment, _x.serv_algin_updates_done, _x.vertical_mis_alginment))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.canmsg = str[start:end].decode('utf-8')
      else:
        self.canmsg = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.supply_1p_8v, _x.supply_n_5v, _x.wave_diff_a2d, _x.sw_version_dsp_3rd_byte, _x.vertical_algin_updated, _x.system_power_mode, _x.found_target, _x.recommend_unconverge, _x.factory_algin_status1, _x.factory_algin_status2, _x.factory_mis_alginment, _x.serv_algin_updates_done, _x.vertical_mis_alginment,) = _get_struct_10BfBf().unpack(str[start:end])
      self.vertical_algin_updated = bool(self.vertical_algin_updated)
      self.found_target = bool(self.found_target)
      self.recommend_unconverge = bool(self.recommend_unconverge)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.canmsg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10BfBf().pack(_x.supply_1p_8v, _x.supply_n_5v, _x.wave_diff_a2d, _x.sw_version_dsp_3rd_byte, _x.vertical_algin_updated, _x.system_power_mode, _x.found_target, _x.recommend_unconverge, _x.factory_algin_status1, _x.factory_algin_status2, _x.factory_mis_alginment, _x.serv_algin_updates_done, _x.vertical_mis_alginment))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.canmsg = str[start:end].decode('utf-8')
      else:
        self.canmsg = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.supply_1p_8v, _x.supply_n_5v, _x.wave_diff_a2d, _x.sw_version_dsp_3rd_byte, _x.vertical_algin_updated, _x.system_power_mode, _x.found_target, _x.recommend_unconverge, _x.factory_algin_status1, _x.factory_algin_status2, _x.factory_mis_alginment, _x.serv_algin_updates_done, _x.vertical_mis_alginment,) = _get_struct_10BfBf().unpack(str[start:end])
      self.vertical_algin_updated = bool(self.vertical_algin_updated)
      self.found_target = bool(self.found_target)
      self.recommend_unconverge = bool(self.recommend_unconverge)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_10BfBf = None
def _get_struct_10BfBf():
    global _struct_10BfBf
    if _struct_10BfBf is None:
        _struct_10BfBf = struct.Struct("<10BfBf")
    return _struct_10BfBf
