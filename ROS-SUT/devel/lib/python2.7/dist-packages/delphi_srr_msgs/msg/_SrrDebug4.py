# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from delphi_srr_msgs/SrrDebug4.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SrrDebug4(genpy.Message):
  _md5sum = "c0ece44351bdc580e837fa3403929592"
  _type = "delphi_srr_msgs/SrrDebug4"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Message file for srr_debug4

std_msgs/Header header

bool      timer_create_error
bool      thread_create_error
bool      arm_calibration_error
bool      spi_fee_error
bool      spi_comm_error
bool      socket_write_error
bool      dsp_cal_obsolete_62_error
bool      socket_read_error
bool      socket_init_error
bool      signal_wait_error
bool      signal_send_error
bool      signal_create_error
bool      shared_mem_write_error
bool      shared_mem_read_error
bool      shared_mem_config_error
bool      share_mem_init_error
bool      ram_test_error
bool      num_errors
bool      mmap_memory_error
bool      isr_attach_error
bool      ipc_drv_write_error
bool      ipc_drv_trigger_error
bool      ipc_drv_sync_error
bool      ipc_drv_read_error
bool      ipc_drv_init_error
bool      interrupt_enable_error
bool      hil_format_error
bool      flash_filesystem_error
bool      error_none
bool      dsp_load_read_error
bool      dsp_load_open_error
bool      dsp_load_address_error
bool      dsp_isp_write_error
bool      dsp_ipc_read_error
bool      dsp_ipc_init
bool      dsp_init_error
bool      dsp_drv_start_error
bool      dsp_drv_load_error
bool      dsp_drv_init_error
bool      dsp_drv_init2_error
bool      dsp_drv_init1_error
bool      dsp_calibration_error
bool      can_xmt_error
bool      can_rcv_error
bool      can_hardware_error
bool      always_true

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','timer_create_error','thread_create_error','arm_calibration_error','spi_fee_error','spi_comm_error','socket_write_error','dsp_cal_obsolete_62_error','socket_read_error','socket_init_error','signal_wait_error','signal_send_error','signal_create_error','shared_mem_write_error','shared_mem_read_error','shared_mem_config_error','share_mem_init_error','ram_test_error','num_errors','mmap_memory_error','isr_attach_error','ipc_drv_write_error','ipc_drv_trigger_error','ipc_drv_sync_error','ipc_drv_read_error','ipc_drv_init_error','interrupt_enable_error','hil_format_error','flash_filesystem_error','error_none','dsp_load_read_error','dsp_load_open_error','dsp_load_address_error','dsp_isp_write_error','dsp_ipc_read_error','dsp_ipc_init','dsp_init_error','dsp_drv_start_error','dsp_drv_load_error','dsp_drv_init_error','dsp_drv_init2_error','dsp_drv_init1_error','dsp_calibration_error','can_xmt_error','can_rcv_error','can_hardware_error','always_true']
  _slot_types = ['std_msgs/Header','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,timer_create_error,thread_create_error,arm_calibration_error,spi_fee_error,spi_comm_error,socket_write_error,dsp_cal_obsolete_62_error,socket_read_error,socket_init_error,signal_wait_error,signal_send_error,signal_create_error,shared_mem_write_error,shared_mem_read_error,shared_mem_config_error,share_mem_init_error,ram_test_error,num_errors,mmap_memory_error,isr_attach_error,ipc_drv_write_error,ipc_drv_trigger_error,ipc_drv_sync_error,ipc_drv_read_error,ipc_drv_init_error,interrupt_enable_error,hil_format_error,flash_filesystem_error,error_none,dsp_load_read_error,dsp_load_open_error,dsp_load_address_error,dsp_isp_write_error,dsp_ipc_read_error,dsp_ipc_init,dsp_init_error,dsp_drv_start_error,dsp_drv_load_error,dsp_drv_init_error,dsp_drv_init2_error,dsp_drv_init1_error,dsp_calibration_error,can_xmt_error,can_rcv_error,can_hardware_error,always_true

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SrrDebug4, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.timer_create_error is None:
        self.timer_create_error = False
      if self.thread_create_error is None:
        self.thread_create_error = False
      if self.arm_calibration_error is None:
        self.arm_calibration_error = False
      if self.spi_fee_error is None:
        self.spi_fee_error = False
      if self.spi_comm_error is None:
        self.spi_comm_error = False
      if self.socket_write_error is None:
        self.socket_write_error = False
      if self.dsp_cal_obsolete_62_error is None:
        self.dsp_cal_obsolete_62_error = False
      if self.socket_read_error is None:
        self.socket_read_error = False
      if self.socket_init_error is None:
        self.socket_init_error = False
      if self.signal_wait_error is None:
        self.signal_wait_error = False
      if self.signal_send_error is None:
        self.signal_send_error = False
      if self.signal_create_error is None:
        self.signal_create_error = False
      if self.shared_mem_write_error is None:
        self.shared_mem_write_error = False
      if self.shared_mem_read_error is None:
        self.shared_mem_read_error = False
      if self.shared_mem_config_error is None:
        self.shared_mem_config_error = False
      if self.share_mem_init_error is None:
        self.share_mem_init_error = False
      if self.ram_test_error is None:
        self.ram_test_error = False
      if self.num_errors is None:
        self.num_errors = False
      if self.mmap_memory_error is None:
        self.mmap_memory_error = False
      if self.isr_attach_error is None:
        self.isr_attach_error = False
      if self.ipc_drv_write_error is None:
        self.ipc_drv_write_error = False
      if self.ipc_drv_trigger_error is None:
        self.ipc_drv_trigger_error = False
      if self.ipc_drv_sync_error is None:
        self.ipc_drv_sync_error = False
      if self.ipc_drv_read_error is None:
        self.ipc_drv_read_error = False
      if self.ipc_drv_init_error is None:
        self.ipc_drv_init_error = False
      if self.interrupt_enable_error is None:
        self.interrupt_enable_error = False
      if self.hil_format_error is None:
        self.hil_format_error = False
      if self.flash_filesystem_error is None:
        self.flash_filesystem_error = False
      if self.error_none is None:
        self.error_none = False
      if self.dsp_load_read_error is None:
        self.dsp_load_read_error = False
      if self.dsp_load_open_error is None:
        self.dsp_load_open_error = False
      if self.dsp_load_address_error is None:
        self.dsp_load_address_error = False
      if self.dsp_isp_write_error is None:
        self.dsp_isp_write_error = False
      if self.dsp_ipc_read_error is None:
        self.dsp_ipc_read_error = False
      if self.dsp_ipc_init is None:
        self.dsp_ipc_init = False
      if self.dsp_init_error is None:
        self.dsp_init_error = False
      if self.dsp_drv_start_error is None:
        self.dsp_drv_start_error = False
      if self.dsp_drv_load_error is None:
        self.dsp_drv_load_error = False
      if self.dsp_drv_init_error is None:
        self.dsp_drv_init_error = False
      if self.dsp_drv_init2_error is None:
        self.dsp_drv_init2_error = False
      if self.dsp_drv_init1_error is None:
        self.dsp_drv_init1_error = False
      if self.dsp_calibration_error is None:
        self.dsp_calibration_error = False
      if self.can_xmt_error is None:
        self.can_xmt_error = False
      if self.can_rcv_error is None:
        self.can_rcv_error = False
      if self.can_hardware_error is None:
        self.can_hardware_error = False
      if self.always_true is None:
        self.always_true = False
    else:
      self.header = std_msgs.msg.Header()
      self.timer_create_error = False
      self.thread_create_error = False
      self.arm_calibration_error = False
      self.spi_fee_error = False
      self.spi_comm_error = False
      self.socket_write_error = False
      self.dsp_cal_obsolete_62_error = False
      self.socket_read_error = False
      self.socket_init_error = False
      self.signal_wait_error = False
      self.signal_send_error = False
      self.signal_create_error = False
      self.shared_mem_write_error = False
      self.shared_mem_read_error = False
      self.shared_mem_config_error = False
      self.share_mem_init_error = False
      self.ram_test_error = False
      self.num_errors = False
      self.mmap_memory_error = False
      self.isr_attach_error = False
      self.ipc_drv_write_error = False
      self.ipc_drv_trigger_error = False
      self.ipc_drv_sync_error = False
      self.ipc_drv_read_error = False
      self.ipc_drv_init_error = False
      self.interrupt_enable_error = False
      self.hil_format_error = False
      self.flash_filesystem_error = False
      self.error_none = False
      self.dsp_load_read_error = False
      self.dsp_load_open_error = False
      self.dsp_load_address_error = False
      self.dsp_isp_write_error = False
      self.dsp_ipc_read_error = False
      self.dsp_ipc_init = False
      self.dsp_init_error = False
      self.dsp_drv_start_error = False
      self.dsp_drv_load_error = False
      self.dsp_drv_init_error = False
      self.dsp_drv_init2_error = False
      self.dsp_drv_init1_error = False
      self.dsp_calibration_error = False
      self.can_xmt_error = False
      self.can_rcv_error = False
      self.can_hardware_error = False
      self.always_true = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_46B().pack(_x.timer_create_error, _x.thread_create_error, _x.arm_calibration_error, _x.spi_fee_error, _x.spi_comm_error, _x.socket_write_error, _x.dsp_cal_obsolete_62_error, _x.socket_read_error, _x.socket_init_error, _x.signal_wait_error, _x.signal_send_error, _x.signal_create_error, _x.shared_mem_write_error, _x.shared_mem_read_error, _x.shared_mem_config_error, _x.share_mem_init_error, _x.ram_test_error, _x.num_errors, _x.mmap_memory_error, _x.isr_attach_error, _x.ipc_drv_write_error, _x.ipc_drv_trigger_error, _x.ipc_drv_sync_error, _x.ipc_drv_read_error, _x.ipc_drv_init_error, _x.interrupt_enable_error, _x.hil_format_error, _x.flash_filesystem_error, _x.error_none, _x.dsp_load_read_error, _x.dsp_load_open_error, _x.dsp_load_address_error, _x.dsp_isp_write_error, _x.dsp_ipc_read_error, _x.dsp_ipc_init, _x.dsp_init_error, _x.dsp_drv_start_error, _x.dsp_drv_load_error, _x.dsp_drv_init_error, _x.dsp_drv_init2_error, _x.dsp_drv_init1_error, _x.dsp_calibration_error, _x.can_xmt_error, _x.can_rcv_error, _x.can_hardware_error, _x.always_true))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.timer_create_error, _x.thread_create_error, _x.arm_calibration_error, _x.spi_fee_error, _x.spi_comm_error, _x.socket_write_error, _x.dsp_cal_obsolete_62_error, _x.socket_read_error, _x.socket_init_error, _x.signal_wait_error, _x.signal_send_error, _x.signal_create_error, _x.shared_mem_write_error, _x.shared_mem_read_error, _x.shared_mem_config_error, _x.share_mem_init_error, _x.ram_test_error, _x.num_errors, _x.mmap_memory_error, _x.isr_attach_error, _x.ipc_drv_write_error, _x.ipc_drv_trigger_error, _x.ipc_drv_sync_error, _x.ipc_drv_read_error, _x.ipc_drv_init_error, _x.interrupt_enable_error, _x.hil_format_error, _x.flash_filesystem_error, _x.error_none, _x.dsp_load_read_error, _x.dsp_load_open_error, _x.dsp_load_address_error, _x.dsp_isp_write_error, _x.dsp_ipc_read_error, _x.dsp_ipc_init, _x.dsp_init_error, _x.dsp_drv_start_error, _x.dsp_drv_load_error, _x.dsp_drv_init_error, _x.dsp_drv_init2_error, _x.dsp_drv_init1_error, _x.dsp_calibration_error, _x.can_xmt_error, _x.can_rcv_error, _x.can_hardware_error, _x.always_true,) = _get_struct_46B().unpack(str[start:end])
      self.timer_create_error = bool(self.timer_create_error)
      self.thread_create_error = bool(self.thread_create_error)
      self.arm_calibration_error = bool(self.arm_calibration_error)
      self.spi_fee_error = bool(self.spi_fee_error)
      self.spi_comm_error = bool(self.spi_comm_error)
      self.socket_write_error = bool(self.socket_write_error)
      self.dsp_cal_obsolete_62_error = bool(self.dsp_cal_obsolete_62_error)
      self.socket_read_error = bool(self.socket_read_error)
      self.socket_init_error = bool(self.socket_init_error)
      self.signal_wait_error = bool(self.signal_wait_error)
      self.signal_send_error = bool(self.signal_send_error)
      self.signal_create_error = bool(self.signal_create_error)
      self.shared_mem_write_error = bool(self.shared_mem_write_error)
      self.shared_mem_read_error = bool(self.shared_mem_read_error)
      self.shared_mem_config_error = bool(self.shared_mem_config_error)
      self.share_mem_init_error = bool(self.share_mem_init_error)
      self.ram_test_error = bool(self.ram_test_error)
      self.num_errors = bool(self.num_errors)
      self.mmap_memory_error = bool(self.mmap_memory_error)
      self.isr_attach_error = bool(self.isr_attach_error)
      self.ipc_drv_write_error = bool(self.ipc_drv_write_error)
      self.ipc_drv_trigger_error = bool(self.ipc_drv_trigger_error)
      self.ipc_drv_sync_error = bool(self.ipc_drv_sync_error)
      self.ipc_drv_read_error = bool(self.ipc_drv_read_error)
      self.ipc_drv_init_error = bool(self.ipc_drv_init_error)
      self.interrupt_enable_error = bool(self.interrupt_enable_error)
      self.hil_format_error = bool(self.hil_format_error)
      self.flash_filesystem_error = bool(self.flash_filesystem_error)
      self.error_none = bool(self.error_none)
      self.dsp_load_read_error = bool(self.dsp_load_read_error)
      self.dsp_load_open_error = bool(self.dsp_load_open_error)
      self.dsp_load_address_error = bool(self.dsp_load_address_error)
      self.dsp_isp_write_error = bool(self.dsp_isp_write_error)
      self.dsp_ipc_read_error = bool(self.dsp_ipc_read_error)
      self.dsp_ipc_init = bool(self.dsp_ipc_init)
      self.dsp_init_error = bool(self.dsp_init_error)
      self.dsp_drv_start_error = bool(self.dsp_drv_start_error)
      self.dsp_drv_load_error = bool(self.dsp_drv_load_error)
      self.dsp_drv_init_error = bool(self.dsp_drv_init_error)
      self.dsp_drv_init2_error = bool(self.dsp_drv_init2_error)
      self.dsp_drv_init1_error = bool(self.dsp_drv_init1_error)
      self.dsp_calibration_error = bool(self.dsp_calibration_error)
      self.can_xmt_error = bool(self.can_xmt_error)
      self.can_rcv_error = bool(self.can_rcv_error)
      self.can_hardware_error = bool(self.can_hardware_error)
      self.always_true = bool(self.always_true)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_46B().pack(_x.timer_create_error, _x.thread_create_error, _x.arm_calibration_error, _x.spi_fee_error, _x.spi_comm_error, _x.socket_write_error, _x.dsp_cal_obsolete_62_error, _x.socket_read_error, _x.socket_init_error, _x.signal_wait_error, _x.signal_send_error, _x.signal_create_error, _x.shared_mem_write_error, _x.shared_mem_read_error, _x.shared_mem_config_error, _x.share_mem_init_error, _x.ram_test_error, _x.num_errors, _x.mmap_memory_error, _x.isr_attach_error, _x.ipc_drv_write_error, _x.ipc_drv_trigger_error, _x.ipc_drv_sync_error, _x.ipc_drv_read_error, _x.ipc_drv_init_error, _x.interrupt_enable_error, _x.hil_format_error, _x.flash_filesystem_error, _x.error_none, _x.dsp_load_read_error, _x.dsp_load_open_error, _x.dsp_load_address_error, _x.dsp_isp_write_error, _x.dsp_ipc_read_error, _x.dsp_ipc_init, _x.dsp_init_error, _x.dsp_drv_start_error, _x.dsp_drv_load_error, _x.dsp_drv_init_error, _x.dsp_drv_init2_error, _x.dsp_drv_init1_error, _x.dsp_calibration_error, _x.can_xmt_error, _x.can_rcv_error, _x.can_hardware_error, _x.always_true))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.timer_create_error, _x.thread_create_error, _x.arm_calibration_error, _x.spi_fee_error, _x.spi_comm_error, _x.socket_write_error, _x.dsp_cal_obsolete_62_error, _x.socket_read_error, _x.socket_init_error, _x.signal_wait_error, _x.signal_send_error, _x.signal_create_error, _x.shared_mem_write_error, _x.shared_mem_read_error, _x.shared_mem_config_error, _x.share_mem_init_error, _x.ram_test_error, _x.num_errors, _x.mmap_memory_error, _x.isr_attach_error, _x.ipc_drv_write_error, _x.ipc_drv_trigger_error, _x.ipc_drv_sync_error, _x.ipc_drv_read_error, _x.ipc_drv_init_error, _x.interrupt_enable_error, _x.hil_format_error, _x.flash_filesystem_error, _x.error_none, _x.dsp_load_read_error, _x.dsp_load_open_error, _x.dsp_load_address_error, _x.dsp_isp_write_error, _x.dsp_ipc_read_error, _x.dsp_ipc_init, _x.dsp_init_error, _x.dsp_drv_start_error, _x.dsp_drv_load_error, _x.dsp_drv_init_error, _x.dsp_drv_init2_error, _x.dsp_drv_init1_error, _x.dsp_calibration_error, _x.can_xmt_error, _x.can_rcv_error, _x.can_hardware_error, _x.always_true,) = _get_struct_46B().unpack(str[start:end])
      self.timer_create_error = bool(self.timer_create_error)
      self.thread_create_error = bool(self.thread_create_error)
      self.arm_calibration_error = bool(self.arm_calibration_error)
      self.spi_fee_error = bool(self.spi_fee_error)
      self.spi_comm_error = bool(self.spi_comm_error)
      self.socket_write_error = bool(self.socket_write_error)
      self.dsp_cal_obsolete_62_error = bool(self.dsp_cal_obsolete_62_error)
      self.socket_read_error = bool(self.socket_read_error)
      self.socket_init_error = bool(self.socket_init_error)
      self.signal_wait_error = bool(self.signal_wait_error)
      self.signal_send_error = bool(self.signal_send_error)
      self.signal_create_error = bool(self.signal_create_error)
      self.shared_mem_write_error = bool(self.shared_mem_write_error)
      self.shared_mem_read_error = bool(self.shared_mem_read_error)
      self.shared_mem_config_error = bool(self.shared_mem_config_error)
      self.share_mem_init_error = bool(self.share_mem_init_error)
      self.ram_test_error = bool(self.ram_test_error)
      self.num_errors = bool(self.num_errors)
      self.mmap_memory_error = bool(self.mmap_memory_error)
      self.isr_attach_error = bool(self.isr_attach_error)
      self.ipc_drv_write_error = bool(self.ipc_drv_write_error)
      self.ipc_drv_trigger_error = bool(self.ipc_drv_trigger_error)
      self.ipc_drv_sync_error = bool(self.ipc_drv_sync_error)
      self.ipc_drv_read_error = bool(self.ipc_drv_read_error)
      self.ipc_drv_init_error = bool(self.ipc_drv_init_error)
      self.interrupt_enable_error = bool(self.interrupt_enable_error)
      self.hil_format_error = bool(self.hil_format_error)
      self.flash_filesystem_error = bool(self.flash_filesystem_error)
      self.error_none = bool(self.error_none)
      self.dsp_load_read_error = bool(self.dsp_load_read_error)
      self.dsp_load_open_error = bool(self.dsp_load_open_error)
      self.dsp_load_address_error = bool(self.dsp_load_address_error)
      self.dsp_isp_write_error = bool(self.dsp_isp_write_error)
      self.dsp_ipc_read_error = bool(self.dsp_ipc_read_error)
      self.dsp_ipc_init = bool(self.dsp_ipc_init)
      self.dsp_init_error = bool(self.dsp_init_error)
      self.dsp_drv_start_error = bool(self.dsp_drv_start_error)
      self.dsp_drv_load_error = bool(self.dsp_drv_load_error)
      self.dsp_drv_init_error = bool(self.dsp_drv_init_error)
      self.dsp_drv_init2_error = bool(self.dsp_drv_init2_error)
      self.dsp_drv_init1_error = bool(self.dsp_drv_init1_error)
      self.dsp_calibration_error = bool(self.dsp_calibration_error)
      self.can_xmt_error = bool(self.can_xmt_error)
      self.can_rcv_error = bool(self.can_rcv_error)
      self.can_hardware_error = bool(self.can_hardware_error)
      self.always_true = bool(self.always_true)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_46B = None
def _get_struct_46B():
    global _struct_46B
    if _struct_46B is None:
        _struct_46B = struct.Struct("<46B")
    return _struct_46B
