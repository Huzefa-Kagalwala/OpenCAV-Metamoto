// Generated by gencpp from file delphi_srr_msgs/SrrStatus2.msg
// DO NOT EDIT!


#ifndef DELPHI_SRR_MSGS_MESSAGE_SRRSTATUS2_H
#define DELPHI_SRR_MSGS_MESSAGE_SRRSTATUS2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_srr_msgs
{
template <class ContainerAllocator>
struct SrrStatus2_
{
  typedef SrrStatus2_<ContainerAllocator> Type;

  SrrStatus2_()
    : header()
    , can_tx_alignment_status(0)
    , can_tx_comm_error(false)
    , can_tx_steering_angle_sign(false)
    , can_tx_yaw_rate_bias(0.0)
    , can_tx_veh_spd_comp_factor(0.0)
    , can_tx_sw_version_dsp(0)
    , can_tx_temperature(0)
    , can_tx_range_perf_error(false)
    , can_tx_overheat_error(false)
    , can_tx_internal_error(false)
    , can_tx_xcvr_operational(false)
    , can_tx_steering_angle(0)
    , can_tx_rolling_count_2(0)  {
    }
  SrrStatus2_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , can_tx_alignment_status(0)
    , can_tx_comm_error(false)
    , can_tx_steering_angle_sign(false)
    , can_tx_yaw_rate_bias(0.0)
    , can_tx_veh_spd_comp_factor(0.0)
    , can_tx_sw_version_dsp(0)
    , can_tx_temperature(0)
    , can_tx_range_perf_error(false)
    , can_tx_overheat_error(false)
    , can_tx_internal_error(false)
    , can_tx_xcvr_operational(false)
    , can_tx_steering_angle(0)
    , can_tx_rolling_count_2(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _can_tx_alignment_status_type;
  _can_tx_alignment_status_type can_tx_alignment_status;

   typedef uint8_t _can_tx_comm_error_type;
  _can_tx_comm_error_type can_tx_comm_error;

   typedef uint8_t _can_tx_steering_angle_sign_type;
  _can_tx_steering_angle_sign_type can_tx_steering_angle_sign;

   typedef float _can_tx_yaw_rate_bias_type;
  _can_tx_yaw_rate_bias_type can_tx_yaw_rate_bias;

   typedef float _can_tx_veh_spd_comp_factor_type;
  _can_tx_veh_spd_comp_factor_type can_tx_veh_spd_comp_factor;

   typedef uint16_t _can_tx_sw_version_dsp_type;
  _can_tx_sw_version_dsp_type can_tx_sw_version_dsp;

   typedef int16_t _can_tx_temperature_type;
  _can_tx_temperature_type can_tx_temperature;

   typedef uint8_t _can_tx_range_perf_error_type;
  _can_tx_range_perf_error_type can_tx_range_perf_error;

   typedef uint8_t _can_tx_overheat_error_type;
  _can_tx_overheat_error_type can_tx_overheat_error;

   typedef uint8_t _can_tx_internal_error_type;
  _can_tx_internal_error_type can_tx_internal_error;

   typedef uint8_t _can_tx_xcvr_operational_type;
  _can_tx_xcvr_operational_type can_tx_xcvr_operational;

   typedef uint16_t _can_tx_steering_angle_type;
  _can_tx_steering_angle_type can_tx_steering_angle;

   typedef uint8_t _can_tx_rolling_count_2_type;
  _can_tx_rolling_count_2_type can_tx_rolling_count_2;



  enum {
    CAN_TX_ALIGNMENT_STATUS_UNKNOWN = 0u,
    CAN_TX_ALIGNMENT_STATUS_CONVERGED = 1u,
    CAN_TX_ALIGNMENT_STATUS_FAILED = 2u,
    CAN_TX_ALIGNMENT_STATUS_RESERVED = 3u,
  };


  typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> const> ConstPtr;

}; // struct SrrStatus2_

typedef ::delphi_srr_msgs::SrrStatus2_<std::allocator<void> > SrrStatus2;

typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus2 > SrrStatus2Ptr;
typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus2 const> SrrStatus2ConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace delphi_srr_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'delphi_srr_msgs': ['/metamoto/catkin_ws/src/astuff_sensor_msgs/delphi_srr_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b05d1c3cfa8185e9616806113ff9b8c";
  }

  static const char* value(const ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b05d1c3cfa8185eULL;
  static const uint64_t static_value2 = 0x9616806113ff9b8cULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_srr_msgs/SrrStatus2";
  }

  static const char* value(const ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message file for srr_status2\n\
\n\
std_msgs/Header header\n\
\n\
uint8     can_tx_alignment_status\n\
uint8     CAN_TX_ALIGNMENT_STATUS_UNKNOWN=0\n\
uint8     CAN_TX_ALIGNMENT_STATUS_CONVERGED=1\n\
uint8     CAN_TX_ALIGNMENT_STATUS_FAILED=2\n\
uint8     CAN_TX_ALIGNMENT_STATUS_RESERVED=3\n\
\n\
bool      can_tx_comm_error\n\
bool      can_tx_steering_angle_sign\n\
float32   can_tx_yaw_rate_bias\n\
float32   can_tx_veh_spd_comp_factor\n\
uint16    can_tx_sw_version_dsp\n\
int16     can_tx_temperature                       # degc\n\
bool      can_tx_range_perf_error\n\
bool      can_tx_overheat_error\n\
bool      can_tx_internal_error\n\
bool      can_tx_xcvr_operational\n\
uint16    can_tx_steering_angle                    # deg\n\
uint8     can_tx_rolling_count_2\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.can_tx_alignment_status);
      stream.next(m.can_tx_comm_error);
      stream.next(m.can_tx_steering_angle_sign);
      stream.next(m.can_tx_yaw_rate_bias);
      stream.next(m.can_tx_veh_spd_comp_factor);
      stream.next(m.can_tx_sw_version_dsp);
      stream.next(m.can_tx_temperature);
      stream.next(m.can_tx_range_perf_error);
      stream.next(m.can_tx_overheat_error);
      stream.next(m.can_tx_internal_error);
      stream.next(m.can_tx_xcvr_operational);
      stream.next(m.can_tx_steering_angle);
      stream.next(m.can_tx_rolling_count_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SrrStatus2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "can_tx_alignment_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_tx_alignment_status);
    s << indent << "can_tx_comm_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_tx_comm_error);
    s << indent << "can_tx_steering_angle_sign: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_tx_steering_angle_sign);
    s << indent << "can_tx_yaw_rate_bias: ";
    Printer<float>::stream(s, indent + "  ", v.can_tx_yaw_rate_bias);
    s << indent << "can_tx_veh_spd_comp_factor: ";
    Printer<float>::stream(s, indent + "  ", v.can_tx_veh_spd_comp_factor);
    s << indent << "can_tx_sw_version_dsp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.can_tx_sw_version_dsp);
    s << indent << "can_tx_temperature: ";
    Printer<int16_t>::stream(s, indent + "  ", v.can_tx_temperature);
    s << indent << "can_tx_range_perf_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_tx_range_perf_error);
    s << indent << "can_tx_overheat_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_tx_overheat_error);
    s << indent << "can_tx_internal_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_tx_internal_error);
    s << indent << "can_tx_xcvr_operational: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_tx_xcvr_operational);
    s << indent << "can_tx_steering_angle: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.can_tx_steering_angle);
    s << indent << "can_tx_rolling_count_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_tx_rolling_count_2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_SRR_MSGS_MESSAGE_SRRSTATUS2_H
