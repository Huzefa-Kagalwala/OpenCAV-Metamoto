// Generated by gencpp from file delphi_srr_msgs/SrrTrack.msg
// DO NOT EDIT!


#ifndef DELPHI_SRR_MSGS_MESSAGE_SRRTRACK_H
#define DELPHI_SRR_MSGS_MESSAGE_SRRTRACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_srr_msgs
{
template <class ContainerAllocator>
struct SrrTrack_
{
  typedef SrrTrack_<ContainerAllocator> Type;

  SrrTrack_()
    : header()
    , can_tx_detect_valid_level(0)
    , can_tx_detect_status(false)
    , can_tx_detect_range_rate(0.0)
    , can_tx_detect_range(0.0)
    , can_tx_detect_angle(0.0)
    , can_tx_detect_amplitude(0.0)  {
    }
  SrrTrack_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , can_tx_detect_valid_level(0)
    , can_tx_detect_status(false)
    , can_tx_detect_range_rate(0.0)
    , can_tx_detect_range(0.0)
    , can_tx_detect_angle(0.0)
    , can_tx_detect_amplitude(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _can_tx_detect_valid_level_type;
  _can_tx_detect_valid_level_type can_tx_detect_valid_level;

   typedef uint8_t _can_tx_detect_status_type;
  _can_tx_detect_status_type can_tx_detect_status;

   typedef float _can_tx_detect_range_rate_type;
  _can_tx_detect_range_rate_type can_tx_detect_range_rate;

   typedef float _can_tx_detect_range_type;
  _can_tx_detect_range_type can_tx_detect_range;

   typedef float _can_tx_detect_angle_type;
  _can_tx_detect_angle_type can_tx_detect_angle;

   typedef float _can_tx_detect_amplitude_type;
  _can_tx_detect_amplitude_type can_tx_detect_amplitude;



  enum {
    CAN_TX_DETECT_VALID_LEVEL_SUSPECT_DETECTION = 0u,
    CAN_TX_DETECT_VALID_LEVEL_LEVEL_1 = 1u,
    CAN_TX_DETECT_VALID_LEVEL_LEVEL_2 = 2u,
    CAN_TX_DETECT_VALID_LEVEL_LEVEL_3 = 3u,
    CAN_TX_DETECT_VALID_LEVEL_LEVEL_4 = 4u,
    CAN_TX_DETECT_VALID_LEVEL_LEVEL_5 = 5u,
    CAN_TX_DETECT_VALID_LEVEL_LEVEL_6 = 6u,
    CAN_TX_DETECT_VALID_LEVEL_LEVEL_7 = 7u,
  };

  static const uint8_t CAN_TX_DETECT_STATUS_NO_DATA;
  static const uint8_t CAN_TX_DETECT_STATUS_VALID_DATA_PRESENT;

  typedef boost::shared_ptr< ::delphi_srr_msgs::SrrTrack_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_srr_msgs::SrrTrack_<ContainerAllocator> const> ConstPtr;

}; // struct SrrTrack_

typedef ::delphi_srr_msgs::SrrTrack_<std::allocator<void> > SrrTrack;

typedef boost::shared_ptr< ::delphi_srr_msgs::SrrTrack > SrrTrackPtr;
typedef boost::shared_ptr< ::delphi_srr_msgs::SrrTrack const> SrrTrackConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   
   template<typename ContainerAllocator> const uint8_t
      SrrTrack_<ContainerAllocator>::CAN_TX_DETECT_STATUS_NO_DATA =
        
           0
        
        ;
   

   
   template<typename ContainerAllocator> const uint8_t
      SrrTrack_<ContainerAllocator>::CAN_TX_DETECT_STATUS_VALID_DATA_PRESENT =
        
           1
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_srr_msgs::SrrTrack_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_srr_msgs::SrrTrack_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace delphi_srr_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'delphi_srr_msgs': ['/metamoto/catkin_ws/src/astuff_sensor_msgs/delphi_srr_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::delphi_srr_msgs::SrrTrack_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_srr_msgs::SrrTrack_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_srr_msgs::SrrTrack_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_srr_msgs::SrrTrack_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_srr_msgs::SrrTrack_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_srr_msgs::SrrTrack_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_srr_msgs::SrrTrack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a689930ba3ce2066d655a7425f6fdbde";
  }

  static const char* value(const ::delphi_srr_msgs::SrrTrack_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa689930ba3ce2066ULL;
  static const uint64_t static_value2 = 0xd655a7425f6fdbdeULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_srr_msgs::SrrTrack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_srr_msgs/SrrTrack";
  }

  static const char* value(const ::delphi_srr_msgs::SrrTrack_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_srr_msgs::SrrTrack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message file for srr_track\n\
\n\
std_msgs/Header header\n\
\n\
uint8     can_tx_detect_valid_level\n\
uint8     CAN_TX_DETECT_VALID_LEVEL_SUSPECT_DETECTION=0\n\
uint8     CAN_TX_DETECT_VALID_LEVEL_LEVEL_1=1\n\
uint8     CAN_TX_DETECT_VALID_LEVEL_LEVEL_2=2\n\
uint8     CAN_TX_DETECT_VALID_LEVEL_LEVEL_3=3\n\
uint8     CAN_TX_DETECT_VALID_LEVEL_LEVEL_4=4\n\
uint8     CAN_TX_DETECT_VALID_LEVEL_LEVEL_5=5\n\
uint8     CAN_TX_DETECT_VALID_LEVEL_LEVEL_6=6\n\
uint8     CAN_TX_DETECT_VALID_LEVEL_LEVEL_7=7\n\
\n\
bool      can_tx_detect_status\n\
bool      CAN_TX_DETECT_STATUS_NO_DATA=0\n\
bool      CAN_TX_DETECT_STATUS_VALID_DATA_PRESENT=1\n\
\n\
float32   can_tx_detect_range_rate                 # m/s\n\
float32   can_tx_detect_range                      # m\n\
float32   can_tx_detect_angle                      # deg\n\
float32   can_tx_detect_amplitude                  # dbsm\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::delphi_srr_msgs::SrrTrack_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_srr_msgs::SrrTrack_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.can_tx_detect_valid_level);
      stream.next(m.can_tx_detect_status);
      stream.next(m.can_tx_detect_range_rate);
      stream.next(m.can_tx_detect_range);
      stream.next(m.can_tx_detect_angle);
      stream.next(m.can_tx_detect_amplitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SrrTrack_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_srr_msgs::SrrTrack_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_srr_msgs::SrrTrack_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "can_tx_detect_valid_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_tx_detect_valid_level);
    s << indent << "can_tx_detect_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_tx_detect_status);
    s << indent << "can_tx_detect_range_rate: ";
    Printer<float>::stream(s, indent + "  ", v.can_tx_detect_range_rate);
    s << indent << "can_tx_detect_range: ";
    Printer<float>::stream(s, indent + "  ", v.can_tx_detect_range);
    s << indent << "can_tx_detect_angle: ";
    Printer<float>::stream(s, indent + "  ", v.can_tx_detect_angle);
    s << indent << "can_tx_detect_amplitude: ";
    Printer<float>::stream(s, indent + "  ", v.can_tx_detect_amplitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_SRR_MSGS_MESSAGE_SRRTRACK_H
